{"ast":null,"code":"import { CompressedTextureLoader } from \"three\";\nclass KTXLoader extends CompressedTextureLoader {\n  constructor(manager) {\n    super(manager);\n  }\n  parse(buffer, loadMipmaps) {\n    const ktx = new KhronosTextureContainer(buffer, 1);\n    return {\n      mipmaps: ktx.mipmaps(loadMipmaps),\n      width: ktx.pixelWidth,\n      height: ktx.pixelHeight,\n      format: ktx.glInternalFormat,\n      isCubemap: ktx.numberOfFaces === 6,\n      mipmapCount: ktx.numberOfMipmapLevels\n    };\n  }\n}\nconst HEADER_LEN = 12 + 13 * 4;\nconst COMPRESSED_2D = 0;\nclass KhronosTextureContainer {\n  /**\n   * @param {ArrayBuffer} arrayBuffer- contents of the KTX container file\n   * @param {number} facesExpected- should be either 1 or 6, based whether a cube texture or or\n   * @param {boolean} threeDExpected- provision for indicating that data should be a 3D texture, not implemented\n   * @param {boolean} textureArrayExpected- provision for indicating that data should be a texture array, not implemented\n   */\n  constructor(arrayBuffer, facesExpected) {\n    this.arrayBuffer = arrayBuffer;\n    const identifier = new Uint8Array(this.arrayBuffer, 0, 12);\n    if (identifier[0] !== 171 || identifier[1] !== 75 || identifier[2] !== 84 || identifier[3] !== 88 || identifier[4] !== 32 || identifier[5] !== 49 || identifier[6] !== 49 || identifier[7] !== 187 || identifier[8] !== 13 || identifier[9] !== 10 || identifier[10] !== 26 || identifier[11] !== 10) {\n      console.error(\"texture missing KTX identifier\");\n      return;\n    }\n    const dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    const headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize);\n    const endianness = headerDataView.getUint32(0, true);\n    const littleEndian = endianness === 67305985;\n    this.glType = headerDataView.getUint32(1 * dataSize, littleEndian);\n    this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian);\n    this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian);\n    this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian);\n    this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian);\n    this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian);\n    this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian);\n    this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian);\n    this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian);\n    this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian);\n    this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian);\n    this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian);\n    if (this.glType !== 0) {\n      console.warn(\"only compressed formats currently supported\");\n      return;\n    } else {\n      this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n    }\n    if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n      console.warn(\"only 2D textures currently supported\");\n      return;\n    }\n    if (this.numberOfArrayElements !== 0) {\n      console.warn(\"texture arrays not currently supported\");\n      return;\n    }\n    if (this.numberOfFaces !== facesExpected) {\n      console.warn(\"number of faces expected\" + facesExpected + \", but found \" + this.numberOfFaces);\n      return;\n    }\n    this.loadType = COMPRESSED_2D;\n  }\n  mipmaps(loadMipmaps) {\n    const mipmaps = [];\n    let dataOffset = HEADER_LEN + this.bytesOfKeyValueData;\n    let width = this.pixelWidth;\n    let height = this.pixelHeight;\n    const mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n    for (let level = 0; level < mipmapCount; level++) {\n      const imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0];\n      dataOffset += 4;\n      for (let face = 0; face < this.numberOfFaces; face++) {\n        const byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize);\n        mipmaps.push({\n          data: byteArray,\n          width,\n          height\n        });\n        dataOffset += imageSize;\n        dataOffset += 3 - (imageSize + 3) % 4;\n      }\n      width = Math.max(1, width * 0.5);\n      height = Math.max(1, height * 0.5);\n    }\n    return mipmaps;\n  }\n}\nexport { KTXLoader };","map":{"version":3,"sources":["../../src/loaders/KTXLoader.js"],"names":[],"mappings":"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","sourcesContent":["import { CompressedTextureLoader } from 'three'\n\n/**\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n *\n * ported from https://github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.khronosTextureContainer.ts\n */\n\nclass KTXLoader extends CompressedTextureLoader {\n  constructor(manager) {\n    super(manager)\n  }\n\n  parse(buffer, loadMipmaps) {\n    const ktx = new KhronosTextureContainer(buffer, 1)\n\n    return {\n      mipmaps: ktx.mipmaps(loadMipmaps),\n      width: ktx.pixelWidth,\n      height: ktx.pixelHeight,\n      format: ktx.glInternalFormat,\n      isCubemap: ktx.numberOfFaces === 6,\n      mipmapCount: ktx.numberOfMipmapLevels,\n    }\n  }\n}\n\nconst HEADER_LEN = 12 + 13 * 4 // identifier + header elements (not including key value meta-data pairs)\n// load types\nconst COMPRESSED_2D = 0 // uses a gl.compressedTexImage2D()\n//const COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\n//const TEX_2D = 2; // uses a gl.texImage2D()\n//const TEX_3D = 3; // uses a gl.texImage3D()\n\nclass KhronosTextureContainer {\n  /**\n   * @param {ArrayBuffer} arrayBuffer- contents of the KTX container file\n   * @param {number} facesExpected- should be either 1 or 6, based whether a cube texture or or\n   * @param {boolean} threeDExpected- provision for indicating that data should be a 3D texture, not implemented\n   * @param {boolean} textureArrayExpected- provision for indicating that data should be a texture array, not implemented\n   */\n  constructor(arrayBuffer, facesExpected /*, threeDExpected, textureArrayExpected */) {\n    this.arrayBuffer = arrayBuffer\n\n    // Test that it is a ktx formatted file, based on the first 12 bytes, character representation is:\n    // '´', 'K', 'T', 'X', ' ', '1', '1', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n    // 0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\n    const identifier = new Uint8Array(this.arrayBuffer, 0, 12)\n    if (\n      identifier[0] !== 0xab ||\n      identifier[1] !== 0x4b ||\n      identifier[2] !== 0x54 ||\n      identifier[3] !== 0x58 ||\n      identifier[4] !== 0x20 ||\n      identifier[5] !== 0x31 ||\n      identifier[6] !== 0x31 ||\n      identifier[7] !== 0xbb ||\n      identifier[8] !== 0x0d ||\n      identifier[9] !== 0x0a ||\n      identifier[10] !== 0x1a ||\n      identifier[11] !== 0x0a\n    ) {\n      console.error('texture missing KTX identifier')\n      return\n    }\n\n    // load the reset of the header in native 32 bit uint\n    const dataSize = Uint32Array.BYTES_PER_ELEMENT\n    const headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize)\n    const endianness = headerDataView.getUint32(0, true)\n    const littleEndian = endianness === 0x04030201\n\n    this.glType = headerDataView.getUint32(1 * dataSize, littleEndian) // must be 0 for compressed textures\n    this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian) // must be 1 for compressed textures\n    this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian) // must be 0 for compressed textures\n    this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian) // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n    this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian) // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n    this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian) // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n    this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian) // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n    this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian) // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n    this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian) // used for texture arrays\n    this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian) // used for cubemap textures, should either be 1 or 6\n    this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian) // number of levels; disregard possibility of 0 for compressed textures\n    this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian) // the amount of space after the header for meta-data\n\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n    if (this.glType !== 0) {\n      console.warn('only compressed formats currently supported')\n      return\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels)\n    }\n\n    if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n      console.warn('only 2D textures currently supported')\n      return\n    }\n\n    if (this.numberOfArrayElements !== 0) {\n      console.warn('texture arrays not currently supported')\n      return\n    }\n\n    if (this.numberOfFaces !== facesExpected) {\n      console.warn('number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces)\n      return\n    }\n\n    // we now have a completely validated file, so could use existence of loadType as success\n    // would need to make this more elaborate & adjust checks above to support more than one load type\n    this.loadType = COMPRESSED_2D\n  }\n\n  mipmaps(loadMipmaps) {\n    const mipmaps = []\n\n    // initialize width & height for level 1\n    let dataOffset = HEADER_LEN + this.bytesOfKeyValueData\n    let width = this.pixelWidth\n    let height = this.pixelHeight\n    const mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1\n\n    for (let level = 0; level < mipmapCount; level++) {\n      const imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0] // size per face, since not supporting array cubemaps\n      dataOffset += 4 // size of the image + 4 for the imageSize field\n\n      for (let face = 0; face < this.numberOfFaces; face++) {\n        const byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize)\n\n        mipmaps.push({ data: byteArray, width: width, height: height })\n\n        dataOffset += imageSize\n        dataOffset += 3 - ((imageSize + 3) % 4) // add padding for odd sized image\n      }\n\n      width = Math.max(1.0, width * 0.5)\n      height = Math.max(1.0, height * 0.5)\n    }\n\n    return mipmaps\n  }\n}\n\nexport { KTXLoader }\n"]},"metadata":{},"sourceType":"module"}