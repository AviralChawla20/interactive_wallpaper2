{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nconst _VRButton = class {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement(\"button\");\n    function showEnterVR() {\n      let currentSession = null;\n      async function onSessionStarted(session) {\n        session.addEventListener(\"end\", onSessionEnded);\n        await renderer.xr.setSession(session);\n        button.textContent = \"EXIT VR\";\n        currentSession = session;\n      }\n      function onSessionEnded() {\n        currentSession.removeEventListener(\"end\", onSessionEnded);\n        button.textContent = \"ENTER VR\";\n        currentSession = null;\n      }\n      button.style.display = \"\";\n      button.style.cursor = \"pointer\";\n      button.style.left = \"calc(50% - 50px)\";\n      button.style.width = \"100px\";\n      button.textContent = \"ENTER VR\";\n      button.onmouseenter = () => {\n        button.style.opacity = \"1.0\";\n      };\n      button.onmouseleave = () => {\n        button.style.opacity = \"0.5\";\n      };\n      button.onclick = () => {\n        var _a;\n        if (currentSession === null) {\n          const optionalFeatures = [sessionInit.optionalFeatures, \"local-floor\", \"bounded-floor\", \"hand-tracking\"].flat().filter(Boolean);\n          (_a = navigator.xr) == null ? void 0 : _a.requestSession(\"immersive-vr\", {\n            ...sessionInit,\n            optionalFeatures\n          }).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n    function disableButton() {\n      button.style.display = \"\";\n      button.style.cursor = \"auto\";\n      button.style.left = \"calc(50% - 75px)\";\n      button.style.width = \"150px\";\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n    function showWebXRNotFound() {\n      disableButton();\n      button.textContent = \"VR NOT SUPPORTED\";\n    }\n    function stylizeElement(element) {\n      element.style.position = \"absolute\";\n      element.style.bottom = \"20px\";\n      element.style.padding = \"12px 6px\";\n      element.style.border = \"1px solid #fff\";\n      element.style.borderRadius = \"4px\";\n      element.style.background = \"rgba(0,0,0,0.1)\";\n      element.style.color = \"#fff\";\n      element.style.font = \"normal 13px sans-serif\";\n      element.style.textAlign = \"center\";\n      element.style.opacity = \"0.5\";\n      element.style.outline = \"none\";\n      element.style.zIndex = \"999\";\n    }\n    if (\"xr\" in navigator) {\n      stylizeElement(button);\n      button.id = \"VRButton\";\n      button.style.display = \"none\";\n      navigator.xr.isSessionSupported(\"immersive-vr\").then(supported => {\n        supported ? showEnterVR() : showWebXRNotFound();\n        if (supported && _VRButton.xrSessionIsGranted) {\n          button.click();\n        }\n      });\n      return button;\n    } else {\n      const message = document.createElement(\"a\");\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, \"https:\");\n        message.innerHTML = \"WEBXR NEEDS HTTPS\";\n      } else {\n        message.href = \"https://immersiveweb.dev/\";\n        message.innerHTML = \"WEBXR NOT AVAILABLE\";\n      }\n      message.style.left = \"calc(50% - 90px)\";\n      message.style.width = \"180px\";\n      message.style.textDecoration = \"none\";\n      stylizeElement(message);\n      return message;\n    }\n  }\n  static registerSessionGrantedListener() {\n    if (typeof navigator !== \"undefined\" && \"xr\" in navigator) {\n      navigator.xr.addEventListener(\"sessiongranted\", () => {\n        _VRButton.xrSessionIsGranted = true;\n      });\n    }\n  }\n};\nlet VRButton = _VRButton;\n__publicField(VRButton, \"xrSessionIsGranted\", false);\nVRButton.registerSessionGrantedListener();\nexport { VRButton };","map":{"version":3,"sources":["../../src/webxr/VRButton.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebGLRenderer } from 'three'\n\nclass VRButton {\n  static createButton(renderer: WebGLRenderer, sessionInit: XRSessionInit = {}): HTMLButtonElement | HTMLAnchorElement {\n    const button = document.createElement('button')\n\n    function showEnterVR(/*device*/): void {\n      let currentSession: XRSession | null = null\n\n      async function onSessionStarted(session: XRSession): Promise<void> {\n        session.addEventListener('end', onSessionEnded)\n\n        await renderer.xr.setSession(session as any)\n        button.textContent = 'EXIT VR'\n\n        currentSession = session\n      }\n\n      function onSessionEnded(/*event*/): void {\n        currentSession!.removeEventListener('end', onSessionEnded)\n\n        button.textContent = 'ENTER VR'\n\n        currentSession = null\n      }\n\n      //\n\n      button.style.display = ''\n\n      button.style.cursor = 'pointer'\n      button.style.left = 'calc(50% - 50px)'\n      button.style.width = '100px'\n\n      button.textContent = 'ENTER VR'\n\n      button.onmouseenter = (): void => {\n        button.style.opacity = '1.0'\n      }\n\n      button.onmouseleave = (): void => {\n        button.style.opacity = '0.5'\n      }\n\n      button.onclick = (): void => {\n        if (currentSession === null) {\n          // WebXR's requestReferenceSpace only works if the corresponding feature\n          // was requested at session creation time. For simplicity, just ask for\n          // the interesting ones as optional features, but be aware that the\n          // requestReferenceSpace call will fail if it turns out to be unavailable.\n          // ('local' is always available for immersive sessions and doesn't need to\n          // be requested separately.)\n\n          const optionalFeatures = [sessionInit.optionalFeatures, 'local-floor', 'bounded-floor', 'hand-tracking']\n            .flat()\n            .filter(Boolean) as string[]\n\n          ;(navigator as Navigator).xr\n            ?.requestSession('immersive-vr', { ...sessionInit, optionalFeatures })\n            .then(onSessionStarted)\n        } else {\n          currentSession.end()\n        }\n      }\n    }\n\n    function disableButton(): void {\n      button.style.display = ''\n\n      button.style.cursor = 'auto'\n      button.style.left = 'calc(50% - 75px)'\n      button.style.width = '150px'\n\n      button.onmouseenter = null\n      button.onmouseleave = null\n\n      button.onclick = null\n    }\n\n    function showWebXRNotFound(): void {\n      disableButton()\n\n      button.textContent = 'VR NOT SUPPORTED'\n    }\n\n    function stylizeElement(element: HTMLElement): void {\n      element.style.position = 'absolute'\n      element.style.bottom = '20px'\n      element.style.padding = '12px 6px'\n      element.style.border = '1px solid #fff'\n      element.style.borderRadius = '4px'\n      element.style.background = 'rgba(0,0,0,0.1)'\n      element.style.color = '#fff'\n      element.style.font = 'normal 13px sans-serif'\n      element.style.textAlign = 'center'\n      element.style.opacity = '0.5'\n      element.style.outline = 'none'\n      element.style.zIndex = '999'\n    }\n\n    if ('xr' in navigator) {\n      stylizeElement(button)\n      button.id = 'VRButton'\n      button.style.display = 'none'\n\n      // Query for session mode\n      navigator.xr!.isSessionSupported('immersive-vr').then((supported) => {\n        supported ? showEnterVR() : showWebXRNotFound()\n\n        if (supported && VRButton.xrSessionIsGranted) {\n          button.click()\n        }\n      })\n\n      return button\n    } else {\n      const message = document.createElement('a')\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:')\n        message.innerHTML = 'WEBXR NEEDS HTTPS' // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/'\n        message.innerHTML = 'WEBXR NOT AVAILABLE'\n      }\n\n      message.style.left = 'calc(50% - 90px)'\n      message.style.width = '180px'\n      message.style.textDecoration = 'none'\n\n      stylizeElement(message)\n\n      return message\n    }\n  }\n\n  static xrSessionIsGranted = false\n\n  static registerSessionGrantedListener(): void {\n    if (typeof navigator !== 'undefined' && 'xr' in navigator) {\n      ;(navigator as Navigator).xr!.addEventListener('sessiongranted', () => {\n        VRButton.xrSessionIsGranted = true\n      })\n    }\n  }\n}\n\nVRButton.registerSessionGrantedListener()\n\nexport { VRButton }\n"]},"metadata":{},"sourceType":"module"}