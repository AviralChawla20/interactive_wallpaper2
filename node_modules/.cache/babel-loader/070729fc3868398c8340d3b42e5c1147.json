{"ast":null,"code":"import { DataTextureLoader, HalfFloatType, FloatType, DataUtils, LinearFilter } from \"three\";\nclass RGBELoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  }\n  // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n  parse(buffer) {\n    const rgbe_read_error = 1,\n      rgbe_write_error = 2,\n      rgbe_format_error = 3,\n      rgbe_memory_error = 4,\n      rgbe_error = function (rgbe_error_code, msg) {\n        switch (rgbe_error_code) {\n          case rgbe_read_error:\n            throw new Error(\"THREE.RGBELoader: Read Error: \" + (msg || \"\"));\n          case rgbe_write_error:\n            throw new Error(\"THREE.RGBELoader: Write Error: \" + (msg || \"\"));\n          case rgbe_format_error:\n            throw new Error(\"THREE.RGBELoader: Bad File Format: \" + (msg || \"\"));\n          default:\n          case rgbe_memory_error:\n            throw new Error(\"THREE.RGBELoader: Memory Error: \" + (msg || \"\"));\n        }\n      },\n      RGBE_VALID_PROGRAMTYPE = 1,\n      RGBE_VALID_FORMAT = 2,\n      RGBE_VALID_DIMENSIONS = 4,\n      NEWLINE = \"\\n\",\n      fgets = function (buffer2, lineLimit, consume) {\n        const chunkSize = 128;\n        lineLimit = !lineLimit ? 1024 : lineLimit;\n        let p = buffer2.pos,\n          i = -1,\n          len = 0,\n          s = \"\",\n          chunk = String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n        while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer2.byteLength) {\n          s += chunk;\n          len += chunk.length;\n          p += chunkSize;\n          chunk += String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n        }\n        if (-1 < i) {\n          if (false !== consume) buffer2.pos += len + i + 1;\n          return s + chunk.slice(0, i);\n        }\n        return false;\n      },\n      RGBE_ReadHeader = function (buffer2) {\n        const magic_token_re = /^#\\?(\\S+)/,\n          gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n          exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n          format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n          dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n          header = {\n            valid: 0,\n            string: \"\",\n            comments: \"\",\n            programtype: \"RGBE\",\n            format: \"\",\n            gamma: 1,\n            exposure: 1,\n            width: 0,\n            height: 0\n          };\n        let line, match;\n        if (buffer2.pos >= buffer2.byteLength || !(line = fgets(buffer2))) {\n          rgbe_error(rgbe_read_error, \"no header found\");\n        }\n        if (!(match = line.match(magic_token_re))) {\n          rgbe_error(rgbe_format_error, \"bad initial token\");\n        }\n        header.valid |= RGBE_VALID_PROGRAMTYPE;\n        header.programtype = match[1];\n        header.string += line + \"\\n\";\n        while (true) {\n          line = fgets(buffer2);\n          if (false === line) break;\n          header.string += line + \"\\n\";\n          if (\"#\" === line.charAt(0)) {\n            header.comments += line + \"\\n\";\n            continue;\n          }\n          if (match = line.match(gamma_re)) {\n            header.gamma = parseFloat(match[1]);\n          }\n          if (match = line.match(exposure_re)) {\n            header.exposure = parseFloat(match[1]);\n          }\n          if (match = line.match(format_re)) {\n            header.valid |= RGBE_VALID_FORMAT;\n            header.format = match[1];\n          }\n          if (match = line.match(dimensions_re)) {\n            header.valid |= RGBE_VALID_DIMENSIONS;\n            header.height = parseInt(match[1], 10);\n            header.width = parseInt(match[2], 10);\n          }\n          if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n        }\n        if (!(header.valid & RGBE_VALID_FORMAT)) {\n          rgbe_error(rgbe_format_error, \"missing format specifier\");\n        }\n        if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n          rgbe_error(rgbe_format_error, \"missing image size specifier\");\n        }\n        return header;\n      },\n      RGBE_ReadPixels_RLE = function (buffer2, w2, h2) {\n        const scanline_width = w2;\n        if (\n        // run length encoding is not allowed so read flat\n        scanline_width < 8 || scanline_width > 32767 ||\n        // this file is not run length encoded\n        2 !== buffer2[0] || 2 !== buffer2[1] || buffer2[2] & 128) {\n          return new Uint8Array(buffer2);\n        }\n        if (scanline_width !== (buffer2[2] << 8 | buffer2[3])) {\n          rgbe_error(rgbe_format_error, \"wrong scanline width\");\n        }\n        const data_rgba = new Uint8Array(4 * w2 * h2);\n        if (!data_rgba.length) {\n          rgbe_error(rgbe_memory_error, \"unable to allocate buffer space\");\n        }\n        let offset = 0,\n          pos = 0;\n        const ptr_end = 4 * scanline_width;\n        const rgbeStart = new Uint8Array(4);\n        const scanline_buffer = new Uint8Array(ptr_end);\n        let num_scanlines = h2;\n        while (num_scanlines > 0 && pos < buffer2.byteLength) {\n          if (pos + 4 > buffer2.byteLength) {\n            rgbe_error(rgbe_read_error);\n          }\n          rgbeStart[0] = buffer2[pos++];\n          rgbeStart[1] = buffer2[pos++];\n          rgbeStart[2] = buffer2[pos++];\n          rgbeStart[3] = buffer2[pos++];\n          if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n            rgbe_error(rgbe_format_error, \"bad rgbe scanline format\");\n          }\n          let ptr = 0,\n            count;\n          while (ptr < ptr_end && pos < buffer2.byteLength) {\n            count = buffer2[pos++];\n            const isEncodedRun = count > 128;\n            if (isEncodedRun) count -= 128;\n            if (0 === count || ptr + count > ptr_end) {\n              rgbe_error(rgbe_format_error, \"bad scanline data\");\n            }\n            if (isEncodedRun) {\n              const byteValue = buffer2[pos++];\n              for (let i = 0; i < count; i++) {\n                scanline_buffer[ptr++] = byteValue;\n              }\n            } else {\n              scanline_buffer.set(buffer2.subarray(pos, pos + count), ptr);\n              ptr += count;\n              pos += count;\n            }\n          }\n          const l = scanline_width;\n          for (let i = 0; i < l; i++) {\n            let off = 0;\n            data_rgba[offset] = scanline_buffer[i + off];\n            off += scanline_width;\n            data_rgba[offset + 1] = scanline_buffer[i + off];\n            off += scanline_width;\n            data_rgba[offset + 2] = scanline_buffer[i + off];\n            off += scanline_width;\n            data_rgba[offset + 3] = scanline_buffer[i + off];\n            offset += 4;\n          }\n          num_scanlines--;\n        }\n        return data_rgba;\n      };\n    const RGBEByteToRGBFloat = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2, e - 128) / 255;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n      destArray[destOffset + 3] = 1;\n    };\n    const RGBEByteToRGBHalf = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2, e - 128) / 255;\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n      destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n    };\n    const byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    const rgbe_header_info = RGBE_ReadHeader(byteArray);\n    const w = rgbe_header_info.width,\n      h = rgbe_header_info.height,\n      image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n    let data, type;\n    let numElements;\n    switch (this.type) {\n      case FloatType:\n        numElements = image_rgba_data.length / 4;\n        const floatArray = new Float32Array(numElements * 4);\n        for (let j = 0; j < numElements; j++) {\n          RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n        }\n        data = floatArray;\n        type = FloatType;\n        break;\n      case HalfFloatType:\n        numElements = image_rgba_data.length / 4;\n        const halfArray = new Uint16Array(numElements * 4);\n        for (let j = 0; j < numElements; j++) {\n          RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 4);\n        }\n        data = halfArray;\n        type = HalfFloatType;\n        break;\n      default:\n        throw new Error(\"THREE.RGBELoader: Unsupported type: \" + this.type);\n    }\n    return {\n      width: w,\n      height: h,\n      data,\n      header: rgbe_header_info.string,\n      gamma: rgbe_header_info.gamma,\n      exposure: rgbe_header_info.exposure,\n      type\n    };\n  }\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case FloatType:\n        case HalfFloatType:\n          if (\"colorSpace\" in texture) texture.colorSpace = \"srgb-linear\";else texture.encoding = 3e3;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n      if (onLoad) onLoad(texture, texData);\n    }\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n}\nexport { RGBELoader };","map":{"version":3,"sources":["../../src/loaders/RGBELoader.js"],"names":["buffer","w","h"],"mappings":"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","sourcesContent":["import { DataTextureLoader, DataUtils, FloatType, HalfFloatType, LinearFilter } from 'three'\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager)\n\n    this.type = HalfFloatType\n  }\n\n  // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n  parse(buffer) {\n    const /* default error routine.  change this to change error handling */\n      rgbe_read_error = 1,\n      rgbe_write_error = 2,\n      rgbe_format_error = 3,\n      rgbe_memory_error = 4,\n      rgbe_error = function (rgbe_error_code, msg) {\n        switch (rgbe_error_code) {\n          case rgbe_read_error:\n            throw new Error('THREE.RGBELoader: Read Error: ' + (msg || ''))\n          case rgbe_write_error:\n            throw new Error('THREE.RGBELoader: Write Error: ' + (msg || ''))\n          case rgbe_format_error:\n            throw new Error('THREE.RGBELoader: Bad File Format: ' + (msg || ''))\n          default:\n          case rgbe_memory_error:\n            throw new Error('THREE.RGBELoader: Memory Error: ' + (msg || ''))\n        }\n      },\n      /* offsets to red, green, and blue components in a data (float) pixel */\n      //RGBE_DATA_RED = 0,\n      //RGBE_DATA_GREEN = 1,\n      //RGBE_DATA_BLUE = 2,\n\n      /* number of floats per pixel, use 4 since stored in rgba image format */\n      //RGBE_DATA_SIZE = 4,\n\n      /* flags indicating which fields in an rgbe_header_info are valid */\n      RGBE_VALID_PROGRAMTYPE = 1,\n      RGBE_VALID_FORMAT = 2,\n      RGBE_VALID_DIMENSIONS = 4,\n      NEWLINE = '\\n',\n      fgets = function (buffer, lineLimit, consume) {\n        const chunkSize = 128\n\n        lineLimit = !lineLimit ? 1024 : lineLimit\n        let p = buffer.pos,\n          i = -1,\n          len = 0,\n          s = '',\n          chunk = String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)))\n\n        while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer.byteLength) {\n          s += chunk\n          len += chunk.length\n          p += chunkSize\n          chunk += String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)))\n        }\n\n        if (-1 < i) {\n          /*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n          if (false !== consume) buffer.pos += len + i + 1\n          return s + chunk.slice(0, i)\n        }\n\n        return false\n      },\n      /* minimal header reading.  modify if you want to parse more information */\n      RGBE_ReadHeader = function (buffer) {\n        // regexes to parse header info fields\n        const magic_token_re = /^#\\?(\\S+)/,\n          gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n          exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n          format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n          dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n          // RGBE format header struct\n          header = {\n            valid: 0 /* indicate which fields are valid */,\n\n            string: '' /* the actual header string */,\n\n            comments: '' /* comments found in header */,\n\n            programtype: 'RGBE' /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */,\n\n            format: '' /* RGBE format, default 32-bit_rle_rgbe */,\n\n            gamma: 1.0 /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */,\n\n            exposure: 1.0 /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */,\n\n            width: 0,\n            height: 0 /* image dimensions, width/height */,\n          }\n\n        let line, match\n\n        if (buffer.pos >= buffer.byteLength || !(line = fgets(buffer))) {\n          rgbe_error(rgbe_read_error, 'no header found')\n        }\n\n        /* if you want to require the magic token then uncomment the next line */\n        if (!(match = line.match(magic_token_re))) {\n          rgbe_error(rgbe_format_error, 'bad initial token')\n        }\n\n        header.valid |= RGBE_VALID_PROGRAMTYPE\n        header.programtype = match[1]\n        header.string += line + '\\n'\n\n        while (true) {\n          line = fgets(buffer)\n          if (false === line) break\n          header.string += line + '\\n'\n\n          if ('#' === line.charAt(0)) {\n            header.comments += line + '\\n'\n            continue // comment line\n          }\n\n          if ((match = line.match(gamma_re))) {\n            header.gamma = parseFloat(match[1])\n          }\n\n          if ((match = line.match(exposure_re))) {\n            header.exposure = parseFloat(match[1])\n          }\n\n          if ((match = line.match(format_re))) {\n            header.valid |= RGBE_VALID_FORMAT\n            header.format = match[1] //'32-bit_rle_rgbe';\n          }\n\n          if ((match = line.match(dimensions_re))) {\n            header.valid |= RGBE_VALID_DIMENSIONS\n            header.height = parseInt(match[1], 10)\n            header.width = parseInt(match[2], 10)\n          }\n\n          if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break\n        }\n\n        if (!(header.valid & RGBE_VALID_FORMAT)) {\n          rgbe_error(rgbe_format_error, 'missing format specifier')\n        }\n\n        if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n          rgbe_error(rgbe_format_error, 'missing image size specifier')\n        }\n\n        return header\n      },\n      RGBE_ReadPixels_RLE = function (buffer, w, h) {\n        const scanline_width = w\n\n        if (\n          // run length encoding is not allowed so read flat\n          scanline_width < 8 ||\n          scanline_width > 0x7fff ||\n          // this file is not run length encoded\n          2 !== buffer[0] ||\n          2 !== buffer[1] ||\n          buffer[2] & 0x80\n        ) {\n          // return the flat buffer\n          return new Uint8Array(buffer)\n        }\n\n        if (scanline_width !== ((buffer[2] << 8) | buffer[3])) {\n          rgbe_error(rgbe_format_error, 'wrong scanline width')\n        }\n\n        const data_rgba = new Uint8Array(4 * w * h)\n\n        if (!data_rgba.length) {\n          rgbe_error(rgbe_memory_error, 'unable to allocate buffer space')\n        }\n\n        let offset = 0,\n          pos = 0\n\n        const ptr_end = 4 * scanline_width\n        const rgbeStart = new Uint8Array(4)\n        const scanline_buffer = new Uint8Array(ptr_end)\n        let num_scanlines = h\n\n        // read in each successive scanline\n        while (num_scanlines > 0 && pos < buffer.byteLength) {\n          if (pos + 4 > buffer.byteLength) {\n            rgbe_error(rgbe_read_error)\n          }\n\n          rgbeStart[0] = buffer[pos++]\n          rgbeStart[1] = buffer[pos++]\n          rgbeStart[2] = buffer[pos++]\n          rgbeStart[3] = buffer[pos++]\n\n          if (2 != rgbeStart[0] || 2 != rgbeStart[1] || ((rgbeStart[2] << 8) | rgbeStart[3]) != scanline_width) {\n            rgbe_error(rgbe_format_error, 'bad rgbe scanline format')\n          }\n\n          // read each of the four channels for the scanline into the buffer\n          // first red, then green, then blue, then exponent\n          let ptr = 0,\n            count\n\n          while (ptr < ptr_end && pos < buffer.byteLength) {\n            count = buffer[pos++]\n            const isEncodedRun = count > 128\n            if (isEncodedRun) count -= 128\n\n            if (0 === count || ptr + count > ptr_end) {\n              rgbe_error(rgbe_format_error, 'bad scanline data')\n            }\n\n            if (isEncodedRun) {\n              // a (encoded) run of the same value\n              const byteValue = buffer[pos++]\n              for (let i = 0; i < count; i++) {\n                scanline_buffer[ptr++] = byteValue\n              }\n              //ptr += count;\n            } else {\n              // a literal-run\n              scanline_buffer.set(buffer.subarray(pos, pos + count), ptr)\n              ptr += count\n              pos += count\n            }\n          }\n\n          // now convert data from buffer into rgba\n          // first red, then green, then blue, then exponent (alpha)\n          const l = scanline_width //scanline_buffer.byteLength;\n          for (let i = 0; i < l; i++) {\n            let off = 0\n            data_rgba[offset] = scanline_buffer[i + off]\n            off += scanline_width //1;\n            data_rgba[offset + 1] = scanline_buffer[i + off]\n            off += scanline_width //1;\n            data_rgba[offset + 2] = scanline_buffer[i + off]\n            off += scanline_width //1;\n            data_rgba[offset + 3] = scanline_buffer[i + off]\n            offset += 4\n          }\n\n          num_scanlines--\n        }\n\n        return data_rgba\n      }\n\n    const RGBEByteToRGBFloat = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3]\n      const scale = Math.pow(2.0, e - 128.0) / 255.0\n\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale\n      destArray[destOffset + 3] = 1\n    }\n\n    const RGBEByteToRGBHalf = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3]\n      const scale = Math.pow(2.0, e - 128.0) / 255.0\n\n      // clamping to 65504, the maximum representable value in float16\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504))\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504))\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504))\n      destArray[destOffset + 3] = DataUtils.toHalfFloat(1)\n    }\n\n    const byteArray = new Uint8Array(buffer)\n    byteArray.pos = 0\n    const rgbe_header_info = RGBE_ReadHeader(byteArray)\n\n    const w = rgbe_header_info.width,\n      h = rgbe_header_info.height,\n      image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h)\n\n    let data, type\n    let numElements\n\n    switch (this.type) {\n      case FloatType:\n        numElements = image_rgba_data.length / 4\n        const floatArray = new Float32Array(numElements * 4)\n\n        for (let j = 0; j < numElements; j++) {\n          RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4)\n        }\n\n        data = floatArray\n        type = FloatType\n        break\n\n      case HalfFloatType:\n        numElements = image_rgba_data.length / 4\n        const halfArray = new Uint16Array(numElements * 4)\n\n        for (let j = 0; j < numElements; j++) {\n          RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 4)\n        }\n\n        data = halfArray\n        type = HalfFloatType\n        break\n\n      default:\n        throw new Error('THREE.RGBELoader: Unsupported type: ' + this.type)\n        break\n    }\n\n    return {\n      width: w,\n      height: h,\n      data: data,\n      header: rgbe_header_info.string,\n      gamma: rgbe_header_info.gamma,\n      exposure: rgbe_header_info.exposure,\n      type: type,\n    }\n  }\n\n  setDataType(value) {\n    this.type = value\n    return this\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case FloatType:\n        case HalfFloatType:\n          if ('colorSpace' in texture) texture.colorSpace = 'srgb-linear'\n          else texture.encoding = 3000 // LinearEncoding\n          texture.minFilter = LinearFilter\n          texture.magFilter = LinearFilter\n          texture.generateMipmaps = false\n          texture.flipY = true\n\n          break\n      }\n\n      if (onLoad) onLoad(texture, texData)\n    }\n\n    return super.load(url, onLoadCallback, onProgress, onError)\n  }\n}\n\nexport { RGBELoader }\n"]},"metadata":{},"sourceType":"module"}