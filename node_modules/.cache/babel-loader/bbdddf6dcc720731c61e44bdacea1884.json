{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector2, WebGLRenderTarget, NoBlending, Clock, LinearFilter, RGBAFormat } from \"three\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"./ShaderPass.js\";\nimport { MaskPass, ClearMaskPass } from \"./MaskPass.js\";\nclass EffectComposer {\n  constructor(renderer, renderTarget) {\n    __publicField(this, \"renderer\");\n    __publicField(this, \"_pixelRatio\");\n    __publicField(this, \"_width\");\n    __publicField(this, \"_height\");\n    __publicField(this, \"renderTarget1\");\n    __publicField(this, \"renderTarget2\");\n    __publicField(this, \"writeBuffer\");\n    __publicField(this, \"readBuffer\");\n    __publicField(this, \"renderToScreen\");\n    __publicField(this, \"passes\", []);\n    __publicField(this, \"copyPass\");\n    __publicField(this, \"clock\");\n    this.renderer = renderer;\n    if (renderTarget === void 0) {\n      const parameters = {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        format: RGBAFormat\n      };\n      const size = renderer.getSize(new Vector2());\n      this._pixelRatio = renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n      renderTarget.texture.name = \"EffectComposer.rt1\";\n    } else {\n      this._pixelRatio = 1;\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = \"EffectComposer.rt2\";\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true;\n    if (CopyShader === void 0) {\n      console.error(\"THREE.EffectComposer relies on CopyShader\");\n    }\n    if (ShaderPass === void 0) {\n      console.error(\"THREE.EffectComposer relies on ShaderPass\");\n    }\n    this.copyPass = new ShaderPass(CopyShader);\n    this.copyPass.material.blending = NoBlending;\n    this.clock = new Clock();\n  }\n  swapBuffers() {\n    const tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  }\n  addPass(pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n  insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n  removePass(pass) {\n    const index = this.passes.indexOf(pass);\n    if (index !== -1) {\n      this.passes.splice(index, 1);\n    }\n  }\n  isLastEnabledPass(passIndex) {\n    for (let i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n    return true;\n  }\n  render(deltaTime) {\n    if (deltaTime === void 0) {\n      deltaTime = this.clock.getDelta();\n    }\n    const currentRenderTarget = this.renderer.getRenderTarget();\n    let maskActive = false;\n    const il = this.passes.length;\n    for (let i = 0; i < il; i++) {\n      const pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n      if (pass.needsSwap) {\n        if (maskActive) {\n          const context = this.renderer.getContext();\n          const stencil = this.renderer.state.buffers.stencil;\n          stencil.setFunc(context.NOTEQUAL, 1, 4294967295);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);\n          stencil.setFunc(context.EQUAL, 1, 4294967295);\n        }\n        this.swapBuffers();\n      }\n      if (MaskPass !== void 0) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n    this.renderer.setRenderTarget(currentRenderTarget);\n  }\n  reset(renderTarget) {\n    if (renderTarget === void 0) {\n      const size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  }\n  setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    const effectiveWidth = this._width * this._pixelRatio;\n    const effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n    for (let i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  }\n  setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n  dispose() {\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.copyPass.dispose();\n  }\n}\nexport { EffectComposer };","map":{"version":3,"sources":["../../src/postprocessing/EffectComposer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Clock, LinearFilter, RGBAFormat, NoBlending, Vector2, WebGLRenderer, WebGLRenderTarget } from 'three'\nimport { CopyShader } from '../shaders/CopyShader'\nimport { ShaderPass } from './ShaderPass'\nimport { MaskPass, ClearMaskPass } from './MaskPass'\nimport { Pass } from './Pass'\n\nclass EffectComposer<TRenderTarget extends WebGLRenderTarget = WebGLRenderTarget> {\n  public renderer: WebGLRenderer\n  private _pixelRatio: number\n  private _width: number\n  private _height: number\n  public renderTarget1: WebGLRenderTarget\n  public renderTarget2: WebGLRenderTarget\n  public writeBuffer: WebGLRenderTarget\n  public readBuffer: WebGLRenderTarget\n  public renderToScreen: boolean\n  public passes: Pass[] = []\n  public copyPass: Pass\n  public clock: Clock\n\n  constructor(renderer: WebGLRenderer, renderTarget?: TRenderTarget) {\n    this.renderer = renderer\n\n    if (renderTarget === undefined) {\n      const parameters = {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        format: RGBAFormat,\n      }\n\n      const size = renderer.getSize(new Vector2())\n      this._pixelRatio = renderer.getPixelRatio()\n      this._width = size.width\n      this._height = size.height\n\n      renderTarget = new WebGLRenderTarget(\n        this._width * this._pixelRatio,\n        this._height * this._pixelRatio,\n        parameters,\n      ) as TRenderTarget\n      renderTarget.texture.name = 'EffectComposer.rt1'\n    } else {\n      this._pixelRatio = 1\n      this._width = renderTarget.width\n      this._height = renderTarget.height\n    }\n\n    this.renderTarget1 = renderTarget\n    this.renderTarget2 = renderTarget.clone()\n    this.renderTarget2.texture.name = 'EffectComposer.rt2'\n\n    this.writeBuffer = this.renderTarget1\n    this.readBuffer = this.renderTarget2\n\n    this.renderToScreen = true\n\n    // dependencies\n\n    if (CopyShader === undefined) {\n      console.error('THREE.EffectComposer relies on CopyShader')\n    }\n\n    if (ShaderPass === undefined) {\n      console.error('THREE.EffectComposer relies on ShaderPass')\n    }\n\n    this.copyPass = new ShaderPass(CopyShader)\n    // @ts-ignore\n    this.copyPass.material.blending = NoBlending\n\n    this.clock = new Clock()\n  }\n\n  public swapBuffers(): void {\n    const tmp = this.readBuffer\n    this.readBuffer = this.writeBuffer\n    this.writeBuffer = tmp\n  }\n\n  public addPass(pass: Pass): void {\n    this.passes.push(pass)\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio)\n  }\n\n  public insertPass(pass: Pass, index: number): void {\n    this.passes.splice(index, 0, pass)\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio)\n  }\n\n  public removePass(pass: Pass): void {\n    const index = this.passes.indexOf(pass)\n\n    if (index !== -1) {\n      this.passes.splice(index, 1)\n    }\n  }\n\n  public isLastEnabledPass(passIndex: number): boolean {\n    for (let i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  public render(deltaTime?: number): void {\n    // deltaTime value is in seconds\n\n    if (deltaTime === undefined) {\n      deltaTime = this.clock.getDelta()\n    }\n\n    const currentRenderTarget = this.renderer.getRenderTarget()\n\n    let maskActive = false\n\n    const il = this.passes.length\n\n    for (let i = 0; i < il; i++) {\n      const pass = this.passes[i]\n\n      if (pass.enabled === false) continue\n\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i)\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive)\n\n      if (pass.needsSwap) {\n        if (maskActive) {\n          const context = this.renderer.getContext()\n          const stencil = this.renderer.state.buffers.stencil\n\n          //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n          stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff)\n\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime)\n\n          //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n          stencil.setFunc(context.EQUAL, 1, 0xffffffff)\n        }\n\n        this.swapBuffers()\n      }\n\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false\n        }\n      }\n    }\n\n    this.renderer.setRenderTarget(currentRenderTarget)\n  }\n\n  public reset(renderTarget: WebGLRenderTarget): void {\n    if (renderTarget === undefined) {\n      const size = this.renderer.getSize(new Vector2())\n      this._pixelRatio = this.renderer.getPixelRatio()\n      this._width = size.width\n      this._height = size.height\n\n      renderTarget = this.renderTarget1.clone()\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio)\n    }\n\n    this.renderTarget1.dispose()\n    this.renderTarget2.dispose()\n    this.renderTarget1 = renderTarget\n    this.renderTarget2 = renderTarget.clone()\n\n    this.writeBuffer = this.renderTarget1\n    this.readBuffer = this.renderTarget2\n  }\n\n  public setSize(width: number, height: number): void {\n    this._width = width\n    this._height = height\n\n    const effectiveWidth = this._width * this._pixelRatio\n    const effectiveHeight = this._height * this._pixelRatio\n\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight)\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight)\n\n    for (let i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight)\n    }\n  }\n\n  public setPixelRatio(pixelRatio: number): void {\n    this._pixelRatio = pixelRatio\n\n    this.setSize(this._width, this._height)\n  }\n\n  public dispose() {\n    this.renderTarget1.dispose()\n    this.renderTarget2.dispose()\n\n    this.copyPass.dispose()\n  }\n}\n\nexport { EffectComposer }\n"]},"metadata":{},"sourceType":"module"}