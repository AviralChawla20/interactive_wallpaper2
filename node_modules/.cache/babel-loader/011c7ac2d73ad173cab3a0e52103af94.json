{"ast":null,"code":"import { Object3D, Box3, AnimationMixer, MeshLambertMaterial, Mesh, TextureLoader, UVMapping } from \"three\";\nimport { MD2Loader } from \"../loaders/MD2Loader.js\";\nclass MD2Character {\n  constructor() {\n    this.scale = 1;\n    this.animationFPS = 6;\n    this.root = new Object3D();\n    this.meshBody = null;\n    this.meshWeapon = null;\n    this.skinsBody = [];\n    this.skinsWeapon = [];\n    this.weapons = [];\n    this.activeAnimation = null;\n    this.mixer = null;\n    this.onLoadComplete = function () {};\n    this.loadCounter = 0;\n  }\n  loadParts(config) {\n    const scope = this;\n    function createPart(geometry, skinMap) {\n      const materialWireframe = new MeshLambertMaterial({\n        color: 16755200,\n        wireframe: true,\n        morphTargets: true,\n        morphNormals: true\n      });\n      const materialTexture = new MeshLambertMaterial({\n        color: 16777215,\n        wireframe: false,\n        map: skinMap,\n        morphTargets: true,\n        morphNormals: true\n      });\n      const mesh = new Mesh(geometry, materialTexture);\n      mesh.rotation.y = -Math.PI / 2;\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      mesh.materialTexture = materialTexture;\n      mesh.materialWireframe = materialWireframe;\n      return mesh;\n    }\n    function loadTextures(baseUrl, textureUrls) {\n      const textureLoader = new TextureLoader();\n      const textures = [];\n      for (let i = 0; i < textureUrls.length; i++) {\n        textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete);\n        textures[i].mapping = UVMapping;\n        textures[i].name = textureUrls[i];\n        if (\"colorSpace\" in textures[i]) textures[i].colorSpace = \"srgb\";else textures[i].encoding = 3001;\n      }\n      return textures;\n    }\n    function checkLoadingComplete() {\n      scope.loadCounter -= 1;\n      if (scope.loadCounter === 0) scope.onLoadComplete();\n    }\n    this.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\n    const weaponsTextures = [];\n    for (let i = 0; i < config.weapons.length; i++) weaponsTextures[i] = config.weapons[i][1];\n    this.skinsBody = loadTextures(config.baseUrl + \"skins/\", config.skins);\n    this.skinsWeapon = loadTextures(config.baseUrl + \"skins/\", weaponsTextures);\n    const loader = new MD2Loader();\n    loader.load(config.baseUrl + config.body, function (geo) {\n      const boundingBox = new Box3();\n      boundingBox.setFromBufferAttribute(geo.attributes.position);\n      scope.root.position.y = -scope.scale * boundingBox.min.y;\n      const mesh = createPart(geo, scope.skinsBody[0]);\n      mesh.scale.set(scope.scale, scope.scale, scope.scale);\n      scope.root.add(mesh);\n      scope.meshBody = mesh;\n      scope.meshBody.clipOffset = 0;\n      scope.activeAnimationClipName = mesh.geometry.animations[0].name;\n      scope.mixer = new AnimationMixer(mesh);\n      checkLoadingComplete();\n    });\n    const generateCallback = function (index, name) {\n      return function (geo) {\n        const mesh = createPart(geo, scope.skinsWeapon[index]);\n        mesh.scale.set(scope.scale, scope.scale, scope.scale);\n        mesh.visible = false;\n        mesh.name = name;\n        scope.root.add(mesh);\n        scope.weapons[index] = mesh;\n        scope.meshWeapon = mesh;\n        checkLoadingComplete();\n      };\n    };\n    for (let i = 0; i < config.weapons.length; i++) {\n      loader.load(config.baseUrl + config.weapons[i][0], generateCallback(i, config.weapons[i][0]));\n    }\n  }\n  setPlaybackRate(rate) {\n    if (rate !== 0) {\n      this.mixer.timeScale = 1 / rate;\n    } else {\n      this.mixer.timeScale = 0;\n    }\n  }\n  setWireframe(wireframeEnabled) {\n    if (wireframeEnabled) {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialWireframe;\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialWireframe;\n    } else {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialTexture;\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialTexture;\n    }\n  }\n  setSkin(index) {\n    if (this.meshBody && this.meshBody.material.wireframe === false) {\n      this.meshBody.material.map = this.skinsBody[index];\n    }\n  }\n  setWeapon(index) {\n    for (let i = 0; i < this.weapons.length; i++) this.weapons[i].visible = false;\n    const activeWeapon = this.weapons[index];\n    if (activeWeapon) {\n      activeWeapon.visible = true;\n      this.meshWeapon = activeWeapon;\n      this.syncWeaponAnimation();\n    }\n  }\n  setAnimation(clipName) {\n    if (this.meshBody) {\n      if (this.meshBody.activeAction) {\n        this.meshBody.activeAction.stop();\n        this.meshBody.activeAction = null;\n      }\n      const action = this.mixer.clipAction(clipName, this.meshBody);\n      if (action) {\n        this.meshBody.activeAction = action.play();\n      }\n    }\n    this.activeClipName = clipName;\n    this.syncWeaponAnimation();\n  }\n  syncWeaponAnimation() {\n    const clipName = this.activeClipName;\n    if (this.meshWeapon) {\n      if (this.meshWeapon.activeAction) {\n        this.meshWeapon.activeAction.stop();\n        this.meshWeapon.activeAction = null;\n      }\n      const action = this.mixer.clipAction(clipName, this.meshWeapon);\n      if (action) {\n        this.meshWeapon.activeAction = action.syncWith(this.meshBody.activeAction).play();\n      }\n    }\n  }\n  update(delta) {\n    if (this.mixer) this.mixer.update(delta);\n  }\n}\nexport { MD2Character };","map":{"version":3,"sources":["../../src/misc/MD2Character.js"],"names":[],"mappings":";;AAGA,MAAM,YAAA,CAAa;EACjB,WAAA,CAAA,EAAc;IACZ,IAAA,CAAK,KAAA,GAAQ,CAAA;IACb,IAAA,CAAK,YAAA,GAAe,CAAA;IAEpB,IAAA,CAAK,IAAA,GAAO,IAAI,QAAA,CAAU,CAAA;IAE1B,IAAA,CAAK,QAAA,GAAW,IAAA;IAChB,IAAA,CAAK,UAAA,GAAa,IAAA;IAElB,IAAA,CAAK,SAAA,GAAY,EAAE;IACnB,IAAA,CAAK,WAAA,GAAc,EAAE;IAErB,IAAA,CAAK,OAAA,GAAU,EAAE;IAEjB,IAAA,CAAK,eAAA,GAAkB,IAAA;IAEvB,IAAA,CAAK,KAAA,GAAQ,IAAA;IAEb,IAAA,CAAK,cAAA,GAAiB,YAAY,CAAE,CAAA;IAEpC,IAAA,CAAK,WAAA,GAAc,CAAA;EACpB;EAED,SAAA,CAAU,MAAA,EAAQ;IAChB,MAAM,KAAA,GAAQ,IAAA;IAEd,SAAS,UAAA,CAAW,QAAA,EAAU,OAAA,EAAS;MACrC,MAAM,iBAAA,GAAoB,IAAI,mBAAA,CAAoB;QAChD,KAAA,EAAO,QAAA;QACP,SAAA,EAAW,IAAA;QACX,YAAA,EAAc,IAAA;QACd,YAAA,EAAc;MACtB,CAAO,CAAA;MACD,MAAM,eAAA,GAAkB,IAAI,mBAAA,CAAoB;QAC9C,KAAA,EAAO,QAAA;QACP,SAAA,EAAW,KAAA;QACX,GAAA,EAAK,OAAA;QACL,YAAA,EAAc,IAAA;QACd,YAAA,EAAc;MACtB,CAAO,CAAA;MAID,MAAM,IAAA,GAAO,IAAI,IAAA,CAAK,QAAA,EAAU,eAAe,CAAA;MAC/C,IAAA,CAAK,QAAA,CAAS,CAAA,GAAI,CAAC,IAAA,CAAK,EAAA,GAAK,CAAA;MAE7B,IAAA,CAAK,UAAA,GAAa,IAAA;MAClB,IAAA,CAAK,aAAA,GAAgB,IAAA;MAIrB,IAAA,CAAK,eAAA,GAAkB,eAAA;MACvB,IAAA,CAAK,iBAAA,GAAoB,iBAAA;MAEzB,OAAO,IAAA;IACR;IAED,SAAS,YAAA,CAAa,OAAA,EAAS,WAAA,EAAa;MAC1C,MAAM,aAAA,GAAgB,IAAI,aAAA,CAAe,CAAA;MACzC,MAAM,QAAA,GAAW,EAAE;MAEnB,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,WAAA,CAAY,MAAA,EAAQ,CAAA,EAAA,EAAK;QAC3C,QAAA,CAAS,CAAC,CAAA,GAAI,aAAA,CAAc,IAAA,CAAK,OAAA,GAAU,WAAA,CAAY,CAAC,CAAA,EAAG,oBAAoB,CAAA;QAC/E,QAAA,CAAS,CAAC,CAAA,CAAE,OAAA,GAAU,SAAA;QACtB,QAAA,CAAS,CAAC,CAAA,CAAE,IAAA,GAAO,WAAA,CAAY,CAAC,CAAA;QAChC,IAAI,YAAA,IAAgB,QAAA,CAAS,CAAC,CAAA,EAAG,QAAA,CAAS,CAAC,CAAA,CAAE,UAAA,GAAa,MAAA,CAAA,KACrD,QAAA,CAAS,CAAC,CAAA,CAAE,QAAA,GAAW,IAAA;MAC7B;MAED,OAAO,QAAA;IACR;IAED,SAAS,oBAAA,CAAA,EAAuB;MAC9B,KAAA,CAAM,WAAA,IAAe,CAAA;MAErB,IAAI,KAAA,CAAM,WAAA,KAAgB,CAAA,EAAG,KAAA,CAAM,cAAA,CAAgB,CAAA;IACpD;IAED,IAAA,CAAK,WAAA,GAAc,MAAA,CAAO,OAAA,CAAQ,MAAA,GAAS,CAAA,GAAI,MAAA,CAAO,KAAA,CAAM,MAAA,GAAS,CAAA;IAErE,MAAM,eAAA,GAAkB,EAAE;IAC1B,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,MAAA,CAAO,OAAA,CAAQ,MAAA,EAAQ,CAAA,EAAA,EAAK,eAAA,CAAgB,CAAC,CAAA,GAAI,MAAA,CAAO,OAAA,CAAQ,CAAC,CAAA,CAAE,CAAC,CAAA;IAGxF,IAAA,CAAK,SAAA,GAAY,YAAA,CAAa,MAAA,CAAO,OAAA,GAAU,QAAA,EAAU,MAAA,CAAO,KAAK,CAAA;IACrE,IAAA,CAAK,WAAA,GAAc,YAAA,CAAa,MAAA,CAAO,OAAA,GAAU,QAAA,EAAU,eAAe,CAAA;IAI1E,MAAM,MAAA,GAAS,IAAI,SAAA,CAAW,CAAA;IAE9B,MAAA,CAAO,IAAA,CAAK,MAAA,CAAO,OAAA,GAAU,MAAA,CAAO,IAAA,EAAM,UAAU,GAAA,EAAK;MACvD,MAAM,WAAA,GAAc,IAAI,IAAA,CAAM,CAAA;MAC9B,WAAA,CAAY,sBAAA,CAAuB,GAAA,CAAI,UAAA,CAAW,QAAQ,CAAA;MAE1D,KAAA,CAAM,IAAA,CAAK,QAAA,CAAS,CAAA,GAAI,CAAC,KAAA,CAAM,KAAA,GAAQ,WAAA,CAAY,GAAA,CAAI,CAAA;MAEvD,MAAM,IAAA,GAAO,UAAA,CAAW,GAAA,EAAK,KAAA,CAAM,SAAA,CAAU,CAAC,CAAC,CAAA;MAC/C,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,KAAA,CAAM,KAAA,EAAO,KAAA,CAAM,KAAA,EAAO,KAAA,CAAM,KAAK,CAAA;MAEpD,KAAA,CAAM,IAAA,CAAK,GAAA,CAAI,IAAI,CAAA;MAEnB,KAAA,CAAM,QAAA,GAAW,IAAA;MAEjB,KAAA,CAAM,QAAA,CAAS,UAAA,GAAa,CAAA;MAC5B,KAAA,CAAM,uBAAA,GAA0B,IAAA,CAAK,QAAA,CAAS,UAAA,CAAW,CAAC,CAAA,CAAE,IAAA;MAE5D,KAAA,CAAM,KAAA,GAAQ,IAAI,cAAA,CAAe,IAAI,CAAA;MAErC,oBAAA,CAAsB,CAAA;IAC5B,CAAK,CAAA;IAID,MAAM,gBAAA,GAAmB,SAAA,CAAU,KAAA,EAAO,IAAA,EAAM;MAC9C,OAAO,UAAU,GAAA,EAAK;QACpB,MAAM,IAAA,GAAO,UAAA,CAAW,GAAA,EAAK,KAAA,CAAM,WAAA,CAAY,KAAK,CAAC,CAAA;QACrD,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,KAAA,CAAM,KAAA,EAAO,KAAA,CAAM,KAAA,EAAO,KAAA,CAAM,KAAK,CAAA;QACpD,IAAA,CAAK,OAAA,GAAU,KAAA;QAEf,IAAA,CAAK,IAAA,GAAO,IAAA;QAEZ,KAAA,CAAM,IAAA,CAAK,GAAA,CAAI,IAAI,CAAA;QAEnB,KAAA,CAAM,OAAA,CAAQ,KAAK,CAAA,GAAI,IAAA;QACvB,KAAA,CAAM,UAAA,GAAa,IAAA;QAEnB,oBAAA,CAAsB,CAAA;MACvB,CAAA;IACF,CAAA;IAED,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,MAAA,CAAO,OAAA,CAAQ,MAAA,EAAQ,CAAA,EAAA,EAAK;MAC9C,MAAA,CAAO,IAAA,CAAK,MAAA,CAAO,OAAA,GAAU,MAAA,CAAO,OAAA,CAAQ,CAAC,CAAA,CAAE,CAAC,CAAA,EAAG,gBAAA,CAAiB,CAAA,EAAG,MAAA,CAAO,OAAA,CAAQ,CAAC,CAAA,CAAE,CAAC,CAAC,CAAC,CAAA;IAC7F;EACF;EAED,eAAA,CAAgB,IAAA,EAAM;IACpB,IAAI,IAAA,KAAS,CAAA,EAAG;MACd,IAAA,CAAK,KAAA,CAAM,SAAA,GAAY,CAAA,GAAI,IAAA;IACjC,CAAA,MAAW;MACL,IAAA,CAAK,KAAA,CAAM,SAAA,GAAY,CAAA;IACxB;EACF;EAED,YAAA,CAAa,gBAAA,EAAkB;IAC7B,IAAI,gBAAA,EAAkB;MACpB,IAAI,IAAA,CAAK,QAAA,EAAU,IAAA,CAAK,QAAA,CAAS,QAAA,GAAW,IAAA,CAAK,QAAA,CAAS,iBAAA;MAC1D,IAAI,IAAA,CAAK,UAAA,EAAY,IAAA,CAAK,UAAA,CAAW,QAAA,GAAW,IAAA,CAAK,UAAA,CAAW,iBAAA;IACtE,CAAA,MAAW;MACL,IAAI,IAAA,CAAK,QAAA,EAAU,IAAA,CAAK,QAAA,CAAS,QAAA,GAAW,IAAA,CAAK,QAAA,CAAS,eAAA;MAC1D,IAAI,IAAA,CAAK,UAAA,EAAY,IAAA,CAAK,UAAA,CAAW,QAAA,GAAW,IAAA,CAAK,UAAA,CAAW,eAAA;IACjE;EACF;EAED,OAAA,CAAQ,KAAA,EAAO;IACb,IAAI,IAAA,CAAK,QAAA,IAAY,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,SAAA,KAAc,KAAA,EAAO;MAC/D,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,GAAA,GAAM,IAAA,CAAK,SAAA,CAAU,KAAK,CAAA;IAClD;EACF;EAED,SAAA,CAAU,KAAA,EAAO;IACf,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,IAAA,CAAK,OAAA,CAAQ,MAAA,EAAQ,CAAA,EAAA,EAAK,IAAA,CAAK,OAAA,CAAQ,CAAC,CAAA,CAAE,OAAA,GAAU,KAAA;IAExE,MAAM,YAAA,GAAe,IAAA,CAAK,OAAA,CAAQ,KAAK,CAAA;IAEvC,IAAI,YAAA,EAAc;MAChB,YAAA,CAAa,OAAA,GAAU,IAAA;MACvB,IAAA,CAAK,UAAA,GAAa,YAAA;MAElB,IAAA,CAAK,mBAAA,CAAqB,CAAA;IAC3B;EACF;EAED,YAAA,CAAa,QAAA,EAAU;IACrB,IAAI,IAAA,CAAK,QAAA,EAAU;MACjB,IAAI,IAAA,CAAK,QAAA,CAAS,YAAA,EAAc;QAC9B,IAAA,CAAK,QAAA,CAAS,YAAA,CAAa,IAAA,CAAM,CAAA;QACjC,IAAA,CAAK,QAAA,CAAS,YAAA,GAAe,IAAA;MAC9B;MAED,MAAM,MAAA,GAAS,IAAA,CAAK,KAAA,CAAM,UAAA,CAAW,QAAA,EAAU,IAAA,CAAK,QAAQ,CAAA;MAE5D,IAAI,MAAA,EAAQ;QACV,IAAA,CAAK,QAAA,CAAS,YAAA,GAAe,MAAA,CAAO,IAAA,CAAM,CAAA;MAC3C;IACF;IAED,IAAA,CAAK,cAAA,GAAiB,QAAA;IAEtB,IAAA,CAAK,mBAAA,CAAqB,CAAA;EAC3B;EAED,mBAAA,CAAA,EAAsB;IACpB,MAAM,QAAA,GAAW,IAAA,CAAK,cAAA;IAEtB,IAAI,IAAA,CAAK,UAAA,EAAY;MACnB,IAAI,IAAA,CAAK,UAAA,CAAW,YAAA,EAAc;QAChC,IAAA,CAAK,UAAA,CAAW,YAAA,CAAa,IAAA,CAAM,CAAA;QACnC,IAAA,CAAK,UAAA,CAAW,YAAA,GAAe,IAAA;MAChC;MAED,MAAM,MAAA,GAAS,IAAA,CAAK,KAAA,CAAM,UAAA,CAAW,QAAA,EAAU,IAAA,CAAK,UAAU,CAAA;MAE9D,IAAI,MAAA,EAAQ;QACV,IAAA,CAAK,UAAA,CAAW,YAAA,GAAe,MAAA,CAAO,QAAA,CAAS,IAAA,CAAK,QAAA,CAAS,YAAY,CAAA,CAAE,IAAA,CAAM,CAAA;MAClF;IACF;EACF;EAED,MAAA,CAAO,KAAA,EAAO;IACZ,IAAI,IAAA,CAAK,KAAA,EAAO,IAAA,CAAK,KAAA,CAAM,MAAA,CAAO,KAAK,CAAA;EACxC;AACH","sourcesContent":["import { AnimationMixer, Box3, Mesh, MeshLambertMaterial, Object3D, TextureLoader, UVMapping } from 'three'\nimport { MD2Loader } from '../loaders/MD2Loader'\n\nclass MD2Character {\n  constructor() {\n    this.scale = 1\n    this.animationFPS = 6\n\n    this.root = new Object3D()\n\n    this.meshBody = null\n    this.meshWeapon = null\n\n    this.skinsBody = []\n    this.skinsWeapon = []\n\n    this.weapons = []\n\n    this.activeAnimation = null\n\n    this.mixer = null\n\n    this.onLoadComplete = function () {}\n\n    this.loadCounter = 0\n  }\n\n  loadParts(config) {\n    const scope = this\n\n    function createPart(geometry, skinMap) {\n      const materialWireframe = new MeshLambertMaterial({\n        color: 0xffaa00,\n        wireframe: true,\n        morphTargets: true,\n        morphNormals: true,\n      })\n      const materialTexture = new MeshLambertMaterial({\n        color: 0xffffff,\n        wireframe: false,\n        map: skinMap,\n        morphTargets: true,\n        morphNormals: true,\n      })\n\n      //\n\n      const mesh = new Mesh(geometry, materialTexture)\n      mesh.rotation.y = -Math.PI / 2\n\n      mesh.castShadow = true\n      mesh.receiveShadow = true\n\n      //\n\n      mesh.materialTexture = materialTexture\n      mesh.materialWireframe = materialWireframe\n\n      return mesh\n    }\n\n    function loadTextures(baseUrl, textureUrls) {\n      const textureLoader = new TextureLoader()\n      const textures = []\n\n      for (let i = 0; i < textureUrls.length; i++) {\n        textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete)\n        textures[i].mapping = UVMapping\n        textures[i].name = textureUrls[i]\n        if ('colorSpace' in textures[i]) textures[i].colorSpace = 'srgb'\n        else textures[i].encoding = 3001 // sRGBEncoding\n      }\n\n      return textures\n    }\n\n    function checkLoadingComplete() {\n      scope.loadCounter -= 1\n\n      if (scope.loadCounter === 0) scope.onLoadComplete()\n    }\n\n    this.loadCounter = config.weapons.length * 2 + config.skins.length + 1\n\n    const weaponsTextures = []\n    for (let i = 0; i < config.weapons.length; i++) weaponsTextures[i] = config.weapons[i][1]\n    // SKINS\n\n    this.skinsBody = loadTextures(config.baseUrl + 'skins/', config.skins)\n    this.skinsWeapon = loadTextures(config.baseUrl + 'skins/', weaponsTextures)\n\n    // BODY\n\n    const loader = new MD2Loader()\n\n    loader.load(config.baseUrl + config.body, function (geo) {\n      const boundingBox = new Box3()\n      boundingBox.setFromBufferAttribute(geo.attributes.position)\n\n      scope.root.position.y = -scope.scale * boundingBox.min.y\n\n      const mesh = createPart(geo, scope.skinsBody[0])\n      mesh.scale.set(scope.scale, scope.scale, scope.scale)\n\n      scope.root.add(mesh)\n\n      scope.meshBody = mesh\n\n      scope.meshBody.clipOffset = 0\n      scope.activeAnimationClipName = mesh.geometry.animations[0].name\n\n      scope.mixer = new AnimationMixer(mesh)\n\n      checkLoadingComplete()\n    })\n\n    // WEAPONS\n\n    const generateCallback = function (index, name) {\n      return function (geo) {\n        const mesh = createPart(geo, scope.skinsWeapon[index])\n        mesh.scale.set(scope.scale, scope.scale, scope.scale)\n        mesh.visible = false\n\n        mesh.name = name\n\n        scope.root.add(mesh)\n\n        scope.weapons[index] = mesh\n        scope.meshWeapon = mesh\n\n        checkLoadingComplete()\n      }\n    }\n\n    for (let i = 0; i < config.weapons.length; i++) {\n      loader.load(config.baseUrl + config.weapons[i][0], generateCallback(i, config.weapons[i][0]))\n    }\n  }\n\n  setPlaybackRate(rate) {\n    if (rate !== 0) {\n      this.mixer.timeScale = 1 / rate\n    } else {\n      this.mixer.timeScale = 0\n    }\n  }\n\n  setWireframe(wireframeEnabled) {\n    if (wireframeEnabled) {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialWireframe\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialWireframe\n    } else {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialTexture\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialTexture\n    }\n  }\n\n  setSkin(index) {\n    if (this.meshBody && this.meshBody.material.wireframe === false) {\n      this.meshBody.material.map = this.skinsBody[index]\n    }\n  }\n\n  setWeapon(index) {\n    for (let i = 0; i < this.weapons.length; i++) this.weapons[i].visible = false\n\n    const activeWeapon = this.weapons[index]\n\n    if (activeWeapon) {\n      activeWeapon.visible = true\n      this.meshWeapon = activeWeapon\n\n      this.syncWeaponAnimation()\n    }\n  }\n\n  setAnimation(clipName) {\n    if (this.meshBody) {\n      if (this.meshBody.activeAction) {\n        this.meshBody.activeAction.stop()\n        this.meshBody.activeAction = null\n      }\n\n      const action = this.mixer.clipAction(clipName, this.meshBody)\n\n      if (action) {\n        this.meshBody.activeAction = action.play()\n      }\n    }\n\n    this.activeClipName = clipName\n\n    this.syncWeaponAnimation()\n  }\n\n  syncWeaponAnimation() {\n    const clipName = this.activeClipName\n\n    if (this.meshWeapon) {\n      if (this.meshWeapon.activeAction) {\n        this.meshWeapon.activeAction.stop()\n        this.meshWeapon.activeAction = null\n      }\n\n      const action = this.mixer.clipAction(clipName, this.meshWeapon)\n\n      if (action) {\n        this.meshWeapon.activeAction = action.syncWith(this.meshBody.activeAction).play()\n      }\n    }\n  }\n\n  update(delta) {\n    if (this.mixer) this.mixer.update(delta)\n  }\n}\n\nexport { MD2Character }\n"]},"metadata":{},"sourceType":"module"}