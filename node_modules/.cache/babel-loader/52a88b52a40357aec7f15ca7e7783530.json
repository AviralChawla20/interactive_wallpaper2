{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass } from \"./Pass.js\";\nimport { Color } from \"three\";\nclass ClearPass extends Pass {\n  constructor(clearColor, clearAlpha) {\n    super();\n    __publicField(this, \"clearColor\");\n    __publicField(this, \"clearAlpha\");\n    __publicField(this, \"_oldClearColor\");\n    this.needsSwap = false;\n    this.clearColor = clearColor !== void 0 ? clearColor : 0;\n    this.clearAlpha = clearAlpha !== void 0 ? clearAlpha : 0;\n    this._oldClearColor = new Color();\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    let oldClearAlpha;\n    if (this.clearColor) {\n      renderer.getClearColor(this._oldClearColor);\n      oldClearAlpha = renderer.getClearAlpha();\n      renderer.setClearColor(this.clearColor, this.clearAlpha);\n    }\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n    renderer.clear();\n    if (this.clearColor) {\n      renderer.setClearColor(this._oldClearColor, oldClearAlpha);\n    }\n  }\n}\nexport { ClearPass };","map":{"version":3,"sources":["../../src/postprocessing/ClearPass.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAGA,MAAM,SAAA,SAAkB,IAAA,CAAK;EAM3B,WAAA,CAAY,UAAA,EAAsC,UAAA,EAAqB;IAC/D,KAAA,CAAA,CAAA;IAND,aAAA,CAAA,IAAA,EAAA,YAAA,CAAA;IACA,aAAA,CAAA,IAAA,EAAA,YAAA,CAAA;IAEC,aAAA,CAAA,IAAA,EAAA,gBAAA,CAAA;IAIN,IAAA,CAAK,SAAA,GAAY,KAAA;IACZ,IAAA,CAAA,UAAA,GAAa,UAAA,KAAe,KAAA,CAAA,GAAY,UAAA,GAAa,CAAA;IACrD,IAAA,CAAA,UAAA,GAAa,UAAA,KAAe,KAAA,CAAA,GAAY,UAAA,GAAa,CAAA;IACrD,IAAA,CAAA,cAAA,GAAiB,IAAI,KAAA,CAAA,CAAA;EAC5B;EAEO,MAAA,CACL,QAAA,EACA,WAAA,EACA,UAAA,EAEM;IACF,IAAA,aAAA;IAEJ,IAAI,IAAA,CAAK,UAAA,EAAY;MACV,QAAA,CAAA,aAAA,CAAc,IAAA,CAAK,cAAc,CAAA;MAC1C,aAAA,GAAgB,QAAA,CAAS,aAAA,CAAA,CAAA;MACzB,QAAA,CAAS,aAAA,CAAc,IAAA,CAAK,UAAA,EAAY,IAAA,CAAK,UAAU,CAAA;IACzD;IAEA,QAAA,CAAS,eAAA,CAAgB,IAAA,CAAK,cAAA,GAAiB,IAAA,GAAO,UAAU,CAAA;IAChE,QAAA,CAAS,KAAA,CAAM,CAAA;IAEf,IAAI,IAAA,CAAK,UAAA,EAAY;MACV,QAAA,CAAA,aAAA,CAAc,IAAA,CAAK,cAAA,EAAgB,aAAa,CAAA;IAC3D;EACF;AACF","sourcesContent":["import { Pass } from './Pass'\nimport { Color, WebGLRenderer, WebGLRenderTarget } from 'three'\n\nclass ClearPass extends Pass {\n  public clearColor: Color | string | number\n  public clearAlpha: number\n\n  private _oldClearColor: Color\n\n  constructor(clearColor?: Color | string | number, clearAlpha?: number) {\n    super()\n    this.needsSwap = false\n    this.clearColor = clearColor !== undefined ? clearColor : 0x000000\n    this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0\n    this._oldClearColor = new Color()\n  }\n\n  public render(\n    renderer: WebGLRenderer,\n    writeBuffer: WebGLRenderTarget,\n    readBuffer: WebGLRenderTarget,\n    /*, deltaTime, maskActive */\n  ): void {\n    let oldClearAlpha\n\n    if (this.clearColor) {\n      renderer.getClearColor(this._oldClearColor)\n      oldClearAlpha = renderer.getClearAlpha()\n      renderer.setClearColor(this.clearColor, this.clearAlpha)\n    }\n\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer)\n    renderer.clear()\n\n    if (this.clearColor) {\n      renderer.setClearColor(this._oldClearColor, oldClearAlpha)\n    }\n  }\n}\n\nexport { ClearPass }\n"]},"metadata":{},"sourceType":"module"}