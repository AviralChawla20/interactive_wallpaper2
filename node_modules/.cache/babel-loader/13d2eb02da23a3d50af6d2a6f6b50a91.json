{"ast":null,"code":"import { Vector3, LineSegments, BufferGeometry, Float32BufferAttribute, LineBasicMaterial } from \"three\";\nconst _v1 = new Vector3();\nconst _v2 = new Vector3();\nclass VertexTangentsHelper extends LineSegments {\n  constructor(object, size = 1, color = 65535) {\n    const geometry = new BufferGeometry();\n    const nTangents = object.geometry.attributes.tangent.count;\n    const positions = new Float32BufferAttribute(nTangents * 2 * 3, 3);\n    geometry.setAttribute(\"position\", positions);\n    super(geometry, new LineBasicMaterial({\n      color,\n      toneMapped: false\n    }));\n    this.object = object;\n    this.size = size;\n    this.type = \"VertexTangentsHelper\";\n    this.matrixAutoUpdate = false;\n    this.update();\n  }\n  update() {\n    this.object.updateMatrixWorld(true);\n    const matrixWorld = this.object.matrixWorld;\n    const position = this.geometry.attributes.position;\n    const objGeometry = this.object.geometry;\n    const objPos = objGeometry.attributes.position;\n    const objTan = objGeometry.attributes.tangent;\n    let idx = 0;\n    for (let j = 0, jl = objPos.count; j < jl; j++) {\n      _v1.fromBufferAttribute(objPos, j).applyMatrix4(matrixWorld);\n      _v2.fromBufferAttribute(objTan, j);\n      _v2.transformDirection(matrixWorld).multiplyScalar(this.size).add(_v1);\n      position.setXYZ(idx, _v1.x, _v1.y, _v1.z);\n      idx = idx + 1;\n      position.setXYZ(idx, _v2.x, _v2.y, _v2.z);\n      idx = idx + 1;\n    }\n    position.needsUpdate = true;\n  }\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n}\nexport { VertexTangentsHelper };","map":{"version":3,"sources":["../../src/helpers/VertexTangentsHelper.js"],"names":[],"mappings":";AAEA,MAAM,GAAA,GAAM,IAAI,OAAA,CAAS,CAAA;AACzB,MAAM,GAAA,GAAM,IAAI,OAAA,CAAS,CAAA;AAEzB,MAAM,oBAAA,SAA6B,YAAA,CAAa;EAC9C,WAAA,CAAY,MAAA,EAAQ,IAAA,GAAO,CAAA,EAAG,KAAA,GAAQ,KAAA,EAAU;IAC9C,MAAM,QAAA,GAAW,IAAI,cAAA,CAAgB,CAAA;IAErC,MAAM,SAAA,GAAY,MAAA,CAAO,QAAA,CAAS,UAAA,CAAW,OAAA,CAAQ,KAAA;IACrD,MAAM,SAAA,GAAY,IAAI,sBAAA,CAAuB,SAAA,GAAY,CAAA,GAAI,CAAA,EAAG,CAAC,CAAA;IAEjE,QAAA,CAAS,YAAA,CAAa,UAAA,EAAY,SAAS,CAAA;IAE3C,KAAA,CAAM,QAAA,EAAU,IAAI,iBAAA,CAAkB;MAAE,KAAA;MAAO,UAAA,EAAY;IAAK,CAAE,CAAC,CAAA;IAEnE,IAAA,CAAK,MAAA,GAAS,MAAA;IACd,IAAA,CAAK,IAAA,GAAO,IAAA;IACZ,IAAA,CAAK,IAAA,GAAO,sBAAA;IAIZ,IAAA,CAAK,gBAAA,GAAmB,KAAA;IAExB,IAAA,CAAK,MAAA,CAAQ,CAAA;EACd;EAED,MAAA,CAAA,EAAS;IACP,IAAA,CAAK,MAAA,CAAO,iBAAA,CAAkB,IAAI,CAAA;IAElC,MAAM,WAAA,GAAc,IAAA,CAAK,MAAA,CAAO,WAAA;IAEhC,MAAM,QAAA,GAAW,IAAA,CAAK,QAAA,CAAS,UAAA,CAAW,QAAA;IAI1C,MAAM,WAAA,GAAc,IAAA,CAAK,MAAA,CAAO,QAAA;IAEhC,MAAM,MAAA,GAAS,WAAA,CAAY,UAAA,CAAW,QAAA;IAEtC,MAAM,MAAA,GAAS,WAAA,CAAY,UAAA,CAAW,OAAA;IAEtC,IAAI,GAAA,GAAM,CAAA;IAIV,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,EAAA,GAAK,MAAA,CAAO,KAAA,EAAO,CAAA,GAAI,EAAA,EAAI,CAAA,EAAA,EAAK;MAC9C,GAAA,CAAI,mBAAA,CAAoB,MAAA,EAAQ,CAAC,CAAA,CAAE,YAAA,CAAa,WAAW,CAAA;MAE3D,GAAA,CAAI,mBAAA,CAAoB,MAAA,EAAQ,CAAC,CAAA;MAEjC,GAAA,CAAI,kBAAA,CAAmB,WAAW,CAAA,CAAE,cAAA,CAAe,IAAA,CAAK,IAAI,CAAA,CAAE,GAAA,CAAI,GAAG,CAAA;MAErE,QAAA,CAAS,MAAA,CAAO,GAAA,EAAK,GAAA,CAAI,CAAA,EAAG,GAAA,CAAI,CAAA,EAAG,GAAA,CAAI,CAAC,CAAA;MAExC,GAAA,GAAM,GAAA,GAAM,CAAA;MAEZ,QAAA,CAAS,MAAA,CAAO,GAAA,EAAK,GAAA,CAAI,CAAA,EAAG,GAAA,CAAI,CAAA,EAAG,GAAA,CAAI,CAAC,CAAA;MAExC,GAAA,GAAM,GAAA,GAAM,CAAA;IACb;IAED,QAAA,CAAS,WAAA,GAAc,IAAA;EACxB;EAED,OAAA,CAAA,EAAU;IACR,IAAA,CAAK,QAAA,CAAS,OAAA,CAAS,CAAA;IACvB,IAAA,CAAK,QAAA,CAAS,OAAA,CAAS,CAAA;EACxB;AACH","sourcesContent":["import { BufferGeometry, Float32BufferAttribute, LineSegments, LineBasicMaterial, Vector3 } from 'three'\n\nconst _v1 = new Vector3()\nconst _v2 = new Vector3()\n\nclass VertexTangentsHelper extends LineSegments {\n  constructor(object, size = 1, color = 0x00ffff) {\n    const geometry = new BufferGeometry()\n\n    const nTangents = object.geometry.attributes.tangent.count\n    const positions = new Float32BufferAttribute(nTangents * 2 * 3, 3)\n\n    geometry.setAttribute('position', positions)\n\n    super(geometry, new LineBasicMaterial({ color, toneMapped: false }))\n\n    this.object = object\n    this.size = size\n    this.type = 'VertexTangentsHelper'\n\n    //\n\n    this.matrixAutoUpdate = false\n\n    this.update()\n  }\n\n  update() {\n    this.object.updateMatrixWorld(true)\n\n    const matrixWorld = this.object.matrixWorld\n\n    const position = this.geometry.attributes.position\n\n    //\n\n    const objGeometry = this.object.geometry\n\n    const objPos = objGeometry.attributes.position\n\n    const objTan = objGeometry.attributes.tangent\n\n    let idx = 0\n\n    // for simplicity, ignore index and drawcalls, and render every tangent\n\n    for (let j = 0, jl = objPos.count; j < jl; j++) {\n      _v1.fromBufferAttribute(objPos, j).applyMatrix4(matrixWorld)\n\n      _v2.fromBufferAttribute(objTan, j)\n\n      _v2.transformDirection(matrixWorld).multiplyScalar(this.size).add(_v1)\n\n      position.setXYZ(idx, _v1.x, _v1.y, _v1.z)\n\n      idx = idx + 1\n\n      position.setXYZ(idx, _v2.x, _v2.y, _v2.z)\n\n      idx = idx + 1\n    }\n\n    position.needsUpdate = true\n  }\n\n  dispose() {\n    this.geometry.dispose()\n    this.material.dispose()\n  }\n}\n\nexport { VertexTangentsHelper }\n"]},"metadata":{},"sourceType":"module"}