{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { EventDispatcher, Vector3, Euler, Quaternion, MathUtils } from \"three\";\nclass DeviceOrientationControls extends EventDispatcher {\n  // radians\n  constructor(object) {\n    super();\n    __publicField(this, \"object\");\n    __publicField(this, \"changeEvent\", {\n      type: \"change\"\n    });\n    __publicField(this, \"EPS\", 1e-6);\n    __publicField(this, \"enabled\", true);\n    __publicField(this, \"deviceOrientation\", {\n      alpha: 0,\n      beta: 0,\n      gamma: 0\n    });\n    __publicField(this, \"screenOrientation\", 0);\n    __publicField(this, \"alphaOffset\", 0);\n    __publicField(this, \"onDeviceOrientationChangeEvent\", event => {\n      this.deviceOrientation = event;\n    });\n    __publicField(this, \"onScreenOrientationChangeEvent\", () => {\n      this.screenOrientation = window.orientation || 0;\n    });\n    // The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\n    __publicField(this, \"zee\", new Vector3(0, 0, 1));\n    __publicField(this, \"euler\", new Euler());\n    __publicField(this, \"q0\", new Quaternion());\n    __publicField(this, \"q1\", new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5)));\n    // - PI/2 around the x-axis\n    __publicField(this, \"setObjectQuaternion\", (quaternion, alpha, beta, gamma, orient) => {\n      this.euler.set(beta, alpha, -gamma, \"YXZ\");\n      quaternion.setFromEuler(this.euler);\n      quaternion.multiply(this.q1);\n      quaternion.multiply(this.q0.setFromAxisAngle(this.zee, -orient));\n    });\n    __publicField(this, \"connect\", () => {\n      this.onScreenOrientationChangeEvent();\n      if (window.DeviceOrientationEvent !== void 0 &&\n      // @ts-ignore\n      typeof window.DeviceOrientationEvent.requestPermission === \"function\") {\n        window.DeviceOrientationEvent.requestPermission().then(response => {\n          if (response == \"granted\") {\n            window.addEventListener(\"orientationchange\", this.onScreenOrientationChangeEvent);\n            window.addEventListener(\"deviceorientation\", this.onDeviceOrientationChangeEvent);\n          }\n        }).catch(error => {\n          console.error(\"THREE.DeviceOrientationControls: Unable to use DeviceOrientation API:\", error);\n        });\n      } else {\n        window.addEventListener(\"orientationchange\", this.onScreenOrientationChangeEvent);\n        window.addEventListener(\"deviceorientation\", this.onDeviceOrientationChangeEvent);\n      }\n      this.enabled = true;\n    });\n    __publicField(this, \"disconnect\", () => {\n      window.removeEventListener(\"orientationchange\", this.onScreenOrientationChangeEvent);\n      window.removeEventListener(\"deviceorientation\", this.onDeviceOrientationChangeEvent);\n      this.enabled = false;\n    });\n    __publicField(this, \"lastQuaternion\", new Quaternion());\n    __publicField(this, \"update\", () => {\n      if (this.enabled === false) return;\n      const device = this.deviceOrientation;\n      if (device) {\n        const alpha = device.alpha ? MathUtils.degToRad(device.alpha) + this.alphaOffset : 0;\n        const beta = device.beta ? MathUtils.degToRad(device.beta) : 0;\n        const gamma = device.gamma ? MathUtils.degToRad(device.gamma) : 0;\n        const orient = this.screenOrientation ? MathUtils.degToRad(this.screenOrientation) : 0;\n        this.setObjectQuaternion(this.object.quaternion, alpha, beta, gamma, orient);\n        if (8 * (1 - this.lastQuaternion.dot(this.object.quaternion)) > this.EPS) {\n          this.lastQuaternion.copy(this.object.quaternion);\n          this.dispatchEvent(this.changeEvent);\n        }\n      }\n    });\n    __publicField(this, \"dispose\", () => this.disconnect());\n    this.object = object;\n    this.object.rotation.reorder(\"YXZ\");\n    this.connect();\n  }\n}\nexport { DeviceOrientationControls };","map":{"version":3,"sources":["../../src/controls/DeviceOrientationControls.ts"],"names":[],"mappings":"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","sourcesContent":["import { Camera, Euler, EventDispatcher, MathUtils, Quaternion, Vector3 } from 'three'\n\n/**\n * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\n */\n\nclass DeviceOrientationControls extends EventDispatcher {\n  public object: Camera\n\n  private changeEvent = { type: 'change' }\n  private EPS = 0.000001\n\n  public enabled = true\n  public deviceOrientation: Partial<DeviceOrientationEvent> = { alpha: 0, beta: 0, gamma: 0 }\n  public screenOrientation: string | number = 0\n  public alphaOffset = 0 // radians\n\n  constructor(object: Camera) {\n    super()\n\n    this.object = object\n    this.object.rotation.reorder('YXZ')\n\n    this.connect()\n  }\n\n  private onDeviceOrientationChangeEvent = (event: DeviceOrientationEvent): void => {\n    this.deviceOrientation = event\n  }\n\n  private onScreenOrientationChangeEvent = (): void => {\n    this.screenOrientation = window.orientation || 0\n  }\n\n  // The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\n\n  private zee = new Vector3(0, 0, 1)\n  private euler = new Euler()\n  private q0 = new Quaternion()\n  private q1 = new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5)) // - PI/2 around the x-axis\n  private setObjectQuaternion = (\n    quaternion: Quaternion,\n    alpha: number,\n    beta: number,\n    gamma: number,\n    orient: number,\n  ): void => {\n    this.euler.set(beta, alpha, -gamma, 'YXZ') // 'ZXY' for the device, but 'YXZ' for us\n    quaternion.setFromEuler(this.euler) // orient the device\n    quaternion.multiply(this.q1) // camera looks out the back of the device, not the top\n    quaternion.multiply(this.q0.setFromAxisAngle(this.zee, -orient)) // adjust for screen orientation\n  }\n\n  public connect = (): void => {\n    this.onScreenOrientationChangeEvent() // run once on load\n\n    // iOS 13+\n\n    if (\n      window.DeviceOrientationEvent !== undefined &&\n      // @ts-ignore\n      typeof window.DeviceOrientationEvent.requestPermission === 'function'\n    ) {\n      // @ts-ignore\n      window.DeviceOrientationEvent.requestPermission()\n        .then((response: any) => {\n          if (response == 'granted') {\n            window.addEventListener('orientationchange', this.onScreenOrientationChangeEvent)\n            window.addEventListener('deviceorientation', this.onDeviceOrientationChangeEvent)\n          }\n        })\n        .catch((error: any) => {\n          console.error('THREE.DeviceOrientationControls: Unable to use DeviceOrientation API:', error)\n        })\n    } else {\n      window.addEventListener('orientationchange', this.onScreenOrientationChangeEvent)\n      window.addEventListener('deviceorientation', this.onDeviceOrientationChangeEvent)\n    }\n\n    this.enabled = true\n  }\n\n  public disconnect = (): void => {\n    window.removeEventListener('orientationchange', this.onScreenOrientationChangeEvent)\n    window.removeEventListener('deviceorientation', this.onDeviceOrientationChangeEvent)\n\n    this.enabled = false\n  }\n\n  private lastQuaternion = new Quaternion()\n  public update = (): void => {\n    if (this.enabled === false) return\n\n    const device = this.deviceOrientation\n\n    if (device) {\n      const alpha = device.alpha ? MathUtils.degToRad(device.alpha) + this.alphaOffset : 0 // Z\n      const beta = device.beta ? MathUtils.degToRad(device.beta) : 0 // X'\n      const gamma = device.gamma ? MathUtils.degToRad(device.gamma) : 0 // Y''\n      const orient = this.screenOrientation ? MathUtils.degToRad(this.screenOrientation as number) : 0 // O\n\n      this.setObjectQuaternion(this.object.quaternion, alpha, beta, gamma, orient)\n\n      if (8 * (1 - this.lastQuaternion.dot(this.object.quaternion)) > this.EPS) {\n        this.lastQuaternion.copy(this.object.quaternion)\n        // @ts-ignore\n        this.dispatchEvent(this.changeEvent)\n      }\n    }\n  }\n\n  public dispose = (): void => this.disconnect()\n}\n\nexport { DeviceOrientationControls }\n"]},"metadata":{},"sourceType":"module"}