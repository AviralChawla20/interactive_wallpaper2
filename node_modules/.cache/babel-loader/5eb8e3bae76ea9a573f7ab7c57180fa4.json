{"ast":null,"code":"class WorkerPool {\n  constructor(pool = 4) {\n    this.pool = pool;\n    this.queue = [];\n    this.workers = [];\n    this.workersResolve = [];\n    this.workerStatus = 0;\n  }\n  _initWorker(workerId) {\n    if (!this.workers[workerId]) {\n      const worker = this.workerCreator();\n      worker.addEventListener(\"message\", this._onMessage.bind(this, workerId));\n      this.workers[workerId] = worker;\n    }\n  }\n  _getIdleWorker() {\n    for (let i = 0; i < this.pool; i++) if (!(this.workerStatus & 1 << i)) return i;\n    return -1;\n  }\n  _onMessage(workerId, msg) {\n    const resolve = this.workersResolve[workerId];\n    resolve && resolve(msg);\n    if (this.queue.length) {\n      const {\n        resolve: resolve2,\n        msg: msg2,\n        transfer\n      } = this.queue.shift();\n      this.workersResolve[workerId] = resolve2;\n      this.workers[workerId].postMessage(msg2, transfer);\n    } else {\n      this.workerStatus ^= 1 << workerId;\n    }\n  }\n  setWorkerCreator(workerCreator) {\n    this.workerCreator = workerCreator;\n  }\n  setWorkerLimit(pool) {\n    this.pool = pool;\n  }\n  postMessage(msg, transfer) {\n    return new Promise(resolve => {\n      const workerId = this._getIdleWorker();\n      if (workerId !== -1) {\n        this._initWorker(workerId);\n        this.workerStatus |= 1 << workerId;\n        this.workersResolve[workerId] = resolve;\n        this.workers[workerId].postMessage(msg, transfer);\n      } else {\n        this.queue.push({\n          resolve,\n          msg,\n          transfer\n        });\n      }\n    });\n  }\n  dispose() {\n    this.workers.forEach(worker => worker.terminate());\n    this.workersResolve.length = 0;\n    this.workers.length = 0;\n    this.queue.length = 0;\n    this.workerStatus = 0;\n  }\n}\nexport { WorkerPool };","map":{"version":3,"sources":["../../src/utils/WorkerPool.js"],"names":["resolve","msg"],"mappings":"AAIO,MAAM,UAAA,CAAW;EACtB,WAAA,CAAY,IAAA,GAAO,CAAA,EAAG;IACpB,IAAA,CAAK,IAAA,GAAO,IAAA;IACZ,IAAA,CAAK,KAAA,GAAQ,EAAE;IACf,IAAA,CAAK,OAAA,GAAU,EAAE;IACjB,IAAA,CAAK,cAAA,GAAiB,EAAE;IACxB,IAAA,CAAK,YAAA,GAAe,CAAA;EACrB;EAED,WAAA,CAAY,QAAA,EAAU;IACpB,IAAI,CAAC,IAAA,CAAK,OAAA,CAAQ,QAAQ,CAAA,EAAG;MAC3B,MAAM,MAAA,GAAS,IAAA,CAAK,aAAA,CAAe,CAAA;MACnC,MAAA,CAAO,gBAAA,CAAiB,SAAA,EAAW,IAAA,CAAK,UAAA,CAAW,IAAA,CAAK,IAAA,EAAM,QAAQ,CAAC,CAAA;MACvE,IAAA,CAAK,OAAA,CAAQ,QAAQ,CAAA,GAAI,MAAA;IAC1B;EACF;EAED,cAAA,CAAA,EAAiB;IACf,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,IAAA,CAAK,IAAA,EAAM,CAAA,EAAA,EAAK,IAAI,EAAE,IAAA,CAAK,YAAA,GAAgB,CAAA,IAAK,CAAA,CAAA,EAAK,OAAO,CAAA;IAEhF,OAAO,CAAA,CAAA;EACR;EAED,UAAA,CAAW,QAAA,EAAU,GAAA,EAAK;IACxB,MAAM,OAAA,GAAU,IAAA,CAAK,cAAA,CAAe,QAAQ,CAAA;IAC5C,OAAA,IAAW,OAAA,CAAQ,GAAG,CAAA;IAEtB,IAAI,IAAA,CAAK,KAAA,CAAM,MAAA,EAAQ;MACrB,MAAM;QAAE,OAAA,EAAA,QAAA;QAAS,GAAA,EAAA,IAAA;QAAK;MAAU,CAAA,GAAG,IAAA,CAAK,KAAA,CAAM,KAAA,CAAO,CAAA;MACrD,IAAA,CAAK,cAAA,CAAe,QAAQ,CAAA,GAAIA,QAAAA;MAChC,IAAA,CAAK,OAAA,CAAQ,QAAQ,CAAA,CAAE,WAAA,CAAYC,IAAAA,EAAK,QAAQ,CAAA;IACtD,CAAA,MAAW;MACL,IAAA,CAAK,YAAA,IAAgB,CAAA,IAAK,QAAA;IAC3B;EACF;EAED,gBAAA,CAAiB,aAAA,EAAe;IAC9B,IAAA,CAAK,aAAA,GAAgB,aAAA;EACtB;EAED,cAAA,CAAe,IAAA,EAAM;IACnB,IAAA,CAAK,IAAA,GAAO,IAAA;EACb;EAED,WAAA,CAAY,GAAA,EAAK,QAAA,EAAU;IACzB,OAAO,IAAI,OAAA,CAAS,OAAA,IAAY;MAC9B,MAAM,QAAA,GAAW,IAAA,CAAK,cAAA,CAAgB,CAAA;MAEtC,IAAI,QAAA,KAAa,CAAA,CAAA,EAAI;QACnB,IAAA,CAAK,WAAA,CAAY,QAAQ,CAAA;QACzB,IAAA,CAAK,YAAA,IAAgB,CAAA,IAAK,QAAA;QAC1B,IAAA,CAAK,cAAA,CAAe,QAAQ,CAAA,GAAI,OAAA;QAChC,IAAA,CAAK,OAAA,CAAQ,QAAQ,CAAA,CAAE,WAAA,CAAY,GAAA,EAAK,QAAQ,CAAA;MACxD,CAAA,MAAa;QACL,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK;UAAE,OAAA;UAAS,GAAA;UAAK;QAAA,CAAU,CAAA;MAC3C;IACP,CAAK,CAAA;EACF;EAED,OAAA,CAAA,EAAU;IACR,IAAA,CAAK,OAAA,CAAQ,OAAA,CAAS,MAAA,IAAW,MAAA,CAAO,SAAA,CAAA,CAAW,CAAA;IACnD,IAAA,CAAK,cAAA,CAAe,MAAA,GAAS,CAAA;IAC7B,IAAA,CAAK,OAAA,CAAQ,MAAA,GAAS,CAAA;IACtB,IAAA,CAAK,KAAA,CAAM,MAAA,GAAS,CAAA;IACpB,IAAA,CAAK,YAAA,GAAe,CAAA;EACrB;AACH","sourcesContent":["/**\n * @author Deepkolos / https://github.com/deepkolos\n */\n\nexport class WorkerPool {\n  constructor(pool = 4) {\n    this.pool = pool\n    this.queue = []\n    this.workers = []\n    this.workersResolve = []\n    this.workerStatus = 0\n  }\n\n  _initWorker(workerId) {\n    if (!this.workers[workerId]) {\n      const worker = this.workerCreator()\n      worker.addEventListener('message', this._onMessage.bind(this, workerId))\n      this.workers[workerId] = worker\n    }\n  }\n\n  _getIdleWorker() {\n    for (let i = 0; i < this.pool; i++) if (!(this.workerStatus & (1 << i))) return i\n\n    return -1\n  }\n\n  _onMessage(workerId, msg) {\n    const resolve = this.workersResolve[workerId]\n    resolve && resolve(msg)\n\n    if (this.queue.length) {\n      const { resolve, msg, transfer } = this.queue.shift()\n      this.workersResolve[workerId] = resolve\n      this.workers[workerId].postMessage(msg, transfer)\n    } else {\n      this.workerStatus ^= 1 << workerId\n    }\n  }\n\n  setWorkerCreator(workerCreator) {\n    this.workerCreator = workerCreator\n  }\n\n  setWorkerLimit(pool) {\n    this.pool = pool\n  }\n\n  postMessage(msg, transfer) {\n    return new Promise((resolve) => {\n      const workerId = this._getIdleWorker()\n\n      if (workerId !== -1) {\n        this._initWorker(workerId)\n        this.workerStatus |= 1 << workerId\n        this.workersResolve[workerId] = resolve\n        this.workers[workerId].postMessage(msg, transfer)\n      } else {\n        this.queue.push({ resolve, msg, transfer })\n      }\n    })\n  }\n\n  dispose() {\n    this.workers.forEach((worker) => worker.terminate())\n    this.workersResolve.length = 0\n    this.workers.length = 0\n    this.queue.length = 0\n    this.workerStatus = 0\n  }\n}\n"]},"metadata":{},"sourceType":"module"}