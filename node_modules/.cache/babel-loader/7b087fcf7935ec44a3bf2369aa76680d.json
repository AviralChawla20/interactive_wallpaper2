{"ast":null,"code":"import { OrthographicCamera, Scene, UniformsUtils, ShaderMaterial, PlaneGeometry, Mesh, Texture, LinearFilter, MeshBasicMaterial, DoubleSide } from \"three\";\nimport { UnpackDepthRGBAShader } from \"../shaders/UnpackDepthRGBAShader.js\";\nclass ShadowMapViewer {\n  constructor(light) {\n    const scope = this;\n    const doRenderLabel = light.name !== void 0 && light.name !== \"\";\n    let userAutoClearSetting;\n    const frame = {\n      x: 10,\n      y: 10,\n      width: 256,\n      height: 256\n    };\n    const camera = new OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, 1, 10);\n    camera.position.set(0, 0, 2);\n    const scene = new Scene();\n    const shader = UnpackDepthRGBAShader;\n    const uniforms = UniformsUtils.clone(shader.uniforms);\n    const material = new ShaderMaterial({\n      uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    const plane = new PlaneGeometry(frame.width, frame.height);\n    const mesh = new Mesh(plane, material);\n    scene.add(mesh);\n    let labelCanvas, labelMesh;\n    if (doRenderLabel) {\n      labelCanvas = document.createElement(\"canvas\");\n      const context = labelCanvas.getContext(\"2d\");\n      context.font = \"Bold 20px Arial\";\n      const labelWidth = context.measureText(light.name).width;\n      labelCanvas.width = labelWidth;\n      labelCanvas.height = 25;\n      context.font = \"Bold 20px Arial\";\n      context.fillStyle = \"rgba( 255, 0, 0, 1 )\";\n      context.fillText(light.name, 0, 20);\n      const labelTexture = new Texture(labelCanvas);\n      labelTexture.magFilter = LinearFilter;\n      labelTexture.minFilter = LinearFilter;\n      labelTexture.needsUpdate = true;\n      const labelMaterial = new MeshBasicMaterial({\n        map: labelTexture,\n        side: DoubleSide\n      });\n      labelMaterial.transparent = true;\n      const labelPlane = new PlaneGeometry(labelCanvas.width, labelCanvas.height);\n      labelMesh = new Mesh(labelPlane, labelMaterial);\n      scene.add(labelMesh);\n    }\n    function resetPosition() {\n      scope.position.set(scope.position.x, scope.position.y);\n    }\n    this.enabled = true;\n    this.size = {\n      width: frame.width,\n      height: frame.height,\n      set: function (width, height) {\n        this.width = width;\n        this.height = height;\n        mesh.scale.set(this.width / frame.width, this.height / frame.height, 1);\n        resetPosition();\n      }\n    };\n    this.position = {\n      x: frame.x,\n      y: frame.y,\n      set: function (x, y) {\n        this.x = x;\n        this.y = y;\n        const width = scope.size.width;\n        const height = scope.size.height;\n        mesh.position.set(-window.innerWidth / 2 + width / 2 + this.x, window.innerHeight / 2 - height / 2 - this.y, 0);\n        if (doRenderLabel) labelMesh.position.set(mesh.position.x, mesh.position.y - scope.size.height / 2 + labelCanvas.height / 2, 0);\n      }\n    };\n    this.render = function (renderer) {\n      if (this.enabled) {\n        uniforms.tDiffuse.value = light.shadow.map.texture;\n        userAutoClearSetting = renderer.autoClear;\n        renderer.autoClear = false;\n        renderer.clearDepth();\n        renderer.render(scene, camera);\n        renderer.autoClear = userAutoClearSetting;\n      }\n    };\n    this.updateForWindowResize = function () {\n      if (this.enabled) {\n        camera.left = window.innerWidth / -2;\n        camera.right = window.innerWidth / 2;\n        camera.top = window.innerHeight / 2;\n        camera.bottom = window.innerHeight / -2;\n        camera.updateProjectionMatrix();\n        this.update();\n      }\n    };\n    this.update = function () {\n      this.position.set(this.position.x, this.position.y);\n      this.size.set(this.size.width, this.size.height);\n    };\n    this.update();\n  }\n}\nexport { ShadowMapViewer };","map":{"version":3,"sources":["../../src/utils/ShadowMapViewer.js"],"names":[],"mappings":"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","sourcesContent":["import {\n  DoubleSide,\n  LinearFilter,\n  Mesh,\n  MeshBasicMaterial,\n  OrthographicCamera,\n  PlaneGeometry,\n  Scene,\n  ShaderMaterial,\n  Texture,\n  UniformsUtils,\n} from 'three'\nimport { UnpackDepthRGBAShader } from '../shaders/UnpackDepthRGBAShader'\n\n/**\n * This is a helper for visualising a given light's shadow map.\n * It works for shadow casting lights: DirectionalLight and SpotLight.\n * It renders out the shadow map and displays it on a HUD.\n *\n * Example usage:\n *\t1) Import ShadowMapViewer into your app.\n *\n *\t2) Create a shadow casting light and name it optionally:\n *\t\tlet light = new DirectionalLight( 0xffffff, 1 );\n *\t\tlight.castShadow = true;\n *\t\tlight.name = 'Sun';\n *\n *\t3) Create a shadow map viewer for that light and set its size and position optionally:\n *\t\tlet shadowMapViewer = new ShadowMapViewer( light );\n *\t\tshadowMapViewer.size.set( 128, 128 );\t//width, height  default: 256, 256\n *\t\tshadowMapViewer.position.set( 10, 10 );\t//x, y in pixel\t default: 0, 0 (top left corner)\n *\n *\t4) Render the shadow map viewer in your render loop:\n *\t\tshadowMapViewer.render( renderer );\n *\n *\t5) Optionally: Update the shadow map viewer on window resize:\n *\t\tshadowMapViewer.updateForWindowResize();\n *\n *\t6) If you set the position or size members directly, you need to call shadowMapViewer.update();\n */\n\nclass ShadowMapViewer {\n  constructor(light) {\n    //- Internals\n    const scope = this\n    const doRenderLabel = light.name !== undefined && light.name !== ''\n    let userAutoClearSetting\n\n    //Holds the initial position and dimension of the HUD\n    const frame = {\n      x: 10,\n      y: 10,\n      width: 256,\n      height: 256,\n    }\n\n    const camera = new OrthographicCamera(\n      window.innerWidth / -2,\n      window.innerWidth / 2,\n      window.innerHeight / 2,\n      window.innerHeight / -2,\n      1,\n      10,\n    )\n    camera.position.set(0, 0, 2)\n    const scene = new Scene()\n\n    //HUD for shadow map\n    const shader = UnpackDepthRGBAShader\n\n    const uniforms = UniformsUtils.clone(shader.uniforms)\n    const material = new ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n    })\n    const plane = new PlaneGeometry(frame.width, frame.height)\n    const mesh = new Mesh(plane, material)\n\n    scene.add(mesh)\n\n    //Label for light's name\n    let labelCanvas, labelMesh\n\n    if (doRenderLabel) {\n      labelCanvas = document.createElement('canvas')\n\n      const context = labelCanvas.getContext('2d')\n      context.font = 'Bold 20px Arial'\n\n      const labelWidth = context.measureText(light.name).width\n      labelCanvas.width = labelWidth\n      labelCanvas.height = 25 //25 to account for g, p, etc.\n\n      context.font = 'Bold 20px Arial'\n      context.fillStyle = 'rgba( 255, 0, 0, 1 )'\n      context.fillText(light.name, 0, 20)\n\n      const labelTexture = new Texture(labelCanvas)\n      labelTexture.magFilter = LinearFilter\n      labelTexture.minFilter = LinearFilter\n      labelTexture.needsUpdate = true\n\n      const labelMaterial = new MeshBasicMaterial({ map: labelTexture, side: DoubleSide })\n      labelMaterial.transparent = true\n\n      const labelPlane = new PlaneGeometry(labelCanvas.width, labelCanvas.height)\n      labelMesh = new Mesh(labelPlane, labelMaterial)\n\n      scene.add(labelMesh)\n    }\n\n    function resetPosition() {\n      scope.position.set(scope.position.x, scope.position.y)\n    }\n\n    //- API\n    // Set to false to disable displaying this shadow map\n    this.enabled = true\n\n    // Set the size of the displayed shadow map on the HUD\n    this.size = {\n      width: frame.width,\n      height: frame.height,\n      set: function (width, height) {\n        this.width = width\n        this.height = height\n\n        mesh.scale.set(this.width / frame.width, this.height / frame.height, 1)\n\n        //Reset the position as it is off when we scale stuff\n        resetPosition()\n      },\n    }\n\n    // Set the position of the displayed shadow map on the HUD\n    this.position = {\n      x: frame.x,\n      y: frame.y,\n      set: function (x, y) {\n        this.x = x\n        this.y = y\n\n        const width = scope.size.width\n        const height = scope.size.height\n\n        mesh.position.set(-window.innerWidth / 2 + width / 2 + this.x, window.innerHeight / 2 - height / 2 - this.y, 0)\n\n        if (doRenderLabel)\n          labelMesh.position.set(mesh.position.x, mesh.position.y - scope.size.height / 2 + labelCanvas.height / 2, 0)\n      },\n    }\n\n    this.render = function (renderer) {\n      if (this.enabled) {\n        //Because a light's .shadowMap is only initialised after the first render pass\n        //we have to make sure the correct map is sent into the shader, otherwise we\n        //always end up with the scene's first added shadow casting light's shadowMap\n        //in the shader\n        //See: https://github.com/mrdoob/three.js/issues/5932\n        uniforms.tDiffuse.value = light.shadow.map.texture\n\n        userAutoClearSetting = renderer.autoClear\n        renderer.autoClear = false // To allow render overlay\n        renderer.clearDepth()\n        renderer.render(scene, camera)\n        renderer.autoClear = userAutoClearSetting //Restore user's setting\n      }\n    }\n\n    this.updateForWindowResize = function () {\n      if (this.enabled) {\n        camera.left = window.innerWidth / -2\n        camera.right = window.innerWidth / 2\n        camera.top = window.innerHeight / 2\n        camera.bottom = window.innerHeight / -2\n        camera.updateProjectionMatrix()\n\n        this.update()\n      }\n    }\n\n    this.update = function () {\n      this.position.set(this.position.x, this.position.y)\n      this.size.set(this.size.width, this.size.height)\n    }\n\n    //Force an update to set position/size\n    this.update()\n  }\n}\n\nexport { ShadowMapViewer }\n"]},"metadata":{},"sourceType":"module"}