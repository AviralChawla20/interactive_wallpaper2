{"ast":null,"code":"const {\n  CstParser,\n  Lexer,\n  createToken\n} = (() => {\n  var freeGlobal = typeof global == \"object\" && global && global.Object === Object && global;\n  const freeGlobal$1 = freeGlobal;\n  var freeSelf = typeof self == \"object\" && self && self.Object === Object && self;\n  var root = freeGlobal$1 || freeSelf || Function(\"return this\")();\n  const root$1 = root;\n  var Symbol$1 = root$1.Symbol;\n  const Symbol$2 = Symbol$1;\n  var objectProto$j = Object.prototype;\n  var hasOwnProperty$g = objectProto$j.hasOwnProperty;\n  var nativeObjectToString$1 = objectProto$j.toString;\n  var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : void 0;\n  function getRawTag(value) {\n    var isOwn = hasOwnProperty$g.call(value, symToStringTag$1),\n      tag = value[symToStringTag$1];\n    try {\n      value[symToStringTag$1] = void 0;\n      var unmasked = true;\n    } catch (e) {}\n    var result = nativeObjectToString$1.call(value);\n    if (unmasked) {\n      if (isOwn) {\n        value[symToStringTag$1] = tag;\n      } else {\n        delete value[symToStringTag$1];\n      }\n    }\n    return result;\n  }\n  var objectProto$i = Object.prototype;\n  var nativeObjectToString = objectProto$i.toString;\n  function objectToString(value) {\n    return nativeObjectToString.call(value);\n  }\n  var nullTag = \"[object Null]\",\n    undefinedTag = \"[object Undefined]\";\n  var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : void 0;\n  function baseGetTag(value) {\n    if (value == null) {\n      return value === void 0 ? undefinedTag : nullTag;\n    }\n    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n  }\n  function isObjectLike(value) {\n    return value != null && typeof value == \"object\";\n  }\n  var symbolTag$3 = \"[object Symbol]\";\n  function isSymbol(value) {\n    return typeof value == \"symbol\" || isObjectLike(value) && baseGetTag(value) == symbolTag$3;\n  }\n  function arrayMap(array, iteratee) {\n    var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n  var isArray = Array.isArray;\n  const isArray$1 = isArray;\n  var INFINITY$3 = 1 / 0;\n  var symbolProto$2 = Symbol$2 ? Symbol$2.prototype : void 0,\n    symbolToString = symbolProto$2 ? symbolProto$2.toString : void 0;\n  function baseToString(value) {\n    if (typeof value == \"string\") {\n      return value;\n    }\n    if (isArray$1(value)) {\n      return arrayMap(value, baseToString) + \"\";\n    }\n    if (isSymbol(value)) {\n      return symbolToString ? symbolToString.call(value) : \"\";\n    }\n    var result = value + \"\";\n    return result == \"0\" && 1 / value == -INFINITY$3 ? \"-0\" : result;\n  }\n  var reWhitespace = /\\s/;\n  function trimmedEndIndex(string) {\n    var index = string.length;\n    while (index-- && reWhitespace.test(string.charAt(index))) {}\n    return index;\n  }\n  var reTrimStart = /^\\s+/;\n  function baseTrim(string) {\n    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, \"\") : string;\n  }\n  function isObject(value) {\n    var type = typeof value;\n    return value != null && (type == \"object\" || type == \"function\");\n  }\n  var NAN = 0 / 0;\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n  var reIsBinary = /^0b[01]+$/i;\n  var reIsOctal = /^0o[0-7]+$/i;\n  var freeParseInt = parseInt;\n  function toNumber(value) {\n    if (typeof value == \"number\") {\n      return value;\n    }\n    if (isSymbol(value)) {\n      return NAN;\n    }\n    if (isObject(value)) {\n      var other = typeof value.valueOf == \"function\" ? value.valueOf() : value;\n      value = isObject(other) ? other + \"\" : other;\n    }\n    if (typeof value != \"string\") {\n      return value === 0 ? value : +value;\n    }\n    value = baseTrim(value);\n    var isBinary = reIsBinary.test(value);\n    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n  }\n  var INFINITY$2 = 1 / 0,\n    MAX_INTEGER = 17976931348623157e292;\n  function toFinite(value) {\n    if (!value) {\n      return value === 0 ? value : 0;\n    }\n    value = toNumber(value);\n    if (value === INFINITY$2 || value === -INFINITY$2) {\n      var sign = value < 0 ? -1 : 1;\n      return sign * MAX_INTEGER;\n    }\n    return value === value ? value : 0;\n  }\n  function toInteger(value) {\n    var result = toFinite(value),\n      remainder = result % 1;\n    return result === result ? remainder ? result - remainder : result : 0;\n  }\n  function identity(value) {\n    return value;\n  }\n  var asyncTag = \"[object AsyncFunction]\",\n    funcTag$2 = \"[object Function]\",\n    genTag$1 = \"[object GeneratorFunction]\",\n    proxyTag = \"[object Proxy]\";\n  function isFunction(value) {\n    if (!isObject(value)) {\n      return false;\n    }\n    var tag = baseGetTag(value);\n    return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;\n  }\n  var coreJsData = root$1[\"__core-js_shared__\"];\n  const coreJsData$1 = coreJsData;\n  var maskSrcKey = function () {\n    var uid = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || \"\");\n    return uid ? \"Symbol(src)_1.\" + uid : \"\";\n  }();\n  function isMasked(func) {\n    return !!maskSrcKey && maskSrcKey in func;\n  }\n  var funcProto$1 = Function.prototype;\n  var funcToString$1 = funcProto$1.toString;\n  function toSource(func) {\n    if (func != null) {\n      try {\n        return funcToString$1.call(func);\n      } catch (e) {}\n      try {\n        return func + \"\";\n      } catch (e) {}\n    }\n    return \"\";\n  }\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n  var funcProto = Function.prototype,\n    objectProto$h = Object.prototype;\n  var funcToString = funcProto.toString;\n  var hasOwnProperty$f = objectProto$h.hasOwnProperty;\n  var reIsNative = RegExp(\"^\" + funcToString.call(hasOwnProperty$f).replace(reRegExpChar, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\");\n  function baseIsNative(value) {\n    if (!isObject(value) || isMasked(value)) {\n      return false;\n    }\n    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n    return pattern.test(toSource(value));\n  }\n  function getValue(object, key) {\n    return object == null ? void 0 : object[key];\n  }\n  function getNative(object, key) {\n    var value = getValue(object, key);\n    return baseIsNative(value) ? value : void 0;\n  }\n  var WeakMap = getNative(root$1, \"WeakMap\");\n  const WeakMap$1 = WeakMap;\n  var objectCreate = Object.create;\n  var baseCreate = function () {\n    function object() {}\n    return function (proto) {\n      if (!isObject(proto)) {\n        return {};\n      }\n      if (objectCreate) {\n        return objectCreate(proto);\n      }\n      object.prototype = proto;\n      var result = new object();\n      object.prototype = void 0;\n      return result;\n    };\n  }();\n  const baseCreate$1 = baseCreate;\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0:\n        return func.call(thisArg);\n      case 1:\n        return func.call(thisArg, args[0]);\n      case 2:\n        return func.call(thisArg, args[0], args[1]);\n      case 3:\n        return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n  function noop() {}\n  function copyArray(source, array) {\n    var index = -1,\n      length = source.length;\n    array || (array = Array(length));\n    while (++index < length) {\n      array[index] = source[index];\n    }\n    return array;\n  }\n  var HOT_COUNT = 800,\n    HOT_SPAN = 16;\n  var nativeNow = Date.now;\n  function shortOut(func) {\n    var count = 0,\n      lastCalled = 0;\n    return function () {\n      var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n      lastCalled = stamp;\n      if (remaining > 0) {\n        if (++count >= HOT_COUNT) {\n          return arguments[0];\n        }\n      } else {\n        count = 0;\n      }\n      return func.apply(void 0, arguments);\n    };\n  }\n  function constant(value) {\n    return function () {\n      return value;\n    };\n  }\n  var defineProperty = function () {\n    try {\n      var func = getNative(Object, \"defineProperty\");\n      func({}, \"\", {});\n      return func;\n    } catch (e) {}\n  }();\n  const defineProperty$1 = defineProperty;\n  var baseSetToString = !defineProperty$1 ? identity : function (func, string) {\n    return defineProperty$1(func, \"toString\", {\n      configurable: true,\n      enumerable: false,\n      value: constant(string),\n      writable: true\n    });\n  };\n  const baseSetToString$1 = baseSetToString;\n  var setToString = shortOut(baseSetToString$1);\n  const setToString$1 = setToString;\n  function arrayEach(array, iteratee) {\n    var index = -1,\n      length = array == null ? 0 : array.length;\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n    while (fromRight ? index-- : ++index < length) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n      length = array.length;\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n  var MAX_SAFE_INTEGER$1 = 9007199254740991;\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n  function isIndex(value, length) {\n    var type = typeof value;\n    length = length == null ? MAX_SAFE_INTEGER$1 : length;\n    return !!length && (type == \"number\" || type != \"symbol\" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n  }\n  function baseAssignValue(object, key, value) {\n    if (key == \"__proto__\" && defineProperty$1) {\n      defineProperty$1(object, key, {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      });\n    } else {\n      object[key] = value;\n    }\n  }\n  function eq(value, other) {\n    return value === other || value !== value && other !== other;\n  }\n  var objectProto$g = Object.prototype;\n  var hasOwnProperty$e = objectProto$g.hasOwnProperty;\n  function assignValue(object, key, value) {\n    var objValue = object[key];\n    if (!(hasOwnProperty$e.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {\n      baseAssignValue(object, key, value);\n    }\n  }\n  function copyObject(source, props, object, customizer) {\n    var isNew = !object;\n    object || (object = {});\n    var index = -1,\n      length = props.length;\n    while (++index < length) {\n      var key = props[index];\n      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;\n      if (newValue === void 0) {\n        newValue = source[key];\n      }\n      if (isNew) {\n        baseAssignValue(object, key, newValue);\n      } else {\n        assignValue(object, key, newValue);\n      }\n    }\n    return object;\n  }\n  var nativeMax$3 = Math.max;\n  function overRest(func, start, transform) {\n    start = nativeMax$3(start === void 0 ? func.length - 1 : start, 0);\n    return function () {\n      var args = arguments,\n        index = -1,\n        length = nativeMax$3(args.length - start, 0),\n        array = Array(length);\n      while (++index < length) {\n        array[index] = args[start + index];\n      }\n      index = -1;\n      var otherArgs = Array(start + 1);\n      while (++index < start) {\n        otherArgs[index] = args[index];\n      }\n      otherArgs[start] = transform(array);\n      return apply(func, this, otherArgs);\n    };\n  }\n  function baseRest(func, start) {\n    return setToString$1(overRest(func, start, identity), func + \"\");\n  }\n  var MAX_SAFE_INTEGER = 9007199254740991;\n  function isLength(value) {\n    return typeof value == \"number\" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n  function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n  }\n  function isIterateeCall(value, index, object) {\n    if (!isObject(object)) {\n      return false;\n    }\n    var type = typeof index;\n    if (type == \"number\" ? isArrayLike(object) && isIndex(index, object.length) : type == \"string\" && index in object) {\n      return eq(object[index], value);\n    }\n    return false;\n  }\n  function createAssigner(assigner) {\n    return baseRest(function (object, sources) {\n      var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : void 0,\n        guard = length > 2 ? sources[2] : void 0;\n      customizer = assigner.length > 3 && typeof customizer == \"function\" ? (length--, customizer) : void 0;\n      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n        customizer = length < 3 ? void 0 : customizer;\n        length = 1;\n      }\n      object = Object(object);\n      while (++index < length) {\n        var source = sources[index];\n        if (source) {\n          assigner(object, source, index, customizer);\n        }\n      }\n      return object;\n    });\n  }\n  var objectProto$f = Object.prototype;\n  function isPrototype(value) {\n    var Ctor = value && value.constructor,\n      proto = typeof Ctor == \"function\" && Ctor.prototype || objectProto$f;\n    return value === proto;\n  }\n  function baseTimes(n, iteratee) {\n    var index = -1,\n      result = Array(n);\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n  var argsTag$3 = \"[object Arguments]\";\n  function baseIsArguments(value) {\n    return isObjectLike(value) && baseGetTag(value) == argsTag$3;\n  }\n  var objectProto$e = Object.prototype;\n  var hasOwnProperty$d = objectProto$e.hasOwnProperty;\n  var propertyIsEnumerable$1 = objectProto$e.propertyIsEnumerable;\n  var isArguments = baseIsArguments(function () {\n    return arguments;\n  }()) ? baseIsArguments : function (value) {\n    return isObjectLike(value) && hasOwnProperty$d.call(value, \"callee\") && !propertyIsEnumerable$1.call(value, \"callee\");\n  };\n  const isArguments$1 = isArguments;\n  function stubFalse() {\n    return false;\n  }\n  var freeExports$2 = typeof exports == \"object\" && exports && !exports.nodeType && exports;\n  var freeModule$2 = freeExports$2 && typeof module == \"object\" && module && !module.nodeType && module;\n  var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;\n  var Buffer$1 = moduleExports$2 ? root$1.Buffer : void 0;\n  var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : void 0;\n  var isBuffer = nativeIsBuffer || stubFalse;\n  const isBuffer$1 = isBuffer;\n  var argsTag$2 = \"[object Arguments]\",\n    arrayTag$2 = \"[object Array]\",\n    boolTag$3 = \"[object Boolean]\",\n    dateTag$3 = \"[object Date]\",\n    errorTag$2 = \"[object Error]\",\n    funcTag$1 = \"[object Function]\",\n    mapTag$6 = \"[object Map]\",\n    numberTag$3 = \"[object Number]\",\n    objectTag$3 = \"[object Object]\",\n    regexpTag$4 = \"[object RegExp]\",\n    setTag$6 = \"[object Set]\",\n    stringTag$4 = \"[object String]\",\n    weakMapTag$2 = \"[object WeakMap]\";\n  var arrayBufferTag$3 = \"[object ArrayBuffer]\",\n    dataViewTag$4 = \"[object DataView]\",\n    float32Tag$2 = \"[object Float32Array]\",\n    float64Tag$2 = \"[object Float64Array]\",\n    int8Tag$2 = \"[object Int8Array]\",\n    int16Tag$2 = \"[object Int16Array]\",\n    int32Tag$2 = \"[object Int32Array]\",\n    uint8Tag$2 = \"[object Uint8Array]\",\n    uint8ClampedTag$2 = \"[object Uint8ClampedArray]\",\n    uint16Tag$2 = \"[object Uint16Array]\",\n    uint32Tag$2 = \"[object Uint32Array]\";\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;\n  typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$6] = typedArrayTags[numberTag$3] = typedArrayTags[objectTag$3] = typedArrayTags[regexpTag$4] = typedArrayTags[setTag$6] = typedArrayTags[stringTag$4] = typedArrayTags[weakMapTag$2] = false;\n  function baseIsTypedArray(value) {\n    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n  }\n  function baseUnary(func) {\n    return function (value) {\n      return func(value);\n    };\n  }\n  var freeExports$1 = typeof exports == \"object\" && exports && !exports.nodeType && exports;\n  var freeModule$1 = freeExports$1 && typeof module == \"object\" && module && !module.nodeType && module;\n  var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;\n  var freeProcess = moduleExports$1 && freeGlobal$1.process;\n  var nodeUtil = function () {\n    try {\n      var types = freeModule$1 && freeModule$1.require && freeModule$1.require(\"util\").types;\n      if (types) {\n        return types;\n      }\n      return freeProcess && freeProcess.binding && freeProcess.binding(\"util\");\n    } catch (e) {}\n  }();\n  const nodeUtil$1 = nodeUtil;\n  var nodeIsTypedArray = nodeUtil$1 && nodeUtil$1.isTypedArray;\n  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n  const isTypedArray$1 = isTypedArray;\n  var objectProto$d = Object.prototype;\n  var hasOwnProperty$c = objectProto$d.hasOwnProperty;\n  function arrayLikeKeys(value, inherited) {\n    var isArr = isArray$1(value),\n      isArg = !isArr && isArguments$1(value),\n      isBuff = !isArr && !isArg && isBuffer$1(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray$1(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n    for (var key in value) {\n      if ((inherited || hasOwnProperty$c.call(value, key)) && !(skipIndexes && (\n      // Safari 9 has enumerable `arguments.length` in strict mode.\n      key == \"length\" ||\n      // Node.js 0.10 has enumerable non-index properties on buffers.\n      isBuff && (key == \"offset\" || key == \"parent\") ||\n      // PhantomJS 2 has enumerable non-index properties on typed arrays.\n      isType && (key == \"buffer\" || key == \"byteLength\" || key == \"byteOffset\") ||\n      // Skip index properties.\n      isIndex(key, length)))) {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n  function overArg(func, transform) {\n    return function (arg) {\n      return func(transform(arg));\n    };\n  }\n  var nativeKeys = overArg(Object.keys, Object);\n  const nativeKeys$1 = nativeKeys;\n  var objectProto$c = Object.prototype;\n  var hasOwnProperty$b = objectProto$c.hasOwnProperty;\n  function baseKeys(object) {\n    if (!isPrototype(object)) {\n      return nativeKeys$1(object);\n    }\n    var result = [];\n    for (var key in Object(object)) {\n      if (hasOwnProperty$b.call(object, key) && key != \"constructor\") {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n  function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n  }\n  var objectProto$b = Object.prototype;\n  var hasOwnProperty$a = objectProto$b.hasOwnProperty;\n  var assign = createAssigner(function (object, source) {\n    if (isPrototype(source) || isArrayLike(source)) {\n      copyObject(source, keys(source), object);\n      return;\n    }\n    for (var key in source) {\n      if (hasOwnProperty$a.call(source, key)) {\n        assignValue(object, key, source[key]);\n      }\n    }\n  });\n  const assign$1 = assign;\n  function nativeKeysIn(object) {\n    var result = [];\n    if (object != null) {\n      for (var key in Object(object)) {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n  var objectProto$a = Object.prototype;\n  var hasOwnProperty$9 = objectProto$a.hasOwnProperty;\n  function baseKeysIn(object) {\n    if (!isObject(object)) {\n      return nativeKeysIn(object);\n    }\n    var isProto = isPrototype(object),\n      result = [];\n    for (var key in object) {\n      if (!(key == \"constructor\" && (isProto || !hasOwnProperty$9.call(object, key)))) {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n  function keysIn(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n  }\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n  function isKey(value, object) {\n    if (isArray$1(value)) {\n      return false;\n    }\n    var type = typeof value;\n    if (type == \"number\" || type == \"symbol\" || type == \"boolean\" || value == null || isSymbol(value)) {\n      return true;\n    }\n    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);\n  }\n  var nativeCreate = getNative(Object, \"create\");\n  const nativeCreate$1 = nativeCreate;\n  function hashClear() {\n    this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};\n    this.size = 0;\n  }\n  function hashDelete(key) {\n    var result = this.has(key) && delete this.__data__[key];\n    this.size -= result ? 1 : 0;\n    return result;\n  }\n  var HASH_UNDEFINED$2 = \"__lodash_hash_undefined__\";\n  var objectProto$9 = Object.prototype;\n  var hasOwnProperty$8 = objectProto$9.hasOwnProperty;\n  function hashGet(key) {\n    var data = this.__data__;\n    if (nativeCreate$1) {\n      var result = data[key];\n      return result === HASH_UNDEFINED$2 ? void 0 : result;\n    }\n    return hasOwnProperty$8.call(data, key) ? data[key] : void 0;\n  }\n  var objectProto$8 = Object.prototype;\n  var hasOwnProperty$7 = objectProto$8.hasOwnProperty;\n  function hashHas(key) {\n    var data = this.__data__;\n    return nativeCreate$1 ? data[key] !== void 0 : hasOwnProperty$7.call(data, key);\n  }\n  var HASH_UNDEFINED$1 = \"__lodash_hash_undefined__\";\n  function hashSet(key, value) {\n    var data = this.__data__;\n    this.size += this.has(key) ? 0 : 1;\n    data[key] = nativeCreate$1 && value === void 0 ? HASH_UNDEFINED$1 : value;\n    return this;\n  }\n  function Hash(entries) {\n    var index = -1,\n      length = entries == null ? 0 : entries.length;\n    this.clear();\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  Hash.prototype.clear = hashClear;\n  Hash.prototype[\"delete\"] = hashDelete;\n  Hash.prototype.get = hashGet;\n  Hash.prototype.has = hashHas;\n  Hash.prototype.set = hashSet;\n  function listCacheClear() {\n    this.__data__ = [];\n    this.size = 0;\n  }\n  function assocIndexOf(array, key) {\n    var length = array.length;\n    while (length--) {\n      if (eq(array[length][0], key)) {\n        return length;\n      }\n    }\n    return -1;\n  }\n  var arrayProto = Array.prototype;\n  var splice = arrayProto.splice;\n  function listCacheDelete(key) {\n    var data = this.__data__,\n      index = assocIndexOf(data, key);\n    if (index < 0) {\n      return false;\n    }\n    var lastIndex = data.length - 1;\n    if (index == lastIndex) {\n      data.pop();\n    } else {\n      splice.call(data, index, 1);\n    }\n    --this.size;\n    return true;\n  }\n  function listCacheGet(key) {\n    var data = this.__data__,\n      index = assocIndexOf(data, key);\n    return index < 0 ? void 0 : data[index][1];\n  }\n  function listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1;\n  }\n  function listCacheSet(key, value) {\n    var data = this.__data__,\n      index = assocIndexOf(data, key);\n    if (index < 0) {\n      ++this.size;\n      data.push([key, value]);\n    } else {\n      data[index][1] = value;\n    }\n    return this;\n  }\n  function ListCache(entries) {\n    var index = -1,\n      length = entries == null ? 0 : entries.length;\n    this.clear();\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  ListCache.prototype.clear = listCacheClear;\n  ListCache.prototype[\"delete\"] = listCacheDelete;\n  ListCache.prototype.get = listCacheGet;\n  ListCache.prototype.has = listCacheHas;\n  ListCache.prototype.set = listCacheSet;\n  var Map$1 = getNative(root$1, \"Map\");\n  const Map$2 = Map$1;\n  function mapCacheClear() {\n    this.size = 0;\n    this.__data__ = {\n      hash: new Hash(),\n      map: new (Map$2 || ListCache)(),\n      string: new Hash()\n    };\n  }\n  function isKeyable(value) {\n    var type = typeof value;\n    return type == \"string\" || type == \"number\" || type == \"symbol\" || type == \"boolean\" ? value !== \"__proto__\" : value === null;\n  }\n  function getMapData(map2, key) {\n    var data = map2.__data__;\n    return isKeyable(key) ? data[typeof key == \"string\" ? \"string\" : \"hash\"] : data.map;\n  }\n  function mapCacheDelete(key) {\n    var result = getMapData(this, key)[\"delete\"](key);\n    this.size -= result ? 1 : 0;\n    return result;\n  }\n  function mapCacheGet(key) {\n    return getMapData(this, key).get(key);\n  }\n  function mapCacheHas(key) {\n    return getMapData(this, key).has(key);\n  }\n  function mapCacheSet(key, value) {\n    var data = getMapData(this, key),\n      size = data.size;\n    data.set(key, value);\n    this.size += data.size == size ? 0 : 1;\n    return this;\n  }\n  function MapCache(entries) {\n    var index = -1,\n      length = entries == null ? 0 : entries.length;\n    this.clear();\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  MapCache.prototype.clear = mapCacheClear;\n  MapCache.prototype[\"delete\"] = mapCacheDelete;\n  MapCache.prototype.get = mapCacheGet;\n  MapCache.prototype.has = mapCacheHas;\n  MapCache.prototype.set = mapCacheSet;\n  var FUNC_ERROR_TEXT$1 = \"Expected a function\";\n  function memoize(func, resolver) {\n    if (typeof func != \"function\" || resolver != null && typeof resolver != \"function\") {\n      throw new TypeError(FUNC_ERROR_TEXT$1);\n    }\n    var memoized = function () {\n      var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n      if (cache.has(key)) {\n        return cache.get(key);\n      }\n      var result = func.apply(this, args);\n      memoized.cache = cache.set(key, result) || cache;\n      return result;\n    };\n    memoized.cache = new (memoize.Cache || MapCache)();\n    return memoized;\n  }\n  memoize.Cache = MapCache;\n  var MAX_MEMOIZE_SIZE = 500;\n  function memoizeCapped(func) {\n    var result = memoize(func, function (key) {\n      if (cache.size === MAX_MEMOIZE_SIZE) {\n        cache.clear();\n      }\n      return key;\n    });\n    var cache = result.cache;\n    return result;\n  }\n  var rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n  var reEscapeChar = /\\\\(\\\\)?/g;\n  var stringToPath = memoizeCapped(function (string) {\n    var result = [];\n    if (string.charCodeAt(0) === 46) {\n      result.push(\"\");\n    }\n    string.replace(rePropName, function (match, number, quote, subString) {\n      result.push(quote ? subString.replace(reEscapeChar, \"$1\") : number || match);\n    });\n    return result;\n  });\n  const stringToPath$1 = stringToPath;\n  function toString(value) {\n    return value == null ? \"\" : baseToString(value);\n  }\n  function castPath(value, object) {\n    if (isArray$1(value)) {\n      return value;\n    }\n    return isKey(value, object) ? [value] : stringToPath$1(toString(value));\n  }\n  var INFINITY$1 = 1 / 0;\n  function toKey(value) {\n    if (typeof value == \"string\" || isSymbol(value)) {\n      return value;\n    }\n    var result = value + \"\";\n    return result == \"0\" && 1 / value == -INFINITY$1 ? \"-0\" : result;\n  }\n  function baseGet(object, path) {\n    path = castPath(path, object);\n    var index = 0,\n      length = path.length;\n    while (object != null && index < length) {\n      object = object[toKey(path[index++])];\n    }\n    return index && index == length ? object : void 0;\n  }\n  function get(object, path, defaultValue) {\n    var result = object == null ? void 0 : baseGet(object, path);\n    return result === void 0 ? defaultValue : result;\n  }\n  function arrayPush(array, values2) {\n    var index = -1,\n      length = values2.length,\n      offset = array.length;\n    while (++index < length) {\n      array[offset + index] = values2[index];\n    }\n    return array;\n  }\n  var spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : void 0;\n  function isFlattenable(value) {\n    return isArray$1(value) || isArguments$1(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);\n  }\n  function baseFlatten(array, depth, predicate, isStrict, result) {\n    var index = -1,\n      length = array.length;\n    predicate || (predicate = isFlattenable);\n    result || (result = []);\n    while (++index < length) {\n      var value = array[index];\n      if (depth > 0 && predicate(value)) {\n        if (depth > 1) {\n          baseFlatten(value, depth - 1, predicate, isStrict, result);\n        } else {\n          arrayPush(result, value);\n        }\n      } else if (!isStrict) {\n        result[result.length] = value;\n      }\n    }\n    return result;\n  }\n  function flatten(array) {\n    var length = array == null ? 0 : array.length;\n    return length ? baseFlatten(array, 1) : [];\n  }\n  var getPrototype = overArg(Object.getPrototypeOf, Object);\n  const getPrototype$1 = getPrototype;\n  function baseSlice(array, start, end) {\n    var index = -1,\n      length = array.length;\n    if (start < 0) {\n      start = -start > length ? 0 : length + start;\n    }\n    end = end > length ? length : end;\n    if (end < 0) {\n      end += length;\n    }\n    length = start > end ? 0 : end - start >>> 0;\n    start >>>= 0;\n    var result = Array(length);\n    while (++index < length) {\n      result[index] = array[index + start];\n    }\n    return result;\n  }\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n      length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n  function stackClear() {\n    this.__data__ = new ListCache();\n    this.size = 0;\n  }\n  function stackDelete(key) {\n    var data = this.__data__,\n      result = data[\"delete\"](key);\n    this.size = data.size;\n    return result;\n  }\n  function stackGet(key) {\n    return this.__data__.get(key);\n  }\n  function stackHas(key) {\n    return this.__data__.has(key);\n  }\n  var LARGE_ARRAY_SIZE$2 = 200;\n  function stackSet(key, value) {\n    var data = this.__data__;\n    if (data instanceof ListCache) {\n      var pairs = data.__data__;\n      if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE$2 - 1) {\n        pairs.push([key, value]);\n        this.size = ++data.size;\n        return this;\n      }\n      data = this.__data__ = new MapCache(pairs);\n    }\n    data.set(key, value);\n    this.size = data.size;\n    return this;\n  }\n  function Stack(entries) {\n    var data = this.__data__ = new ListCache(entries);\n    this.size = data.size;\n  }\n  Stack.prototype.clear = stackClear;\n  Stack.prototype[\"delete\"] = stackDelete;\n  Stack.prototype.get = stackGet;\n  Stack.prototype.has = stackHas;\n  Stack.prototype.set = stackSet;\n  function baseAssign(object, source) {\n    return object && copyObject(source, keys(source), object);\n  }\n  function baseAssignIn(object, source) {\n    return object && copyObject(source, keysIn(source), object);\n  }\n  var freeExports = typeof exports == \"object\" && exports && !exports.nodeType && exports;\n  var freeModule = freeExports && typeof module == \"object\" && module && !module.nodeType && module;\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n  var Buffer = moduleExports ? root$1.Buffer : void 0,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;\n  function cloneBuffer(buffer, isDeep) {\n    if (isDeep) {\n      return buffer.slice();\n    }\n    var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n    buffer.copy(result);\n    return result;\n  }\n  function arrayFilter(array, predicate) {\n    var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n  function stubArray() {\n    return [];\n  }\n  var objectProto$7 = Object.prototype;\n  var propertyIsEnumerable = objectProto$7.propertyIsEnumerable;\n  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;\n  var getSymbols = !nativeGetSymbols$1 ? stubArray : function (object) {\n    if (object == null) {\n      return [];\n    }\n    object = Object(object);\n    return arrayFilter(nativeGetSymbols$1(object), function (symbol) {\n      return propertyIsEnumerable.call(object, symbol);\n    });\n  };\n  const getSymbols$1 = getSymbols;\n  function copySymbols(source, object) {\n    return copyObject(source, getSymbols$1(source), object);\n  }\n  var nativeGetSymbols = Object.getOwnPropertySymbols;\n  var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {\n    var result = [];\n    while (object) {\n      arrayPush(result, getSymbols$1(object));\n      object = getPrototype$1(object);\n    }\n    return result;\n  };\n  const getSymbolsIn$1 = getSymbolsIn;\n  function copySymbolsIn(source, object) {\n    return copyObject(source, getSymbolsIn$1(source), object);\n  }\n  function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n    var result = keysFunc(object);\n    return isArray$1(object) ? result : arrayPush(result, symbolsFunc(object));\n  }\n  function getAllKeys(object) {\n    return baseGetAllKeys(object, keys, getSymbols$1);\n  }\n  function getAllKeysIn(object) {\n    return baseGetAllKeys(object, keysIn, getSymbolsIn$1);\n  }\n  var DataView = getNative(root$1, \"DataView\");\n  const DataView$1 = DataView;\n  var Promise$1 = getNative(root$1, \"Promise\");\n  const Promise$2 = Promise$1;\n  var Set = getNative(root$1, \"Set\");\n  const Set$1 = Set;\n  var mapTag$5 = \"[object Map]\",\n    objectTag$2 = \"[object Object]\",\n    promiseTag = \"[object Promise]\",\n    setTag$5 = \"[object Set]\",\n    weakMapTag$1 = \"[object WeakMap]\";\n  var dataViewTag$3 = \"[object DataView]\";\n  var dataViewCtorString = toSource(DataView$1),\n    mapCtorString = toSource(Map$2),\n    promiseCtorString = toSource(Promise$2),\n    setCtorString = toSource(Set$1),\n    weakMapCtorString = toSource(WeakMap$1);\n  var getTag = baseGetTag;\n  if (DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag$3 || Map$2 && getTag(new Map$2()) != mapTag$5 || Promise$2 && getTag(Promise$2.resolve()) != promiseTag || Set$1 && getTag(new Set$1()) != setTag$5 || WeakMap$1 && getTag(new WeakMap$1()) != weakMapTag$1) {\n    getTag = function (value) {\n      var result = baseGetTag(value),\n        Ctor = result == objectTag$2 ? value.constructor : void 0,\n        ctorString = Ctor ? toSource(Ctor) : \"\";\n      if (ctorString) {\n        switch (ctorString) {\n          case dataViewCtorString:\n            return dataViewTag$3;\n          case mapCtorString:\n            return mapTag$5;\n          case promiseCtorString:\n            return promiseTag;\n          case setCtorString:\n            return setTag$5;\n          case weakMapCtorString:\n            return weakMapTag$1;\n        }\n      }\n      return result;\n    };\n  }\n  const getTag$1 = getTag;\n  var objectProto$6 = Object.prototype;\n  var hasOwnProperty$6 = objectProto$6.hasOwnProperty;\n  function initCloneArray(array) {\n    var length = array.length,\n      result = new array.constructor(length);\n    if (length && typeof array[0] == \"string\" && hasOwnProperty$6.call(array, \"index\")) {\n      result.index = array.index;\n      result.input = array.input;\n    }\n    return result;\n  }\n  var Uint8Array = root$1.Uint8Array;\n  const Uint8Array$1 = Uint8Array;\n  function cloneArrayBuffer(arrayBuffer) {\n    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n    new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));\n    return result;\n  }\n  function cloneDataView(dataView, isDeep) {\n    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n  }\n  var reFlags = /\\w*$/;\n  function cloneRegExp(regexp) {\n    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n    result.lastIndex = regexp.lastIndex;\n    return result;\n  }\n  var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : void 0,\n    symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : void 0;\n  function cloneSymbol(symbol) {\n    return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};\n  }\n  function cloneTypedArray(typedArray, isDeep) {\n    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n  }\n  var boolTag$2 = \"[object Boolean]\",\n    dateTag$2 = \"[object Date]\",\n    mapTag$4 = \"[object Map]\",\n    numberTag$2 = \"[object Number]\",\n    regexpTag$3 = \"[object RegExp]\",\n    setTag$4 = \"[object Set]\",\n    stringTag$3 = \"[object String]\",\n    symbolTag$2 = \"[object Symbol]\";\n  var arrayBufferTag$2 = \"[object ArrayBuffer]\",\n    dataViewTag$2 = \"[object DataView]\",\n    float32Tag$1 = \"[object Float32Array]\",\n    float64Tag$1 = \"[object Float64Array]\",\n    int8Tag$1 = \"[object Int8Array]\",\n    int16Tag$1 = \"[object Int16Array]\",\n    int32Tag$1 = \"[object Int32Array]\",\n    uint8Tag$1 = \"[object Uint8Array]\",\n    uint8ClampedTag$1 = \"[object Uint8ClampedArray]\",\n    uint16Tag$1 = \"[object Uint16Array]\",\n    uint32Tag$1 = \"[object Uint32Array]\";\n  function initCloneByTag(object, tag, isDeep) {\n    var Ctor = object.constructor;\n    switch (tag) {\n      case arrayBufferTag$2:\n        return cloneArrayBuffer(object);\n      case boolTag$2:\n      case dateTag$2:\n        return new Ctor(+object);\n      case dataViewTag$2:\n        return cloneDataView(object, isDeep);\n      case float32Tag$1:\n      case float64Tag$1:\n      case int8Tag$1:\n      case int16Tag$1:\n      case int32Tag$1:\n      case uint8Tag$1:\n      case uint8ClampedTag$1:\n      case uint16Tag$1:\n      case uint32Tag$1:\n        return cloneTypedArray(object, isDeep);\n      case mapTag$4:\n        return new Ctor();\n      case numberTag$2:\n      case stringTag$3:\n        return new Ctor(object);\n      case regexpTag$3:\n        return cloneRegExp(object);\n      case setTag$4:\n        return new Ctor();\n      case symbolTag$2:\n        return cloneSymbol(object);\n    }\n  }\n  function initCloneObject(object) {\n    return typeof object.constructor == \"function\" && !isPrototype(object) ? baseCreate$1(getPrototype$1(object)) : {};\n  }\n  var mapTag$3 = \"[object Map]\";\n  function baseIsMap(value) {\n    return isObjectLike(value) && getTag$1(value) == mapTag$3;\n  }\n  var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;\n  var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n  const isMap$1 = isMap;\n  var setTag$3 = \"[object Set]\";\n  function baseIsSet(value) {\n    return isObjectLike(value) && getTag$1(value) == setTag$3;\n  }\n  var nodeIsSet = nodeUtil$1 && nodeUtil$1.isSet;\n  var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n  const isSet$1 = isSet;\n  var CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG$1 = 4;\n  var argsTag$1 = \"[object Arguments]\",\n    arrayTag$1 = \"[object Array]\",\n    boolTag$1 = \"[object Boolean]\",\n    dateTag$1 = \"[object Date]\",\n    errorTag$1 = \"[object Error]\",\n    funcTag = \"[object Function]\",\n    genTag = \"[object GeneratorFunction]\",\n    mapTag$2 = \"[object Map]\",\n    numberTag$1 = \"[object Number]\",\n    objectTag$1 = \"[object Object]\",\n    regexpTag$2 = \"[object RegExp]\",\n    setTag$2 = \"[object Set]\",\n    stringTag$2 = \"[object String]\",\n    symbolTag$1 = \"[object Symbol]\",\n    weakMapTag = \"[object WeakMap]\";\n  var arrayBufferTag$1 = \"[object ArrayBuffer]\",\n    dataViewTag$1 = \"[object DataView]\",\n    float32Tag = \"[object Float32Array]\",\n    float64Tag = \"[object Float64Array]\",\n    int8Tag = \"[object Int8Array]\",\n    int16Tag = \"[object Int16Array]\",\n    int32Tag = \"[object Int32Array]\",\n    uint8Tag = \"[object Uint8Array]\",\n    uint8ClampedTag = \"[object Uint8ClampedArray]\",\n    uint16Tag = \"[object Uint16Array]\",\n    uint32Tag = \"[object Uint32Array]\";\n  var cloneableTags = {};\n  cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$1] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$2] = cloneableTags[numberTag$1] = cloneableTags[objectTag$1] = cloneableTags[regexpTag$2] = cloneableTags[setTag$2] = cloneableTags[stringTag$2] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag$1] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;\n  function baseClone(value, bitmask, customizer, key, object, stack) {\n    var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG$1;\n    if (customizer) {\n      result = object ? customizer(value, key, object, stack) : customizer(value);\n    }\n    if (result !== void 0) {\n      return result;\n    }\n    if (!isObject(value)) {\n      return value;\n    }\n    var isArr = isArray$1(value);\n    if (isArr) {\n      result = initCloneArray(value);\n      if (!isDeep) {\n        return copyArray(value, result);\n      }\n    } else {\n      var tag = getTag$1(value),\n        isFunc = tag == funcTag || tag == genTag;\n      if (isBuffer$1(value)) {\n        return cloneBuffer(value, isDeep);\n      }\n      if (tag == objectTag$1 || tag == argsTag$1 || isFunc && !object) {\n        result = isFlat || isFunc ? {} : initCloneObject(value);\n        if (!isDeep) {\n          return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));\n        }\n      } else {\n        if (!cloneableTags[tag]) {\n          return object ? value : {};\n        }\n        result = initCloneByTag(value, tag, isDeep);\n      }\n    }\n    stack || (stack = new Stack());\n    var stacked = stack.get(value);\n    if (stacked) {\n      return stacked;\n    }\n    stack.set(value, result);\n    if (isSet$1(value)) {\n      value.forEach(function (subValue) {\n        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n      });\n    } else if (isMap$1(value)) {\n      value.forEach(function (subValue, key2) {\n        result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));\n      });\n    }\n    var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;\n    var props = isArr ? void 0 : keysFunc(value);\n    arrayEach(props || value, function (subValue, key2) {\n      if (props) {\n        key2 = subValue;\n        subValue = value[key2];\n      }\n      assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));\n    });\n    return result;\n  }\n  var CLONE_SYMBOLS_FLAG = 4;\n  function clone(value) {\n    return baseClone(value, CLONE_SYMBOLS_FLAG);\n  }\n  function compact(array) {\n    var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n    while (++index < length) {\n      var value = array[index];\n      if (value) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n  var HASH_UNDEFINED = \"__lodash_hash_undefined__\";\n  function setCacheAdd(value) {\n    this.__data__.set(value, HASH_UNDEFINED);\n    return this;\n  }\n  function setCacheHas(value) {\n    return this.__data__.has(value);\n  }\n  function SetCache(values2) {\n    var index = -1,\n      length = values2 == null ? 0 : values2.length;\n    this.__data__ = new MapCache();\n    while (++index < length) {\n      this.add(values2[index]);\n    }\n  }\n  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n  SetCache.prototype.has = setCacheHas;\n  function arraySome(array, predicate) {\n    var index = -1,\n      length = array == null ? 0 : array.length;\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n  var COMPARE_PARTIAL_FLAG$5 = 1,\n    COMPARE_UNORDERED_FLAG$3 = 2;\n  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,\n      arrLength = array.length,\n      othLength = other.length;\n    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n      return false;\n    }\n    var arrStacked = stack.get(array);\n    var othStacked = stack.get(other);\n    if (arrStacked && othStacked) {\n      return arrStacked == other && othStacked == array;\n    }\n    var index = -1,\n      result = true,\n      seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache() : void 0;\n    stack.set(array, other);\n    stack.set(other, array);\n    while (++index < arrLength) {\n      var arrValue = array[index],\n        othValue = other[index];\n      if (customizer) {\n        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n      }\n      if (compared !== void 0) {\n        if (compared) {\n          continue;\n        }\n        result = false;\n        break;\n      }\n      if (seen) {\n        if (!arraySome(other, function (othValue2, othIndex) {\n          if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {\n            return seen.push(othIndex);\n          }\n        })) {\n          result = false;\n          break;\n        }\n      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n        result = false;\n        break;\n      }\n    }\n    stack[\"delete\"](array);\n    stack[\"delete\"](other);\n    return result;\n  }\n  function mapToArray(map2) {\n    var index = -1,\n      result = Array(map2.size);\n    map2.forEach(function (value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n  function setToArray(set) {\n    var index = -1,\n      result = Array(set.size);\n    set.forEach(function (value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n  var COMPARE_PARTIAL_FLAG$4 = 1,\n    COMPARE_UNORDERED_FLAG$2 = 2;\n  var boolTag = \"[object Boolean]\",\n    dateTag = \"[object Date]\",\n    errorTag = \"[object Error]\",\n    mapTag$1 = \"[object Map]\",\n    numberTag = \"[object Number]\",\n    regexpTag$1 = \"[object RegExp]\",\n    setTag$1 = \"[object Set]\",\n    stringTag$1 = \"[object String]\",\n    symbolTag = \"[object Symbol]\";\n  var arrayBufferTag = \"[object ArrayBuffer]\",\n    dataViewTag = \"[object DataView]\";\n  var symbolProto = Symbol$2 ? Symbol$2.prototype : void 0,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;\n  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n    switch (tag) {\n      case dataViewTag:\n        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {\n          return false;\n        }\n        object = object.buffer;\n        other = other.buffer;\n      case arrayBufferTag:\n        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {\n          return false;\n        }\n        return true;\n      case boolTag:\n      case dateTag:\n      case numberTag:\n        return eq(+object, +other);\n      case errorTag:\n        return object.name == other.name && object.message == other.message;\n      case regexpTag$1:\n      case stringTag$1:\n        return object == other + \"\";\n      case mapTag$1:\n        var convert = mapToArray;\n      case setTag$1:\n        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;\n        convert || (convert = setToArray);\n        if (object.size != other.size && !isPartial) {\n          return false;\n        }\n        var stacked = stack.get(object);\n        if (stacked) {\n          return stacked == other;\n        }\n        bitmask |= COMPARE_UNORDERED_FLAG$2;\n        stack.set(object, other);\n        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n        stack[\"delete\"](object);\n        return result;\n      case symbolTag:\n        if (symbolValueOf) {\n          return symbolValueOf.call(object) == symbolValueOf.call(other);\n        }\n    }\n    return false;\n  }\n  var COMPARE_PARTIAL_FLAG$3 = 1;\n  var objectProto$5 = Object.prototype;\n  var hasOwnProperty$5 = objectProto$5.hasOwnProperty;\n  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n    if (objLength != othLength && !isPartial) {\n      return false;\n    }\n    var index = objLength;\n    while (index--) {\n      var key = objProps[index];\n      if (!(isPartial ? key in other : hasOwnProperty$5.call(other, key))) {\n        return false;\n      }\n    }\n    var objStacked = stack.get(object);\n    var othStacked = stack.get(other);\n    if (objStacked && othStacked) {\n      return objStacked == other && othStacked == object;\n    }\n    var result = true;\n    stack.set(object, other);\n    stack.set(other, object);\n    var skipCtor = isPartial;\n    while (++index < objLength) {\n      key = objProps[index];\n      var objValue = object[key],\n        othValue = other[key];\n      if (customizer) {\n        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n      }\n      if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n        result = false;\n        break;\n      }\n      skipCtor || (skipCtor = key == \"constructor\");\n    }\n    if (result && !skipCtor) {\n      var objCtor = object.constructor,\n        othCtor = other.constructor;\n      if (objCtor != othCtor && \"constructor\" in object && \"constructor\" in other && !(typeof objCtor == \"function\" && objCtor instanceof objCtor && typeof othCtor == \"function\" && othCtor instanceof othCtor)) {\n        result = false;\n      }\n    }\n    stack[\"delete\"](object);\n    stack[\"delete\"](other);\n    return result;\n  }\n  var COMPARE_PARTIAL_FLAG$2 = 1;\n  var argsTag = \"[object Arguments]\",\n    arrayTag = \"[object Array]\",\n    objectTag = \"[object Object]\";\n  var objectProto$4 = Object.prototype;\n  var hasOwnProperty$4 = objectProto$4.hasOwnProperty;\n  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n    var objIsArr = isArray$1(object),\n      othIsArr = isArray$1(other),\n      objTag = objIsArr ? arrayTag : getTag$1(object),\n      othTag = othIsArr ? arrayTag : getTag$1(other);\n    objTag = objTag == argsTag ? objectTag : objTag;\n    othTag = othTag == argsTag ? objectTag : othTag;\n    var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n    if (isSameTag && isBuffer$1(object)) {\n      if (!isBuffer$1(other)) {\n        return false;\n      }\n      objIsArr = true;\n      objIsObj = false;\n    }\n    if (isSameTag && !objIsObj) {\n      stack || (stack = new Stack());\n      return objIsArr || isTypedArray$1(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n    }\n    if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {\n      var objIsWrapped = objIsObj && hasOwnProperty$4.call(object, \"__wrapped__\"),\n        othIsWrapped = othIsObj && hasOwnProperty$4.call(other, \"__wrapped__\");\n      if (objIsWrapped || othIsWrapped) {\n        var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n        stack || (stack = new Stack());\n        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n      }\n    }\n    if (!isSameTag) {\n      return false;\n    }\n    stack || (stack = new Stack());\n    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n  }\n  function baseIsEqual(value, other, bitmask, customizer, stack) {\n    if (value === other) {\n      return true;\n    }\n    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {\n      return value !== value && other !== other;\n    }\n    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n  }\n  var COMPARE_PARTIAL_FLAG$1 = 1,\n    COMPARE_UNORDERED_FLAG$1 = 2;\n  function baseIsMatch(object, source, matchData, customizer) {\n    var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n    if (object == null) {\n      return !length;\n    }\n    object = Object(object);\n    while (index--) {\n      var data = matchData[index];\n      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {\n        return false;\n      }\n    }\n    while (++index < length) {\n      data = matchData[index];\n      var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n      if (noCustomizer && data[2]) {\n        if (objValue === void 0 && !(key in object)) {\n          return false;\n        }\n      } else {\n        var stack = new Stack();\n        if (customizer) {\n          var result = customizer(objValue, srcValue, key, object, source, stack);\n        }\n        if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function isStrictComparable(value) {\n    return value === value && !isObject(value);\n  }\n  function getMatchData(object) {\n    var result = keys(object),\n      length = result.length;\n    while (length--) {\n      var key = result[length],\n        value = object[key];\n      result[length] = [key, value, isStrictComparable(value)];\n    }\n    return result;\n  }\n  function matchesStrictComparable(key, srcValue) {\n    return function (object) {\n      if (object == null) {\n        return false;\n      }\n      return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));\n    };\n  }\n  function baseMatches(source) {\n    var matchData = getMatchData(source);\n    if (matchData.length == 1 && matchData[0][2]) {\n      return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n    }\n    return function (object) {\n      return object === source || baseIsMatch(object, source, matchData);\n    };\n  }\n  function baseHasIn(object, key) {\n    return object != null && key in Object(object);\n  }\n  function hasPath(object, path, hasFunc) {\n    path = castPath(path, object);\n    var index = -1,\n      length = path.length,\n      result = false;\n    while (++index < length) {\n      var key = toKey(path[index]);\n      if (!(result = object != null && hasFunc(object, key))) {\n        break;\n      }\n      object = object[key];\n    }\n    if (result || ++index != length) {\n      return result;\n    }\n    length = object == null ? 0 : object.length;\n    return !!length && isLength(length) && isIndex(key, length) && (isArray$1(object) || isArguments$1(object));\n  }\n  function hasIn(object, path) {\n    return object != null && hasPath(object, path, baseHasIn);\n  }\n  var COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n  function baseMatchesProperty(path, srcValue) {\n    if (isKey(path) && isStrictComparable(srcValue)) {\n      return matchesStrictComparable(toKey(path), srcValue);\n    }\n    return function (object) {\n      var objValue = get(object, path);\n      return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n    };\n  }\n  function baseProperty(key) {\n    return function (object) {\n      return object == null ? void 0 : object[key];\n    };\n  }\n  function basePropertyDeep(path) {\n    return function (object) {\n      return baseGet(object, path);\n    };\n  }\n  function property(path) {\n    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n  }\n  function baseIteratee(value) {\n    if (typeof value == \"function\") {\n      return value;\n    }\n    if (value == null) {\n      return identity;\n    }\n    if (typeof value == \"object\") {\n      return isArray$1(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);\n    }\n    return property(value);\n  }\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n      length = array == null ? 0 : array.length;\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n  function createBaseFor(fromRight) {\n    return function (object, iteratee, keysFunc) {\n      var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n      while (length--) {\n        var key = props[fromRight ? length : ++index];\n        if (iteratee(iterable[key], key, iterable) === false) {\n          break;\n        }\n      }\n      return object;\n    };\n  }\n  var baseFor = createBaseFor();\n  const baseFor$1 = baseFor;\n  function baseForOwn(object, iteratee) {\n    return object && baseFor$1(object, iteratee, keys);\n  }\n  function createBaseEach(eachFunc, fromRight) {\n    return function (collection, iteratee) {\n      if (collection == null) {\n        return collection;\n      }\n      if (!isArrayLike(collection)) {\n        return eachFunc(collection, iteratee);\n      }\n      var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n      while (fromRight ? index-- : ++index < length) {\n        if (iteratee(iterable[index], index, iterable) === false) {\n          break;\n        }\n      }\n      return collection;\n    };\n  }\n  var baseEach = createBaseEach(baseForOwn);\n  const baseEach$1 = baseEach;\n  function baseAggregator(collection, setter, iteratee, accumulator) {\n    baseEach$1(collection, function (value, key, collection2) {\n      setter(accumulator, value, iteratee(value), collection2);\n    });\n    return accumulator;\n  }\n  function createAggregator(setter, initializer) {\n    return function (collection, iteratee) {\n      var func = isArray$1(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n      return func(collection, setter, baseIteratee(iteratee), accumulator);\n    };\n  }\n  var objectProto$3 = Object.prototype;\n  var hasOwnProperty$3 = objectProto$3.hasOwnProperty;\n  var defaults = baseRest(function (object, sources) {\n    object = Object(object);\n    var index = -1;\n    var length = sources.length;\n    var guard = length > 2 ? sources[2] : void 0;\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      length = 1;\n    }\n    while (++index < length) {\n      var source = sources[index];\n      var props = keysIn(source);\n      var propsIndex = -1;\n      var propsLength = props.length;\n      while (++propsIndex < propsLength) {\n        var key = props[propsIndex];\n        var value = object[key];\n        if (value === void 0 || eq(value, objectProto$3[key]) && !hasOwnProperty$3.call(object, key)) {\n          object[key] = source[key];\n        }\n      }\n    }\n    return object;\n  });\n  const defaults$1 = defaults;\n  function isArrayLikeObject(value) {\n    return isObjectLike(value) && isArrayLike(value);\n  }\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n      length = array == null ? 0 : array.length;\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n  var LARGE_ARRAY_SIZE$1 = 200;\n  function baseDifference(array, values2, iteratee, comparator) {\n    var index = -1,\n      includes2 = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values2.length;\n    if (!length) {\n      return result;\n    }\n    if (iteratee) {\n      values2 = arrayMap(values2, baseUnary(iteratee));\n    }\n    if (comparator) {\n      includes2 = arrayIncludesWith;\n      isCommon = false;\n    } else if (values2.length >= LARGE_ARRAY_SIZE$1) {\n      includes2 = cacheHas;\n      isCommon = false;\n      values2 = new SetCache(values2);\n    }\n    outer: while (++index < length) {\n      var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n      value = comparator || value !== 0 ? value : 0;\n      if (isCommon && computed === computed) {\n        var valuesIndex = valuesLength;\n        while (valuesIndex--) {\n          if (values2[valuesIndex] === computed) {\n            continue outer;\n          }\n        }\n        result.push(value);\n      } else if (!includes2(values2, computed, comparator)) {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n  var difference = baseRest(function (array, values2) {\n    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];\n  });\n  const difference$1 = difference;\n  function last(array) {\n    var length = array == null ? 0 : array.length;\n    return length ? array[length - 1] : void 0;\n  }\n  function drop(array, n, guard) {\n    var length = array == null ? 0 : array.length;\n    if (!length) {\n      return [];\n    }\n    n = guard || n === void 0 ? 1 : toInteger(n);\n    return baseSlice(array, n < 0 ? 0 : n, length);\n  }\n  function dropRight(array, n, guard) {\n    var length = array == null ? 0 : array.length;\n    if (!length) {\n      return [];\n    }\n    n = guard || n === void 0 ? 1 : toInteger(n);\n    n = length - n;\n    return baseSlice(array, 0, n < 0 ? 0 : n);\n  }\n  function castFunction(value) {\n    return typeof value == \"function\" ? value : identity;\n  }\n  function forEach(collection, iteratee) {\n    var func = isArray$1(collection) ? arrayEach : baseEach$1;\n    return func(collection, castFunction(iteratee));\n  }\n  function arrayEvery(array, predicate) {\n    var index = -1,\n      length = array == null ? 0 : array.length;\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function baseEvery(collection, predicate) {\n    var result = true;\n    baseEach$1(collection, function (value, index, collection2) {\n      result = !!predicate(value, index, collection2);\n      return result;\n    });\n    return result;\n  }\n  function every(collection, predicate, guard) {\n    var func = isArray$1(collection) ? arrayEvery : baseEvery;\n    if (guard && isIterateeCall(collection, predicate, guard)) {\n      predicate = void 0;\n    }\n    return func(collection, baseIteratee(predicate));\n  }\n  function baseFilter(collection, predicate) {\n    var result = [];\n    baseEach$1(collection, function (value, index, collection2) {\n      if (predicate(value, index, collection2)) {\n        result.push(value);\n      }\n    });\n    return result;\n  }\n  function filter(collection, predicate) {\n    var func = isArray$1(collection) ? arrayFilter : baseFilter;\n    return func(collection, baseIteratee(predicate));\n  }\n  function createFind(findIndexFunc) {\n    return function (collection, predicate, fromIndex) {\n      var iterable = Object(collection);\n      if (!isArrayLike(collection)) {\n        var iteratee = baseIteratee(predicate);\n        collection = keys(collection);\n        predicate = function (key) {\n          return iteratee(iterable[key], key, iterable);\n        };\n      }\n      var index = findIndexFunc(collection, predicate, fromIndex);\n      return index > -1 ? iterable[iteratee ? collection[index] : index] : void 0;\n    };\n  }\n  var nativeMax$2 = Math.max;\n  function findIndex(array, predicate, fromIndex) {\n    var length = array == null ? 0 : array.length;\n    if (!length) {\n      return -1;\n    }\n    var index = fromIndex == null ? 0 : toInteger(fromIndex);\n    if (index < 0) {\n      index = nativeMax$2(length + index, 0);\n    }\n    return baseFindIndex(array, baseIteratee(predicate), index);\n  }\n  var find = createFind(findIndex);\n  const find$1 = find;\n  function head(array) {\n    return array && array.length ? array[0] : void 0;\n  }\n  function baseMap(collection, iteratee) {\n    var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n    baseEach$1(collection, function (value, key, collection2) {\n      result[++index] = iteratee(value, key, collection2);\n    });\n    return result;\n  }\n  function map(collection, iteratee) {\n    var func = isArray$1(collection) ? arrayMap : baseMap;\n    return func(collection, baseIteratee(iteratee));\n  }\n  function flatMap(collection, iteratee) {\n    return baseFlatten(map(collection, iteratee), 1);\n  }\n  var objectProto$2 = Object.prototype;\n  var hasOwnProperty$2 = objectProto$2.hasOwnProperty;\n  var groupBy = createAggregator(function (result, value, key) {\n    if (hasOwnProperty$2.call(result, key)) {\n      result[key].push(value);\n    } else {\n      baseAssignValue(result, key, [value]);\n    }\n  });\n  const groupBy$1 = groupBy;\n  var objectProto$1 = Object.prototype;\n  var hasOwnProperty$1 = objectProto$1.hasOwnProperty;\n  function baseHas(object, key) {\n    return object != null && hasOwnProperty$1.call(object, key);\n  }\n  function has(object, path) {\n    return object != null && hasPath(object, path, baseHas);\n  }\n  var stringTag = \"[object String]\";\n  function isString(value) {\n    return typeof value == \"string\" || !isArray$1(value) && isObjectLike(value) && baseGetTag(value) == stringTag;\n  }\n  function baseValues(object, props) {\n    return arrayMap(props, function (key) {\n      return object[key];\n    });\n  }\n  function values(object) {\n    return object == null ? [] : baseValues(object, keys(object));\n  }\n  var nativeMax$1 = Math.max;\n  function includes(collection, value, fromIndex, guard) {\n    collection = isArrayLike(collection) ? collection : values(collection);\n    fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;\n    var length = collection.length;\n    if (fromIndex < 0) {\n      fromIndex = nativeMax$1(length + fromIndex, 0);\n    }\n    return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;\n  }\n  var nativeMax = Math.max;\n  function indexOf(array, value, fromIndex) {\n    var length = array == null ? 0 : array.length;\n    if (!length) {\n      return -1;\n    }\n    var index = fromIndex == null ? 0 : toInteger(fromIndex);\n    if (index < 0) {\n      index = nativeMax(length + index, 0);\n    }\n    return baseIndexOf(array, value, index);\n  }\n  var mapTag = \"[object Map]\",\n    setTag = \"[object Set]\";\n  var objectProto = Object.prototype;\n  var hasOwnProperty = objectProto.hasOwnProperty;\n  function isEmpty(value) {\n    if (value == null) {\n      return true;\n    }\n    if (isArrayLike(value) && (isArray$1(value) || typeof value == \"string\" || typeof value.splice == \"function\" || isBuffer$1(value) || isTypedArray$1(value) || isArguments$1(value))) {\n      return !value.length;\n    }\n    var tag = getTag$1(value);\n    if (tag == mapTag || tag == setTag) {\n      return !value.size;\n    }\n    if (isPrototype(value)) {\n      return !baseKeys(value).length;\n    }\n    for (var key in value) {\n      if (hasOwnProperty.call(value, key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  var regexpTag = \"[object RegExp]\";\n  function baseIsRegExp(value) {\n    return isObjectLike(value) && baseGetTag(value) == regexpTag;\n  }\n  var nodeIsRegExp = nodeUtil$1 && nodeUtil$1.isRegExp;\n  var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n  const isRegExp$1 = isRegExp;\n  function isUndefined(value) {\n    return value === void 0;\n  }\n  var FUNC_ERROR_TEXT = \"Expected a function\";\n  function negate(predicate) {\n    if (typeof predicate != \"function\") {\n      throw new TypeError(FUNC_ERROR_TEXT);\n    }\n    return function () {\n      var args = arguments;\n      switch (args.length) {\n        case 0:\n          return !predicate.call(this);\n        case 1:\n          return !predicate.call(this, args[0]);\n        case 2:\n          return !predicate.call(this, args[0], args[1]);\n        case 3:\n          return !predicate.call(this, args[0], args[1], args[2]);\n      }\n      return !predicate.apply(this, args);\n    };\n  }\n  function baseSet(object, path, value, customizer) {\n    if (!isObject(object)) {\n      return object;\n    }\n    path = castPath(path, object);\n    var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n    while (nested != null && ++index < length) {\n      var key = toKey(path[index]),\n        newValue = value;\n      if (key === \"__proto__\" || key === \"constructor\" || key === \"prototype\") {\n        return object;\n      }\n      if (index != lastIndex) {\n        var objValue = nested[key];\n        newValue = customizer ? customizer(objValue, key, nested) : void 0;\n        if (newValue === void 0) {\n          newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};\n        }\n      }\n      assignValue(nested, key, newValue);\n      nested = nested[key];\n    }\n    return object;\n  }\n  function basePickBy(object, paths, predicate) {\n    var index = -1,\n      length = paths.length,\n      result = {};\n    while (++index < length) {\n      var path = paths[index],\n        value = baseGet(object, path);\n      if (predicate(value, path)) {\n        baseSet(result, castPath(path, object), value);\n      }\n    }\n    return result;\n  }\n  function pickBy(object, predicate) {\n    if (object == null) {\n      return {};\n    }\n    var props = arrayMap(getAllKeysIn(object), function (prop) {\n      return [prop];\n    });\n    predicate = baseIteratee(predicate);\n    return basePickBy(object, props, function (value, path) {\n      return predicate(value, path[0]);\n    });\n  }\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function (value, index, collection2) {\n      accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);\n    });\n    return accumulator;\n  }\n  function reduce(collection, iteratee, accumulator) {\n    var func = isArray$1(collection) ? arrayReduce : baseReduce,\n      initAccum = arguments.length < 3;\n    return func(collection, baseIteratee(iteratee), accumulator, initAccum, baseEach$1);\n  }\n  function reject(collection, predicate) {\n    var func = isArray$1(collection) ? arrayFilter : baseFilter;\n    return func(collection, negate(baseIteratee(predicate)));\n  }\n  function baseSome(collection, predicate) {\n    var result;\n    baseEach$1(collection, function (value, index, collection2) {\n      result = predicate(value, index, collection2);\n      return !result;\n    });\n    return !!result;\n  }\n  function some(collection, predicate, guard) {\n    var func = isArray$1(collection) ? arraySome : baseSome;\n    if (guard && isIterateeCall(collection, predicate, guard)) {\n      predicate = void 0;\n    }\n    return func(collection, baseIteratee(predicate));\n  }\n  var INFINITY = 1 / 0;\n  var createSet = !(Set$1 && 1 / setToArray(new Set$1([, -0]))[1] == INFINITY) ? noop : function (values2) {\n    return new Set$1(values2);\n  };\n  const createSet$1 = createSet;\n  var LARGE_ARRAY_SIZE = 200;\n  function baseUniq(array, iteratee, comparator) {\n    var index = -1,\n      includes2 = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n    if (comparator) {\n      isCommon = false;\n      includes2 = arrayIncludesWith;\n    } else if (length >= LARGE_ARRAY_SIZE) {\n      var set = iteratee ? null : createSet$1(array);\n      if (set) {\n        return setToArray(set);\n      }\n      isCommon = false;\n      includes2 = cacheHas;\n      seen = new SetCache();\n    } else {\n      seen = iteratee ? [] : result;\n    }\n    outer: while (++index < length) {\n      var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n      value = comparator || value !== 0 ? value : 0;\n      if (isCommon && computed === computed) {\n        var seenIndex = seen.length;\n        while (seenIndex--) {\n          if (seen[seenIndex] === computed) {\n            continue outer;\n          }\n        }\n        if (iteratee) {\n          seen.push(computed);\n        }\n        result.push(value);\n      } else if (!includes2(seen, computed, comparator)) {\n        if (seen !== result) {\n          seen.push(computed);\n        }\n        result.push(value);\n      }\n    }\n    return result;\n  }\n  function uniq(array) {\n    return array && array.length ? baseUniq(array) : [];\n  }\n  function PRINT_ERROR(msg) {\n    if (console && console.error) {\n      console.error(`Error: ${msg}`);\n    }\n  }\n  function PRINT_WARNING(msg) {\n    if (console && console.warn) {\n      console.warn(`Warning: ${msg}`);\n    }\n  }\n  function timer(func) {\n    const start = (/* @__PURE__ */new Date()).getTime();\n    const val = func();\n    const end = (/* @__PURE__ */new Date()).getTime();\n    const total = end - start;\n    return {\n      time: total,\n      value: val\n    };\n  }\n  function toFastProperties(toBecomeFast) {\n    function FakeConstructor() {}\n    FakeConstructor.prototype = toBecomeFast;\n    const fakeInstance = new FakeConstructor();\n    function fakeAccess() {\n      return typeof fakeInstance.bar;\n    }\n    fakeAccess();\n    fakeAccess();\n    return toBecomeFast;\n  }\n  function tokenLabel$1(tokType) {\n    if (hasTokenLabel$1(tokType)) {\n      return tokType.LABEL;\n    } else {\n      return tokType.name;\n    }\n  }\n  function hasTokenLabel$1(obj) {\n    return isString(obj.LABEL) && obj.LABEL !== \"\";\n  }\n  class AbstractProduction {\n    get definition() {\n      return this._definition;\n    }\n    set definition(value) {\n      this._definition = value;\n    }\n    constructor(_definition) {\n      this._definition = _definition;\n    }\n    accept(visitor) {\n      visitor.visit(this);\n      forEach(this.definition, prod => {\n        prod.accept(visitor);\n      });\n    }\n  }\n  class NonTerminal extends AbstractProduction {\n    constructor(options) {\n      super([]);\n      this.idx = 1;\n      assign$1(this, pickBy(options, v => v !== void 0));\n    }\n    set definition(definition) {}\n    get definition() {\n      if (this.referencedRule !== void 0) {\n        return this.referencedRule.definition;\n      }\n      return [];\n    }\n    accept(visitor) {\n      visitor.visit(this);\n    }\n  }\n  class Rule extends AbstractProduction {\n    constructor(options) {\n      super(options.definition);\n      this.orgText = \"\";\n      assign$1(this, pickBy(options, v => v !== void 0));\n    }\n  }\n  class Alternative extends AbstractProduction {\n    constructor(options) {\n      super(options.definition);\n      this.ignoreAmbiguities = false;\n      assign$1(this, pickBy(options, v => v !== void 0));\n    }\n  }\n  class Option extends AbstractProduction {\n    constructor(options) {\n      super(options.definition);\n      this.idx = 1;\n      assign$1(this, pickBy(options, v => v !== void 0));\n    }\n  }\n  class RepetitionMandatory extends AbstractProduction {\n    constructor(options) {\n      super(options.definition);\n      this.idx = 1;\n      assign$1(this, pickBy(options, v => v !== void 0));\n    }\n  }\n  class RepetitionMandatoryWithSeparator extends AbstractProduction {\n    constructor(options) {\n      super(options.definition);\n      this.idx = 1;\n      assign$1(this, pickBy(options, v => v !== void 0));\n    }\n  }\n  class Repetition extends AbstractProduction {\n    constructor(options) {\n      super(options.definition);\n      this.idx = 1;\n      assign$1(this, pickBy(options, v => v !== void 0));\n    }\n  }\n  class RepetitionWithSeparator extends AbstractProduction {\n    constructor(options) {\n      super(options.definition);\n      this.idx = 1;\n      assign$1(this, pickBy(options, v => v !== void 0));\n    }\n  }\n  class Alternation extends AbstractProduction {\n    get definition() {\n      return this._definition;\n    }\n    set definition(value) {\n      this._definition = value;\n    }\n    constructor(options) {\n      super(options.definition);\n      this.idx = 1;\n      this.ignoreAmbiguities = false;\n      this.hasPredicates = false;\n      assign$1(this, pickBy(options, v => v !== void 0));\n    }\n  }\n  class Terminal {\n    constructor(options) {\n      this.idx = 1;\n      assign$1(this, pickBy(options, v => v !== void 0));\n    }\n    accept(visitor) {\n      visitor.visit(this);\n    }\n  }\n  function serializeGrammar(topRules) {\n    return map(topRules, serializeProduction);\n  }\n  function serializeProduction(node) {\n    function convertDefinition(definition) {\n      return map(definition, serializeProduction);\n    }\n    if (node instanceof NonTerminal) {\n      const serializedNonTerminal = {\n        type: \"NonTerminal\",\n        name: node.nonTerminalName,\n        idx: node.idx\n      };\n      if (isString(node.label)) {\n        serializedNonTerminal.label = node.label;\n      }\n      return serializedNonTerminal;\n    } else if (node instanceof Alternative) {\n      return {\n        type: \"Alternative\",\n        definition: convertDefinition(node.definition)\n      };\n    } else if (node instanceof Option) {\n      return {\n        type: \"Option\",\n        idx: node.idx,\n        definition: convertDefinition(node.definition)\n      };\n    } else if (node instanceof RepetitionMandatory) {\n      return {\n        type: \"RepetitionMandatory\",\n        idx: node.idx,\n        definition: convertDefinition(node.definition)\n      };\n    } else if (node instanceof RepetitionMandatoryWithSeparator) {\n      return {\n        type: \"RepetitionMandatoryWithSeparator\",\n        idx: node.idx,\n        separator: serializeProduction(new Terminal({\n          terminalType: node.separator\n        })),\n        definition: convertDefinition(node.definition)\n      };\n    } else if (node instanceof RepetitionWithSeparator) {\n      return {\n        type: \"RepetitionWithSeparator\",\n        idx: node.idx,\n        separator: serializeProduction(new Terminal({\n          terminalType: node.separator\n        })),\n        definition: convertDefinition(node.definition)\n      };\n    } else if (node instanceof Repetition) {\n      return {\n        type: \"Repetition\",\n        idx: node.idx,\n        definition: convertDefinition(node.definition)\n      };\n    } else if (node instanceof Alternation) {\n      return {\n        type: \"Alternation\",\n        idx: node.idx,\n        definition: convertDefinition(node.definition)\n      };\n    } else if (node instanceof Terminal) {\n      const serializedTerminal = {\n        type: \"Terminal\",\n        name: node.terminalType.name,\n        label: tokenLabel$1(node.terminalType),\n        idx: node.idx\n      };\n      if (isString(node.label)) {\n        serializedTerminal.terminalLabel = node.label;\n      }\n      const pattern = node.terminalType.PATTERN;\n      if (node.terminalType.PATTERN) {\n        serializedTerminal.pattern = isRegExp$1(pattern) ? pattern.source : pattern;\n      }\n      return serializedTerminal;\n    } else if (node instanceof Rule) {\n      return {\n        type: \"Rule\",\n        name: node.name,\n        orgText: node.orgText,\n        definition: convertDefinition(node.definition)\n      };\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  class GAstVisitor {\n    visit(node) {\n      const nodeAny = node;\n      switch (nodeAny.constructor) {\n        case NonTerminal:\n          return this.visitNonTerminal(nodeAny);\n        case Alternative:\n          return this.visitAlternative(nodeAny);\n        case Option:\n          return this.visitOption(nodeAny);\n        case RepetitionMandatory:\n          return this.visitRepetitionMandatory(nodeAny);\n        case RepetitionMandatoryWithSeparator:\n          return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n        case RepetitionWithSeparator:\n          return this.visitRepetitionWithSeparator(nodeAny);\n        case Repetition:\n          return this.visitRepetition(nodeAny);\n        case Alternation:\n          return this.visitAlternation(nodeAny);\n        case Terminal:\n          return this.visitTerminal(nodeAny);\n        case Rule:\n          return this.visitRule(nodeAny);\n        default:\n          throw Error(\"non exhaustive match\");\n      }\n    }\n    /* c8 ignore next */\n    visitNonTerminal(node) {}\n    /* c8 ignore next */\n    visitAlternative(node) {}\n    /* c8 ignore next */\n    visitOption(node) {}\n    /* c8 ignore next */\n    visitRepetition(node) {}\n    /* c8 ignore next */\n    visitRepetitionMandatory(node) {}\n    /* c8 ignore next 3 */\n    visitRepetitionMandatoryWithSeparator(node) {}\n    /* c8 ignore next */\n    visitRepetitionWithSeparator(node) {}\n    /* c8 ignore next */\n    visitAlternation(node) {}\n    /* c8 ignore next */\n    visitTerminal(node) {}\n    /* c8 ignore next */\n    visitRule(node) {}\n  }\n  function isSequenceProd(prod) {\n    return prod instanceof Alternative || prod instanceof Option || prod instanceof Repetition || prod instanceof RepetitionMandatory || prod instanceof RepetitionMandatoryWithSeparator || prod instanceof RepetitionWithSeparator || prod instanceof Terminal || prod instanceof Rule;\n  }\n  function isOptionalProd(prod, alreadyVisited = []) {\n    const isDirectlyOptional = prod instanceof Option || prod instanceof Repetition || prod instanceof RepetitionWithSeparator;\n    if (isDirectlyOptional) {\n      return true;\n    }\n    if (prod instanceof Alternation) {\n      return some(prod.definition, subProd => {\n        return isOptionalProd(subProd, alreadyVisited);\n      });\n    } else if (prod instanceof NonTerminal && includes(alreadyVisited, prod)) {\n      return false;\n    } else if (prod instanceof AbstractProduction) {\n      if (prod instanceof NonTerminal) {\n        alreadyVisited.push(prod);\n      }\n      return every(prod.definition, subProd => {\n        return isOptionalProd(subProd, alreadyVisited);\n      });\n    } else {\n      return false;\n    }\n  }\n  function isBranchingProd(prod) {\n    return prod instanceof Alternation;\n  }\n  function getProductionDslName(prod) {\n    if (prod instanceof NonTerminal) {\n      return \"SUBRULE\";\n    } else if (prod instanceof Option) {\n      return \"OPTION\";\n    } else if (prod instanceof Alternation) {\n      return \"OR\";\n    } else if (prod instanceof RepetitionMandatory) {\n      return \"AT_LEAST_ONE\";\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      return \"AT_LEAST_ONE_SEP\";\n    } else if (prod instanceof RepetitionWithSeparator) {\n      return \"MANY_SEP\";\n    } else if (prod instanceof Repetition) {\n      return \"MANY\";\n    } else if (prod instanceof Terminal) {\n      return \"CONSUME\";\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  class RestWalker {\n    walk(prod, prevRest = []) {\n      forEach(prod.definition, (subProd, index) => {\n        const currRest = drop(prod.definition, index + 1);\n        if (subProd instanceof NonTerminal) {\n          this.walkProdRef(subProd, currRest, prevRest);\n        } else if (subProd instanceof Terminal) {\n          this.walkTerminal(subProd, currRest, prevRest);\n        } else if (subProd instanceof Alternative) {\n          this.walkFlat(subProd, currRest, prevRest);\n        } else if (subProd instanceof Option) {\n          this.walkOption(subProd, currRest, prevRest);\n        } else if (subProd instanceof RepetitionMandatory) {\n          this.walkAtLeastOne(subProd, currRest, prevRest);\n        } else if (subProd instanceof RepetitionMandatoryWithSeparator) {\n          this.walkAtLeastOneSep(subProd, currRest, prevRest);\n        } else if (subProd instanceof RepetitionWithSeparator) {\n          this.walkManySep(subProd, currRest, prevRest);\n        } else if (subProd instanceof Repetition) {\n          this.walkMany(subProd, currRest, prevRest);\n        } else if (subProd instanceof Alternation) {\n          this.walkOr(subProd, currRest, prevRest);\n        } else {\n          throw Error(\"non exhaustive match\");\n        }\n      });\n    }\n    walkTerminal(terminal, currRest, prevRest) {}\n    walkProdRef(refProd, currRest, prevRest) {}\n    walkFlat(flatProd, currRest, prevRest) {\n      const fullOrRest = currRest.concat(prevRest);\n      this.walk(flatProd, fullOrRest);\n    }\n    walkOption(optionProd, currRest, prevRest) {\n      const fullOrRest = currRest.concat(prevRest);\n      this.walk(optionProd, fullOrRest);\n    }\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n      const fullAtLeastOneRest = [new Option({\n        definition: atLeastOneProd.definition\n      })].concat(currRest, prevRest);\n      this.walk(atLeastOneProd, fullAtLeastOneRest);\n    }\n    walkAtLeastOneSep(atLeastOneSepProd, currRest, prevRest) {\n      const fullAtLeastOneSepRest = restForRepetitionWithSeparator(atLeastOneSepProd, currRest, prevRest);\n      this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n    }\n    walkMany(manyProd, currRest, prevRest) {\n      const fullManyRest = [new Option({\n        definition: manyProd.definition\n      })].concat(currRest, prevRest);\n      this.walk(manyProd, fullManyRest);\n    }\n    walkManySep(manySepProd, currRest, prevRest) {\n      const fullManySepRest = restForRepetitionWithSeparator(manySepProd, currRest, prevRest);\n      this.walk(manySepProd, fullManySepRest);\n    }\n    walkOr(orProd, currRest, prevRest) {\n      const fullOrRest = currRest.concat(prevRest);\n      forEach(orProd.definition, alt => {\n        const prodWrapper = new Alternative({\n          definition: [alt]\n        });\n        this.walk(prodWrapper, fullOrRest);\n      });\n    }\n  }\n  function restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {\n    const repSepRest = [new Option({\n      definition: [new Terminal({\n        terminalType: repSepProd.separator\n      })].concat(repSepProd.definition)\n    })];\n    const fullRepSepRest = repSepRest.concat(currRest, prevRest);\n    return fullRepSepRest;\n  }\n  function first(prod) {\n    if (prod instanceof NonTerminal) {\n      return first(prod.referencedRule);\n    } else if (prod instanceof Terminal) {\n      return firstForTerminal(prod);\n    } else if (isSequenceProd(prod)) {\n      return firstForSequence(prod);\n    } else if (isBranchingProd(prod)) {\n      return firstForBranching(prod);\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  function firstForSequence(prod) {\n    let firstSet = [];\n    const seq = prod.definition;\n    let nextSubProdIdx = 0;\n    let hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n    let currSubProd;\n    let isLastInnerProdOptional = true;\n    while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n      currSubProd = seq[nextSubProdIdx];\n      isLastInnerProdOptional = isOptionalProd(currSubProd);\n      firstSet = firstSet.concat(first(currSubProd));\n      nextSubProdIdx = nextSubProdIdx + 1;\n      hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n    }\n    return uniq(firstSet);\n  }\n  function firstForBranching(prod) {\n    const allAlternativesFirsts = map(prod.definition, innerProd => {\n      return first(innerProd);\n    });\n    return uniq(flatten(allAlternativesFirsts));\n  }\n  function firstForTerminal(terminal) {\n    return [terminal.terminalType];\n  }\n  const IN = \"_~IN~_\";\n  class ResyncFollowsWalker extends RestWalker {\n    constructor(topProd) {\n      super();\n      this.topProd = topProd;\n      this.follows = {};\n    }\n    startWalking() {\n      this.walk(this.topProd);\n      return this.follows;\n    }\n    walkTerminal(terminal, currRest, prevRest) {}\n    walkProdRef(refProd, currRest, prevRest) {\n      const followName = buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) + this.topProd.name;\n      const fullRest = currRest.concat(prevRest);\n      const restProd = new Alternative({\n        definition: fullRest\n      });\n      const t_in_topProd_follows = first(restProd);\n      this.follows[followName] = t_in_topProd_follows;\n    }\n  }\n  function computeAllProdsFollows(topProductions) {\n    const reSyncFollows = {};\n    forEach(topProductions, topProd => {\n      const currRefsFollow = new ResyncFollowsWalker(topProd).startWalking();\n      assign$1(reSyncFollows, currRefsFollow);\n    });\n    return reSyncFollows;\n  }\n  function buildBetweenProdsFollowPrefix(inner, occurenceInParent) {\n    return inner.name + occurenceInParent + IN;\n  }\n  function cc(char) {\n    return char.charCodeAt(0);\n  }\n  function insertToSet(item, set) {\n    if (Array.isArray(item)) {\n      item.forEach(function (subItem) {\n        set.push(subItem);\n      });\n    } else {\n      set.push(item);\n    }\n  }\n  function addFlag(flagObj, flagKey) {\n    if (flagObj[flagKey] === true) {\n      throw \"duplicate flag \" + flagKey;\n    }\n    flagObj[flagKey];\n    flagObj[flagKey] = true;\n  }\n  function ASSERT_EXISTS(obj) {\n    if (obj === void 0) {\n      throw Error(\"Internal Error - Should never get here!\");\n    }\n    return true;\n  }\n  function ASSERT_NEVER_REACH_HERE() {\n    throw Error(\"Internal Error - Should never get here!\");\n  }\n  function isCharacter(obj) {\n    return obj[\"type\"] === \"Character\";\n  }\n  const digitsCharCodes = [];\n  for (let i = cc(\"0\"); i <= cc(\"9\"); i++) {\n    digitsCharCodes.push(i);\n  }\n  const wordCharCodes = [cc(\"_\")].concat(digitsCharCodes);\n  for (let i = cc(\"a\"); i <= cc(\"z\"); i++) {\n    wordCharCodes.push(i);\n  }\n  for (let i = cc(\"A\"); i <= cc(\"Z\"); i++) {\n    wordCharCodes.push(i);\n  }\n  const whitespaceCodes = [cc(\" \"), cc(\"\\f\"), cc(\"\\n\"), cc(\"\\r\"), cc(\"\t\"), cc(\"\\v\"), cc(\"\t\"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\"\\u2028\"), cc(\"\\u2029\"), cc(\" \"), cc(\" \"), cc(\"　\"), cc(\"\\uFEFF\")];\n  const hexDigitPattern = /[0-9a-fA-F]/;\n  const decimalPattern = /[0-9]/;\n  const decimalPatternNoZero = /[1-9]/;\n  class RegExpParser {\n    constructor() {\n      this.idx = 0;\n      this.input = \"\";\n      this.groupIdx = 0;\n    }\n    saveState() {\n      return {\n        idx: this.idx,\n        input: this.input,\n        groupIdx: this.groupIdx\n      };\n    }\n    restoreState(newState) {\n      this.idx = newState.idx;\n      this.input = newState.input;\n      this.groupIdx = newState.groupIdx;\n    }\n    pattern(input) {\n      this.idx = 0;\n      this.input = input;\n      this.groupIdx = 0;\n      this.consumeChar(\"/\");\n      const value = this.disjunction();\n      this.consumeChar(\"/\");\n      const flags = {\n        type: \"Flags\",\n        loc: {\n          begin: this.idx,\n          end: input.length\n        },\n        global: false,\n        ignoreCase: false,\n        multiLine: false,\n        unicode: false,\n        sticky: false\n      };\n      while (this.isRegExpFlag()) {\n        switch (this.popChar()) {\n          case \"g\":\n            addFlag(flags, \"global\");\n            break;\n          case \"i\":\n            addFlag(flags, \"ignoreCase\");\n            break;\n          case \"m\":\n            addFlag(flags, \"multiLine\");\n            break;\n          case \"u\":\n            addFlag(flags, \"unicode\");\n            break;\n          case \"y\":\n            addFlag(flags, \"sticky\");\n            break;\n        }\n      }\n      if (this.idx !== this.input.length) {\n        throw Error(\"Redundant input: \" + this.input.substring(this.idx));\n      }\n      return {\n        type: \"Pattern\",\n        flags,\n        value,\n        loc: this.loc(0)\n      };\n    }\n    disjunction() {\n      const alts = [];\n      const begin = this.idx;\n      alts.push(this.alternative());\n      while (this.peekChar() === \"|\") {\n        this.consumeChar(\"|\");\n        alts.push(this.alternative());\n      }\n      return {\n        type: \"Disjunction\",\n        value: alts,\n        loc: this.loc(begin)\n      };\n    }\n    alternative() {\n      const terms = [];\n      const begin = this.idx;\n      while (this.isTerm()) {\n        terms.push(this.term());\n      }\n      return {\n        type: \"Alternative\",\n        value: terms,\n        loc: this.loc(begin)\n      };\n    }\n    term() {\n      if (this.isAssertion()) {\n        return this.assertion();\n      } else {\n        return this.atom();\n      }\n    }\n    assertion() {\n      const begin = this.idx;\n      switch (this.popChar()) {\n        case \"^\":\n          return {\n            type: \"StartAnchor\",\n            loc: this.loc(begin)\n          };\n        case \"$\":\n          return {\n            type: \"EndAnchor\",\n            loc: this.loc(begin)\n          };\n        case \"\\\\\":\n          switch (this.popChar()) {\n            case \"b\":\n              return {\n                type: \"WordBoundary\",\n                loc: this.loc(begin)\n              };\n            case \"B\":\n              return {\n                type: \"NonWordBoundary\",\n                loc: this.loc(begin)\n              };\n          }\n          throw Error(\"Invalid Assertion Escape\");\n        case \"(\":\n          this.consumeChar(\"?\");\n          let type;\n          switch (this.popChar()) {\n            case \"=\":\n              type = \"Lookahead\";\n              break;\n            case \"!\":\n              type = \"NegativeLookahead\";\n              break;\n          }\n          ASSERT_EXISTS(type);\n          const disjunction = this.disjunction();\n          this.consumeChar(\")\");\n          return {\n            type,\n            value: disjunction,\n            loc: this.loc(begin)\n          };\n      }\n      return ASSERT_NEVER_REACH_HERE();\n    }\n    quantifier(isBacktracking = false) {\n      let range = void 0;\n      const begin = this.idx;\n      switch (this.popChar()) {\n        case \"*\":\n          range = {\n            atLeast: 0,\n            atMost: Infinity\n          };\n          break;\n        case \"+\":\n          range = {\n            atLeast: 1,\n            atMost: Infinity\n          };\n          break;\n        case \"?\":\n          range = {\n            atLeast: 0,\n            atMost: 1\n          };\n          break;\n        case \"{\":\n          const atLeast = this.integerIncludingZero();\n          switch (this.popChar()) {\n            case \"}\":\n              range = {\n                atLeast,\n                atMost: atLeast\n              };\n              break;\n            case \",\":\n              let atMost;\n              if (this.isDigit()) {\n                atMost = this.integerIncludingZero();\n                range = {\n                  atLeast,\n                  atMost\n                };\n              } else {\n                range = {\n                  atLeast,\n                  atMost: Infinity\n                };\n              }\n              this.consumeChar(\"}\");\n              break;\n          }\n          if (isBacktracking === true && range === void 0) {\n            return void 0;\n          }\n          ASSERT_EXISTS(range);\n          break;\n      }\n      if (isBacktracking === true && range === void 0) {\n        return void 0;\n      }\n      if (ASSERT_EXISTS(range)) {\n        if (this.peekChar(0) === \"?\") {\n          this.consumeChar(\"?\");\n          range.greedy = false;\n        } else {\n          range.greedy = true;\n        }\n        range.type = \"Quantifier\";\n        range.loc = this.loc(begin);\n        return range;\n      }\n    }\n    atom() {\n      let atom;\n      const begin = this.idx;\n      switch (this.peekChar()) {\n        case \".\":\n          atom = this.dotAll();\n          break;\n        case \"\\\\\":\n          atom = this.atomEscape();\n          break;\n        case \"[\":\n          atom = this.characterClass();\n          break;\n        case \"(\":\n          atom = this.group();\n          break;\n      }\n      if (atom === void 0 && this.isPatternCharacter()) {\n        atom = this.patternCharacter();\n      }\n      if (ASSERT_EXISTS(atom)) {\n        atom.loc = this.loc(begin);\n        if (this.isQuantifier()) {\n          atom.quantifier = this.quantifier();\n        }\n        return atom;\n      }\n    }\n    dotAll() {\n      this.consumeChar(\".\");\n      return {\n        type: \"Set\",\n        complement: true,\n        value: [cc(\"\\n\"), cc(\"\\r\"), cc(\"\\u2028\"), cc(\"\\u2029\")]\n      };\n    }\n    atomEscape() {\n      this.consumeChar(\"\\\\\");\n      switch (this.peekChar()) {\n        case \"1\":\n        case \"2\":\n        case \"3\":\n        case \"4\":\n        case \"5\":\n        case \"6\":\n        case \"7\":\n        case \"8\":\n        case \"9\":\n          return this.decimalEscapeAtom();\n        case \"d\":\n        case \"D\":\n        case \"s\":\n        case \"S\":\n        case \"w\":\n        case \"W\":\n          return this.characterClassEscape();\n        case \"f\":\n        case \"n\":\n        case \"r\":\n        case \"t\":\n        case \"v\":\n          return this.controlEscapeAtom();\n        case \"c\":\n          return this.controlLetterEscapeAtom();\n        case \"0\":\n          return this.nulCharacterAtom();\n        case \"x\":\n          return this.hexEscapeSequenceAtom();\n        case \"u\":\n          return this.regExpUnicodeEscapeSequenceAtom();\n        default:\n          return this.identityEscapeAtom();\n      }\n    }\n    decimalEscapeAtom() {\n      const value = this.positiveInteger();\n      return {\n        type: \"GroupBackReference\",\n        value\n      };\n    }\n    characterClassEscape() {\n      let set;\n      let complement = false;\n      switch (this.popChar()) {\n        case \"d\":\n          set = digitsCharCodes;\n          break;\n        case \"D\":\n          set = digitsCharCodes;\n          complement = true;\n          break;\n        case \"s\":\n          set = whitespaceCodes;\n          break;\n        case \"S\":\n          set = whitespaceCodes;\n          complement = true;\n          break;\n        case \"w\":\n          set = wordCharCodes;\n          break;\n        case \"W\":\n          set = wordCharCodes;\n          complement = true;\n          break;\n      }\n      if (ASSERT_EXISTS(set)) {\n        return {\n          type: \"Set\",\n          value: set,\n          complement\n        };\n      }\n    }\n    controlEscapeAtom() {\n      let escapeCode;\n      switch (this.popChar()) {\n        case \"f\":\n          escapeCode = cc(\"\\f\");\n          break;\n        case \"n\":\n          escapeCode = cc(\"\\n\");\n          break;\n        case \"r\":\n          escapeCode = cc(\"\\r\");\n          break;\n        case \"t\":\n          escapeCode = cc(\"\t\");\n          break;\n        case \"v\":\n          escapeCode = cc(\"\\v\");\n          break;\n      }\n      if (ASSERT_EXISTS(escapeCode)) {\n        return {\n          type: \"Character\",\n          value: escapeCode\n        };\n      }\n    }\n    controlLetterEscapeAtom() {\n      this.consumeChar(\"c\");\n      const letter = this.popChar();\n      if (/[a-zA-Z]/.test(letter) === false) {\n        throw Error(\"Invalid \");\n      }\n      const letterCode = letter.toUpperCase().charCodeAt(0) - 64;\n      return {\n        type: \"Character\",\n        value: letterCode\n      };\n    }\n    nulCharacterAtom() {\n      this.consumeChar(\"0\");\n      return {\n        type: \"Character\",\n        value: cc(\"\\0\")\n      };\n    }\n    hexEscapeSequenceAtom() {\n      this.consumeChar(\"x\");\n      return this.parseHexDigits(2);\n    }\n    regExpUnicodeEscapeSequenceAtom() {\n      this.consumeChar(\"u\");\n      return this.parseHexDigits(4);\n    }\n    identityEscapeAtom() {\n      const escapedChar = this.popChar();\n      return {\n        type: \"Character\",\n        value: cc(escapedChar)\n      };\n    }\n    classPatternCharacterAtom() {\n      switch (this.peekChar()) {\n        case \"\\n\":\n        case \"\\r\":\n        case \"\\u2028\":\n        case \"\\u2029\":\n        case \"\\\\\":\n        case \"]\":\n          throw Error(\"TBD\");\n        default:\n          const nextChar = this.popChar();\n          return {\n            type: \"Character\",\n            value: cc(nextChar)\n          };\n      }\n    }\n    characterClass() {\n      const set = [];\n      let complement = false;\n      this.consumeChar(\"[\");\n      if (this.peekChar(0) === \"^\") {\n        this.consumeChar(\"^\");\n        complement = true;\n      }\n      while (this.isClassAtom()) {\n        const from = this.classAtom();\n        from.type === \"Character\";\n        if (isCharacter(from) && this.isRangeDash()) {\n          this.consumeChar(\"-\");\n          const to = this.classAtom();\n          to.type === \"Character\";\n          if (isCharacter(to)) {\n            if (to.value < from.value) {\n              throw Error(\"Range out of order in character class\");\n            }\n            set.push({\n              from: from.value,\n              to: to.value\n            });\n          } else {\n            insertToSet(from.value, set);\n            set.push(cc(\"-\"));\n            insertToSet(to.value, set);\n          }\n        } else {\n          insertToSet(from.value, set);\n        }\n      }\n      this.consumeChar(\"]\");\n      return {\n        type: \"Set\",\n        complement,\n        value: set\n      };\n    }\n    classAtom() {\n      switch (this.peekChar()) {\n        case \"]\":\n        case \"\\n\":\n        case \"\\r\":\n        case \"\\u2028\":\n        case \"\\u2029\":\n          throw Error(\"TBD\");\n        case \"\\\\\":\n          return this.classEscape();\n        default:\n          return this.classPatternCharacterAtom();\n      }\n    }\n    classEscape() {\n      this.consumeChar(\"\\\\\");\n      switch (this.peekChar()) {\n        case \"b\":\n          this.consumeChar(\"b\");\n          return {\n            type: \"Character\",\n            value: cc(\"\\b\")\n          };\n        case \"d\":\n        case \"D\":\n        case \"s\":\n        case \"S\":\n        case \"w\":\n        case \"W\":\n          return this.characterClassEscape();\n        case \"f\":\n        case \"n\":\n        case \"r\":\n        case \"t\":\n        case \"v\":\n          return this.controlEscapeAtom();\n        case \"c\":\n          return this.controlLetterEscapeAtom();\n        case \"0\":\n          return this.nulCharacterAtom();\n        case \"x\":\n          return this.hexEscapeSequenceAtom();\n        case \"u\":\n          return this.regExpUnicodeEscapeSequenceAtom();\n        default:\n          return this.identityEscapeAtom();\n      }\n    }\n    group() {\n      let capturing = true;\n      this.consumeChar(\"(\");\n      switch (this.peekChar(0)) {\n        case \"?\":\n          this.consumeChar(\"?\");\n          this.consumeChar(\":\");\n          capturing = false;\n          break;\n        default:\n          this.groupIdx++;\n          break;\n      }\n      const value = this.disjunction();\n      this.consumeChar(\")\");\n      const groupAst = {\n        type: \"Group\",\n        capturing,\n        value\n      };\n      if (capturing) {\n        groupAst[\"idx\"] = this.groupIdx;\n      }\n      return groupAst;\n    }\n    positiveInteger() {\n      let number = this.popChar();\n      if (decimalPatternNoZero.test(number) === false) {\n        throw Error(\"Expecting a positive integer\");\n      }\n      while (decimalPattern.test(this.peekChar(0))) {\n        number += this.popChar();\n      }\n      return parseInt(number, 10);\n    }\n    integerIncludingZero() {\n      let number = this.popChar();\n      if (decimalPattern.test(number) === false) {\n        throw Error(\"Expecting an integer\");\n      }\n      while (decimalPattern.test(this.peekChar(0))) {\n        number += this.popChar();\n      }\n      return parseInt(number, 10);\n    }\n    patternCharacter() {\n      const nextChar = this.popChar();\n      switch (nextChar) {\n        case \"\\n\":\n        case \"\\r\":\n        case \"\\u2028\":\n        case \"\\u2029\":\n        case \"^\":\n        case \"$\":\n        case \"\\\\\":\n        case \".\":\n        case \"*\":\n        case \"+\":\n        case \"?\":\n        case \"(\":\n        case \")\":\n        case \"[\":\n        case \"|\":\n          throw Error(\"TBD\");\n        default:\n          return {\n            type: \"Character\",\n            value: cc(nextChar)\n          };\n      }\n    }\n    isRegExpFlag() {\n      switch (this.peekChar(0)) {\n        case \"g\":\n        case \"i\":\n        case \"m\":\n        case \"u\":\n        case \"y\":\n          return true;\n        default:\n          return false;\n      }\n    }\n    isRangeDash() {\n      return this.peekChar() === \"-\" && this.isClassAtom(1);\n    }\n    isDigit() {\n      return decimalPattern.test(this.peekChar(0));\n    }\n    isClassAtom(howMuch = 0) {\n      switch (this.peekChar(howMuch)) {\n        case \"]\":\n        case \"\\n\":\n        case \"\\r\":\n        case \"\\u2028\":\n        case \"\\u2029\":\n          return false;\n        default:\n          return true;\n      }\n    }\n    isTerm() {\n      return this.isAtom() || this.isAssertion();\n    }\n    isAtom() {\n      if (this.isPatternCharacter()) {\n        return true;\n      }\n      switch (this.peekChar(0)) {\n        case \".\":\n        case \"\\\\\":\n        case \"[\":\n        case \"(\":\n          return true;\n        default:\n          return false;\n      }\n    }\n    isAssertion() {\n      switch (this.peekChar(0)) {\n        case \"^\":\n        case \"$\":\n          return true;\n        case \"\\\\\":\n          switch (this.peekChar(1)) {\n            case \"b\":\n            case \"B\":\n              return true;\n            default:\n              return false;\n          }\n        case \"(\":\n          return this.peekChar(1) === \"?\" && (this.peekChar(2) === \"=\" || this.peekChar(2) === \"!\");\n        default:\n          return false;\n      }\n    }\n    isQuantifier() {\n      const prevState = this.saveState();\n      try {\n        return this.quantifier(true) !== void 0;\n      } catch (e) {\n        return false;\n      } finally {\n        this.restoreState(prevState);\n      }\n    }\n    isPatternCharacter() {\n      switch (this.peekChar()) {\n        case \"^\":\n        case \"$\":\n        case \"\\\\\":\n        case \".\":\n        case \"*\":\n        case \"+\":\n        case \"?\":\n        case \"(\":\n        case \")\":\n        case \"[\":\n        case \"|\":\n        case \"/\":\n        case \"\\n\":\n        case \"\\r\":\n        case \"\\u2028\":\n        case \"\\u2029\":\n          return false;\n        default:\n          return true;\n      }\n    }\n    parseHexDigits(howMany) {\n      let hexString = \"\";\n      for (let i = 0; i < howMany; i++) {\n        const hexChar = this.popChar();\n        if (hexDigitPattern.test(hexChar) === false) {\n          throw Error(\"Expecting a HexDecimal digits\");\n        }\n        hexString += hexChar;\n      }\n      const charCode = parseInt(hexString, 16);\n      return {\n        type: \"Character\",\n        value: charCode\n      };\n    }\n    peekChar(howMuch = 0) {\n      return this.input[this.idx + howMuch];\n    }\n    popChar() {\n      const nextChar = this.peekChar(0);\n      this.consumeChar(void 0);\n      return nextChar;\n    }\n    consumeChar(char) {\n      if (char !== void 0 && this.input[this.idx] !== char) {\n        throw Error(\"Expected: '\" + char + \"' but found: '\" + this.input[this.idx] + \"' at offset: \" + this.idx);\n      }\n      if (this.idx >= this.input.length) {\n        throw Error(\"Unexpected end of input\");\n      }\n      this.idx++;\n    }\n    loc(begin) {\n      return {\n        begin,\n        end: this.idx\n      };\n    }\n  }\n  class BaseRegExpVisitor {\n    visitChildren(node) {\n      for (const key in node) {\n        const child = node[key];\n        if (node.hasOwnProperty(key)) {\n          if (child.type !== void 0) {\n            this.visit(child);\n          } else if (Array.isArray(child)) {\n            child.forEach(subChild => {\n              this.visit(subChild);\n            }, this);\n          }\n        }\n      }\n    }\n    visit(node) {\n      switch (node.type) {\n        case \"Pattern\":\n          this.visitPattern(node);\n          break;\n        case \"Flags\":\n          this.visitFlags(node);\n          break;\n        case \"Disjunction\":\n          this.visitDisjunction(node);\n          break;\n        case \"Alternative\":\n          this.visitAlternative(node);\n          break;\n        case \"StartAnchor\":\n          this.visitStartAnchor(node);\n          break;\n        case \"EndAnchor\":\n          this.visitEndAnchor(node);\n          break;\n        case \"WordBoundary\":\n          this.visitWordBoundary(node);\n          break;\n        case \"NonWordBoundary\":\n          this.visitNonWordBoundary(node);\n          break;\n        case \"Lookahead\":\n          this.visitLookahead(node);\n          break;\n        case \"NegativeLookahead\":\n          this.visitNegativeLookahead(node);\n          break;\n        case \"Character\":\n          this.visitCharacter(node);\n          break;\n        case \"Set\":\n          this.visitSet(node);\n          break;\n        case \"Group\":\n          this.visitGroup(node);\n          break;\n        case \"GroupBackReference\":\n          this.visitGroupBackReference(node);\n          break;\n        case \"Quantifier\":\n          this.visitQuantifier(node);\n          break;\n      }\n      this.visitChildren(node);\n    }\n    visitPattern(node) {}\n    visitFlags(node) {}\n    visitDisjunction(node) {}\n    visitAlternative(node) {}\n    // Assertion\n    visitStartAnchor(node) {}\n    visitEndAnchor(node) {}\n    visitWordBoundary(node) {}\n    visitNonWordBoundary(node) {}\n    visitLookahead(node) {}\n    visitNegativeLookahead(node) {}\n    // atoms\n    visitCharacter(node) {}\n    visitSet(node) {}\n    visitGroup(node) {}\n    visitGroupBackReference(node) {}\n    visitQuantifier(node) {}\n  }\n  let regExpAstCache = {};\n  const regExpParser = new RegExpParser();\n  function getRegExpAst(regExp) {\n    const regExpStr = regExp.toString();\n    if (regExpAstCache.hasOwnProperty(regExpStr)) {\n      return regExpAstCache[regExpStr];\n    } else {\n      const regExpAst = regExpParser.pattern(regExpStr);\n      regExpAstCache[regExpStr] = regExpAst;\n      return regExpAst;\n    }\n  }\n  function clearRegExpParserCache() {\n    regExpAstCache = {};\n  }\n  const complementErrorMessage = \"Complement Sets are not supported for first char optimization\";\n  const failedOptimizationPrefixMsg = 'Unable to use \"first char\" lexer optimizations:\\n';\n  function getOptimizedStartCodesIndices(regExp, ensureOptimizations = false) {\n    try {\n      const ast = getRegExpAst(regExp);\n      const firstChars = firstCharOptimizedIndices(ast.value, {}, ast.flags.ignoreCase);\n      return firstChars;\n    } catch (e) {\n      if (e.message === complementErrorMessage) {\n        if (ensureOptimizations) {\n          PRINT_WARNING(`${failedOptimizationPrefixMsg}\tUnable to optimize: < ${regExp.toString()} >\n\tComplement Sets cannot be automatically optimized.\n\tThis will disable the lexer's first char optimizations.\n\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.`);\n        }\n      } else {\n        let msgSuffix = \"\";\n        if (ensureOptimizations) {\n          msgSuffix = \"\\n\tThis will disable the lexer's first char optimizations.\\n\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n        }\n        PRINT_ERROR(`${failedOptimizationPrefixMsg}\n\tFailed parsing: < ${regExp.toString()} >\n\tUsing the @chevrotain/regexp-to-ast library\n\tPlease open an issue at: https://github.com/chevrotain/chevrotain/issues` + msgSuffix);\n      }\n    }\n    return [];\n  }\n  function firstCharOptimizedIndices(ast, result, ignoreCase) {\n    switch (ast.type) {\n      case \"Disjunction\":\n        for (let i = 0; i < ast.value.length; i++) {\n          firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n        }\n        break;\n      case \"Alternative\":\n        const terms = ast.value;\n        for (let i = 0; i < terms.length; i++) {\n          const term = terms[i];\n          switch (term.type) {\n            case \"EndAnchor\":\n            case \"GroupBackReference\":\n            case \"Lookahead\":\n            case \"NegativeLookahead\":\n            case \"StartAnchor\":\n            case \"WordBoundary\":\n            case \"NonWordBoundary\":\n              continue;\n          }\n          const atom = term;\n          switch (atom.type) {\n            case \"Character\":\n              addOptimizedIdxToResult(atom.value, result, ignoreCase);\n              break;\n            case \"Set\":\n              if (atom.complement === true) {\n                throw Error(complementErrorMessage);\n              }\n              forEach(atom.value, code => {\n                if (typeof code === \"number\") {\n                  addOptimizedIdxToResult(code, result, ignoreCase);\n                } else {\n                  const range = code;\n                  if (ignoreCase === true) {\n                    for (let rangeCode = range.from; rangeCode <= range.to; rangeCode++) {\n                      addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                    }\n                  } else {\n                    for (let rangeCode = range.from; rangeCode <= range.to && rangeCode < minOptimizationVal; rangeCode++) {\n                      addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                    }\n                    if (range.to >= minOptimizationVal) {\n                      const minUnOptVal = range.from >= minOptimizationVal ? range.from : minOptimizationVal;\n                      const maxUnOptVal = range.to;\n                      const minOptIdx = charCodeToOptimizedIndex(minUnOptVal);\n                      const maxOptIdx = charCodeToOptimizedIndex(maxUnOptVal);\n                      for (let currOptIdx = minOptIdx; currOptIdx <= maxOptIdx; currOptIdx++) {\n                        result[currOptIdx] = currOptIdx;\n                      }\n                    }\n                  }\n                }\n              });\n              break;\n            case \"Group\":\n              firstCharOptimizedIndices(atom.value, result, ignoreCase);\n              break;\n            default:\n              throw Error(\"Non Exhaustive Match\");\n          }\n          const isOptionalQuantifier = atom.quantifier !== void 0 && atom.quantifier.atLeast === 0;\n          if (\n          // A group may be optional due to empty contents /(?:)/\n          // or if everything inside it is optional /((a)?)/\n          atom.type === \"Group\" && isWholeOptional(atom) === false ||\n          // If this term is not a group it may only be optional if it has an optional quantifier\n          atom.type !== \"Group\" && isOptionalQuantifier === false) {\n            break;\n          }\n        }\n        break;\n      default:\n        throw Error(\"non exhaustive match!\");\n    }\n    return values(result);\n  }\n  function addOptimizedIdxToResult(code, result, ignoreCase) {\n    const optimizedCharIdx = charCodeToOptimizedIndex(code);\n    result[optimizedCharIdx] = optimizedCharIdx;\n    if (ignoreCase === true) {\n      handleIgnoreCase(code, result);\n    }\n  }\n  function handleIgnoreCase(code, result) {\n    const char = String.fromCharCode(code);\n    const upperChar = char.toUpperCase();\n    if (upperChar !== char) {\n      const optimizedCharIdx = charCodeToOptimizedIndex(upperChar.charCodeAt(0));\n      result[optimizedCharIdx] = optimizedCharIdx;\n    } else {\n      const lowerChar = char.toLowerCase();\n      if (lowerChar !== char) {\n        const optimizedCharIdx = charCodeToOptimizedIndex(lowerChar.charCodeAt(0));\n        result[optimizedCharIdx] = optimizedCharIdx;\n      }\n    }\n  }\n  function findCode(setNode, targetCharCodes) {\n    return find$1(setNode.value, codeOrRange => {\n      if (typeof codeOrRange === \"number\") {\n        return includes(targetCharCodes, codeOrRange);\n      } else {\n        const range = codeOrRange;\n        return find$1(targetCharCodes, targetCode => range.from <= targetCode && targetCode <= range.to) !== void 0;\n      }\n    });\n  }\n  function isWholeOptional(ast) {\n    const quantifier = ast.quantifier;\n    if (quantifier && quantifier.atLeast === 0) {\n      return true;\n    }\n    if (!ast.value) {\n      return false;\n    }\n    return isArray$1(ast.value) ? every(ast.value, isWholeOptional) : isWholeOptional(ast.value);\n  }\n  class CharCodeFinder extends BaseRegExpVisitor {\n    constructor(targetCharCodes) {\n      super();\n      this.targetCharCodes = targetCharCodes;\n      this.found = false;\n    }\n    visitChildren(node) {\n      if (this.found === true) {\n        return;\n      }\n      switch (node.type) {\n        case \"Lookahead\":\n          this.visitLookahead(node);\n          return;\n        case \"NegativeLookahead\":\n          this.visitNegativeLookahead(node);\n          return;\n      }\n      super.visitChildren(node);\n    }\n    visitCharacter(node) {\n      if (includes(this.targetCharCodes, node.value)) {\n        this.found = true;\n      }\n    }\n    visitSet(node) {\n      if (node.complement) {\n        if (findCode(node, this.targetCharCodes) === void 0) {\n          this.found = true;\n        }\n      } else {\n        if (findCode(node, this.targetCharCodes) !== void 0) {\n          this.found = true;\n        }\n      }\n    }\n  }\n  function canMatchCharCode(charCodes, pattern) {\n    if (pattern instanceof RegExp) {\n      const ast = getRegExpAst(pattern);\n      const charCodeFinder = new CharCodeFinder(charCodes);\n      charCodeFinder.visit(ast);\n      return charCodeFinder.found;\n    } else {\n      return find$1(pattern, char => {\n        return includes(charCodes, char.charCodeAt(0));\n      }) !== void 0;\n    }\n  }\n  const PATTERN = \"PATTERN\";\n  const DEFAULT_MODE = \"defaultMode\";\n  const MODES = \"modes\";\n  let SUPPORT_STICKY = typeof new RegExp(\"(?:)\").sticky === \"boolean\";\n  function analyzeTokenTypes(tokenTypes, options) {\n    options = defaults$1(options, {\n      useSticky: SUPPORT_STICKY,\n      debug: false,\n      safeMode: false,\n      positionTracking: \"full\",\n      lineTerminatorCharacters: [\"\\r\", \"\\n\"],\n      tracer: (msg, action) => action()\n    });\n    const tracer = options.tracer;\n    tracer(\"initCharCodeToOptimizedIndexMap\", () => {\n      initCharCodeToOptimizedIndexMap();\n    });\n    let onlyRelevantTypes;\n    tracer(\"Reject Lexer.NA\", () => {\n      onlyRelevantTypes = reject(tokenTypes, currType => {\n        return currType[PATTERN] === Lexer2.NA;\n      });\n    });\n    let hasCustom = false;\n    let allTransformedPatterns;\n    tracer(\"Transform Patterns\", () => {\n      hasCustom = false;\n      allTransformedPatterns = map(onlyRelevantTypes, currType => {\n        const currPattern = currType[PATTERN];\n        if (isRegExp$1(currPattern)) {\n          const regExpSource = currPattern.source;\n          if (regExpSource.length === 1 &&\n          // only these regExp meta characters which can appear in a length one regExp\n          regExpSource !== \"^\" && regExpSource !== \"$\" && regExpSource !== \".\" && !currPattern.ignoreCase) {\n            return regExpSource;\n          } else if (regExpSource.length === 2 && regExpSource[0] === \"\\\\\" &&\n          // not a meta character\n          !includes([\"d\", \"D\", \"s\", \"S\", \"t\", \"r\", \"n\", \"t\", \"0\", \"c\", \"b\", \"B\", \"f\", \"v\", \"w\", \"W\"], regExpSource[1])) {\n            return regExpSource[1];\n          } else {\n            return options.useSticky ? addStickyFlag(currPattern) : addStartOfInput(currPattern);\n          }\n        } else if (isFunction(currPattern)) {\n          hasCustom = true;\n          return {\n            exec: currPattern\n          };\n        } else if (typeof currPattern === \"object\") {\n          hasCustom = true;\n          return currPattern;\n        } else if (typeof currPattern === \"string\") {\n          if (currPattern.length === 1) {\n            return currPattern;\n          } else {\n            const escapedRegExpString = currPattern.replace(/[\\\\^$.*+?()[\\]{}|]/g, \"\\\\$&\");\n            const wrappedRegExp = new RegExp(escapedRegExpString);\n            return options.useSticky ? addStickyFlag(wrappedRegExp) : addStartOfInput(wrappedRegExp);\n          }\n        } else {\n          throw Error(\"non exhaustive match\");\n        }\n      });\n    });\n    let patternIdxToType;\n    let patternIdxToGroup;\n    let patternIdxToLongerAltIdxArr;\n    let patternIdxToPushMode;\n    let patternIdxToPopMode;\n    tracer(\"misc mapping\", () => {\n      patternIdxToType = map(onlyRelevantTypes, currType => currType.tokenTypeIdx);\n      patternIdxToGroup = map(onlyRelevantTypes, clazz => {\n        const groupName = clazz.GROUP;\n        if (groupName === Lexer2.SKIPPED) {\n          return void 0;\n        } else if (isString(groupName)) {\n          return groupName;\n        } else if (isUndefined(groupName)) {\n          return false;\n        } else {\n          throw Error(\"non exhaustive match\");\n        }\n      });\n      patternIdxToLongerAltIdxArr = map(onlyRelevantTypes, clazz => {\n        const longerAltType = clazz.LONGER_ALT;\n        if (longerAltType) {\n          const longerAltIdxArr = isArray$1(longerAltType) ? map(longerAltType, type => indexOf(onlyRelevantTypes, type)) : [indexOf(onlyRelevantTypes, longerAltType)];\n          return longerAltIdxArr;\n        }\n      });\n      patternIdxToPushMode = map(onlyRelevantTypes, clazz => clazz.PUSH_MODE);\n      patternIdxToPopMode = map(onlyRelevantTypes, clazz => has(clazz, \"POP_MODE\"));\n    });\n    let patternIdxToCanLineTerminator;\n    tracer(\"Line Terminator Handling\", () => {\n      const lineTerminatorCharCodes = getCharCodes(options.lineTerminatorCharacters);\n      patternIdxToCanLineTerminator = map(onlyRelevantTypes, tokType => false);\n      if (options.positionTracking !== \"onlyOffset\") {\n        patternIdxToCanLineTerminator = map(onlyRelevantTypes, tokType => {\n          if (has(tokType, \"LINE_BREAKS\")) {\n            return !!tokType.LINE_BREAKS;\n          } else {\n            return checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false && canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN);\n          }\n        });\n      }\n    });\n    let patternIdxToIsCustom;\n    let patternIdxToShort;\n    let emptyGroups;\n    let patternIdxToConfig;\n    tracer(\"Misc Mapping #2\", () => {\n      patternIdxToIsCustom = map(onlyRelevantTypes, isCustomPattern);\n      patternIdxToShort = map(allTransformedPatterns, isShortPattern);\n      emptyGroups = reduce(onlyRelevantTypes, (acc, clazz) => {\n        const groupName = clazz.GROUP;\n        if (isString(groupName) && !(groupName === Lexer2.SKIPPED)) {\n          acc[groupName] = [];\n        }\n        return acc;\n      }, {});\n      patternIdxToConfig = map(allTransformedPatterns, (x, idx) => {\n        return {\n          pattern: allTransformedPatterns[idx],\n          longerAlt: patternIdxToLongerAltIdxArr[idx],\n          canLineTerminator: patternIdxToCanLineTerminator[idx],\n          isCustom: patternIdxToIsCustom[idx],\n          short: patternIdxToShort[idx],\n          group: patternIdxToGroup[idx],\n          push: patternIdxToPushMode[idx],\n          pop: patternIdxToPopMode[idx],\n          tokenTypeIdx: patternIdxToType[idx],\n          tokenType: onlyRelevantTypes[idx]\n        };\n      });\n    });\n    let canBeOptimized = true;\n    let charCodeToPatternIdxToConfig = [];\n    if (!options.safeMode) {\n      tracer(\"First Char Optimization\", () => {\n        charCodeToPatternIdxToConfig = reduce(onlyRelevantTypes, (result, currTokType, idx) => {\n          if (typeof currTokType.PATTERN === \"string\") {\n            const charCode = currTokType.PATTERN.charCodeAt(0);\n            const optimizedIdx = charCodeToOptimizedIndex(charCode);\n            addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);\n          } else if (isArray$1(currTokType.START_CHARS_HINT)) {\n            let lastOptimizedIdx;\n            forEach(currTokType.START_CHARS_HINT, charOrInt => {\n              const charCode = typeof charOrInt === \"string\" ? charOrInt.charCodeAt(0) : charOrInt;\n              const currOptimizedIdx = charCodeToOptimizedIndex(charCode);\n              if (lastOptimizedIdx !== currOptimizedIdx) {\n                lastOptimizedIdx = currOptimizedIdx;\n                addToMapOfArrays(result, currOptimizedIdx, patternIdxToConfig[idx]);\n              }\n            });\n          } else if (isRegExp$1(currTokType.PATTERN)) {\n            if (currTokType.PATTERN.unicode) {\n              canBeOptimized = false;\n              if (options.ensureOptimizations) {\n                PRINT_ERROR(`${failedOptimizationPrefixMsg}\tUnable to analyze < ${currTokType.PATTERN.toString()} > pattern.\n\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\n\tThis will disable the lexer's first char optimizations.\n\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE`);\n              }\n            } else {\n              const optimizedCodes = getOptimizedStartCodesIndices(currTokType.PATTERN, options.ensureOptimizations);\n              if (isEmpty(optimizedCodes)) {\n                canBeOptimized = false;\n              }\n              forEach(optimizedCodes, code => {\n                addToMapOfArrays(result, code, patternIdxToConfig[idx]);\n              });\n            }\n          } else {\n            if (options.ensureOptimizations) {\n              PRINT_ERROR(`${failedOptimizationPrefixMsg}\tTokenType: <${currTokType.name}> is using a custom token pattern without providing <start_chars_hint> parameter.\n\tThis will disable the lexer's first char optimizations.\n\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE`);\n            }\n            canBeOptimized = false;\n          }\n          return result;\n        }, []);\n      });\n    }\n    return {\n      emptyGroups,\n      patternIdxToConfig,\n      charCodeToPatternIdxToConfig,\n      hasCustom,\n      canBeOptimized\n    };\n  }\n  function validatePatterns(tokenTypes, validModesNames) {\n    let errors = [];\n    const missingResult = findMissingPatterns(tokenTypes);\n    errors = errors.concat(missingResult.errors);\n    const invalidResult = findInvalidPatterns(missingResult.valid);\n    const validTokenTypes = invalidResult.valid;\n    errors = errors.concat(invalidResult.errors);\n    errors = errors.concat(validateRegExpPattern(validTokenTypes));\n    errors = errors.concat(findInvalidGroupType(validTokenTypes));\n    errors = errors.concat(findModesThatDoNotExist(validTokenTypes, validModesNames));\n    errors = errors.concat(findUnreachablePatterns(validTokenTypes));\n    return errors;\n  }\n  function validateRegExpPattern(tokenTypes) {\n    let errors = [];\n    const withRegExpPatterns = filter(tokenTypes, currTokType => isRegExp$1(currTokType[PATTERN]));\n    errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));\n    errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));\n    errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));\n    errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));\n    errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));\n    return errors;\n  }\n  function findMissingPatterns(tokenTypes) {\n    const tokenTypesWithMissingPattern = filter(tokenTypes, currType => {\n      return !has(currType, PATTERN);\n    });\n    const errors = map(tokenTypesWithMissingPattern, currType => {\n      return {\n        message: \"Token Type: ->\" + currType.name + \"<- missing static 'PATTERN' property\",\n        type: LexerDefinitionErrorType.MISSING_PATTERN,\n        tokenTypes: [currType]\n      };\n    });\n    const valid = difference$1(tokenTypes, tokenTypesWithMissingPattern);\n    return {\n      errors,\n      valid\n    };\n  }\n  function findInvalidPatterns(tokenTypes) {\n    const tokenTypesWithInvalidPattern = filter(tokenTypes, currType => {\n      const pattern = currType[PATTERN];\n      return !isRegExp$1(pattern) && !isFunction(pattern) && !has(pattern, \"exec\") && !isString(pattern);\n    });\n    const errors = map(tokenTypesWithInvalidPattern, currType => {\n      return {\n        message: \"Token Type: ->\" + currType.name + \"<- static 'PATTERN' can only be a RegExp, a Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.\",\n        type: LexerDefinitionErrorType.INVALID_PATTERN,\n        tokenTypes: [currType]\n      };\n    });\n    const valid = difference$1(tokenTypes, tokenTypesWithInvalidPattern);\n    return {\n      errors,\n      valid\n    };\n  }\n  const end_of_input = /[^\\\\][$]/;\n  function findEndOfInputAnchor(tokenTypes) {\n    class EndAnchorFinder extends BaseRegExpVisitor {\n      constructor() {\n        super(...arguments);\n        this.found = false;\n      }\n      visitEndAnchor(node) {\n        this.found = true;\n      }\n    }\n    const invalidRegex = filter(tokenTypes, currType => {\n      const pattern = currType.PATTERN;\n      try {\n        const regexpAst = getRegExpAst(pattern);\n        const endAnchorVisitor = new EndAnchorFinder();\n        endAnchorVisitor.visit(regexpAst);\n        return endAnchorVisitor.found;\n      } catch (e) {\n        return end_of_input.test(pattern.source);\n      }\n    });\n    const errors = map(invalidRegex, currType => {\n      return {\n        message: \"Unexpected RegExp Anchor Error:\\n\tToken Type: ->\" + currType.name + \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\tfor details.\",\n        type: LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n        tokenTypes: [currType]\n      };\n    });\n    return errors;\n  }\n  function findEmptyMatchRegExps(tokenTypes) {\n    const matchesEmptyString = filter(tokenTypes, currType => {\n      const pattern = currType.PATTERN;\n      return pattern.test(\"\");\n    });\n    const errors = map(matchesEmptyString, currType => {\n      return {\n        message: \"Token Type: ->\" + currType.name + \"<- static 'PATTERN' must not match an empty string\",\n        type: LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n        tokenTypes: [currType]\n      };\n    });\n    return errors;\n  }\n  const start_of_input = /[^\\\\[][\\^]|^\\^/;\n  function findStartOfInputAnchor(tokenTypes) {\n    class StartAnchorFinder extends BaseRegExpVisitor {\n      constructor() {\n        super(...arguments);\n        this.found = false;\n      }\n      visitStartAnchor(node) {\n        this.found = true;\n      }\n    }\n    const invalidRegex = filter(tokenTypes, currType => {\n      const pattern = currType.PATTERN;\n      try {\n        const regexpAst = getRegExpAst(pattern);\n        const startAnchorVisitor = new StartAnchorFinder();\n        startAnchorVisitor.visit(regexpAst);\n        return startAnchorVisitor.found;\n      } catch (e) {\n        return start_of_input.test(pattern.source);\n      }\n    });\n    const errors = map(invalidRegex, currType => {\n      return {\n        message: \"Unexpected RegExp Anchor Error:\\n\tToken Type: ->\" + currType.name + \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\tfor details.\",\n        type: LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n        tokenTypes: [currType]\n      };\n    });\n    return errors;\n  }\n  function findUnsupportedFlags(tokenTypes) {\n    const invalidFlags = filter(tokenTypes, currType => {\n      const pattern = currType[PATTERN];\n      return pattern instanceof RegExp && (pattern.multiline || pattern.global);\n    });\n    const errors = map(invalidFlags, currType => {\n      return {\n        message: \"Token Type: ->\" + currType.name + \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n        type: LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n        tokenTypes: [currType]\n      };\n    });\n    return errors;\n  }\n  function findDuplicatePatterns(tokenTypes) {\n    const found = [];\n    let identicalPatterns = map(tokenTypes, outerType => {\n      return reduce(tokenTypes, (result, innerType) => {\n        if (outerType.PATTERN.source === innerType.PATTERN.source && !includes(found, innerType) && innerType.PATTERN !== Lexer2.NA) {\n          found.push(innerType);\n          result.push(innerType);\n          return result;\n        }\n        return result;\n      }, []);\n    });\n    identicalPatterns = compact(identicalPatterns);\n    const duplicatePatterns = filter(identicalPatterns, currIdenticalSet => {\n      return currIdenticalSet.length > 1;\n    });\n    const errors = map(duplicatePatterns, setOfIdentical => {\n      const tokenTypeNames = map(setOfIdentical, currType => {\n        return currType.name;\n      });\n      const dupPatternSrc = head(setOfIdentical).PATTERN;\n      return {\n        message: `The same RegExp pattern ->${dupPatternSrc}<-has been used in all of the following Token Types: ${tokenTypeNames.join(\", \")} <-`,\n        type: LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n        tokenTypes: setOfIdentical\n      };\n    });\n    return errors;\n  }\n  function findInvalidGroupType(tokenTypes) {\n    const invalidTypes = filter(tokenTypes, clazz => {\n      if (!has(clazz, \"GROUP\")) {\n        return false;\n      }\n      const group = clazz.GROUP;\n      return group !== Lexer2.SKIPPED && group !== Lexer2.NA && !isString(group);\n    });\n    const errors = map(invalidTypes, currType => {\n      return {\n        message: \"Token Type: ->\" + currType.name + \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n        type: LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n        tokenTypes: [currType]\n      };\n    });\n    return errors;\n  }\n  function findModesThatDoNotExist(tokenTypes, validModes) {\n    const invalidModes = filter(tokenTypes, clazz => {\n      return clazz.PUSH_MODE !== void 0 && !includes(validModes, clazz.PUSH_MODE);\n    });\n    const errors = map(invalidModes, tokType => {\n      const msg = `Token Type: ->${tokType.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${tokType.PUSH_MODE}<-which does not exist`;\n      return {\n        message: msg,\n        type: LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n        tokenTypes: [tokType]\n      };\n    });\n    return errors;\n  }\n  function findUnreachablePatterns(tokenTypes) {\n    const errors = [];\n    const canBeTested = reduce(tokenTypes, (result, tokType, idx) => {\n      const pattern = tokType.PATTERN;\n      if (pattern === Lexer2.NA) {\n        return result;\n      }\n      if (isString(pattern)) {\n        result.push({\n          str: pattern,\n          idx,\n          tokenType: tokType\n        });\n      } else if (isRegExp$1(pattern) && noMetaChar(pattern)) {\n        result.push({\n          str: pattern.source,\n          idx,\n          tokenType: tokType\n        });\n      }\n      return result;\n    }, []);\n    forEach(tokenTypes, (tokType, testIdx) => {\n      forEach(canBeTested, ({\n        str,\n        idx,\n        tokenType\n      }) => {\n        if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n          const msg = `Token: ->${tokenType.name}<- can never be matched.\nBecause it appears AFTER the Token Type ->${tokType.name}<-in the lexer's definition.\nSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`;\n          errors.push({\n            message: msg,\n            type: LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n            tokenTypes: [tokType, tokenType]\n          });\n        }\n      });\n    });\n    return errors;\n  }\n  function testTokenType(str, pattern) {\n    if (isRegExp$1(pattern)) {\n      const regExpArray = pattern.exec(str);\n      return regExpArray !== null && regExpArray.index === 0;\n    } else if (isFunction(pattern)) {\n      return pattern(str, 0, [], {});\n    } else if (has(pattern, \"exec\")) {\n      return pattern.exec(str, 0, [], {});\n    } else if (typeof pattern === \"string\") {\n      return pattern === str;\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  function noMetaChar(regExp) {\n    const metaChars = [\".\", \"\\\\\", \"[\", \"]\", \"|\", \"^\", \"$\", \"(\", \")\", \"?\", \"*\", \"+\", \"{\"];\n    return find$1(metaChars, char => regExp.source.indexOf(char) !== -1) === void 0;\n  }\n  function addStartOfInput(pattern) {\n    const flags = pattern.ignoreCase ? \"i\" : \"\";\n    return new RegExp(`^(?:${pattern.source})`, flags);\n  }\n  function addStickyFlag(pattern) {\n    const flags = pattern.ignoreCase ? \"iy\" : \"y\";\n    return new RegExp(`${pattern.source}`, flags);\n  }\n  function performRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n    const errors = [];\n    if (!has(lexerDefinition, DEFAULT_MODE)) {\n      errors.push({\n        message: \"A MultiMode Lexer cannot be initialized without a <\" + DEFAULT_MODE + \"> property in its definition\\n\",\n        type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\n      });\n    }\n    if (!has(lexerDefinition, MODES)) {\n      errors.push({\n        message: \"A MultiMode Lexer cannot be initialized without a <\" + MODES + \"> property in its definition\\n\",\n        type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\n      });\n    }\n    if (has(lexerDefinition, MODES) && has(lexerDefinition, DEFAULT_MODE) && !has(lexerDefinition.modes, lexerDefinition.defaultMode)) {\n      errors.push({\n        message: `A MultiMode Lexer cannot be initialized with a ${DEFAULT_MODE}: <${lexerDefinition.defaultMode}>which does not exist\n`,\n        type: LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\n      });\n    }\n    if (has(lexerDefinition, MODES)) {\n      forEach(lexerDefinition.modes, (currModeValue, currModeName) => {\n        forEach(currModeValue, (currTokType, currIdx) => {\n          if (isUndefined(currTokType)) {\n            errors.push({\n              message: `A Lexer cannot be initialized using an undefined Token Type. Mode:<${currModeName}> at index: <${currIdx}>\n`,\n              type: LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\n            });\n          } else if (has(currTokType, \"LONGER_ALT\")) {\n            const longerAlt = isArray$1(currTokType.LONGER_ALT) ? currTokType.LONGER_ALT : [currTokType.LONGER_ALT];\n            forEach(longerAlt, currLongerAlt => {\n              if (!isUndefined(currLongerAlt) && !includes(currModeValue, currLongerAlt)) {\n                errors.push({\n                  message: `A MultiMode Lexer cannot be initialized with a longer_alt <${currLongerAlt.name}> on token <${currTokType.name}> outside of mode <${currModeName}>\n`,\n                  type: LexerDefinitionErrorType.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE\n                });\n              }\n            });\n          }\n        });\n      });\n    }\n    return errors;\n  }\n  function performWarningRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n    const warnings = [];\n    let hasAnyLineBreak = false;\n    const allTokenTypes = compact(flatten(values(lexerDefinition.modes)));\n    const concreteTokenTypes = reject(allTokenTypes, currType => currType[PATTERN] === Lexer2.NA);\n    const terminatorCharCodes = getCharCodes(lineTerminatorCharacters);\n    if (trackLines) {\n      forEach(concreteTokenTypes, tokType => {\n        const currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);\n        if (currIssue !== false) {\n          const message = buildLineBreakIssueMessage(tokType, currIssue);\n          const warningDescriptor = {\n            message,\n            type: currIssue.issue,\n            tokenType: tokType\n          };\n          warnings.push(warningDescriptor);\n        } else {\n          if (has(tokType, \"LINE_BREAKS\")) {\n            if (tokType.LINE_BREAKS === true) {\n              hasAnyLineBreak = true;\n            }\n          } else {\n            if (canMatchCharCode(terminatorCharCodes, tokType.PATTERN)) {\n              hasAnyLineBreak = true;\n            }\n          }\n        }\n      });\n    }\n    if (trackLines && !hasAnyLineBreak) {\n      warnings.push({\n        message: \"Warning: No LINE_BREAKS Found.\\n\tThis Lexer has been defined to track line and column information,\\n\tBut none of the Token Types can be identified as matching a line terminator.\\n\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n\tfor details.\",\n        type: LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS\n      });\n    }\n    return warnings;\n  }\n  function cloneEmptyGroups(emptyGroups) {\n    const clonedResult = {};\n    const groupKeys = keys(emptyGroups);\n    forEach(groupKeys, currKey => {\n      const currGroupValue = emptyGroups[currKey];\n      if (isArray$1(currGroupValue)) {\n        clonedResult[currKey] = [];\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n    return clonedResult;\n  }\n  function isCustomPattern(tokenType) {\n    const pattern = tokenType.PATTERN;\n    if (isRegExp$1(pattern)) {\n      return false;\n    } else if (isFunction(pattern)) {\n      return true;\n    } else if (has(pattern, \"exec\")) {\n      return true;\n    } else if (isString(pattern)) {\n      return false;\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  function isShortPattern(pattern) {\n    if (isString(pattern) && pattern.length === 1) {\n      return pattern.charCodeAt(0);\n    } else {\n      return false;\n    }\n  }\n  const LineTerminatorOptimizedTester = {\n    // implements /\\n|\\r\\n?/g.test\n    test: function (text) {\n      const len = text.length;\n      for (let i = this.lastIndex; i < len; i++) {\n        const c = text.charCodeAt(i);\n        if (c === 10) {\n          this.lastIndex = i + 1;\n          return true;\n        } else if (c === 13) {\n          if (text.charCodeAt(i + 1) === 10) {\n            this.lastIndex = i + 2;\n          } else {\n            this.lastIndex = i + 1;\n          }\n          return true;\n        }\n      }\n      return false;\n    },\n    lastIndex: 0\n  };\n  function checkLineBreaksIssues(tokType, lineTerminatorCharCodes) {\n    if (has(tokType, \"LINE_BREAKS\")) {\n      return false;\n    } else {\n      if (isRegExp$1(tokType.PATTERN)) {\n        try {\n          canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN);\n        } catch (e) {\n          return {\n            issue: LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n            errMsg: e.message\n          };\n        }\n        return false;\n      } else if (isString(tokType.PATTERN)) {\n        return false;\n      } else if (isCustomPattern(tokType)) {\n        return {\n          issue: LexerDefinitionErrorType.CUSTOM_LINE_BREAK\n        };\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    }\n  }\n  function buildLineBreakIssueMessage(tokType, details) {\n    if (details.issue === LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n      return `Warning: unable to identify line terminator usage in pattern.\n\tThe problem is in the <${tokType.name}> Token Type\n\t Root cause: ${details.errMsg}.\n\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR`;\n    } else if (details.issue === LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n      return `Warning: A Custom Token Pattern should specify the <line_breaks> option.\n\tThe problem is in the <${tokType.name}> Token Type\n\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK`;\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  function getCharCodes(charsOrCodes) {\n    const charCodes = map(charsOrCodes, numOrString => {\n      if (isString(numOrString)) {\n        return numOrString.charCodeAt(0);\n      } else {\n        return numOrString;\n      }\n    });\n    return charCodes;\n  }\n  function addToMapOfArrays(map2, key, value) {\n    if (map2[key] === void 0) {\n      map2[key] = [value];\n    } else {\n      map2[key].push(value);\n    }\n  }\n  const minOptimizationVal = 256;\n  let charCodeToOptimizedIdxMap = [];\n  function charCodeToOptimizedIndex(charCode) {\n    return charCode < minOptimizationVal ? charCode : charCodeToOptimizedIdxMap[charCode];\n  }\n  function initCharCodeToOptimizedIndexMap() {\n    if (isEmpty(charCodeToOptimizedIdxMap)) {\n      charCodeToOptimizedIdxMap = new Array(65536);\n      for (let i = 0; i < 65536; i++) {\n        charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;\n      }\n    }\n  }\n  function tokenStructuredMatcher(tokInstance, tokConstructor) {\n    const instanceType = tokInstance.tokenTypeIdx;\n    if (instanceType === tokConstructor.tokenTypeIdx) {\n      return true;\n    } else {\n      return tokConstructor.isParent === true && tokConstructor.categoryMatchesMap[instanceType] === true;\n    }\n  }\n  function tokenStructuredMatcherNoCategories(token, tokType) {\n    return token.tokenTypeIdx === tokType.tokenTypeIdx;\n  }\n  let tokenShortNameIdx = 1;\n  const tokenIdxToClass = {};\n  function augmentTokenTypes(tokenTypes) {\n    const tokenTypesAndParents = expandCategories(tokenTypes);\n    assignTokenDefaultProps(tokenTypesAndParents);\n    assignCategoriesMapProp(tokenTypesAndParents);\n    assignCategoriesTokensProp(tokenTypesAndParents);\n    forEach(tokenTypesAndParents, tokType => {\n      tokType.isParent = tokType.categoryMatches.length > 0;\n    });\n  }\n  function expandCategories(tokenTypes) {\n    let result = clone(tokenTypes);\n    let categories = tokenTypes;\n    let searching = true;\n    while (searching) {\n      categories = compact(flatten(map(categories, currTokType => currTokType.CATEGORIES)));\n      const newCategories = difference$1(categories, result);\n      result = result.concat(newCategories);\n      if (isEmpty(newCategories)) {\n        searching = false;\n      } else {\n        categories = newCategories;\n      }\n    }\n    return result;\n  }\n  function assignTokenDefaultProps(tokenTypes) {\n    forEach(tokenTypes, currTokType => {\n      if (!hasShortKeyProperty(currTokType)) {\n        tokenIdxToClass[tokenShortNameIdx] = currTokType;\n        currTokType.tokenTypeIdx = tokenShortNameIdx++;\n      }\n      if (hasCategoriesProperty(currTokType) && !isArray$1(currTokType.CATEGORIES)) {\n        currTokType.CATEGORIES = [currTokType.CATEGORIES];\n      }\n      if (!hasCategoriesProperty(currTokType)) {\n        currTokType.CATEGORIES = [];\n      }\n      if (!hasExtendingTokensTypesProperty(currTokType)) {\n        currTokType.categoryMatches = [];\n      }\n      if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n        currTokType.categoryMatchesMap = {};\n      }\n    });\n  }\n  function assignCategoriesTokensProp(tokenTypes) {\n    forEach(tokenTypes, currTokType => {\n      currTokType.categoryMatches = [];\n      forEach(currTokType.categoryMatchesMap, (val, key) => {\n        currTokType.categoryMatches.push(tokenIdxToClass[key].tokenTypeIdx);\n      });\n    });\n  }\n  function assignCategoriesMapProp(tokenTypes) {\n    forEach(tokenTypes, currTokType => {\n      singleAssignCategoriesToksMap([], currTokType);\n    });\n  }\n  function singleAssignCategoriesToksMap(path, nextNode) {\n    forEach(path, pathNode => {\n      nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true;\n    });\n    forEach(nextNode.CATEGORIES, nextCategory => {\n      const newPath = path.concat(nextNode);\n      if (!includes(newPath, nextCategory)) {\n        singleAssignCategoriesToksMap(newPath, nextCategory);\n      }\n    });\n  }\n  function hasShortKeyProperty(tokType) {\n    return has(tokType, \"tokenTypeIdx\");\n  }\n  function hasCategoriesProperty(tokType) {\n    return has(tokType, \"CATEGORIES\");\n  }\n  function hasExtendingTokensTypesProperty(tokType) {\n    return has(tokType, \"categoryMatches\");\n  }\n  function hasExtendingTokensTypesMapProperty(tokType) {\n    return has(tokType, \"categoryMatchesMap\");\n  }\n  function isTokenType(tokType) {\n    return has(tokType, \"tokenTypeIdx\");\n  }\n  const defaultLexerErrorProvider = {\n    buildUnableToPopLexerModeMessage(token) {\n      return `Unable to pop Lexer Mode after encountering Token ->${token.image}<- The Mode Stack is empty`;\n    },\n    buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column) {\n      return `unexpected character: ->${fullText.charAt(startOffset)}<- at offset: ${startOffset}, skipped ${length} characters.`;\n    }\n  };\n  var LexerDefinitionErrorType;\n  (function (LexerDefinitionErrorType2) {\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"MISSING_PATTERN\"] = 0] = \"MISSING_PATTERN\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"INVALID_PATTERN\"] = 1] = \"INVALID_PATTERN\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"EOI_ANCHOR_FOUND\"] = 2] = \"EOI_ANCHOR_FOUND\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"UNSUPPORTED_FLAGS_FOUND\"] = 3] = \"UNSUPPORTED_FLAGS_FOUND\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"DUPLICATE_PATTERNS_FOUND\"] = 4] = \"DUPLICATE_PATTERNS_FOUND\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"INVALID_GROUP_TYPE_FOUND\"] = 5] = \"INVALID_GROUP_TYPE_FOUND\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"PUSH_MODE_DOES_NOT_EXIST\"] = 6] = \"PUSH_MODE_DOES_NOT_EXIST\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\"] = 7] = \"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\"] = 8] = \"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\"] = 9] = \"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\"] = 10] = \"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"SOI_ANCHOR_FOUND\"] = 11] = \"SOI_ANCHOR_FOUND\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"EMPTY_MATCH_PATTERN\"] = 12] = \"EMPTY_MATCH_PATTERN\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"NO_LINE_BREAKS_FLAGS\"] = 13] = \"NO_LINE_BREAKS_FLAGS\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"UNREACHABLE_PATTERN\"] = 14] = \"UNREACHABLE_PATTERN\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"IDENTIFY_TERMINATOR\"] = 15] = \"IDENTIFY_TERMINATOR\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"CUSTOM_LINE_BREAK\"] = 16] = \"CUSTOM_LINE_BREAK\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE\"] = 17] = \"MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE\";\n  })(LexerDefinitionErrorType || (LexerDefinitionErrorType = {}));\n  const DEFAULT_LEXER_CONFIG = {\n    deferDefinitionErrorsHandling: false,\n    positionTracking: \"full\",\n    lineTerminatorsPattern: /\\n|\\r\\n?/g,\n    lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n    ensureOptimizations: false,\n    safeMode: false,\n    errorMessageProvider: defaultLexerErrorProvider,\n    traceInitPerf: false,\n    skipValidations: false,\n    recoveryEnabled: true\n  };\n  Object.freeze(DEFAULT_LEXER_CONFIG);\n  class Lexer2 {\n    constructor(lexerDefinition, config = DEFAULT_LEXER_CONFIG) {\n      this.lexerDefinition = lexerDefinition;\n      this.lexerDefinitionErrors = [];\n      this.lexerDefinitionWarning = [];\n      this.patternIdxToConfig = {};\n      this.charCodeToPatternIdxToConfig = {};\n      this.modes = [];\n      this.emptyGroups = {};\n      this.trackStartLines = true;\n      this.trackEndLines = true;\n      this.hasCustom = false;\n      this.canModeBeOptimized = {};\n      this.TRACE_INIT = (phaseDesc, phaseImpl) => {\n        if (this.traceInitPerf === true) {\n          this.traceInitIndent++;\n          const indent = new Array(this.traceInitIndent + 1).join(\"\t\");\n          if (this.traceInitIndent < this.traceInitMaxIdent) {\n            console.log(`${indent}--> <${phaseDesc}>`);\n          }\n          const {\n            time,\n            value\n          } = timer(phaseImpl);\n          const traceMethod = time > 10 ? console.warn : console.log;\n          if (this.traceInitIndent < this.traceInitMaxIdent) {\n            traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n          }\n          this.traceInitIndent--;\n          return value;\n        } else {\n          return phaseImpl();\n        }\n      };\n      if (typeof config === \"boolean\") {\n        throw Error(\"The second argument to the Lexer constructor is now an ILexerConfig Object.\\na boolean 2nd argument is no longer supported\");\n      }\n      this.config = assign$1({}, DEFAULT_LEXER_CONFIG, config);\n      const traceInitVal = this.config.traceInitPerf;\n      if (traceInitVal === true) {\n        this.traceInitMaxIdent = Infinity;\n        this.traceInitPerf = true;\n      } else if (typeof traceInitVal === \"number\") {\n        this.traceInitMaxIdent = traceInitVal;\n        this.traceInitPerf = true;\n      }\n      this.traceInitIndent = -1;\n      this.TRACE_INIT(\"Lexer Constructor\", () => {\n        let actualDefinition;\n        let hasOnlySingleMode = true;\n        this.TRACE_INIT(\"Lexer Config handling\", () => {\n          if (this.config.lineTerminatorsPattern === DEFAULT_LEXER_CONFIG.lineTerminatorsPattern) {\n            this.config.lineTerminatorsPattern = LineTerminatorOptimizedTester;\n          } else {\n            if (this.config.lineTerminatorCharacters === DEFAULT_LEXER_CONFIG.lineTerminatorCharacters) {\n              throw Error(\"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\");\n            }\n          }\n          if (config.safeMode && config.ensureOptimizations) {\n            throw Error('\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.');\n          }\n          this.trackStartLines = /full|onlyStart/i.test(this.config.positionTracking);\n          this.trackEndLines = /full/i.test(this.config.positionTracking);\n          if (isArray$1(lexerDefinition)) {\n            actualDefinition = {\n              modes: {\n                defaultMode: clone(lexerDefinition)\n              },\n              defaultMode: DEFAULT_MODE\n            };\n          } else {\n            hasOnlySingleMode = false;\n            actualDefinition = clone(lexerDefinition);\n          }\n        });\n        if (this.config.skipValidations === false) {\n          this.TRACE_INIT(\"performRuntimeChecks\", () => {\n            this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(performRuntimeChecks(actualDefinition, this.trackStartLines, this.config.lineTerminatorCharacters));\n          });\n          this.TRACE_INIT(\"performWarningRuntimeChecks\", () => {\n            this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(performWarningRuntimeChecks(actualDefinition, this.trackStartLines, this.config.lineTerminatorCharacters));\n          });\n        }\n        actualDefinition.modes = actualDefinition.modes ? actualDefinition.modes : {};\n        forEach(actualDefinition.modes, (currModeValue, currModeName) => {\n          actualDefinition.modes[currModeName] = reject(currModeValue, currTokType => isUndefined(currTokType));\n        });\n        const allModeNames = keys(actualDefinition.modes);\n        forEach(actualDefinition.modes, (currModDef, currModName) => {\n          this.TRACE_INIT(`Mode: <${currModName}> processing`, () => {\n            this.modes.push(currModName);\n            if (this.config.skipValidations === false) {\n              this.TRACE_INIT(`validatePatterns`, () => {\n                this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(validatePatterns(currModDef, allModeNames));\n              });\n            }\n            if (isEmpty(this.lexerDefinitionErrors)) {\n              augmentTokenTypes(currModDef);\n              let currAnalyzeResult;\n              this.TRACE_INIT(`analyzeTokenTypes`, () => {\n                currAnalyzeResult = analyzeTokenTypes(currModDef, {\n                  lineTerminatorCharacters: this.config.lineTerminatorCharacters,\n                  positionTracking: config.positionTracking,\n                  ensureOptimizations: config.ensureOptimizations,\n                  safeMode: config.safeMode,\n                  tracer: this.TRACE_INIT\n                });\n              });\n              this.patternIdxToConfig[currModName] = currAnalyzeResult.patternIdxToConfig;\n              this.charCodeToPatternIdxToConfig[currModName] = currAnalyzeResult.charCodeToPatternIdxToConfig;\n              this.emptyGroups = assign$1({}, this.emptyGroups, currAnalyzeResult.emptyGroups);\n              this.hasCustom = currAnalyzeResult.hasCustom || this.hasCustom;\n              this.canModeBeOptimized[currModName] = currAnalyzeResult.canBeOptimized;\n            }\n          });\n        });\n        this.defaultMode = actualDefinition.defaultMode;\n        if (!isEmpty(this.lexerDefinitionErrors) && !this.config.deferDefinitionErrorsHandling) {\n          const allErrMessages = map(this.lexerDefinitionErrors, error => {\n            return error.message;\n          });\n          const allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n          throw new Error(\"Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n        }\n        forEach(this.lexerDefinitionWarning, warningDescriptor => {\n          PRINT_WARNING(warningDescriptor.message);\n        });\n        this.TRACE_INIT(\"Choosing sub-methods implementations\", () => {\n          if (SUPPORT_STICKY) {\n            this.chopInput = identity;\n            this.match = this.matchWithTest;\n          } else {\n            this.updateLastIndex = noop;\n            this.match = this.matchWithExec;\n          }\n          if (hasOnlySingleMode) {\n            this.handleModes = noop;\n          }\n          if (this.trackStartLines === false) {\n            this.computeNewColumn = identity;\n          }\n          if (this.trackEndLines === false) {\n            this.updateTokenEndLineColumnLocation = noop;\n          }\n          if (/full/i.test(this.config.positionTracking)) {\n            this.createTokenInstance = this.createFullToken;\n          } else if (/onlyStart/i.test(this.config.positionTracking)) {\n            this.createTokenInstance = this.createStartOnlyToken;\n          } else if (/onlyOffset/i.test(this.config.positionTracking)) {\n            this.createTokenInstance = this.createOffsetOnlyToken;\n          } else {\n            throw Error(`Invalid <positionTracking> config option: \"${this.config.positionTracking}\"`);\n          }\n          if (this.hasCustom) {\n            this.addToken = this.addTokenUsingPush;\n            this.handlePayload = this.handlePayloadWithCustom;\n          } else {\n            this.addToken = this.addTokenUsingMemberAccess;\n            this.handlePayload = this.handlePayloadNoCustom;\n          }\n        });\n        this.TRACE_INIT(\"Failed Optimization Warnings\", () => {\n          const unOptimizedModes = reduce(this.canModeBeOptimized, (cannotBeOptimized, canBeOptimized, modeName) => {\n            if (canBeOptimized === false) {\n              cannotBeOptimized.push(modeName);\n            }\n            return cannotBeOptimized;\n          }, []);\n          if (config.ensureOptimizations && !isEmpty(unOptimizedModes)) {\n            throw Error(`Lexer Modes: < ${unOptimizedModes.join(\", \")} > cannot be optimized.\n\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\n\t Or inspect the console log for details on how to resolve these issues.`);\n          }\n        });\n        this.TRACE_INIT(\"clearRegExpParserCache\", () => {\n          clearRegExpParserCache();\n        });\n        this.TRACE_INIT(\"toFastProperties\", () => {\n          toFastProperties(this);\n        });\n      });\n    }\n    tokenize(text, initialMode = this.defaultMode) {\n      if (!isEmpty(this.lexerDefinitionErrors)) {\n        const allErrMessages = map(this.lexerDefinitionErrors, error => {\n          return error.message;\n        });\n        const allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n        throw new Error(\"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n      }\n      return this.tokenizeInternal(text, initialMode);\n    }\n    // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n    // This is intentional due to performance considerations.\n    // this method also used quite a bit of `!` none null assertions because it is too optimized\n    // for `tsc` to always understand it is \"safe\"\n    tokenizeInternal(text, initialMode) {\n      let i, j, k, matchAltImage, longerAlt, matchedImage, payload, altPayload, imageLength, group, tokType, newToken, errLength, msg, match;\n      const orgText = text;\n      const orgLength = orgText.length;\n      let offset = 0;\n      let matchedTokensIndex = 0;\n      const guessedNumberOfTokens = this.hasCustom ? 0 : Math.floor(text.length / 10);\n      const matchedTokens = new Array(guessedNumberOfTokens);\n      const errors = [];\n      let line = this.trackStartLines ? 1 : void 0;\n      let column = this.trackStartLines ? 1 : void 0;\n      const groups = cloneEmptyGroups(this.emptyGroups);\n      const trackLines = this.trackStartLines;\n      const lineTerminatorPattern = this.config.lineTerminatorsPattern;\n      let currModePatternsLength = 0;\n      let patternIdxToConfig = [];\n      let currCharCodeToPatternIdxToConfig = [];\n      const modeStack = [];\n      const emptyArray = [];\n      Object.freeze(emptyArray);\n      let getPossiblePatterns;\n      function getPossiblePatternsSlow() {\n        return patternIdxToConfig;\n      }\n      function getPossiblePatternsOptimized(charCode) {\n        const optimizedCharIdx = charCodeToOptimizedIndex(charCode);\n        const possiblePatterns = currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n        if (possiblePatterns === void 0) {\n          return emptyArray;\n        } else {\n          return possiblePatterns;\n        }\n      }\n      const pop_mode = popToken => {\n        if (modeStack.length === 1 &&\n        // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n        // So no error should occur.\n        popToken.tokenType.PUSH_MODE === void 0) {\n          const msg2 = this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(popToken);\n          errors.push({\n            offset: popToken.startOffset,\n            line: popToken.startLine,\n            column: popToken.startColumn,\n            length: popToken.image.length,\n            message: msg2\n          });\n        } else {\n          modeStack.pop();\n          const newMode = last(modeStack);\n          patternIdxToConfig = this.patternIdxToConfig[newMode];\n          currCharCodeToPatternIdxToConfig = this.charCodeToPatternIdxToConfig[newMode];\n          currModePatternsLength = patternIdxToConfig.length;\n          const modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n          if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n            getPossiblePatterns = getPossiblePatternsOptimized;\n          } else {\n            getPossiblePatterns = getPossiblePatternsSlow;\n          }\n        }\n      };\n      function push_mode(newMode) {\n        modeStack.push(newMode);\n        currCharCodeToPatternIdxToConfig = this.charCodeToPatternIdxToConfig[newMode];\n        patternIdxToConfig = this.patternIdxToConfig[newMode];\n        currModePatternsLength = patternIdxToConfig.length;\n        currModePatternsLength = patternIdxToConfig.length;\n        const modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n        if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n          getPossiblePatterns = getPossiblePatternsOptimized;\n        } else {\n          getPossiblePatterns = getPossiblePatternsSlow;\n        }\n      }\n      push_mode.call(this, initialMode);\n      let currConfig;\n      const recoveryEnabled = this.config.recoveryEnabled;\n      while (offset < orgLength) {\n        matchedImage = null;\n        const nextCharCode = orgText.charCodeAt(offset);\n        const chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n        const chosenPatternsLength = chosenPatternIdxToConfig.length;\n        for (i = 0; i < chosenPatternsLength; i++) {\n          currConfig = chosenPatternIdxToConfig[i];\n          const currPattern = currConfig.pattern;\n          payload = null;\n          const singleCharCode = currConfig.short;\n          if (singleCharCode !== false) {\n            if (nextCharCode === singleCharCode) {\n              matchedImage = currPattern;\n            }\n          } else if (currConfig.isCustom === true) {\n            match = currPattern.exec(orgText, offset, matchedTokens, groups);\n            if (match !== null) {\n              matchedImage = match[0];\n              if (match.payload !== void 0) {\n                payload = match.payload;\n              }\n            } else {\n              matchedImage = null;\n            }\n          } else {\n            this.updateLastIndex(currPattern, offset);\n            matchedImage = this.match(currPattern, text, offset);\n          }\n          if (matchedImage !== null) {\n            longerAlt = currConfig.longerAlt;\n            if (longerAlt !== void 0) {\n              const longerAltLength = longerAlt.length;\n              for (k = 0; k < longerAltLength; k++) {\n                const longerAltConfig = patternIdxToConfig[longerAlt[k]];\n                const longerAltPattern = longerAltConfig.pattern;\n                altPayload = null;\n                if (longerAltConfig.isCustom === true) {\n                  match = longerAltPattern.exec(orgText, offset, matchedTokens, groups);\n                  if (match !== null) {\n                    matchAltImage = match[0];\n                    if (match.payload !== void 0) {\n                      altPayload = match.payload;\n                    }\n                  } else {\n                    matchAltImage = null;\n                  }\n                } else {\n                  this.updateLastIndex(longerAltPattern, offset);\n                  matchAltImage = this.match(longerAltPattern, text, offset);\n                }\n                if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                  matchedImage = matchAltImage;\n                  payload = altPayload;\n                  currConfig = longerAltConfig;\n                  break;\n                }\n              }\n            }\n            break;\n          }\n        }\n        if (matchedImage !== null) {\n          imageLength = matchedImage.length;\n          group = currConfig.group;\n          if (group !== void 0) {\n            tokType = currConfig.tokenTypeIdx;\n            newToken = this.createTokenInstance(matchedImage, offset, tokType, currConfig.tokenType, line, column, imageLength);\n            this.handlePayload(newToken, payload);\n            if (group === false) {\n              matchedTokensIndex = this.addToken(matchedTokens, matchedTokensIndex, newToken);\n            } else {\n              groups[group].push(newToken);\n            }\n          }\n          text = this.chopInput(text, imageLength);\n          offset = offset + imageLength;\n          column = this.computeNewColumn(column, imageLength);\n          if (trackLines === true && currConfig.canLineTerminator === true) {\n            let numOfLTsInMatch = 0;\n            let foundTerminator;\n            let lastLTEndOffset;\n            lineTerminatorPattern.lastIndex = 0;\n            do {\n              foundTerminator = lineTerminatorPattern.test(matchedImage);\n              if (foundTerminator === true) {\n                lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n                numOfLTsInMatch++;\n              }\n            } while (foundTerminator === true);\n            if (numOfLTsInMatch !== 0) {\n              line = line + numOfLTsInMatch;\n              column = imageLength - lastLTEndOffset;\n              this.updateTokenEndLineColumnLocation(newToken, group, lastLTEndOffset, numOfLTsInMatch, line, column, imageLength);\n            }\n          }\n          this.handleModes(currConfig, pop_mode, push_mode, newToken);\n        } else {\n          const errorStartOffset = offset;\n          const errorLine = line;\n          const errorColumn = column;\n          let foundResyncPoint = recoveryEnabled === false;\n          while (foundResyncPoint === false && offset < orgLength) {\n            text = this.chopInput(text, 1);\n            offset++;\n            for (j = 0; j < currModePatternsLength; j++) {\n              const currConfig2 = patternIdxToConfig[j];\n              const currPattern = currConfig2.pattern;\n              const singleCharCode = currConfig2.short;\n              if (singleCharCode !== false) {\n                if (orgText.charCodeAt(offset) === singleCharCode) {\n                  foundResyncPoint = true;\n                }\n              } else if (currConfig2.isCustom === true) {\n                foundResyncPoint = currPattern.exec(orgText, offset, matchedTokens, groups) !== null;\n              } else {\n                this.updateLastIndex(currPattern, offset);\n                foundResyncPoint = currPattern.exec(text) !== null;\n              }\n              if (foundResyncPoint === true) {\n                break;\n              }\n            }\n          }\n          errLength = offset - errorStartOffset;\n          column = this.computeNewColumn(column, errLength);\n          msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(orgText, errorStartOffset, errLength, errorLine, errorColumn);\n          errors.push({\n            offset: errorStartOffset,\n            line: errorLine,\n            column: errorColumn,\n            length: errLength,\n            message: msg\n          });\n          if (recoveryEnabled === false) {\n            break;\n          }\n        }\n      }\n      if (!this.hasCustom) {\n        matchedTokens.length = matchedTokensIndex;\n      }\n      return {\n        tokens: matchedTokens,\n        groups,\n        errors\n      };\n    }\n    handleModes(config, pop_mode, push_mode, newToken) {\n      if (config.pop === true) {\n        const pushMode = config.push;\n        pop_mode(newToken);\n        if (pushMode !== void 0) {\n          push_mode.call(this, pushMode);\n        }\n      } else if (config.push !== void 0) {\n        push_mode.call(this, config.push);\n      }\n    }\n    chopInput(text, length) {\n      return text.substring(length);\n    }\n    updateLastIndex(regExp, newLastIndex) {\n      regExp.lastIndex = newLastIndex;\n    }\n    // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n    updateTokenEndLineColumnLocation(newToken, group, lastLTIdx, numOfLTsInMatch, line, column, imageLength) {\n      let lastCharIsLT, fixForEndingInLT;\n      if (group !== void 0) {\n        lastCharIsLT = lastLTIdx === imageLength - 1;\n        fixForEndingInLT = lastCharIsLT ? -1 : 0;\n        if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n          newToken.endLine = line + fixForEndingInLT;\n          newToken.endColumn = column - 1 + -fixForEndingInLT;\n        }\n      }\n    }\n    computeNewColumn(oldColumn, imageLength) {\n      return oldColumn + imageLength;\n    }\n    createOffsetOnlyToken(image, startOffset, tokenTypeIdx, tokenType) {\n      return {\n        image,\n        startOffset,\n        tokenTypeIdx,\n        tokenType\n      };\n    }\n    createStartOnlyToken(image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn) {\n      return {\n        image,\n        startOffset,\n        startLine,\n        startColumn,\n        tokenTypeIdx,\n        tokenType\n      };\n    }\n    createFullToken(image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn, imageLength) {\n      return {\n        image,\n        startOffset,\n        endOffset: startOffset + imageLength - 1,\n        startLine,\n        endLine: startLine,\n        startColumn,\n        endColumn: startColumn + imageLength - 1,\n        tokenTypeIdx,\n        tokenType\n      };\n    }\n    addTokenUsingPush(tokenVector, index, tokenToAdd) {\n      tokenVector.push(tokenToAdd);\n      return index;\n    }\n    addTokenUsingMemberAccess(tokenVector, index, tokenToAdd) {\n      tokenVector[index] = tokenToAdd;\n      index++;\n      return index;\n    }\n    handlePayloadNoCustom(token, payload) {}\n    handlePayloadWithCustom(token, payload) {\n      if (payload !== null) {\n        token.payload = payload;\n      }\n    }\n    matchWithTest(pattern, text, offset) {\n      const found = pattern.test(text);\n      if (found === true) {\n        return text.substring(offset, pattern.lastIndex);\n      }\n      return null;\n    }\n    matchWithExec(pattern, text) {\n      const regExpArray = pattern.exec(text);\n      return regExpArray !== null ? regExpArray[0] : null;\n    }\n  }\n  Lexer2.SKIPPED = \"This marks a skipped Token pattern, this means each token identified by it willbe consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\n  Lexer2.NA = /NOT_APPLICABLE/;\n  function tokenLabel(tokType) {\n    if (hasTokenLabel(tokType)) {\n      return tokType.LABEL;\n    } else {\n      return tokType.name;\n    }\n  }\n  function hasTokenLabel(obj) {\n    return isString(obj.LABEL) && obj.LABEL !== \"\";\n  }\n  const PARENT = \"parent\";\n  const CATEGORIES = \"categories\";\n  const LABEL = \"label\";\n  const GROUP = \"group\";\n  const PUSH_MODE = \"push_mode\";\n  const POP_MODE = \"pop_mode\";\n  const LONGER_ALT = \"longer_alt\";\n  const LINE_BREAKS = \"line_breaks\";\n  const START_CHARS_HINT = \"start_chars_hint\";\n  function createToken2(config) {\n    return createTokenInternal(config);\n  }\n  function createTokenInternal(config) {\n    const pattern = config.pattern;\n    const tokenType = {};\n    tokenType.name = config.name;\n    if (!isUndefined(pattern)) {\n      tokenType.PATTERN = pattern;\n    }\n    if (has(config, PARENT)) {\n      throw \"The parent property is no longer supported.\\nSee: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.\";\n    }\n    if (has(config, CATEGORIES)) {\n      tokenType.CATEGORIES = config[CATEGORIES];\n    }\n    augmentTokenTypes([tokenType]);\n    if (has(config, LABEL)) {\n      tokenType.LABEL = config[LABEL];\n    }\n    if (has(config, GROUP)) {\n      tokenType.GROUP = config[GROUP];\n    }\n    if (has(config, POP_MODE)) {\n      tokenType.POP_MODE = config[POP_MODE];\n    }\n    if (has(config, PUSH_MODE)) {\n      tokenType.PUSH_MODE = config[PUSH_MODE];\n    }\n    if (has(config, LONGER_ALT)) {\n      tokenType.LONGER_ALT = config[LONGER_ALT];\n    }\n    if (has(config, LINE_BREAKS)) {\n      tokenType.LINE_BREAKS = config[LINE_BREAKS];\n    }\n    if (has(config, START_CHARS_HINT)) {\n      tokenType.START_CHARS_HINT = config[START_CHARS_HINT];\n    }\n    return tokenType;\n  }\n  const EOF = createToken2({\n    name: \"EOF\",\n    pattern: Lexer2.NA\n  });\n  augmentTokenTypes([EOF]);\n  function createTokenInstance(tokType, image, startOffset, endOffset, startLine, endLine, startColumn, endColumn) {\n    return {\n      image,\n      startOffset,\n      endOffset,\n      startLine,\n      endLine,\n      startColumn,\n      endColumn,\n      tokenTypeIdx: tokType.tokenTypeIdx,\n      tokenType: tokType\n    };\n  }\n  function tokenMatcher(token, tokType) {\n    return tokenStructuredMatcher(token, tokType);\n  }\n  const defaultParserErrorProvider = {\n    buildMismatchTokenMessage({\n      expected,\n      actual,\n      previous,\n      ruleName\n    }) {\n      const hasLabel = hasTokenLabel(expected);\n      const expectedMsg = hasLabel ? `--> ${tokenLabel(expected)} <--` : `token of type --> ${expected.name} <--`;\n      const msg = `Expecting ${expectedMsg} but found --> '${actual.image}' <--`;\n      return msg;\n    },\n    buildNotAllInputParsedMessage({\n      firstRedundant,\n      ruleName\n    }) {\n      return \"Redundant input, expecting EOF but found: \" + firstRedundant.image;\n    },\n    buildNoViableAltMessage({\n      expectedPathsPerAlt,\n      actual,\n      previous,\n      customUserDescription,\n      ruleName\n    }) {\n      const errPrefix = \"Expecting: \";\n      const actualText = head(actual).image;\n      const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n      if (customUserDescription) {\n        return errPrefix + customUserDescription + errSuffix;\n      } else {\n        const allLookAheadPaths = reduce(expectedPathsPerAlt, (result, currAltPaths) => result.concat(currAltPaths), []);\n        const nextValidTokenSequences = map(allLookAheadPaths, currPath => `[${map(currPath, currTokenType => tokenLabel(currTokenType)).join(\", \")}]`);\n        const nextValidSequenceItems = map(nextValidTokenSequences, (itemMsg, idx) => `  ${idx + 1}. ${itemMsg}`);\n        const calculatedDescription = `one of these possible Token sequences:\n${nextValidSequenceItems.join(\"\\n\")}`;\n        return errPrefix + calculatedDescription + errSuffix;\n      }\n    },\n    buildEarlyExitMessage({\n      expectedIterationPaths,\n      actual,\n      customUserDescription,\n      ruleName\n    }) {\n      const errPrefix = \"Expecting: \";\n      const actualText = head(actual).image;\n      const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n      if (customUserDescription) {\n        return errPrefix + customUserDescription + errSuffix;\n      } else {\n        const nextValidTokenSequences = map(expectedIterationPaths, currPath => `[${map(currPath, currTokenType => tokenLabel(currTokenType)).join(\",\")}]`);\n        const calculatedDescription = `expecting at least one iteration which starts with one of these possible Token sequences::\n  <${nextValidTokenSequences.join(\" ,\")}>`;\n        return errPrefix + calculatedDescription + errSuffix;\n      }\n    }\n  };\n  Object.freeze(defaultParserErrorProvider);\n  const defaultGrammarResolverErrorProvider = {\n    buildRuleNotFoundError(topLevelRule, undefinedRule) {\n      const msg = \"Invalid grammar, reference to a rule which is not defined: ->\" + undefinedRule.nonTerminalName + \"<-\\ninside top level rule: ->\" + topLevelRule.name + \"<-\";\n      return msg;\n    }\n  };\n  const defaultGrammarValidatorErrorProvider = {\n    buildDuplicateFoundError(topLevelRule, duplicateProds) {\n      function getExtraProductionArgument2(prod) {\n        if (prod instanceof Terminal) {\n          return prod.terminalType.name;\n        } else if (prod instanceof NonTerminal) {\n          return prod.nonTerminalName;\n        } else {\n          return \"\";\n        }\n      }\n      const topLevelName = topLevelRule.name;\n      const duplicateProd = head(duplicateProds);\n      const index = duplicateProd.idx;\n      const dslName = getProductionDslName(duplicateProd);\n      const extraArgument = getExtraProductionArgument2(duplicateProd);\n      const hasExplicitIndex = index > 0;\n      let msg = `->${dslName}${hasExplicitIndex ? index : \"\"}<- ${extraArgument ? `with argument: ->${extraArgument}<-` : \"\"}\n                  appears more than once (${duplicateProds.length} times) in the top level rule: ->${topLevelName}<-.                  \n                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  `;\n      msg = msg.replace(/[ \\t]+/g, \" \");\n      msg = msg.replace(/\\s\\s+/g, \"\\n\");\n      return msg;\n    },\n    buildNamespaceConflictError(rule) {\n      const errMsg = `Namespace conflict found in grammar.\nThe grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${rule.name}>.\nTo resolve this make sure each Terminal and Non-Terminal names are unique\nThis is easy to accomplish by using the convention that Terminal names start with an uppercase letter\nand Non-Terminal names start with a lower case letter.`;\n      return errMsg;\n    },\n    buildAlternationPrefixAmbiguityError(options) {\n      const pathMsg = map(options.prefixPath, currTok => tokenLabel(currTok)).join(\", \");\n      const occurrence = options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      const errMsg = `Ambiguous alternatives: <${options.ambiguityIndices.join(\" ,\")}> due to common lookahead prefix\nin <OR${occurrence}> inside <${options.topLevelRule.name}> Rule,\n<${pathMsg}> may appears as a prefix path in all these alternatives.\nSee: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\nFor Further details.`;\n      return errMsg;\n    },\n    buildAlternationAmbiguityError(options) {\n      const pathMsg = map(options.prefixPath, currtok => tokenLabel(currtok)).join(\", \");\n      const occurrence = options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      let currMessage = `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\" ,\")}> in <OR${occurrence}> inside <${options.topLevelRule.name}> Rule,\n<${pathMsg}> may appears as a prefix path in all these alternatives.\n`;\n      currMessage = currMessage + `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\nFor Further details.`;\n      return currMessage;\n    },\n    buildEmptyRepetitionError(options) {\n      let dslName = getProductionDslName(options.repetition);\n      if (options.repetition.idx !== 0) {\n        dslName += options.repetition.idx;\n      }\n      const errMsg = `The repetition <${dslName}> within Rule <${options.topLevelRule.name}> can never consume any tokens.\nThis could lead to an infinite loop.`;\n      return errMsg;\n    },\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildTokenNameError(options) {\n      return \"deprecated\";\n    },\n    buildEmptyAlternationError(options) {\n      const errMsg = `Ambiguous empty alternative: <${options.emptyChoiceIdx + 1}> in <OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\nOnly the last alternative may be an empty alternative.`;\n      return errMsg;\n    },\n    buildTooManyAlternativesError(options) {\n      const errMsg = `An Alternation cannot have more than 256 alternatives:\n<OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\n has ${options.alternation.definition.length + 1} alternatives.`;\n      return errMsg;\n    },\n    buildLeftRecursionError(options) {\n      const ruleName = options.topLevelRule.name;\n      const pathNames = map(options.leftRecursionPath, currRule => currRule.name);\n      const leftRecursivePath = `${ruleName} --> ${pathNames.concat([ruleName]).join(\" --> \")}`;\n      const errMsg = `Left Recursion found in grammar.\nrule: <${ruleName}> can be invoked from itself (directly or indirectly)\nwithout consuming any Tokens. The grammar path that causes this is: \n ${leftRecursivePath}\n To fix this refactor your grammar to remove the left recursion.\nsee: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.`;\n      return errMsg;\n    },\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildInvalidRuleNameError(options) {\n      return \"deprecated\";\n    },\n    buildDuplicateRuleNameError(options) {\n      let ruleName;\n      if (options.topLevelRule instanceof Rule) {\n        ruleName = options.topLevelRule.name;\n      } else {\n        ruleName = options.topLevelRule;\n      }\n      const errMsg = `Duplicate definition, rule: ->${ruleName}<- is already defined in the grammar: ->${options.grammarName}<-`;\n      return errMsg;\n    }\n  };\n  function resolveGrammar$1(topLevels, errMsgProvider) {\n    const refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);\n    refResolver.resolveRefs();\n    return refResolver.errors;\n  }\n  class GastRefResolverVisitor extends GAstVisitor {\n    constructor(nameToTopRule, errMsgProvider) {\n      super();\n      this.nameToTopRule = nameToTopRule;\n      this.errMsgProvider = errMsgProvider;\n      this.errors = [];\n    }\n    resolveRefs() {\n      forEach(values(this.nameToTopRule), prod => {\n        this.currTopLevel = prod;\n        prod.accept(this);\n      });\n    }\n    visitNonTerminal(node) {\n      const ref = this.nameToTopRule[node.nonTerminalName];\n      if (!ref) {\n        const msg = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, node);\n        this.errors.push({\n          message: msg,\n          type: ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n          ruleName: this.currTopLevel.name,\n          unresolvedRefName: node.nonTerminalName\n        });\n      } else {\n        node.referencedRule = ref;\n      }\n    }\n  }\n  class AbstractNextPossibleTokensWalker extends RestWalker {\n    constructor(topProd, path) {\n      super();\n      this.topProd = topProd;\n      this.path = path;\n      this.possibleTokTypes = [];\n      this.nextProductionName = \"\";\n      this.nextProductionOccurrence = 0;\n      this.found = false;\n      this.isAtEndOfPath = false;\n    }\n    startWalking() {\n      this.found = false;\n      if (this.path.ruleStack[0] !== this.topProd.name) {\n        throw Error(\"The path does not start with the walker's top Rule!\");\n      }\n      this.ruleStack = clone(this.path.ruleStack).reverse();\n      this.occurrenceStack = clone(this.path.occurrenceStack).reverse();\n      this.ruleStack.pop();\n      this.occurrenceStack.pop();\n      this.updateExpectedNext();\n      this.walk(this.topProd);\n      return this.possibleTokTypes;\n    }\n    walk(prod, prevRest = []) {\n      if (!this.found) {\n        super.walk(prod, prevRest);\n      }\n    }\n    walkProdRef(refProd, currRest, prevRest) {\n      if (refProd.referencedRule.name === this.nextProductionName && refProd.idx === this.nextProductionOccurrence) {\n        const fullRest = currRest.concat(prevRest);\n        this.updateExpectedNext();\n        this.walk(refProd.referencedRule, fullRest);\n      }\n    }\n    updateExpectedNext() {\n      if (isEmpty(this.ruleStack)) {\n        this.nextProductionName = \"\";\n        this.nextProductionOccurrence = 0;\n        this.isAtEndOfPath = true;\n      } else {\n        this.nextProductionName = this.ruleStack.pop();\n        this.nextProductionOccurrence = this.occurrenceStack.pop();\n      }\n    }\n  }\n  class NextAfterTokenWalker extends AbstractNextPossibleTokensWalker {\n    constructor(topProd, path) {\n      super(topProd, path);\n      this.path = path;\n      this.nextTerminalName = \"\";\n      this.nextTerminalOccurrence = 0;\n      this.nextTerminalName = this.path.lastTok.name;\n      this.nextTerminalOccurrence = this.path.lastTokOccurrence;\n    }\n    walkTerminal(terminal, currRest, prevRest) {\n      if (this.isAtEndOfPath && terminal.terminalType.name === this.nextTerminalName && terminal.idx === this.nextTerminalOccurrence && !this.found) {\n        const fullRest = currRest.concat(prevRest);\n        const restProd = new Alternative({\n          definition: fullRest\n        });\n        this.possibleTokTypes = first(restProd);\n        this.found = true;\n      }\n    }\n  }\n  class AbstractNextTerminalAfterProductionWalker extends RestWalker {\n    constructor(topRule, occurrence) {\n      super();\n      this.topRule = topRule;\n      this.occurrence = occurrence;\n      this.result = {\n        token: void 0,\n        occurrence: void 0,\n        isEndOfRule: void 0\n      };\n    }\n    startWalking() {\n      this.walk(this.topRule);\n      return this.result;\n    }\n  }\n  class NextTerminalAfterManyWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkMany(manyProd, currRest, prevRest) {\n      if (manyProd.idx === this.occurrence) {\n        const firstAfterMany = head(currRest.concat(prevRest));\n        this.result.isEndOfRule = firstAfterMany === void 0;\n        if (firstAfterMany instanceof Terminal) {\n          this.result.token = firstAfterMany.terminalType;\n          this.result.occurrence = firstAfterMany.idx;\n        }\n      } else {\n        super.walkMany(manyProd, currRest, prevRest);\n      }\n    }\n  }\n  class NextTerminalAfterManySepWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkManySep(manySepProd, currRest, prevRest) {\n      if (manySepProd.idx === this.occurrence) {\n        const firstAfterManySep = head(currRest.concat(prevRest));\n        this.result.isEndOfRule = firstAfterManySep === void 0;\n        if (firstAfterManySep instanceof Terminal) {\n          this.result.token = firstAfterManySep.terminalType;\n          this.result.occurrence = firstAfterManySep.idx;\n        }\n      } else {\n        super.walkManySep(manySepProd, currRest, prevRest);\n      }\n    }\n  }\n  class NextTerminalAfterAtLeastOneWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n      if (atLeastOneProd.idx === this.occurrence) {\n        const firstAfterAtLeastOne = head(currRest.concat(prevRest));\n        this.result.isEndOfRule = firstAfterAtLeastOne === void 0;\n        if (firstAfterAtLeastOne instanceof Terminal) {\n          this.result.token = firstAfterAtLeastOne.terminalType;\n          this.result.occurrence = firstAfterAtLeastOne.idx;\n        }\n      } else {\n        super.walkAtLeastOne(atLeastOneProd, currRest, prevRest);\n      }\n    }\n  }\n  class NextTerminalAfterAtLeastOneSepWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest) {\n      if (atleastOneSepProd.idx === this.occurrence) {\n        const firstAfterfirstAfterAtLeastOneSep = head(currRest.concat(prevRest));\n        this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === void 0;\n        if (firstAfterfirstAfterAtLeastOneSep instanceof Terminal) {\n          this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n          this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n        }\n      } else {\n        super.walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest);\n      }\n    }\n  }\n  function possiblePathsFrom(targetDef, maxLength, currPath = []) {\n    currPath = clone(currPath);\n    let result = [];\n    let i = 0;\n    function remainingPathWith(nextDef) {\n      return nextDef.concat(drop(targetDef, i + 1));\n    }\n    function getAlternativesForProd(definition) {\n      const alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath);\n      return result.concat(alternatives);\n    }\n    while (currPath.length < maxLength && i < targetDef.length) {\n      const prod = targetDef[i];\n      if (prod instanceof Alternative) {\n        return getAlternativesForProd(prod.definition);\n      } else if (prod instanceof NonTerminal) {\n        return getAlternativesForProd(prod.definition);\n      } else if (prod instanceof Option) {\n        result = getAlternativesForProd(prod.definition);\n      } else if (prod instanceof RepetitionMandatory) {\n        const newDef = prod.definition.concat([new Repetition({\n          definition: prod.definition\n        })]);\n        return getAlternativesForProd(newDef);\n      } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n        const newDef = [new Alternative({\n          definition: prod.definition\n        }), new Repetition({\n          definition: [new Terminal({\n            terminalType: prod.separator\n          })].concat(prod.definition)\n        })];\n        return getAlternativesForProd(newDef);\n      } else if (prod instanceof RepetitionWithSeparator) {\n        const newDef = prod.definition.concat([new Repetition({\n          definition: [new Terminal({\n            terminalType: prod.separator\n          })].concat(prod.definition)\n        })]);\n        result = getAlternativesForProd(newDef);\n      } else if (prod instanceof Repetition) {\n        const newDef = prod.definition.concat([new Repetition({\n          definition: prod.definition\n        })]);\n        result = getAlternativesForProd(newDef);\n      } else if (prod instanceof Alternation) {\n        forEach(prod.definition, currAlt => {\n          if (isEmpty(currAlt.definition) === false) {\n            result = getAlternativesForProd(currAlt.definition);\n          }\n        });\n        return result;\n      } else if (prod instanceof Terminal) {\n        currPath.push(prod.terminalType);\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n      i++;\n    }\n    result.push({\n      partialPath: currPath,\n      suffixDef: drop(targetDef, i)\n    });\n    return result;\n  }\n  function nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {\n    const EXIT_NON_TERMINAL = \"EXIT_NONE_TERMINAL\";\n    const EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n    const EXIT_ALTERNATIVE = \"EXIT_ALTERNATIVE\";\n    let foundCompletePath = false;\n    const tokenVectorLength = tokenVector.length;\n    const minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n    const result = [];\n    const possiblePaths = [];\n    possiblePaths.push({\n      idx: -1,\n      def: initialDef,\n      ruleStack: [],\n      occurrenceStack: []\n    });\n    while (!isEmpty(possiblePaths)) {\n      const currPath = possiblePaths.pop();\n      if (currPath === EXIT_ALTERNATIVE) {\n        if (foundCompletePath && last(possiblePaths).idx <= minimalAlternativesIndex) {\n          possiblePaths.pop();\n        }\n        continue;\n      }\n      const currDef = currPath.def;\n      const currIdx = currPath.idx;\n      const currRuleStack = currPath.ruleStack;\n      const currOccurrenceStack = currPath.occurrenceStack;\n      if (isEmpty(currDef)) {\n        continue;\n      }\n      const prod = currDef[0];\n      if (prod === EXIT_NON_TERMINAL) {\n        const nextPath = {\n          idx: currIdx,\n          def: drop(currDef),\n          ruleStack: dropRight(currRuleStack),\n          occurrenceStack: dropRight(currOccurrenceStack)\n        };\n        possiblePaths.push(nextPath);\n      } else if (prod instanceof Terminal) {\n        if (currIdx < tokenVectorLength - 1) {\n          const nextIdx = currIdx + 1;\n          const actualToken = tokenVector[nextIdx];\n          if (tokMatcher(actualToken, prod.terminalType)) {\n            const nextPath = {\n              idx: nextIdx,\n              def: drop(currDef),\n              ruleStack: currRuleStack,\n              occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPath);\n          }\n        } else if (currIdx === tokenVectorLength - 1) {\n          result.push({\n            nextTokenType: prod.terminalType,\n            nextTokenOccurrence: prod.idx,\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack\n          });\n          foundCompletePath = true;\n        } else {\n          throw Error(\"non exhaustive match\");\n        }\n      } else if (prod instanceof NonTerminal) {\n        const newRuleStack = clone(currRuleStack);\n        newRuleStack.push(prod.nonTerminalName);\n        const newOccurrenceStack = clone(currOccurrenceStack);\n        newOccurrenceStack.push(prod.idx);\n        const nextPath = {\n          idx: currIdx,\n          def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, drop(currDef)),\n          ruleStack: newRuleStack,\n          occurrenceStack: newOccurrenceStack\n        };\n        possiblePaths.push(nextPath);\n      } else if (prod instanceof Option) {\n        const nextPathWithout = {\n          idx: currIdx,\n          def: drop(currDef),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(nextPathWithout);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n        const nextPathWith = {\n          idx: currIdx,\n          def: prod.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(nextPathWith);\n      } else if (prod instanceof RepetitionMandatory) {\n        const secondIteration = new Repetition({\n          definition: prod.definition,\n          idx: prod.idx\n        });\n        const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n        const nextPath = {\n          idx: currIdx,\n          def: nextDef,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(nextPath);\n      } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n        const separatorGast = new Terminal({\n          terminalType: prod.separator\n        });\n        const secondIteration = new Repetition({\n          definition: [separatorGast].concat(prod.definition),\n          idx: prod.idx\n        });\n        const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n        const nextPath = {\n          idx: currIdx,\n          def: nextDef,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(nextPath);\n      } else if (prod instanceof RepetitionWithSeparator) {\n        const nextPathWithout = {\n          idx: currIdx,\n          def: drop(currDef),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(nextPathWithout);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n        const separatorGast = new Terminal({\n          terminalType: prod.separator\n        });\n        const nthRepetition = new Repetition({\n          definition: [separatorGast].concat(prod.definition),\n          idx: prod.idx\n        });\n        const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n        const nextPathWith = {\n          idx: currIdx,\n          def: nextDef,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(nextPathWith);\n      } else if (prod instanceof Repetition) {\n        const nextPathWithout = {\n          idx: currIdx,\n          def: drop(currDef),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(nextPathWithout);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n        const nthRepetition = new Repetition({\n          definition: prod.definition,\n          idx: prod.idx\n        });\n        const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n        const nextPathWith = {\n          idx: currIdx,\n          def: nextDef,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(nextPathWith);\n      } else if (prod instanceof Alternation) {\n        for (let i = prod.definition.length - 1; i >= 0; i--) {\n          const currAlt = prod.definition[i];\n          const currAltPath = {\n            idx: currIdx,\n            def: currAlt.definition.concat(drop(currDef)),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack\n          };\n          possiblePaths.push(currAltPath);\n          possiblePaths.push(EXIT_ALTERNATIVE);\n        }\n      } else if (prod instanceof Alternative) {\n        possiblePaths.push({\n          idx: currIdx,\n          def: prod.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        });\n      } else if (prod instanceof Rule) {\n        possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack));\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    }\n    return result;\n  }\n  function expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {\n    const newRuleStack = clone(currRuleStack);\n    newRuleStack.push(topRule.name);\n    const newCurrOccurrenceStack = clone(currOccurrenceStack);\n    newCurrOccurrenceStack.push(1);\n    return {\n      idx: currIdx,\n      def: topRule.definition,\n      ruleStack: newRuleStack,\n      occurrenceStack: newCurrOccurrenceStack\n    };\n  }\n  var PROD_TYPE;\n  (function (PROD_TYPE2) {\n    PROD_TYPE2[PROD_TYPE2[\"OPTION\"] = 0] = \"OPTION\";\n    PROD_TYPE2[PROD_TYPE2[\"REPETITION\"] = 1] = \"REPETITION\";\n    PROD_TYPE2[PROD_TYPE2[\"REPETITION_MANDATORY\"] = 2] = \"REPETITION_MANDATORY\";\n    PROD_TYPE2[PROD_TYPE2[\"REPETITION_MANDATORY_WITH_SEPARATOR\"] = 3] = \"REPETITION_MANDATORY_WITH_SEPARATOR\";\n    PROD_TYPE2[PROD_TYPE2[\"REPETITION_WITH_SEPARATOR\"] = 4] = \"REPETITION_WITH_SEPARATOR\";\n    PROD_TYPE2[PROD_TYPE2[\"ALTERNATION\"] = 5] = \"ALTERNATION\";\n  })(PROD_TYPE || (PROD_TYPE = {}));\n  function getProdType(prod) {\n    if (prod instanceof Option || prod === \"Option\") {\n      return PROD_TYPE.OPTION;\n    } else if (prod instanceof Repetition || prod === \"Repetition\") {\n      return PROD_TYPE.REPETITION;\n    } else if (prod instanceof RepetitionMandatory || prod === \"RepetitionMandatory\") {\n      return PROD_TYPE.REPETITION_MANDATORY;\n    } else if (prod instanceof RepetitionMandatoryWithSeparator || prod === \"RepetitionMandatoryWithSeparator\") {\n      return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n    } else if (prod instanceof RepetitionWithSeparator || prod === \"RepetitionWithSeparator\") {\n      return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n    } else if (prod instanceof Alternation || prod === \"Alternation\") {\n      return PROD_TYPE.ALTERNATION;\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  function buildLookaheadFuncForOr(occurrence, ruleGrammar, maxLookahead, hasPredicates, dynamicTokensEnabled, laFuncBuilder) {\n    const lookAheadPaths = getLookaheadPathsForOr(occurrence, ruleGrammar, maxLookahead);\n    const tokenMatcher2 = areTokenCategoriesNotUsed(lookAheadPaths) ? tokenStructuredMatcherNoCategories : tokenStructuredMatcher;\n    return laFuncBuilder(lookAheadPaths, hasPredicates, tokenMatcher2, dynamicTokensEnabled);\n  }\n  function buildLookaheadFuncForOptionalProd(occurrence, ruleGrammar, k, dynamicTokensEnabled, prodType, lookaheadBuilder) {\n    const lookAheadPaths = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k);\n    const tokenMatcher2 = areTokenCategoriesNotUsed(lookAheadPaths) ? tokenStructuredMatcherNoCategories : tokenStructuredMatcher;\n    return lookaheadBuilder(lookAheadPaths[0], tokenMatcher2, dynamicTokensEnabled);\n  }\n  function buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher2, dynamicTokensEnabled) {\n    const numOfAlts = alts.length;\n    const areAllOneTokenLookahead = every(alts, currAlt => {\n      return every(currAlt, currPath => {\n        return currPath.length === 1;\n      });\n    });\n    if (hasPredicates) {\n      return function (orAlts) {\n        const predicates = map(orAlts, currAlt => currAlt.GATE);\n        for (let t = 0; t < numOfAlts; t++) {\n          const currAlt = alts[t];\n          const currNumOfPaths = currAlt.length;\n          const currPredicate = predicates[t];\n          if (currPredicate !== void 0 && currPredicate.call(this) === false) {\n            continue;\n          }\n          nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n            const currPath = currAlt[j];\n            const currPathLength = currPath.length;\n            for (let i = 0; i < currPathLength; i++) {\n              const nextToken = this.LA(i + 1);\n              if (tokenMatcher2(nextToken, currPath[i]) === false) {\n                continue nextPath;\n              }\n            }\n            return t;\n          }\n        }\n        return void 0;\n      };\n    } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n      const singleTokenAlts = map(alts, currAlt => {\n        return flatten(currAlt);\n      });\n      const choiceToAlt = reduce(singleTokenAlts, (result, currAlt, idx) => {\n        forEach(currAlt, currTokType => {\n          if (!has(result, currTokType.tokenTypeIdx)) {\n            result[currTokType.tokenTypeIdx] = idx;\n          }\n          forEach(currTokType.categoryMatches, currExtendingType => {\n            if (!has(result, currExtendingType)) {\n              result[currExtendingType] = idx;\n            }\n          });\n        });\n        return result;\n      }, {});\n      return function () {\n        const nextToken = this.LA(1);\n        return choiceToAlt[nextToken.tokenTypeIdx];\n      };\n    } else {\n      return function () {\n        for (let t = 0; t < numOfAlts; t++) {\n          const currAlt = alts[t];\n          const currNumOfPaths = currAlt.length;\n          nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n            const currPath = currAlt[j];\n            const currPathLength = currPath.length;\n            for (let i = 0; i < currPathLength; i++) {\n              const nextToken = this.LA(i + 1);\n              if (tokenMatcher2(nextToken, currPath[i]) === false) {\n                continue nextPath;\n              }\n            }\n            return t;\n          }\n        }\n        return void 0;\n      };\n    }\n  }\n  function buildSingleAlternativeLookaheadFunction(alt, tokenMatcher2, dynamicTokensEnabled) {\n    const areAllOneTokenLookahead = every(alt, currPath => {\n      return currPath.length === 1;\n    });\n    const numOfPaths = alt.length;\n    if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n      const singleTokensTypes = flatten(alt);\n      if (singleTokensTypes.length === 1 && isEmpty(singleTokensTypes[0].categoryMatches)) {\n        const expectedTokenType = singleTokensTypes[0];\n        const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx;\n        return function () {\n          return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey;\n        };\n      } else {\n        const choiceToAlt = reduce(singleTokensTypes, (result, currTokType, idx) => {\n          result[currTokType.tokenTypeIdx] = true;\n          forEach(currTokType.categoryMatches, currExtendingType => {\n            result[currExtendingType] = true;\n          });\n          return result;\n        }, []);\n        return function () {\n          const nextToken = this.LA(1);\n          return choiceToAlt[nextToken.tokenTypeIdx] === true;\n        };\n      }\n    } else {\n      return function () {\n        nextPath: for (let j = 0; j < numOfPaths; j++) {\n          const currPath = alt[j];\n          const currPathLength = currPath.length;\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n            if (tokenMatcher2(nextToken, currPath[i]) === false) {\n              continue nextPath;\n            }\n          }\n          return true;\n        }\n        return false;\n      };\n    }\n  }\n  class RestDefinitionFinderWalker extends RestWalker {\n    constructor(topProd, targetOccurrence, targetProdType) {\n      super();\n      this.topProd = topProd;\n      this.targetOccurrence = targetOccurrence;\n      this.targetProdType = targetProdType;\n    }\n    startWalking() {\n      this.walk(this.topProd);\n      return this.restDef;\n    }\n    checkIsTarget(node, expectedProdType, currRest, prevRest) {\n      if (node.idx === this.targetOccurrence && this.targetProdType === expectedProdType) {\n        this.restDef = currRest.concat(prevRest);\n        return true;\n      }\n      return false;\n    }\n    walkOption(optionProd, currRest, prevRest) {\n      if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n        super.walkOption(optionProd, currRest, prevRest);\n      }\n    }\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n      if (!this.checkIsTarget(atLeastOneProd, PROD_TYPE.REPETITION_MANDATORY, currRest, prevRest)) {\n        super.walkOption(atLeastOneProd, currRest, prevRest);\n      }\n    }\n    walkAtLeastOneSep(atLeastOneSepProd, currRest, prevRest) {\n      if (!this.checkIsTarget(atLeastOneSepProd, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currRest, prevRest)) {\n        super.walkOption(atLeastOneSepProd, currRest, prevRest);\n      }\n    }\n    walkMany(manyProd, currRest, prevRest) {\n      if (!this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)) {\n        super.walkOption(manyProd, currRest, prevRest);\n      }\n    }\n    walkManySep(manySepProd, currRest, prevRest) {\n      if (!this.checkIsTarget(manySepProd, PROD_TYPE.REPETITION_WITH_SEPARATOR, currRest, prevRest)) {\n        super.walkOption(manySepProd, currRest, prevRest);\n      }\n    }\n  }\n  class InsideDefinitionFinderVisitor extends GAstVisitor {\n    constructor(targetOccurrence, targetProdType, targetRef) {\n      super();\n      this.targetOccurrence = targetOccurrence;\n      this.targetProdType = targetProdType;\n      this.targetRef = targetRef;\n      this.result = [];\n    }\n    checkIsTarget(node, expectedProdName) {\n      if (node.idx === this.targetOccurrence && this.targetProdType === expectedProdName && (this.targetRef === void 0 || node === this.targetRef)) {\n        this.result = node.definition;\n      }\n    }\n    visitOption(node) {\n      this.checkIsTarget(node, PROD_TYPE.OPTION);\n    }\n    visitRepetition(node) {\n      this.checkIsTarget(node, PROD_TYPE.REPETITION);\n    }\n    visitRepetitionMandatory(node) {\n      this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n    }\n    visitRepetitionMandatoryWithSeparator(node) {\n      this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n    }\n    visitRepetitionWithSeparator(node) {\n      this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n    }\n    visitAlternation(node) {\n      this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n    }\n  }\n  function initializeArrayOfArrays(size) {\n    const result = new Array(size);\n    for (let i = 0; i < size; i++) {\n      result[i] = [];\n    }\n    return result;\n  }\n  function pathToHashKeys(path) {\n    let keys2 = [\"\"];\n    for (let i = 0; i < path.length; i++) {\n      const tokType = path[i];\n      const longerKeys = [];\n      for (let j = 0; j < keys2.length; j++) {\n        const currShorterKey = keys2[j];\n        longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n        for (let t = 0; t < tokType.categoryMatches.length; t++) {\n          const categoriesKeySuffix = \"_\" + tokType.categoryMatches[t];\n          longerKeys.push(currShorterKey + categoriesKeySuffix);\n        }\n      }\n      keys2 = longerKeys;\n    }\n    return keys2;\n  }\n  function isUniquePrefixHash(altKnownPathsKeys, searchPathKeys, idx) {\n    for (let currAltIdx = 0; currAltIdx < altKnownPathsKeys.length; currAltIdx++) {\n      if (currAltIdx === idx) {\n        continue;\n      }\n      const otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n      for (let searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n        const searchKey = searchPathKeys[searchIdx];\n        if (otherAltKnownPathsKeys[searchKey] === true) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function lookAheadSequenceFromAlternatives(altsDefs, k) {\n    const partialAlts = map(altsDefs, currAlt => possiblePathsFrom([currAlt], 1));\n    const finalResult = initializeArrayOfArrays(partialAlts.length);\n    const altsHashes = map(partialAlts, currAltPaths => {\n      const dict = {};\n      forEach(currAltPaths, item => {\n        const keys2 = pathToHashKeys(item.partialPath);\n        forEach(keys2, currKey => {\n          dict[currKey] = true;\n        });\n      });\n      return dict;\n    });\n    let newData = partialAlts;\n    for (let pathLength = 1; pathLength <= k; pathLength++) {\n      const currDataset = newData;\n      newData = initializeArrayOfArrays(currDataset.length);\n      for (let altIdx = 0; altIdx < currDataset.length; altIdx++) {\n        const currAltPathsAndSuffixes = currDataset[altIdx];\n        for (let currPathIdx = 0; currPathIdx < currAltPathsAndSuffixes.length; currPathIdx++) {\n          const currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n          const suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n          const prefixKeys = pathToHashKeys(currPathPrefix);\n          const isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);\n          if (isUnique || isEmpty(suffixDef) || currPathPrefix.length === k) {\n            const currAltResult = finalResult[altIdx];\n            if (containsPath(currAltResult, currPathPrefix) === false) {\n              currAltResult.push(currPathPrefix);\n              for (let j = 0; j < prefixKeys.length; j++) {\n                const currKey = prefixKeys[j];\n                altsHashes[altIdx][currKey] = true;\n              }\n            }\n          } else {\n            const newPartialPathsAndSuffixes = possiblePathsFrom(suffixDef, pathLength + 1, currPathPrefix);\n            newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);\n            forEach(newPartialPathsAndSuffixes, item => {\n              const prefixKeys2 = pathToHashKeys(item.partialPath);\n              forEach(prefixKeys2, key => {\n                altsHashes[altIdx][key] = true;\n              });\n            });\n          }\n        }\n      }\n    }\n    return finalResult;\n  }\n  function getLookaheadPathsForOr(occurrence, ruleGrammar, k, orProd) {\n    const visitor = new InsideDefinitionFinderVisitor(occurrence, PROD_TYPE.ALTERNATION, orProd);\n    ruleGrammar.accept(visitor);\n    return lookAheadSequenceFromAlternatives(visitor.result, k);\n  }\n  function getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k) {\n    const insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType);\n    ruleGrammar.accept(insideDefVisitor);\n    const insideDef = insideDefVisitor.result;\n    const afterDefWalker = new RestDefinitionFinderWalker(ruleGrammar, occurrence, prodType);\n    const afterDef = afterDefWalker.startWalking();\n    const insideFlat = new Alternative({\n      definition: insideDef\n    });\n    const afterFlat = new Alternative({\n      definition: afterDef\n    });\n    return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n  }\n  function containsPath(alternative, searchPath) {\n    compareOtherPath: for (let i = 0; i < alternative.length; i++) {\n      const otherPath = alternative[i];\n      if (otherPath.length !== searchPath.length) {\n        continue;\n      }\n      for (let j = 0; j < otherPath.length; j++) {\n        const searchTok = searchPath[j];\n        const otherTok = otherPath[j];\n        const matchingTokens = searchTok === otherTok || otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !== void 0;\n        if (matchingTokens === false) {\n          continue compareOtherPath;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  function isStrictPrefixOfPath(prefix, other) {\n    return prefix.length < other.length && every(prefix, (tokType, idx) => {\n      const otherTokType = other[idx];\n      return tokType === otherTokType || otherTokType.categoryMatchesMap[tokType.tokenTypeIdx];\n    });\n  }\n  function areTokenCategoriesNotUsed(lookAheadPaths) {\n    return every(lookAheadPaths, singleAltPaths => every(singleAltPaths, singlePath => every(singlePath, token => isEmpty(token.categoryMatches))));\n  }\n  function validateLookahead(options) {\n    const lookaheadValidationErrorMessages = options.lookaheadStrategy.validate({\n      rules: options.rules,\n      tokenTypes: options.tokenTypes,\n      grammarName: options.grammarName\n    });\n    return map(lookaheadValidationErrorMessages, errorMessage => Object.assign({\n      type: ParserDefinitionErrorType.CUSTOM_LOOKAHEAD_VALIDATION\n    }, errorMessage));\n  }\n  function validateGrammar$1(topLevels, tokenTypes, errMsgProvider, grammarName) {\n    const duplicateErrors = flatMap(topLevels, currTopLevel => validateDuplicateProductions(currTopLevel, errMsgProvider));\n    const termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider);\n    const tooManyAltsErrors = flatMap(topLevels, curRule => validateTooManyAlts(curRule, errMsgProvider));\n    const duplicateRulesError = flatMap(topLevels, curRule => validateRuleDoesNotAlreadyExist(curRule, topLevels, grammarName, errMsgProvider));\n    return duplicateErrors.concat(termsNamespaceConflictErrors, tooManyAltsErrors, duplicateRulesError);\n  }\n  function validateDuplicateProductions(topLevelRule, errMsgProvider) {\n    const collectorVisitor2 = new OccurrenceValidationCollector();\n    topLevelRule.accept(collectorVisitor2);\n    const allRuleProductions = collectorVisitor2.allProductions;\n    const productionGroups = groupBy$1(allRuleProductions, identifyProductionForDuplicates);\n    const duplicates = pickBy(productionGroups, currGroup => {\n      return currGroup.length > 1;\n    });\n    const errors = map(values(duplicates), currDuplicates => {\n      const firstProd = head(currDuplicates);\n      const msg = errMsgProvider.buildDuplicateFoundError(topLevelRule, currDuplicates);\n      const dslName = getProductionDslName(firstProd);\n      const defError = {\n        message: msg,\n        type: ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n        ruleName: topLevelRule.name,\n        dslName,\n        occurrence: firstProd.idx\n      };\n      const param = getExtraProductionArgument(firstProd);\n      if (param) {\n        defError.parameter = param;\n      }\n      return defError;\n    });\n    return errors;\n  }\n  function identifyProductionForDuplicates(prod) {\n    return `${getProductionDslName(prod)}_#_${prod.idx}_#_${getExtraProductionArgument(prod)}`;\n  }\n  function getExtraProductionArgument(prod) {\n    if (prod instanceof Terminal) {\n      return prod.terminalType.name;\n    } else if (prod instanceof NonTerminal) {\n      return prod.nonTerminalName;\n    } else {\n      return \"\";\n    }\n  }\n  class OccurrenceValidationCollector extends GAstVisitor {\n    constructor() {\n      super(...arguments);\n      this.allProductions = [];\n    }\n    visitNonTerminal(subrule) {\n      this.allProductions.push(subrule);\n    }\n    visitOption(option) {\n      this.allProductions.push(option);\n    }\n    visitRepetitionWithSeparator(manySep) {\n      this.allProductions.push(manySep);\n    }\n    visitRepetitionMandatory(atLeastOne) {\n      this.allProductions.push(atLeastOne);\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n      this.allProductions.push(atLeastOneSep);\n    }\n    visitRepetition(many) {\n      this.allProductions.push(many);\n    }\n    visitAlternation(or) {\n      this.allProductions.push(or);\n    }\n    visitTerminal(terminal) {\n      this.allProductions.push(terminal);\n    }\n  }\n  function validateRuleDoesNotAlreadyExist(rule, allRules, className, errMsgProvider) {\n    const errors = [];\n    const occurrences = reduce(allRules, (result, curRule) => {\n      if (curRule.name === rule.name) {\n        return result + 1;\n      }\n      return result;\n    }, 0);\n    if (occurrences > 1) {\n      const errMsg = errMsgProvider.buildDuplicateRuleNameError({\n        topLevelRule: rule,\n        grammarName: className\n      });\n      errors.push({\n        message: errMsg,\n        type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n        ruleName: rule.name\n      });\n    }\n    return errors;\n  }\n  function validateRuleIsOverridden(ruleName, definedRulesNames, className) {\n    const errors = [];\n    let errMsg;\n    if (!includes(definedRulesNames, ruleName)) {\n      errMsg = `Invalid rule override, rule: ->${ruleName}<- cannot be overridden in the grammar: ->${className}<-as it is not defined in any of the super grammars `;\n      errors.push({\n        message: errMsg,\n        type: ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n        ruleName\n      });\n    }\n    return errors;\n  }\n  function validateNoLeftRecursion(topRule, currRule, errMsgProvider, path = []) {\n    const errors = [];\n    const nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n    if (isEmpty(nextNonTerminals)) {\n      return [];\n    } else {\n      const ruleName = topRule.name;\n      const foundLeftRecursion = includes(nextNonTerminals, topRule);\n      if (foundLeftRecursion) {\n        errors.push({\n          message: errMsgProvider.buildLeftRecursionError({\n            topLevelRule: topRule,\n            leftRecursionPath: path\n          }),\n          type: ParserDefinitionErrorType.LEFT_RECURSION,\n          ruleName\n        });\n      }\n      const validNextSteps = difference$1(nextNonTerminals, path.concat([topRule]));\n      const errorsFromNextSteps = flatMap(validNextSteps, currRefRule => {\n        const newPath = clone(path);\n        newPath.push(currRefRule);\n        return validateNoLeftRecursion(topRule, currRefRule, errMsgProvider, newPath);\n      });\n      return errors.concat(errorsFromNextSteps);\n    }\n  }\n  function getFirstNoneTerminal(definition) {\n    let result = [];\n    if (isEmpty(definition)) {\n      return result;\n    }\n    const firstProd = head(definition);\n    if (firstProd instanceof NonTerminal) {\n      result.push(firstProd.referencedRule);\n    } else if (firstProd instanceof Alternative || firstProd instanceof Option || firstProd instanceof RepetitionMandatory || firstProd instanceof RepetitionMandatoryWithSeparator || firstProd instanceof RepetitionWithSeparator || firstProd instanceof Repetition) {\n      result = result.concat(getFirstNoneTerminal(firstProd.definition));\n    } else if (firstProd instanceof Alternation) {\n      result = flatten(map(firstProd.definition, currSubDef => getFirstNoneTerminal(currSubDef.definition)));\n    } else if (firstProd instanceof Terminal) ;else {\n      throw Error(\"non exhaustive match\");\n    }\n    const isFirstOptional = isOptionalProd(firstProd);\n    const hasMore = definition.length > 1;\n    if (isFirstOptional && hasMore) {\n      const rest = drop(definition);\n      return result.concat(getFirstNoneTerminal(rest));\n    } else {\n      return result;\n    }\n  }\n  class OrCollector extends GAstVisitor {\n    constructor() {\n      super(...arguments);\n      this.alternations = [];\n    }\n    visitAlternation(node) {\n      this.alternations.push(node);\n    }\n  }\n  function validateEmptyOrAlternative(topLevelRule, errMsgProvider) {\n    const orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    const ors = orCollector.alternations;\n    const errors = flatMap(ors, currOr => {\n      const exceptLast = dropRight(currOr.definition);\n      return flatMap(exceptLast, (currAlternative, currAltIdx) => {\n        const possibleFirstInAlt = nextPossibleTokensAfter([currAlternative], [], tokenStructuredMatcher, 1);\n        if (isEmpty(possibleFirstInAlt)) {\n          return [{\n            message: errMsgProvider.buildEmptyAlternationError({\n              topLevelRule,\n              alternation: currOr,\n              emptyChoiceIdx: currAltIdx\n            }),\n            type: ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n            ruleName: topLevelRule.name,\n            occurrence: currOr.idx,\n            alternative: currAltIdx + 1\n          }];\n        } else {\n          return [];\n        }\n      });\n    });\n    return errors;\n  }\n  function validateAmbiguousAlternationAlternatives(topLevelRule, globalMaxLookahead, errMsgProvider) {\n    const orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    let ors = orCollector.alternations;\n    ors = reject(ors, currOr => currOr.ignoreAmbiguities === true);\n    const errors = flatMap(ors, currOr => {\n      const currOccurrence = currOr.idx;\n      const actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n      const alternatives = getLookaheadPathsForOr(currOccurrence, topLevelRule, actualMaxLookahead, currOr);\n      const altsAmbiguityErrors = checkAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n      const altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n      return altsAmbiguityErrors.concat(altsPrefixAmbiguityErrors);\n    });\n    return errors;\n  }\n  class RepetitionCollector extends GAstVisitor {\n    constructor() {\n      super(...arguments);\n      this.allProductions = [];\n    }\n    visitRepetitionWithSeparator(manySep) {\n      this.allProductions.push(manySep);\n    }\n    visitRepetitionMandatory(atLeastOne) {\n      this.allProductions.push(atLeastOne);\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n      this.allProductions.push(atLeastOneSep);\n    }\n    visitRepetition(many) {\n      this.allProductions.push(many);\n    }\n  }\n  function validateTooManyAlts(topLevelRule, errMsgProvider) {\n    const orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    const ors = orCollector.alternations;\n    const errors = flatMap(ors, currOr => {\n      if (currOr.definition.length > 255) {\n        return [{\n          message: errMsgProvider.buildTooManyAlternativesError({\n            topLevelRule,\n            alternation: currOr\n          }),\n          type: ParserDefinitionErrorType.TOO_MANY_ALTS,\n          ruleName: topLevelRule.name,\n          occurrence: currOr.idx\n        }];\n      } else {\n        return [];\n      }\n    });\n    return errors;\n  }\n  function validateSomeNonEmptyLookaheadPath(topLevelRules, maxLookahead, errMsgProvider) {\n    const errors = [];\n    forEach(topLevelRules, currTopRule => {\n      const collectorVisitor2 = new RepetitionCollector();\n      currTopRule.accept(collectorVisitor2);\n      const allRuleProductions = collectorVisitor2.allProductions;\n      forEach(allRuleProductions, currProd => {\n        const prodType = getProdType(currProd);\n        const actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n        const currOccurrence = currProd.idx;\n        const paths = getLookaheadPathsForOptionalProd(currOccurrence, currTopRule, prodType, actualMaxLookahead);\n        const pathsInsideProduction = paths[0];\n        if (isEmpty(flatten(pathsInsideProduction))) {\n          const errMsg = errMsgProvider.buildEmptyRepetitionError({\n            topLevelRule: currTopRule,\n            repetition: currProd\n          });\n          errors.push({\n            message: errMsg,\n            type: ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n            ruleName: currTopRule.name\n          });\n        }\n      });\n    });\n    return errors;\n  }\n  function checkAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    const foundAmbiguousPaths = [];\n    const identicalAmbiguities = reduce(alternatives, (result, currAlt, currAltIdx) => {\n      if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n        return result;\n      }\n      forEach(currAlt, currPath => {\n        const altsCurrPathAppearsIn = [currAltIdx];\n        forEach(alternatives, (currOtherAlt, currOtherAltIdx) => {\n          if (currAltIdx !== currOtherAltIdx && containsPath(currOtherAlt, currPath) &&\n          // ignore (skip) ambiguities with this \"other\" alternative\n          alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true) {\n            altsCurrPathAppearsIn.push(currOtherAltIdx);\n          }\n        });\n        if (altsCurrPathAppearsIn.length > 1 && !containsPath(foundAmbiguousPaths, currPath)) {\n          foundAmbiguousPaths.push(currPath);\n          result.push({\n            alts: altsCurrPathAppearsIn,\n            path: currPath\n          });\n        }\n      });\n      return result;\n    }, []);\n    const currErrors = map(identicalAmbiguities, currAmbDescriptor => {\n      const ambgIndices = map(currAmbDescriptor.alts, currAltIdx => currAltIdx + 1);\n      const currMessage = errMsgProvider.buildAlternationAmbiguityError({\n        topLevelRule: rule,\n        alternation,\n        ambiguityIndices: ambgIndices,\n        prefixPath: currAmbDescriptor.path\n      });\n      return {\n        message: currMessage,\n        type: ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n        ruleName: rule.name,\n        occurrence: alternation.idx,\n        alternatives: currAmbDescriptor.alts\n      };\n    });\n    return currErrors;\n  }\n  function checkPrefixAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    const pathsAndIndices = reduce(alternatives, (result, currAlt, idx) => {\n      const currPathsAndIdx = map(currAlt, currPath => {\n        return {\n          idx,\n          path: currPath\n        };\n      });\n      return result.concat(currPathsAndIdx);\n    }, []);\n    const errors = compact(flatMap(pathsAndIndices, currPathAndIdx => {\n      const alternativeGast = alternation.definition[currPathAndIdx.idx];\n      if (alternativeGast.ignoreAmbiguities === true) {\n        return [];\n      }\n      const targetIdx = currPathAndIdx.idx;\n      const targetPath = currPathAndIdx.path;\n      const prefixAmbiguitiesPathsAndIndices = filter(pathsAndIndices, searchPathAndIdx => {\n        return (\n          // ignore (skip) ambiguities with this \"other\" alternative\n          alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !== true && searchPathAndIdx.idx < targetIdx &&\n          // checking for strict prefix because identical lookaheads\n          // will be be detected using a different validation.\n          isStrictPrefixOfPath(searchPathAndIdx.path, targetPath)\n        );\n      });\n      const currPathPrefixErrors = map(prefixAmbiguitiesPathsAndIndices, currAmbPathAndIdx => {\n        const ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];\n        const occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n        const message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n          topLevelRule: rule,\n          alternation,\n          ambiguityIndices: ambgIndices,\n          prefixPath: currAmbPathAndIdx.path\n        });\n        return {\n          message,\n          type: ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n          ruleName: rule.name,\n          occurrence,\n          alternatives: ambgIndices\n        };\n      });\n      return currPathPrefixErrors;\n    }));\n    return errors;\n  }\n  function checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider) {\n    const errors = [];\n    const tokenNames = map(tokenTypes, currToken => currToken.name);\n    forEach(topLevels, currRule => {\n      const currRuleName = currRule.name;\n      if (includes(tokenNames, currRuleName)) {\n        const errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n        errors.push({\n          message: errMsg,\n          type: ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n          ruleName: currRuleName\n        });\n      }\n    });\n    return errors;\n  }\n  function resolveGrammar(options) {\n    const actualOptions = defaults$1(options, {\n      errMsgProvider: defaultGrammarResolverErrorProvider\n    });\n    const topRulesTable = {};\n    forEach(options.rules, rule => {\n      topRulesTable[rule.name] = rule;\n    });\n    return resolveGrammar$1(topRulesTable, actualOptions.errMsgProvider);\n  }\n  function validateGrammar(options) {\n    options = defaults$1(options, {\n      errMsgProvider: defaultGrammarValidatorErrorProvider\n    });\n    return validateGrammar$1(options.rules, options.tokenTypes, options.errMsgProvider, options.grammarName);\n  }\n  const MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\n  const NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\n  const EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\n  const NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\n  const RECOGNITION_EXCEPTION_NAMES = [MISMATCHED_TOKEN_EXCEPTION, NO_VIABLE_ALT_EXCEPTION, EARLY_EXIT_EXCEPTION, NOT_ALL_INPUT_PARSED_EXCEPTION];\n  Object.freeze(RECOGNITION_EXCEPTION_NAMES);\n  function isRecognitionException(error) {\n    return includes(RECOGNITION_EXCEPTION_NAMES, error.name);\n  }\n  class RecognitionException extends Error {\n    constructor(message, token) {\n      super(message);\n      this.token = token;\n      this.resyncedTokens = [];\n      Object.setPrototypeOf(this, new.target.prototype);\n      if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, this.constructor);\n      }\n    }\n  }\n  class MismatchedTokenException extends RecognitionException {\n    constructor(message, token, previousToken) {\n      super(message, token);\n      this.previousToken = previousToken;\n      this.name = MISMATCHED_TOKEN_EXCEPTION;\n    }\n  }\n  class NoViableAltException extends RecognitionException {\n    constructor(message, token, previousToken) {\n      super(message, token);\n      this.previousToken = previousToken;\n      this.name = NO_VIABLE_ALT_EXCEPTION;\n    }\n  }\n  class NotAllInputParsedException extends RecognitionException {\n    constructor(message, token) {\n      super(message, token);\n      this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n    }\n  }\n  class EarlyExitException extends RecognitionException {\n    constructor(message, token, previousToken) {\n      super(message, token);\n      this.previousToken = previousToken;\n      this.name = EARLY_EXIT_EXCEPTION;\n    }\n  }\n  const EOF_FOLLOW_KEY = {};\n  const IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\n  class InRuleRecoveryException extends Error {\n    constructor(message) {\n      super(message);\n      this.name = IN_RULE_RECOVERY_EXCEPTION;\n    }\n  }\n  class Recoverable {\n    initRecoverable(config) {\n      this.firstAfterRepMap = {};\n      this.resyncFollows = {};\n      this.recoveryEnabled = has(config, \"recoveryEnabled\") ? config.recoveryEnabled : DEFAULT_PARSER_CONFIG.recoveryEnabled;\n      if (this.recoveryEnabled) {\n        this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n      }\n    }\n    getTokenToInsert(tokType) {\n      const tokToInsert = createTokenInstance(tokType, \"\", NaN, NaN, NaN, NaN, NaN, NaN);\n      tokToInsert.isInsertedInRecovery = true;\n      return tokToInsert;\n    }\n    canTokenTypeBeInsertedInRecovery(tokType) {\n      return true;\n    }\n    canTokenTypeBeDeletedInRecovery(tokType) {\n      return true;\n    }\n    tryInRepetitionRecovery(grammarRule, grammarRuleArgs, lookAheadFunc, expectedTokType) {\n      const reSyncTokType = this.findReSyncTokenType();\n      const savedLexerState = this.exportLexerState();\n      const resyncedTokens = [];\n      let passedResyncPoint = false;\n      const nextTokenWithoutResync = this.LA(1);\n      let currToken = this.LA(1);\n      const generateErrorMessage = () => {\n        const previousToken = this.LA(0);\n        const msg = this.errorMessageProvider.buildMismatchTokenMessage({\n          expected: expectedTokType,\n          actual: nextTokenWithoutResync,\n          previous: previousToken,\n          ruleName: this.getCurrRuleFullName()\n        });\n        const error = new MismatchedTokenException(msg, nextTokenWithoutResync, this.LA(0));\n        error.resyncedTokens = dropRight(resyncedTokens);\n        this.SAVE_ERROR(error);\n      };\n      while (!passedResyncPoint) {\n        if (this.tokenMatcher(currToken, expectedTokType)) {\n          generateErrorMessage();\n          return;\n        } else if (lookAheadFunc.call(this)) {\n          generateErrorMessage();\n          grammarRule.apply(this, grammarRuleArgs);\n          return;\n        } else if (this.tokenMatcher(currToken, reSyncTokType)) {\n          passedResyncPoint = true;\n        } else {\n          currToken = this.SKIP_TOKEN();\n          this.addToResyncTokens(currToken, resyncedTokens);\n        }\n      }\n      this.importLexerState(savedLexerState);\n    }\n    shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck) {\n      if (notStuck === false) {\n        return false;\n      }\n      if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n        return false;\n      }\n      if (this.isBackTracking()) {\n        return false;\n      }\n      if (this.canPerformInRuleRecovery(expectTokAfterLastMatch, this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx))) {\n        return false;\n      }\n      return true;\n    }\n    // Error Recovery functionality\n    getFollowsForInRuleRecovery(tokType, tokIdxInRule) {\n      const grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n      const follows = this.getNextPossibleTokenTypes(grammarPath);\n      return follows;\n    }\n    tryInRuleRecovery(expectedTokType, follows) {\n      if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n        const tokToInsert = this.getTokenToInsert(expectedTokType);\n        return tokToInsert;\n      }\n      if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n        const nextTok = this.SKIP_TOKEN();\n        this.consumeToken();\n        return nextTok;\n      }\n      throw new InRuleRecoveryException(\"sad sad panda\");\n    }\n    canPerformInRuleRecovery(expectedToken, follows) {\n      return this.canRecoverWithSingleTokenInsertion(expectedToken, follows) || this.canRecoverWithSingleTokenDeletion(expectedToken);\n    }\n    canRecoverWithSingleTokenInsertion(expectedTokType, follows) {\n      if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n        return false;\n      }\n      if (isEmpty(follows)) {\n        return false;\n      }\n      const mismatchedTok = this.LA(1);\n      const isMisMatchedTokInFollows = find$1(follows, possibleFollowsTokType => {\n        return this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n      }) !== void 0;\n      return isMisMatchedTokInFollows;\n    }\n    canRecoverWithSingleTokenDeletion(expectedTokType) {\n      if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {\n        return false;\n      }\n      const isNextTokenWhatIsExpected = this.tokenMatcher(this.LA(2), expectedTokType);\n      return isNextTokenWhatIsExpected;\n    }\n    isInCurrentRuleReSyncSet(tokenTypeIdx) {\n      const followKey = this.getCurrFollowKey();\n      const currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n      return includes(currentRuleReSyncSet, tokenTypeIdx);\n    }\n    findReSyncTokenType() {\n      const allPossibleReSyncTokTypes = this.flattenFollowSet();\n      let nextToken = this.LA(1);\n      let k = 2;\n      while (true) {\n        const foundMatch = find$1(allPossibleReSyncTokTypes, resyncTokType => {\n          const canMatch = tokenMatcher(nextToken, resyncTokType);\n          return canMatch;\n        });\n        if (foundMatch !== void 0) {\n          return foundMatch;\n        }\n        nextToken = this.LA(k);\n        k++;\n      }\n    }\n    getCurrFollowKey() {\n      if (this.RULE_STACK.length === 1) {\n        return EOF_FOLLOW_KEY;\n      }\n      const currRuleShortName = this.getLastExplicitRuleShortName();\n      const currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n      const prevRuleShortName = this.getPreviousExplicitRuleShortName();\n      return {\n        ruleName: this.shortRuleNameToFullName(currRuleShortName),\n        idxInCallingRule: currRuleIdx,\n        inRule: this.shortRuleNameToFullName(prevRuleShortName)\n      };\n    }\n    buildFullFollowKeyStack() {\n      const explicitRuleStack = this.RULE_STACK;\n      const explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n      return map(explicitRuleStack, (ruleName, idx) => {\n        if (idx === 0) {\n          return EOF_FOLLOW_KEY;\n        }\n        return {\n          ruleName: this.shortRuleNameToFullName(ruleName),\n          idxInCallingRule: explicitOccurrenceStack[idx],\n          inRule: this.shortRuleNameToFullName(explicitRuleStack[idx - 1])\n        };\n      });\n    }\n    flattenFollowSet() {\n      const followStack = map(this.buildFullFollowKeyStack(), currKey => {\n        return this.getFollowSetFromFollowKey(currKey);\n      });\n      return flatten(followStack);\n    }\n    getFollowSetFromFollowKey(followKey) {\n      if (followKey === EOF_FOLLOW_KEY) {\n        return [EOF];\n      }\n      const followName = followKey.ruleName + followKey.idxInCallingRule + IN + followKey.inRule;\n      return this.resyncFollows[followName];\n    }\n    // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n    // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n    addToResyncTokens(token, resyncTokens) {\n      if (!this.tokenMatcher(token, EOF)) {\n        resyncTokens.push(token);\n      }\n      return resyncTokens;\n    }\n    reSyncTo(tokType) {\n      const resyncedTokens = [];\n      let nextTok = this.LA(1);\n      while (this.tokenMatcher(nextTok, tokType) === false) {\n        nextTok = this.SKIP_TOKEN();\n        this.addToResyncTokens(nextTok, resyncedTokens);\n      }\n      return dropRight(resyncedTokens);\n    }\n    attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {}\n    getCurrentGrammarPath(tokType, tokIdxInRule) {\n      const pathRuleStack = this.getHumanReadableRuleStack();\n      const pathOccurrenceStack = clone(this.RULE_OCCURRENCE_STACK);\n      const grammarPath = {\n        ruleStack: pathRuleStack,\n        occurrenceStack: pathOccurrenceStack,\n        lastTok: tokType,\n        lastTokOccurrence: tokIdxInRule\n      };\n      return grammarPath;\n    }\n    getHumanReadableRuleStack() {\n      return map(this.RULE_STACK, currShortName => this.shortRuleNameToFullName(currShortName));\n    }\n  }\n  function attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n    const key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n    let firstAfterRepInfo = this.firstAfterRepMap[key];\n    if (firstAfterRepInfo === void 0) {\n      const currRuleName = this.getCurrRuleFullName();\n      const ruleGrammar = this.getGAstProductions()[currRuleName];\n      const walker = new nextToksWalker(ruleGrammar, prodOccurrence);\n      firstAfterRepInfo = walker.startWalking();\n      this.firstAfterRepMap[key] = firstAfterRepInfo;\n    }\n    let expectTokAfterLastMatch = firstAfterRepInfo.token;\n    let nextTokIdx = firstAfterRepInfo.occurrence;\n    const isEndOfRule = firstAfterRepInfo.isEndOfRule;\n    if (this.RULE_STACK.length === 1 && isEndOfRule && expectTokAfterLastMatch === void 0) {\n      expectTokAfterLastMatch = EOF;\n      nextTokIdx = 1;\n    }\n    if (expectTokAfterLastMatch === void 0 || nextTokIdx === void 0) {\n      return;\n    }\n    if (this.shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck)) {\n      this.tryInRepetitionRecovery(prodFunc, args, lookaheadFunc, expectTokAfterLastMatch);\n    }\n  }\n  const BITS_FOR_METHOD_TYPE = 4;\n  const BITS_FOR_OCCURRENCE_IDX = 8;\n  const OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;\n  const OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;\n  const MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;\n  const AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;\n  const MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;\n  const AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;\n  function getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {\n    return occurrence | dslMethodIdx | ruleIdx;\n  }\n  class LLkLookaheadStrategy {\n    constructor(options) {\n      var _a;\n      this.maxLookahead = (_a = options === null || options === void 0 ? void 0 : options.maxLookahead) !== null && _a !== void 0 ? _a : DEFAULT_PARSER_CONFIG.maxLookahead;\n    }\n    validate(options) {\n      const leftRecursionErrors = this.validateNoLeftRecursion(options.rules);\n      if (isEmpty(leftRecursionErrors)) {\n        const emptyAltErrors = this.validateEmptyOrAlternatives(options.rules);\n        const ambiguousAltsErrors = this.validateAmbiguousAlternationAlternatives(options.rules, this.maxLookahead);\n        const emptyRepetitionErrors = this.validateSomeNonEmptyLookaheadPath(options.rules, this.maxLookahead);\n        const allErrors = [...leftRecursionErrors, ...emptyAltErrors, ...ambiguousAltsErrors, ...emptyRepetitionErrors];\n        return allErrors;\n      }\n      return leftRecursionErrors;\n    }\n    validateNoLeftRecursion(rules) {\n      return flatMap(rules, currTopRule => validateNoLeftRecursion(currTopRule, currTopRule, defaultGrammarValidatorErrorProvider));\n    }\n    validateEmptyOrAlternatives(rules) {\n      return flatMap(rules, currTopRule => validateEmptyOrAlternative(currTopRule, defaultGrammarValidatorErrorProvider));\n    }\n    validateAmbiguousAlternationAlternatives(rules, maxLookahead) {\n      return flatMap(rules, currTopRule => validateAmbiguousAlternationAlternatives(currTopRule, maxLookahead, defaultGrammarValidatorErrorProvider));\n    }\n    validateSomeNonEmptyLookaheadPath(rules, maxLookahead) {\n      return validateSomeNonEmptyLookaheadPath(rules, maxLookahead, defaultGrammarValidatorErrorProvider);\n    }\n    buildLookaheadForAlternation(options) {\n      return buildLookaheadFuncForOr(options.prodOccurrence, options.rule, options.maxLookahead, options.hasPredicates, options.dynamicTokensEnabled, buildAlternativesLookAheadFunc);\n    }\n    buildLookaheadForOptional(options) {\n      return buildLookaheadFuncForOptionalProd(options.prodOccurrence, options.rule, options.maxLookahead, options.dynamicTokensEnabled, getProdType(options.prodType), buildSingleAlternativeLookaheadFunction);\n    }\n  }\n  class LooksAhead {\n    initLooksAhead(config) {\n      this.dynamicTokensEnabled = has(config, \"dynamicTokensEnabled\") ? config.dynamicTokensEnabled : DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;\n      this.maxLookahead = has(config, \"maxLookahead\") ? config.maxLookahead : DEFAULT_PARSER_CONFIG.maxLookahead;\n      this.lookaheadStrategy = has(config, \"lookaheadStrategy\") ? config.lookaheadStrategy : new LLkLookaheadStrategy({\n        maxLookahead: this.maxLookahead\n      });\n      this.lookAheadFuncsCache = /* @__PURE__ */new Map();\n    }\n    preComputeLookaheadFunctions(rules) {\n      forEach(rules, currRule => {\n        this.TRACE_INIT(`${currRule.name} Rule Lookahead`, () => {\n          const {\n            alternation,\n            repetition,\n            option,\n            repetitionMandatory,\n            repetitionMandatoryWithSeparator,\n            repetitionWithSeparator\n          } = collectMethods(currRule);\n          forEach(alternation, currProd => {\n            const prodIdx = currProd.idx === 0 ? \"\" : currProd.idx;\n            this.TRACE_INIT(`${getProductionDslName(currProd)}${prodIdx}`, () => {\n              const laFunc = this.lookaheadStrategy.buildLookaheadForAlternation({\n                prodOccurrence: currProd.idx,\n                rule: currRule,\n                maxLookahead: currProd.maxLookahead || this.maxLookahead,\n                hasPredicates: currProd.hasPredicates,\n                dynamicTokensEnabled: this.dynamicTokensEnabled\n              });\n              const key = getKeyForAutomaticLookahead(this.fullRuleNameToShort[currRule.name], OR_IDX, currProd.idx);\n              this.setLaFuncCache(key, laFunc);\n            });\n          });\n          forEach(repetition, currProd => {\n            this.computeLookaheadFunc(currRule, currProd.idx, MANY_IDX, \"Repetition\", currProd.maxLookahead, getProductionDslName(currProd));\n          });\n          forEach(option, currProd => {\n            this.computeLookaheadFunc(currRule, currProd.idx, OPTION_IDX, \"Option\", currProd.maxLookahead, getProductionDslName(currProd));\n          });\n          forEach(repetitionMandatory, currProd => {\n            this.computeLookaheadFunc(currRule, currProd.idx, AT_LEAST_ONE_IDX, \"RepetitionMandatory\", currProd.maxLookahead, getProductionDslName(currProd));\n          });\n          forEach(repetitionMandatoryWithSeparator, currProd => {\n            this.computeLookaheadFunc(currRule, currProd.idx, AT_LEAST_ONE_SEP_IDX, \"RepetitionMandatoryWithSeparator\", currProd.maxLookahead, getProductionDslName(currProd));\n          });\n          forEach(repetitionWithSeparator, currProd => {\n            this.computeLookaheadFunc(currRule, currProd.idx, MANY_SEP_IDX, \"RepetitionWithSeparator\", currProd.maxLookahead, getProductionDslName(currProd));\n          });\n        });\n      });\n    }\n    computeLookaheadFunc(rule, prodOccurrence, prodKey, prodType, prodMaxLookahead, dslMethodName) {\n      this.TRACE_INIT(`${dslMethodName}${prodOccurrence === 0 ? \"\" : prodOccurrence}`, () => {\n        const laFunc = this.lookaheadStrategy.buildLookaheadForOptional({\n          prodOccurrence,\n          rule,\n          maxLookahead: prodMaxLookahead || this.maxLookahead,\n          dynamicTokensEnabled: this.dynamicTokensEnabled,\n          prodType\n        });\n        const key = getKeyForAutomaticLookahead(this.fullRuleNameToShort[rule.name], prodKey, prodOccurrence);\n        this.setLaFuncCache(key, laFunc);\n      });\n    }\n    // this actually returns a number, but it is always used as a string (object prop key)\n    getKeyForAutomaticLookahead(dslMethodIdx, occurrence) {\n      const currRuleShortName = this.getLastExplicitRuleShortName();\n      return getKeyForAutomaticLookahead(currRuleShortName, dslMethodIdx, occurrence);\n    }\n    getLaFuncFromCache(key) {\n      return this.lookAheadFuncsCache.get(key);\n    }\n    /* istanbul ignore next */\n    setLaFuncCache(key, value) {\n      this.lookAheadFuncsCache.set(key, value);\n    }\n  }\n  class DslMethodsCollectorVisitor extends GAstVisitor {\n    constructor() {\n      super(...arguments);\n      this.dslMethods = {\n        option: [],\n        alternation: [],\n        repetition: [],\n        repetitionWithSeparator: [],\n        repetitionMandatory: [],\n        repetitionMandatoryWithSeparator: []\n      };\n    }\n    reset() {\n      this.dslMethods = {\n        option: [],\n        alternation: [],\n        repetition: [],\n        repetitionWithSeparator: [],\n        repetitionMandatory: [],\n        repetitionMandatoryWithSeparator: []\n      };\n    }\n    visitOption(option) {\n      this.dslMethods.option.push(option);\n    }\n    visitRepetitionWithSeparator(manySep) {\n      this.dslMethods.repetitionWithSeparator.push(manySep);\n    }\n    visitRepetitionMandatory(atLeastOne) {\n      this.dslMethods.repetitionMandatory.push(atLeastOne);\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n      this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n    }\n    visitRepetition(many) {\n      this.dslMethods.repetition.push(many);\n    }\n    visitAlternation(or) {\n      this.dslMethods.alternation.push(or);\n    }\n  }\n  const collectorVisitor = new DslMethodsCollectorVisitor();\n  function collectMethods(rule) {\n    collectorVisitor.reset();\n    rule.accept(collectorVisitor);\n    const dslMethods = collectorVisitor.dslMethods;\n    collectorVisitor.reset();\n    return dslMethods;\n  }\n  function setNodeLocationOnlyOffset(currNodeLocation, newLocationInfo) {\n    if (isNaN(currNodeLocation.startOffset) === true) {\n      currNodeLocation.startOffset = newLocationInfo.startOffset;\n      currNodeLocation.endOffset = newLocationInfo.endOffset;\n    } else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n      currNodeLocation.endOffset = newLocationInfo.endOffset;\n    }\n  }\n  function setNodeLocationFull(currNodeLocation, newLocationInfo) {\n    if (isNaN(currNodeLocation.startOffset) === true) {\n      currNodeLocation.startOffset = newLocationInfo.startOffset;\n      currNodeLocation.startColumn = newLocationInfo.startColumn;\n      currNodeLocation.startLine = newLocationInfo.startLine;\n      currNodeLocation.endOffset = newLocationInfo.endOffset;\n      currNodeLocation.endColumn = newLocationInfo.endColumn;\n      currNodeLocation.endLine = newLocationInfo.endLine;\n    } else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n      currNodeLocation.endOffset = newLocationInfo.endOffset;\n      currNodeLocation.endColumn = newLocationInfo.endColumn;\n      currNodeLocation.endLine = newLocationInfo.endLine;\n    }\n  }\n  function addTerminalToCst(node, token, tokenTypeName) {\n    if (node.children[tokenTypeName] === void 0) {\n      node.children[tokenTypeName] = [token];\n    } else {\n      node.children[tokenTypeName].push(token);\n    }\n  }\n  function addNoneTerminalToCst(node, ruleName, ruleResult) {\n    if (node.children[ruleName] === void 0) {\n      node.children[ruleName] = [ruleResult];\n    } else {\n      node.children[ruleName].push(ruleResult);\n    }\n  }\n  const NAME = \"name\";\n  function defineNameProp(obj, nameValue) {\n    Object.defineProperty(obj, NAME, {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: nameValue\n    });\n  }\n  function defaultVisit(ctx, param) {\n    const childrenNames = keys(ctx);\n    const childrenNamesLength = childrenNames.length;\n    for (let i = 0; i < childrenNamesLength; i++) {\n      const currChildName = childrenNames[i];\n      const currChildArray = ctx[currChildName];\n      const currChildArrayLength = currChildArray.length;\n      for (let j = 0; j < currChildArrayLength; j++) {\n        const currChild = currChildArray[j];\n        if (currChild.tokenTypeIdx === void 0) {\n          this[currChild.name](currChild.children, param);\n        }\n      }\n    }\n  }\n  function createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n    const derivedConstructor = function () {};\n    defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\");\n    const semanticProto = {\n      visit: function (cstNode, param) {\n        if (isArray$1(cstNode)) {\n          cstNode = cstNode[0];\n        }\n        if (isUndefined(cstNode)) {\n          return void 0;\n        }\n        return this[cstNode.name](cstNode.children, param);\n      },\n      validateVisitor: function () {\n        const semanticDefinitionErrors = validateVisitor(this, ruleNames);\n        if (!isEmpty(semanticDefinitionErrors)) {\n          const errorMessages = map(semanticDefinitionErrors, currDefError => currDefError.msg);\n          throw Error(`Errors Detected in CST Visitor <${this.constructor.name}>:\n\t${errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\t\")}`);\n        }\n      }\n    };\n    derivedConstructor.prototype = semanticProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    derivedConstructor._RULE_NAMES = ruleNames;\n    return derivedConstructor;\n  }\n  function createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n    const derivedConstructor = function () {};\n    defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n    const withDefaultsProto = Object.create(baseConstructor.prototype);\n    forEach(ruleNames, ruleName => {\n      withDefaultsProto[ruleName] = defaultVisit;\n    });\n    derivedConstructor.prototype = withDefaultsProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    return derivedConstructor;\n  }\n  var CstVisitorDefinitionError;\n  (function (CstVisitorDefinitionError2) {\n    CstVisitorDefinitionError2[CstVisitorDefinitionError2[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n    CstVisitorDefinitionError2[CstVisitorDefinitionError2[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n  })(CstVisitorDefinitionError || (CstVisitorDefinitionError = {}));\n  function validateVisitor(visitorInstance, ruleNames) {\n    const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n    return missingErrors;\n  }\n  function validateMissingCstMethods(visitorInstance, ruleNames) {\n    const missingRuleNames = filter(ruleNames, currRuleName => {\n      return isFunction(visitorInstance[currRuleName]) === false;\n    });\n    const errors = map(missingRuleNames, currRuleName => {\n      return {\n        msg: `Missing visitor method: <${currRuleName}> on ${visitorInstance.constructor.name} CST Visitor.`,\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName\n      };\n    });\n    return compact(errors);\n  }\n  class TreeBuilder {\n    initTreeBuilder(config) {\n      this.CST_STACK = [];\n      this.outputCst = config.outputCst;\n      this.nodeLocationTracking = has(config, \"nodeLocationTracking\") ? config.nodeLocationTracking : DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n      if (!this.outputCst) {\n        this.cstInvocationStateUpdate = noop;\n        this.cstFinallyStateUpdate = noop;\n        this.cstPostTerminal = noop;\n        this.cstPostNonTerminal = noop;\n        this.cstPostRule = noop;\n      } else {\n        if (/full/i.test(this.nodeLocationTracking)) {\n          if (this.recoveryEnabled) {\n            this.setNodeLocationFromToken = setNodeLocationFull;\n            this.setNodeLocationFromNode = setNodeLocationFull;\n            this.cstPostRule = noop;\n            this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n          } else {\n            this.setNodeLocationFromToken = noop;\n            this.setNodeLocationFromNode = noop;\n            this.cstPostRule = this.cstPostRuleFull;\n            this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n          }\n        } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n          if (this.recoveryEnabled) {\n            this.setNodeLocationFromToken = setNodeLocationOnlyOffset;\n            this.setNodeLocationFromNode = setNodeLocationOnlyOffset;\n            this.cstPostRule = noop;\n            this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery;\n          } else {\n            this.setNodeLocationFromToken = noop;\n            this.setNodeLocationFromNode = noop;\n            this.cstPostRule = this.cstPostRuleOnlyOffset;\n            this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular;\n          }\n        } else if (/none/i.test(this.nodeLocationTracking)) {\n          this.setNodeLocationFromToken = noop;\n          this.setNodeLocationFromNode = noop;\n          this.cstPostRule = noop;\n          this.setInitialNodeLocation = noop;\n        } else {\n          throw Error(`Invalid <nodeLocationTracking> config option: \"${config.nodeLocationTracking}\"`);\n        }\n      }\n    }\n    setInitialNodeLocationOnlyOffsetRecovery(cstNode) {\n      cstNode.location = {\n        startOffset: NaN,\n        endOffset: NaN\n      };\n    }\n    setInitialNodeLocationOnlyOffsetRegular(cstNode) {\n      cstNode.location = {\n        // without error recovery the starting Location of a new CstNode is guaranteed\n        // To be the next Token's startOffset (for valid inputs).\n        // For invalid inputs there won't be any CSTOutput so this potential\n        // inaccuracy does not matter\n        startOffset: this.LA(1).startOffset,\n        endOffset: NaN\n      };\n    }\n    setInitialNodeLocationFullRecovery(cstNode) {\n      cstNode.location = {\n        startOffset: NaN,\n        startLine: NaN,\n        startColumn: NaN,\n        endOffset: NaN,\n        endLine: NaN,\n        endColumn: NaN\n      };\n    }\n    /**\n         *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n    \n         * @param cstNode\n         */\n    setInitialNodeLocationFullRegular(cstNode) {\n      const nextToken = this.LA(1);\n      cstNode.location = {\n        startOffset: nextToken.startOffset,\n        startLine: nextToken.startLine,\n        startColumn: nextToken.startColumn,\n        endOffset: NaN,\n        endLine: NaN,\n        endColumn: NaN\n      };\n    }\n    cstInvocationStateUpdate(fullRuleName) {\n      const cstNode = {\n        name: fullRuleName,\n        children: /* @__PURE__ */Object.create(null)\n      };\n      this.setInitialNodeLocation(cstNode);\n      this.CST_STACK.push(cstNode);\n    }\n    cstFinallyStateUpdate() {\n      this.CST_STACK.pop();\n    }\n    cstPostRuleFull(ruleCstNode) {\n      const prevToken = this.LA(0);\n      const loc = ruleCstNode.location;\n      if (loc.startOffset <= prevToken.startOffset === true) {\n        loc.endOffset = prevToken.endOffset;\n        loc.endLine = prevToken.endLine;\n        loc.endColumn = prevToken.endColumn;\n      } else {\n        loc.startOffset = NaN;\n        loc.startLine = NaN;\n        loc.startColumn = NaN;\n      }\n    }\n    cstPostRuleOnlyOffset(ruleCstNode) {\n      const prevToken = this.LA(0);\n      const loc = ruleCstNode.location;\n      if (loc.startOffset <= prevToken.startOffset === true) {\n        loc.endOffset = prevToken.endOffset;\n      } else {\n        loc.startOffset = NaN;\n      }\n    }\n    cstPostTerminal(key, consumedToken) {\n      const rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n      addTerminalToCst(rootCst, consumedToken, key);\n      this.setNodeLocationFromToken(rootCst.location, consumedToken);\n    }\n    cstPostNonTerminal(ruleCstResult, ruleName) {\n      const preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n      addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult);\n      this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);\n    }\n    getBaseCstVisitorConstructor() {\n      if (isUndefined(this.baseCstVisitorConstructor)) {\n        const newBaseCstVisitorConstructor = createBaseSemanticVisitorConstructor(this.className, keys(this.gastProductionsCache));\n        this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n        return newBaseCstVisitorConstructor;\n      }\n      return this.baseCstVisitorConstructor;\n    }\n    getBaseCstVisitorConstructorWithDefaults() {\n      if (isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n        const newConstructor = createBaseVisitorConstructorWithDefaults(this.className, keys(this.gastProductionsCache), this.getBaseCstVisitorConstructor());\n        this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n        return newConstructor;\n      }\n      return this.baseCstVisitorWithDefaultsConstructor;\n    }\n    getLastExplicitRuleShortName() {\n      const ruleStack = this.RULE_STACK;\n      return ruleStack[ruleStack.length - 1];\n    }\n    getPreviousExplicitRuleShortName() {\n      const ruleStack = this.RULE_STACK;\n      return ruleStack[ruleStack.length - 2];\n    }\n    getLastExplicitRuleOccurrenceIndex() {\n      const occurrenceStack = this.RULE_OCCURRENCE_STACK;\n      return occurrenceStack[occurrenceStack.length - 1];\n    }\n  }\n  class LexerAdapter {\n    initLexerAdapter() {\n      this.tokVector = [];\n      this.tokVectorLength = 0;\n      this.currIdx = -1;\n    }\n    set input(newInput) {\n      if (this.selfAnalysisDone !== true) {\n        throw Error(`Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.`);\n      }\n      this.reset();\n      this.tokVector = newInput;\n      this.tokVectorLength = newInput.length;\n    }\n    get input() {\n      return this.tokVector;\n    }\n    // skips a token and returns the next token\n    SKIP_TOKEN() {\n      if (this.currIdx <= this.tokVector.length - 2) {\n        this.consumeToken();\n        return this.LA(1);\n      } else {\n        return END_OF_FILE;\n      }\n    }\n    // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers\n    // or lexers dependent on parser context.\n    LA(howMuch) {\n      const soughtIdx = this.currIdx + howMuch;\n      if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {\n        return END_OF_FILE;\n      } else {\n        return this.tokVector[soughtIdx];\n      }\n    }\n    consumeToken() {\n      this.currIdx++;\n    }\n    exportLexerState() {\n      return this.currIdx;\n    }\n    importLexerState(newState) {\n      this.currIdx = newState;\n    }\n    resetLexerState() {\n      this.currIdx = -1;\n    }\n    moveToTerminatedState() {\n      this.currIdx = this.tokVector.length - 1;\n    }\n    getLexerPosition() {\n      return this.exportLexerState();\n    }\n  }\n  class RecognizerApi {\n    ACTION(impl) {\n      return impl.call(this);\n    }\n    consume(idx, tokType, options) {\n      return this.consumeInternal(tokType, idx, options);\n    }\n    subrule(idx, ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, idx, options);\n    }\n    option(idx, actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, idx);\n    }\n    or(idx, altsOrOpts) {\n      return this.orInternal(altsOrOpts, idx);\n    }\n    many(idx, actionORMethodDef) {\n      return this.manyInternal(idx, actionORMethodDef);\n    }\n    atLeastOne(idx, actionORMethodDef) {\n      return this.atLeastOneInternal(idx, actionORMethodDef);\n    }\n    CONSUME(tokType, options) {\n      return this.consumeInternal(tokType, 0, options);\n    }\n    CONSUME1(tokType, options) {\n      return this.consumeInternal(tokType, 1, options);\n    }\n    CONSUME2(tokType, options) {\n      return this.consumeInternal(tokType, 2, options);\n    }\n    CONSUME3(tokType, options) {\n      return this.consumeInternal(tokType, 3, options);\n    }\n    CONSUME4(tokType, options) {\n      return this.consumeInternal(tokType, 4, options);\n    }\n    CONSUME5(tokType, options) {\n      return this.consumeInternal(tokType, 5, options);\n    }\n    CONSUME6(tokType, options) {\n      return this.consumeInternal(tokType, 6, options);\n    }\n    CONSUME7(tokType, options) {\n      return this.consumeInternal(tokType, 7, options);\n    }\n    CONSUME8(tokType, options) {\n      return this.consumeInternal(tokType, 8, options);\n    }\n    CONSUME9(tokType, options) {\n      return this.consumeInternal(tokType, 9, options);\n    }\n    SUBRULE(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 0, options);\n    }\n    SUBRULE1(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 1, options);\n    }\n    SUBRULE2(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 2, options);\n    }\n    SUBRULE3(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 3, options);\n    }\n    SUBRULE4(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 4, options);\n    }\n    SUBRULE5(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 5, options);\n    }\n    SUBRULE6(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 6, options);\n    }\n    SUBRULE7(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 7, options);\n    }\n    SUBRULE8(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 8, options);\n    }\n    SUBRULE9(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 9, options);\n    }\n    OPTION(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 0);\n    }\n    OPTION1(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 1);\n    }\n    OPTION2(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 2);\n    }\n    OPTION3(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 3);\n    }\n    OPTION4(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 4);\n    }\n    OPTION5(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 5);\n    }\n    OPTION6(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 6);\n    }\n    OPTION7(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 7);\n    }\n    OPTION8(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 8);\n    }\n    OPTION9(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 9);\n    }\n    OR(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 0);\n    }\n    OR1(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 1);\n    }\n    OR2(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 2);\n    }\n    OR3(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 3);\n    }\n    OR4(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 4);\n    }\n    OR5(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 5);\n    }\n    OR6(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 6);\n    }\n    OR7(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 7);\n    }\n    OR8(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 8);\n    }\n    OR9(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 9);\n    }\n    MANY(actionORMethodDef) {\n      this.manyInternal(0, actionORMethodDef);\n    }\n    MANY1(actionORMethodDef) {\n      this.manyInternal(1, actionORMethodDef);\n    }\n    MANY2(actionORMethodDef) {\n      this.manyInternal(2, actionORMethodDef);\n    }\n    MANY3(actionORMethodDef) {\n      this.manyInternal(3, actionORMethodDef);\n    }\n    MANY4(actionORMethodDef) {\n      this.manyInternal(4, actionORMethodDef);\n    }\n    MANY5(actionORMethodDef) {\n      this.manyInternal(5, actionORMethodDef);\n    }\n    MANY6(actionORMethodDef) {\n      this.manyInternal(6, actionORMethodDef);\n    }\n    MANY7(actionORMethodDef) {\n      this.manyInternal(7, actionORMethodDef);\n    }\n    MANY8(actionORMethodDef) {\n      this.manyInternal(8, actionORMethodDef);\n    }\n    MANY9(actionORMethodDef) {\n      this.manyInternal(9, actionORMethodDef);\n    }\n    MANY_SEP(options) {\n      this.manySepFirstInternal(0, options);\n    }\n    MANY_SEP1(options) {\n      this.manySepFirstInternal(1, options);\n    }\n    MANY_SEP2(options) {\n      this.manySepFirstInternal(2, options);\n    }\n    MANY_SEP3(options) {\n      this.manySepFirstInternal(3, options);\n    }\n    MANY_SEP4(options) {\n      this.manySepFirstInternal(4, options);\n    }\n    MANY_SEP5(options) {\n      this.manySepFirstInternal(5, options);\n    }\n    MANY_SEP6(options) {\n      this.manySepFirstInternal(6, options);\n    }\n    MANY_SEP7(options) {\n      this.manySepFirstInternal(7, options);\n    }\n    MANY_SEP8(options) {\n      this.manySepFirstInternal(8, options);\n    }\n    MANY_SEP9(options) {\n      this.manySepFirstInternal(9, options);\n    }\n    AT_LEAST_ONE(actionORMethodDef) {\n      this.atLeastOneInternal(0, actionORMethodDef);\n    }\n    AT_LEAST_ONE1(actionORMethodDef) {\n      return this.atLeastOneInternal(1, actionORMethodDef);\n    }\n    AT_LEAST_ONE2(actionORMethodDef) {\n      this.atLeastOneInternal(2, actionORMethodDef);\n    }\n    AT_LEAST_ONE3(actionORMethodDef) {\n      this.atLeastOneInternal(3, actionORMethodDef);\n    }\n    AT_LEAST_ONE4(actionORMethodDef) {\n      this.atLeastOneInternal(4, actionORMethodDef);\n    }\n    AT_LEAST_ONE5(actionORMethodDef) {\n      this.atLeastOneInternal(5, actionORMethodDef);\n    }\n    AT_LEAST_ONE6(actionORMethodDef) {\n      this.atLeastOneInternal(6, actionORMethodDef);\n    }\n    AT_LEAST_ONE7(actionORMethodDef) {\n      this.atLeastOneInternal(7, actionORMethodDef);\n    }\n    AT_LEAST_ONE8(actionORMethodDef) {\n      this.atLeastOneInternal(8, actionORMethodDef);\n    }\n    AT_LEAST_ONE9(actionORMethodDef) {\n      this.atLeastOneInternal(9, actionORMethodDef);\n    }\n    AT_LEAST_ONE_SEP(options) {\n      this.atLeastOneSepFirstInternal(0, options);\n    }\n    AT_LEAST_ONE_SEP1(options) {\n      this.atLeastOneSepFirstInternal(1, options);\n    }\n    AT_LEAST_ONE_SEP2(options) {\n      this.atLeastOneSepFirstInternal(2, options);\n    }\n    AT_LEAST_ONE_SEP3(options) {\n      this.atLeastOneSepFirstInternal(3, options);\n    }\n    AT_LEAST_ONE_SEP4(options) {\n      this.atLeastOneSepFirstInternal(4, options);\n    }\n    AT_LEAST_ONE_SEP5(options) {\n      this.atLeastOneSepFirstInternal(5, options);\n    }\n    AT_LEAST_ONE_SEP6(options) {\n      this.atLeastOneSepFirstInternal(6, options);\n    }\n    AT_LEAST_ONE_SEP7(options) {\n      this.atLeastOneSepFirstInternal(7, options);\n    }\n    AT_LEAST_ONE_SEP8(options) {\n      this.atLeastOneSepFirstInternal(8, options);\n    }\n    AT_LEAST_ONE_SEP9(options) {\n      this.atLeastOneSepFirstInternal(9, options);\n    }\n    RULE(name, implementation, config = DEFAULT_RULE_CONFIG) {\n      if (includes(this.definedRulesNames, name)) {\n        const errMsg = defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({\n          topLevelRule: name,\n          grammarName: this.className\n        });\n        const error = {\n          message: errMsg,\n          type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n          ruleName: name\n        };\n        this.definitionErrors.push(error);\n      }\n      this.definedRulesNames.push(name);\n      const ruleImplementation = this.defineRule(name, implementation, config);\n      this[name] = ruleImplementation;\n      return ruleImplementation;\n    }\n    OVERRIDE_RULE(name, impl, config = DEFAULT_RULE_CONFIG) {\n      const ruleErrors = validateRuleIsOverridden(name, this.definedRulesNames, this.className);\n      this.definitionErrors = this.definitionErrors.concat(ruleErrors);\n      const ruleImplementation = this.defineRule(name, impl, config);\n      this[name] = ruleImplementation;\n      return ruleImplementation;\n    }\n    BACKTRACK(grammarRule, args) {\n      return function () {\n        this.isBackTrackingStack.push(1);\n        const orgState = this.saveRecogState();\n        try {\n          grammarRule.apply(this, args);\n          return true;\n        } catch (e) {\n          if (isRecognitionException(e)) {\n            return false;\n          } else {\n            throw e;\n          }\n        } finally {\n          this.reloadRecogState(orgState);\n          this.isBackTrackingStack.pop();\n        }\n      };\n    }\n    // GAST export APIs\n    getGAstProductions() {\n      return this.gastProductionsCache;\n    }\n    getSerializedGastProductions() {\n      return serializeGrammar(values(this.gastProductionsCache));\n    }\n  }\n  class RecognizerEngine {\n    initRecognizerEngine(tokenVocabulary, config) {\n      this.className = this.constructor.name;\n      this.shortRuleNameToFull = {};\n      this.fullRuleNameToShort = {};\n      this.ruleShortNameIdx = 256;\n      this.tokenMatcher = tokenStructuredMatcherNoCategories;\n      this.subruleIdx = 0;\n      this.definedRulesNames = [];\n      this.tokensMap = {};\n      this.isBackTrackingStack = [];\n      this.RULE_STACK = [];\n      this.RULE_OCCURRENCE_STACK = [];\n      this.gastProductionsCache = {};\n      if (has(config, \"serializedGrammar\")) {\n        throw Error(\"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\tFor Further details.\");\n      }\n      if (isArray$1(tokenVocabulary)) {\n        if (isEmpty(tokenVocabulary)) {\n          throw Error(\"A Token Vocabulary cannot be empty.\\n\tNote that the first argument for the parser constructor\\n\tis no longer a Token vector (since v4.0).\");\n        }\n        if (typeof tokenVocabulary[0].startOffset === \"number\") {\n          throw Error(\"The Parser constructor no longer accepts a token vector as the first argument.\\n\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\tFor Further details.\");\n        }\n      }\n      if (isArray$1(tokenVocabulary)) {\n        this.tokensMap = reduce(tokenVocabulary, (acc, tokType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        }, {});\n      } else if (has(tokenVocabulary, \"modes\") && every(flatten(values(tokenVocabulary.modes)), isTokenType)) {\n        const allTokenTypes2 = flatten(values(tokenVocabulary.modes));\n        const uniqueTokens = uniq(allTokenTypes2);\n        this.tokensMap = reduce(uniqueTokens, (acc, tokType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        }, {});\n      } else if (isObject(tokenVocabulary)) {\n        this.tokensMap = clone(tokenVocabulary);\n      } else {\n        throw new Error(\"<tokensDictionary> argument must be An Array of Token constructors, A dictionary of Token constructors or an IMultiModeLexerDefinition\");\n      }\n      this.tokensMap[\"EOF\"] = EOF;\n      const allTokenTypes = has(tokenVocabulary, \"modes\") ? flatten(values(tokenVocabulary.modes)) : values(tokenVocabulary);\n      const noTokenCategoriesUsed = every(allTokenTypes, tokenConstructor => isEmpty(tokenConstructor.categoryMatches));\n      this.tokenMatcher = noTokenCategoriesUsed ? tokenStructuredMatcherNoCategories : tokenStructuredMatcher;\n      augmentTokenTypes(values(this.tokensMap));\n    }\n    defineRule(ruleName, impl, config) {\n      if (this.selfAnalysisDone) {\n        throw Error(`Grammar rule <${ruleName}> may not be defined after the 'performSelfAnalysis' method has been called'\nMake sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`);\n      }\n      const resyncEnabled = has(config, \"resyncEnabled\") ? config.resyncEnabled : DEFAULT_RULE_CONFIG.resyncEnabled;\n      const recoveryValueFunc = has(config, \"recoveryValueFunc\") ? config.recoveryValueFunc : DEFAULT_RULE_CONFIG.recoveryValueFunc;\n      const shortName = this.ruleShortNameIdx << BITS_FOR_METHOD_TYPE + BITS_FOR_OCCURRENCE_IDX;\n      this.ruleShortNameIdx++;\n      this.shortRuleNameToFull[shortName] = ruleName;\n      this.fullRuleNameToShort[ruleName] = shortName;\n      let invokeRuleWithTry;\n      if (this.outputCst === true) {\n        invokeRuleWithTry = function invokeRuleWithTry2(...args) {\n          try {\n            this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n            impl.apply(this, args);\n            const cst = this.CST_STACK[this.CST_STACK.length - 1];\n            this.cstPostRule(cst);\n            return cst;\n          } catch (e) {\n            return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n          } finally {\n            this.ruleFinallyStateUpdate();\n          }\n        };\n      } else {\n        invokeRuleWithTry = function invokeRuleWithTryCst(...args) {\n          try {\n            this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n            return impl.apply(this, args);\n          } catch (e) {\n            return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n          } finally {\n            this.ruleFinallyStateUpdate();\n          }\n        };\n      }\n      const wrappedGrammarRule = Object.assign(invokeRuleWithTry, {\n        ruleName,\n        originalGrammarAction: impl\n      });\n      return wrappedGrammarRule;\n    }\n    invokeRuleCatch(e, resyncEnabledConfig, recoveryValueFunc) {\n      const isFirstInvokedRule = this.RULE_STACK.length === 1;\n      const reSyncEnabled = resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n      if (isRecognitionException(e)) {\n        const recogError = e;\n        if (reSyncEnabled) {\n          const reSyncTokType = this.findReSyncTokenType();\n          if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n            recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n            if (this.outputCst) {\n              const partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n              partialCstResult.recoveredNode = true;\n              return partialCstResult;\n            } else {\n              return recoveryValueFunc(e);\n            }\n          } else {\n            if (this.outputCst) {\n              const partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n              partialCstResult.recoveredNode = true;\n              recogError.partialCstResult = partialCstResult;\n            }\n            throw recogError;\n          }\n        } else if (isFirstInvokedRule) {\n          this.moveToTerminatedState();\n          return recoveryValueFunc(e);\n        } else {\n          throw recogError;\n        }\n      } else {\n        throw e;\n      }\n    }\n    // Implementation of parsing DSL\n    optionInternal(actionORMethodDef, occurrence) {\n      const key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence);\n      return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n    }\n    optionInternalLogic(actionORMethodDef, occurrence, key) {\n      let lookAheadFunc = this.getLaFuncFromCache(key);\n      let action;\n      if (typeof actionORMethodDef !== \"function\") {\n        action = actionORMethodDef.DEF;\n        const predicate = actionORMethodDef.GATE;\n        if (predicate !== void 0) {\n          const orgLookaheadFunction = lookAheadFunc;\n          lookAheadFunc = () => {\n            return predicate.call(this) && orgLookaheadFunction.call(this);\n          };\n        }\n      } else {\n        action = actionORMethodDef;\n      }\n      if (lookAheadFunc.call(this) === true) {\n        return action.call(this);\n      }\n      return void 0;\n    }\n    atLeastOneInternal(prodOccurrence, actionORMethodDef) {\n      const laKey = this.getKeyForAutomaticLookahead(AT_LEAST_ONE_IDX, prodOccurrence);\n      return this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n    }\n    atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, key) {\n      let lookAheadFunc = this.getLaFuncFromCache(key);\n      let action;\n      if (typeof actionORMethodDef !== \"function\") {\n        action = actionORMethodDef.DEF;\n        const predicate = actionORMethodDef.GATE;\n        if (predicate !== void 0) {\n          const orgLookaheadFunction = lookAheadFunc;\n          lookAheadFunc = () => {\n            return predicate.call(this) && orgLookaheadFunction.call(this);\n          };\n        }\n      } else {\n        action = actionORMethodDef;\n      }\n      if (lookAheadFunc.call(this) === true) {\n        let notStuck = this.doSingleRepetition(action);\n        while (lookAheadFunc.call(this) === true && notStuck === true) {\n          notStuck = this.doSingleRepetition(action);\n        }\n      } else {\n        throw this.raiseEarlyExitException(prodOccurrence, PROD_TYPE.REPETITION_MANDATORY, actionORMethodDef.ERR_MSG);\n      }\n      this.attemptInRepetitionRecovery(this.atLeastOneInternal, [prodOccurrence, actionORMethodDef], lookAheadFunc, AT_LEAST_ONE_IDX, prodOccurrence, NextTerminalAfterAtLeastOneWalker);\n    }\n    atLeastOneSepFirstInternal(prodOccurrence, options) {\n      const laKey = this.getKeyForAutomaticLookahead(AT_LEAST_ONE_SEP_IDX, prodOccurrence);\n      this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n    }\n    atLeastOneSepFirstInternalLogic(prodOccurrence, options, key) {\n      const action = options.DEF;\n      const separator = options.SEP;\n      const firstIterationLookaheadFunc = this.getLaFuncFromCache(key);\n      if (firstIterationLookaheadFunc.call(this) === true) {\n        action.call(this);\n        const separatorLookAheadFunc = () => {\n          return this.tokenMatcher(this.LA(1), separator);\n        };\n        while (this.tokenMatcher(this.LA(1), separator) === true) {\n          this.CONSUME(separator);\n          action.call(this);\n        }\n        this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [prodOccurrence, separator, separatorLookAheadFunc, action, NextTerminalAfterAtLeastOneSepWalker], separatorLookAheadFunc, AT_LEAST_ONE_SEP_IDX, prodOccurrence, NextTerminalAfterAtLeastOneSepWalker);\n      } else {\n        throw this.raiseEarlyExitException(prodOccurrence, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, options.ERR_MSG);\n      }\n    }\n    manyInternal(prodOccurrence, actionORMethodDef) {\n      const laKey = this.getKeyForAutomaticLookahead(MANY_IDX, prodOccurrence);\n      return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n    }\n    manyInternalLogic(prodOccurrence, actionORMethodDef, key) {\n      let lookaheadFunction = this.getLaFuncFromCache(key);\n      let action;\n      if (typeof actionORMethodDef !== \"function\") {\n        action = actionORMethodDef.DEF;\n        const predicate = actionORMethodDef.GATE;\n        if (predicate !== void 0) {\n          const orgLookaheadFunction = lookaheadFunction;\n          lookaheadFunction = () => {\n            return predicate.call(this) && orgLookaheadFunction.call(this);\n          };\n        }\n      } else {\n        action = actionORMethodDef;\n      }\n      let notStuck = true;\n      while (lookaheadFunction.call(this) === true && notStuck === true) {\n        notStuck = this.doSingleRepetition(action);\n      }\n      this.attemptInRepetitionRecovery(this.manyInternal, [prodOccurrence, actionORMethodDef], lookaheadFunction, MANY_IDX, prodOccurrence, NextTerminalAfterManyWalker,\n      // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n      // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n      // An infinite loop cannot occur as:\n      // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n      // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n      notStuck);\n    }\n    manySepFirstInternal(prodOccurrence, options) {\n      const laKey = this.getKeyForAutomaticLookahead(MANY_SEP_IDX, prodOccurrence);\n      this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n    }\n    manySepFirstInternalLogic(prodOccurrence, options, key) {\n      const action = options.DEF;\n      const separator = options.SEP;\n      const firstIterationLaFunc = this.getLaFuncFromCache(key);\n      if (firstIterationLaFunc.call(this) === true) {\n        action.call(this);\n        const separatorLookAheadFunc = () => {\n          return this.tokenMatcher(this.LA(1), separator);\n        };\n        while (this.tokenMatcher(this.LA(1), separator) === true) {\n          this.CONSUME(separator);\n          action.call(this);\n        }\n        this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [prodOccurrence, separator, separatorLookAheadFunc, action, NextTerminalAfterManySepWalker], separatorLookAheadFunc, MANY_SEP_IDX, prodOccurrence, NextTerminalAfterManySepWalker);\n      }\n    }\n    repetitionSepSecondInternal(prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker) {\n      while (separatorLookAheadFunc()) {\n        this.CONSUME(separator);\n        action.call(this);\n      }\n      this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker], separatorLookAheadFunc, AT_LEAST_ONE_SEP_IDX, prodOccurrence, nextTerminalAfterWalker);\n    }\n    doSingleRepetition(action) {\n      const beforeIteration = this.getLexerPosition();\n      action.call(this);\n      const afterIteration = this.getLexerPosition();\n      return afterIteration > beforeIteration;\n    }\n    orInternal(altsOrOpts, occurrence) {\n      const laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence);\n      const alts = isArray$1(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;\n      const laFunc = this.getLaFuncFromCache(laKey);\n      const altIdxToTake = laFunc.call(this, alts);\n      if (altIdxToTake !== void 0) {\n        const chosenAlternative = alts[altIdxToTake];\n        return chosenAlternative.ALT.call(this);\n      }\n      this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);\n    }\n    ruleFinallyStateUpdate() {\n      this.RULE_STACK.pop();\n      this.RULE_OCCURRENCE_STACK.pop();\n      this.cstFinallyStateUpdate();\n      if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n        const firstRedundantTok = this.LA(1);\n        const errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n          firstRedundant: firstRedundantTok,\n          ruleName: this.getCurrRuleFullName()\n        });\n        this.SAVE_ERROR(new NotAllInputParsedException(errMsg, firstRedundantTok));\n      }\n    }\n    subruleInternal(ruleToCall, idx, options) {\n      let ruleResult;\n      try {\n        const args = options !== void 0 ? options.ARGS : void 0;\n        this.subruleIdx = idx;\n        ruleResult = ruleToCall.apply(this, args);\n        this.cstPostNonTerminal(ruleResult, options !== void 0 && options.LABEL !== void 0 ? options.LABEL : ruleToCall.ruleName);\n        return ruleResult;\n      } catch (e) {\n        throw this.subruleInternalError(e, options, ruleToCall.ruleName);\n      }\n    }\n    subruleInternalError(e, options, ruleName) {\n      if (isRecognitionException(e) && e.partialCstResult !== void 0) {\n        this.cstPostNonTerminal(e.partialCstResult, options !== void 0 && options.LABEL !== void 0 ? options.LABEL : ruleName);\n        delete e.partialCstResult;\n      }\n      throw e;\n    }\n    consumeInternal(tokType, idx, options) {\n      let consumedToken;\n      try {\n        const nextToken = this.LA(1);\n        if (this.tokenMatcher(nextToken, tokType) === true) {\n          this.consumeToken();\n          consumedToken = nextToken;\n        } else {\n          this.consumeInternalError(tokType, nextToken, options);\n        }\n      } catch (eFromConsumption) {\n        consumedToken = this.consumeInternalRecovery(tokType, idx, eFromConsumption);\n      }\n      this.cstPostTerminal(options !== void 0 && options.LABEL !== void 0 ? options.LABEL : tokType.name, consumedToken);\n      return consumedToken;\n    }\n    consumeInternalError(tokType, nextToken, options) {\n      let msg;\n      const previousToken = this.LA(0);\n      if (options !== void 0 && options.ERR_MSG) {\n        msg = options.ERR_MSG;\n      } else {\n        msg = this.errorMessageProvider.buildMismatchTokenMessage({\n          expected: tokType,\n          actual: nextToken,\n          previous: previousToken,\n          ruleName: this.getCurrRuleFullName()\n        });\n      }\n      throw this.SAVE_ERROR(new MismatchedTokenException(msg, nextToken, previousToken));\n    }\n    consumeInternalRecovery(tokType, idx, eFromConsumption) {\n      if (this.recoveryEnabled &&\n      // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n      eFromConsumption.name === \"MismatchedTokenException\" && !this.isBackTracking()) {\n        const follows = this.getFollowsForInRuleRecovery(tokType, idx);\n        try {\n          return this.tryInRuleRecovery(tokType, follows);\n        } catch (eFromInRuleRecovery) {\n          if (eFromInRuleRecovery.name === IN_RULE_RECOVERY_EXCEPTION) {\n            throw eFromConsumption;\n          } else {\n            throw eFromInRuleRecovery;\n          }\n        }\n      } else {\n        throw eFromConsumption;\n      }\n    }\n    saveRecogState() {\n      const savedErrors = this.errors;\n      const savedRuleStack = clone(this.RULE_STACK);\n      return {\n        errors: savedErrors,\n        lexerState: this.exportLexerState(),\n        RULE_STACK: savedRuleStack,\n        CST_STACK: this.CST_STACK\n      };\n    }\n    reloadRecogState(newState) {\n      this.errors = newState.errors;\n      this.importLexerState(newState.lexerState);\n      this.RULE_STACK = newState.RULE_STACK;\n    }\n    ruleInvocationStateUpdate(shortName, fullName, idxInCallingRule) {\n      this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n      this.RULE_STACK.push(shortName);\n      this.cstInvocationStateUpdate(fullName);\n    }\n    isBackTracking() {\n      return this.isBackTrackingStack.length !== 0;\n    }\n    getCurrRuleFullName() {\n      const shortName = this.getLastExplicitRuleShortName();\n      return this.shortRuleNameToFull[shortName];\n    }\n    shortRuleNameToFullName(shortName) {\n      return this.shortRuleNameToFull[shortName];\n    }\n    isAtEndOfInput() {\n      return this.tokenMatcher(this.LA(1), EOF);\n    }\n    reset() {\n      this.resetLexerState();\n      this.subruleIdx = 0;\n      this.isBackTrackingStack = [];\n      this.errors = [];\n      this.RULE_STACK = [];\n      this.CST_STACK = [];\n      this.RULE_OCCURRENCE_STACK = [];\n    }\n  }\n  class ErrorHandler {\n    initErrorHandler(config) {\n      this._errors = [];\n      this.errorMessageProvider = has(config, \"errorMessageProvider\") ? config.errorMessageProvider : DEFAULT_PARSER_CONFIG.errorMessageProvider;\n    }\n    SAVE_ERROR(error) {\n      if (isRecognitionException(error)) {\n        error.context = {\n          ruleStack: this.getHumanReadableRuleStack(),\n          ruleOccurrenceStack: clone(this.RULE_OCCURRENCE_STACK)\n        };\n        this._errors.push(error);\n        return error;\n      } else {\n        throw Error(\"Trying to save an Error which is not a RecognitionException\");\n      }\n    }\n    get errors() {\n      return clone(this._errors);\n    }\n    set errors(newErrors) {\n      this._errors = newErrors;\n    }\n    // TODO: consider caching the error message computed information\n    raiseEarlyExitException(occurrence, prodType, userDefinedErrMsg) {\n      const ruleName = this.getCurrRuleFullName();\n      const ruleGrammar = this.getGAstProductions()[ruleName];\n      const lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, this.maxLookahead);\n      const insideProdPaths = lookAheadPathsPerAlternative[0];\n      const actualTokens = [];\n      for (let i = 1; i <= this.maxLookahead; i++) {\n        actualTokens.push(this.LA(i));\n      }\n      const msg = this.errorMessageProvider.buildEarlyExitMessage({\n        expectedIterationPaths: insideProdPaths,\n        actual: actualTokens,\n        previous: this.LA(0),\n        customUserDescription: userDefinedErrMsg,\n        ruleName\n      });\n      throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)));\n    }\n    // TODO: consider caching the error message computed information\n    raiseNoAltException(occurrence, errMsgTypes) {\n      const ruleName = this.getCurrRuleFullName();\n      const ruleGrammar = this.getGAstProductions()[ruleName];\n      const lookAheadPathsPerAlternative = getLookaheadPathsForOr(occurrence, ruleGrammar, this.maxLookahead);\n      const actualTokens = [];\n      for (let i = 1; i <= this.maxLookahead; i++) {\n        actualTokens.push(this.LA(i));\n      }\n      const previousToken = this.LA(0);\n      const errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n        expectedPathsPerAlt: lookAheadPathsPerAlternative,\n        actual: actualTokens,\n        previous: previousToken,\n        customUserDescription: errMsgTypes,\n        ruleName: this.getCurrRuleFullName()\n      });\n      throw this.SAVE_ERROR(new NoViableAltException(errMsg, this.LA(1), previousToken));\n    }\n  }\n  class ContentAssist {\n    initContentAssist() {}\n    computeContentAssist(startRuleName, precedingInput) {\n      const startRuleGast = this.gastProductionsCache[startRuleName];\n      if (isUndefined(startRuleGast)) {\n        throw Error(`Rule ->${startRuleName}<- does not exist in this grammar.`);\n      }\n      return nextPossibleTokensAfter([startRuleGast], precedingInput, this.tokenMatcher, this.maxLookahead);\n    }\n    // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...\n    // TODO: should this be more explicitly part of the public API?\n    getNextPossibleTokenTypes(grammarPath) {\n      const topRuleName = head(grammarPath.ruleStack);\n      const gastProductions = this.getGAstProductions();\n      const topProduction = gastProductions[topRuleName];\n      const nextPossibleTokenTypes = new NextAfterTokenWalker(topProduction, grammarPath).startWalking();\n      return nextPossibleTokenTypes;\n    }\n  }\n  const RECORDING_NULL_OBJECT = {\n    description: \"This Object indicates the Parser is during Recording Phase\"\n  };\n  Object.freeze(RECORDING_NULL_OBJECT);\n  const HANDLE_SEPARATOR = true;\n  const MAX_METHOD_IDX = Math.pow(2, BITS_FOR_OCCURRENCE_IDX) - 1;\n  const RFT = createToken2({\n    name: \"RECORDING_PHASE_TOKEN\",\n    pattern: Lexer2.NA\n  });\n  augmentTokenTypes([RFT]);\n  const RECORDING_PHASE_TOKEN = createTokenInstance(RFT, \"This IToken indicates the Parser is in Recording Phase\\n\tSee: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  // Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n  // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n  -1, -1, -1, -1, -1, -1);\n  Object.freeze(RECORDING_PHASE_TOKEN);\n  const RECORDING_PHASE_CSTNODE = {\n    name: \"This CSTNode indicates the Parser is in Recording Phase\\n\tSee: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n    children: {}\n  };\n  class GastRecorder {\n    initGastRecorder(config) {\n      this.recordingProdStack = [];\n      this.RECORDING_PHASE = false;\n    }\n    enableRecording() {\n      this.RECORDING_PHASE = true;\n      this.TRACE_INIT(\"Enable Recording\", () => {\n        for (let i = 0; i < 10; i++) {\n          const idx = i > 0 ? i : \"\";\n          this[`CONSUME${idx}`] = function (arg1, arg2) {\n            return this.consumeInternalRecord(arg1, i, arg2);\n          };\n          this[`SUBRULE${idx}`] = function (arg1, arg2) {\n            return this.subruleInternalRecord(arg1, i, arg2);\n          };\n          this[`OPTION${idx}`] = function (arg1) {\n            return this.optionInternalRecord(arg1, i);\n          };\n          this[`OR${idx}`] = function (arg1) {\n            return this.orInternalRecord(arg1, i);\n          };\n          this[`MANY${idx}`] = function (arg1) {\n            this.manyInternalRecord(i, arg1);\n          };\n          this[`MANY_SEP${idx}`] = function (arg1) {\n            this.manySepFirstInternalRecord(i, arg1);\n          };\n          this[`AT_LEAST_ONE${idx}`] = function (arg1) {\n            this.atLeastOneInternalRecord(i, arg1);\n          };\n          this[`AT_LEAST_ONE_SEP${idx}`] = function (arg1) {\n            this.atLeastOneSepFirstInternalRecord(i, arg1);\n          };\n        }\n        this[`consume`] = function (idx, arg1, arg2) {\n          return this.consumeInternalRecord(arg1, idx, arg2);\n        };\n        this[`subrule`] = function (idx, arg1, arg2) {\n          return this.subruleInternalRecord(arg1, idx, arg2);\n        };\n        this[`option`] = function (idx, arg1) {\n          return this.optionInternalRecord(arg1, idx);\n        };\n        this[`or`] = function (idx, arg1) {\n          return this.orInternalRecord(arg1, idx);\n        };\n        this[`many`] = function (idx, arg1) {\n          this.manyInternalRecord(idx, arg1);\n        };\n        this[`atLeastOne`] = function (idx, arg1) {\n          this.atLeastOneInternalRecord(idx, arg1);\n        };\n        this.ACTION = this.ACTION_RECORD;\n        this.BACKTRACK = this.BACKTRACK_RECORD;\n        this.LA = this.LA_RECORD;\n      });\n    }\n    disableRecording() {\n      this.RECORDING_PHASE = false;\n      this.TRACE_INIT(\"Deleting Recording methods\", () => {\n        const that = this;\n        for (let i = 0; i < 10; i++) {\n          const idx = i > 0 ? i : \"\";\n          delete that[`CONSUME${idx}`];\n          delete that[`SUBRULE${idx}`];\n          delete that[`OPTION${idx}`];\n          delete that[`OR${idx}`];\n          delete that[`MANY${idx}`];\n          delete that[`MANY_SEP${idx}`];\n          delete that[`AT_LEAST_ONE${idx}`];\n          delete that[`AT_LEAST_ONE_SEP${idx}`];\n        }\n        delete that[`consume`];\n        delete that[`subrule`];\n        delete that[`option`];\n        delete that[`or`];\n        delete that[`many`];\n        delete that[`atLeastOne`];\n        delete that.ACTION;\n        delete that.BACKTRACK;\n        delete that.LA;\n      });\n    }\n    //   Parser methods are called inside an ACTION?\n    //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n    // @ts-expect-error -- noop place holder\n    ACTION_RECORD(impl) {}\n    // Executing backtracking logic will break our recording logic assumptions\n    BACKTRACK_RECORD(grammarRule, args) {\n      return () => true;\n    }\n    // LA is part of the official API and may be used for custom lookahead logic\n    // by end users who may forget to wrap it in ACTION or inside a GATE\n    LA_RECORD(howMuch) {\n      return END_OF_FILE;\n    }\n    topLevelRuleRecord(name, def) {\n      try {\n        const newTopLevelRule = new Rule({\n          definition: [],\n          name\n        });\n        newTopLevelRule.name = name;\n        this.recordingProdStack.push(newTopLevelRule);\n        def.call(this);\n        this.recordingProdStack.pop();\n        return newTopLevelRule;\n      } catch (originalError) {\n        if (originalError.KNOWN_RECORDER_ERROR !== true) {\n          try {\n            originalError.message = originalError.message + '\\n\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\thttps://chevrotain.io/docs/guide/internals.html#grammar-recording';\n          } catch (mutabilityError) {\n            throw originalError;\n          }\n        }\n        throw originalError;\n      }\n    }\n    // Implementation of parsing DSL\n    optionInternalRecord(actionORMethodDef, occurrence) {\n      return recordProd.call(this, Option, actionORMethodDef, occurrence);\n    }\n    atLeastOneInternalRecord(occurrence, actionORMethodDef) {\n      recordProd.call(this, RepetitionMandatory, actionORMethodDef, occurrence);\n    }\n    atLeastOneSepFirstInternalRecord(occurrence, options) {\n      recordProd.call(this, RepetitionMandatoryWithSeparator, options, occurrence, HANDLE_SEPARATOR);\n    }\n    manyInternalRecord(occurrence, actionORMethodDef) {\n      recordProd.call(this, Repetition, actionORMethodDef, occurrence);\n    }\n    manySepFirstInternalRecord(occurrence, options) {\n      recordProd.call(this, RepetitionWithSeparator, options, occurrence, HANDLE_SEPARATOR);\n    }\n    orInternalRecord(altsOrOpts, occurrence) {\n      return recordOrProd.call(this, altsOrOpts, occurrence);\n    }\n    subruleInternalRecord(ruleToCall, occurrence, options) {\n      assertMethodIdxIsValid(occurrence);\n      if (!ruleToCall || has(ruleToCall, \"ruleName\") === false) {\n        const error = new Error(`<SUBRULE${getIdxSuffix(occurrence)}> argument is invalid expecting a Parser method reference but got: <${JSON.stringify(ruleToCall)}>\n inside top level rule: <${this.recordingProdStack[0].name}>`);\n        error.KNOWN_RECORDER_ERROR = true;\n        throw error;\n      }\n      const prevProd = last(this.recordingProdStack);\n      const ruleName = ruleToCall.ruleName;\n      const newNoneTerminal = new NonTerminal({\n        idx: occurrence,\n        nonTerminalName: ruleName,\n        label: options === null || options === void 0 ? void 0 : options.LABEL,\n        // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n        referencedRule: void 0\n      });\n      prevProd.definition.push(newNoneTerminal);\n      return this.outputCst ? RECORDING_PHASE_CSTNODE : RECORDING_NULL_OBJECT;\n    }\n    consumeInternalRecord(tokType, occurrence, options) {\n      assertMethodIdxIsValid(occurrence);\n      if (!hasShortKeyProperty(tokType)) {\n        const error = new Error(`<CONSUME${getIdxSuffix(occurrence)}> argument is invalid expecting a TokenType reference but got: <${JSON.stringify(tokType)}>\n inside top level rule: <${this.recordingProdStack[0].name}>`);\n        error.KNOWN_RECORDER_ERROR = true;\n        throw error;\n      }\n      const prevProd = last(this.recordingProdStack);\n      const newNoneTerminal = new Terminal({\n        idx: occurrence,\n        terminalType: tokType,\n        label: options === null || options === void 0 ? void 0 : options.LABEL\n      });\n      prevProd.definition.push(newNoneTerminal);\n      return RECORDING_PHASE_TOKEN;\n    }\n  }\n  function recordProd(prodConstructor, mainProdArg, occurrence, handleSep = false) {\n    assertMethodIdxIsValid(occurrence);\n    const prevProd = last(this.recordingProdStack);\n    const grammarAction = isFunction(mainProdArg) ? mainProdArg : mainProdArg.DEF;\n    const newProd = new prodConstructor({\n      definition: [],\n      idx: occurrence\n    });\n    if (handleSep) {\n      newProd.separator = mainProdArg.SEP;\n    }\n    if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n      newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n    }\n    this.recordingProdStack.push(newProd);\n    grammarAction.call(this);\n    prevProd.definition.push(newProd);\n    this.recordingProdStack.pop();\n    return RECORDING_NULL_OBJECT;\n  }\n  function recordOrProd(mainProdArg, occurrence) {\n    assertMethodIdxIsValid(occurrence);\n    const prevProd = last(this.recordingProdStack);\n    const hasOptions = isArray$1(mainProdArg) === false;\n    const alts = hasOptions === false ? mainProdArg : mainProdArg.DEF;\n    const newOrProd = new Alternation({\n      definition: [],\n      idx: occurrence,\n      ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true\n    });\n    if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n      newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n    }\n    const hasPredicates = some(alts, currAlt => isFunction(currAlt.GATE));\n    newOrProd.hasPredicates = hasPredicates;\n    prevProd.definition.push(newOrProd);\n    forEach(alts, currAlt => {\n      const currAltFlat = new Alternative({\n        definition: []\n      });\n      newOrProd.definition.push(currAltFlat);\n      if (has(currAlt, \"IGNORE_AMBIGUITIES\")) {\n        currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES;\n      } else if (has(currAlt, \"GATE\")) {\n        currAltFlat.ignoreAmbiguities = true;\n      }\n      this.recordingProdStack.push(currAltFlat);\n      currAlt.ALT.call(this);\n      this.recordingProdStack.pop();\n    });\n    return RECORDING_NULL_OBJECT;\n  }\n  function getIdxSuffix(idx) {\n    return idx === 0 ? \"\" : `${idx}`;\n  }\n  function assertMethodIdxIsValid(idx) {\n    if (idx < 0 || idx > MAX_METHOD_IDX) {\n      const error = new Error(\n      // The stack trace will contain all the needed details\n      `Invalid DSL Method idx value: <${idx}>\n\tIdx value must be a none negative value smaller than ${MAX_METHOD_IDX + 1}`);\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n  }\n  class PerformanceTracer {\n    initPerformanceTracer(config) {\n      if (has(config, \"traceInitPerf\")) {\n        const userTraceInitPerf = config.traceInitPerf;\n        const traceIsNumber = typeof userTraceInitPerf === \"number\";\n        this.traceInitMaxIdent = traceIsNumber ? userTraceInitPerf : Infinity;\n        this.traceInitPerf = traceIsNumber ? userTraceInitPerf > 0 : userTraceInitPerf;\n      } else {\n        this.traceInitMaxIdent = 0;\n        this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n      }\n      this.traceInitIndent = -1;\n    }\n    TRACE_INIT(phaseDesc, phaseImpl) {\n      if (this.traceInitPerf === true) {\n        this.traceInitIndent++;\n        const indent = new Array(this.traceInitIndent + 1).join(\"\t\");\n        if (this.traceInitIndent < this.traceInitMaxIdent) {\n          console.log(`${indent}--> <${phaseDesc}>`);\n        }\n        const {\n          time,\n          value\n        } = timer(phaseImpl);\n        const traceMethod = time > 10 ? console.warn : console.log;\n        if (this.traceInitIndent < this.traceInitMaxIdent) {\n          traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n        }\n        this.traceInitIndent--;\n        return value;\n      } else {\n        return phaseImpl();\n      }\n    }\n  }\n  function applyMixins(derivedCtor, baseCtors) {\n    baseCtors.forEach(baseCtor => {\n      const baseProto = baseCtor.prototype;\n      Object.getOwnPropertyNames(baseProto).forEach(propName => {\n        if (propName === \"constructor\") {\n          return;\n        }\n        const basePropDescriptor = Object.getOwnPropertyDescriptor(baseProto, propName);\n        if (basePropDescriptor && (basePropDescriptor.get || basePropDescriptor.set)) {\n          Object.defineProperty(derivedCtor.prototype, propName, basePropDescriptor);\n        } else {\n          derivedCtor.prototype[propName] = baseCtor.prototype[propName];\n        }\n      });\n    });\n  }\n  const END_OF_FILE = createTokenInstance(EOF, \"\", NaN, NaN, NaN, NaN, NaN, NaN);\n  Object.freeze(END_OF_FILE);\n  const DEFAULT_PARSER_CONFIG = Object.freeze({\n    recoveryEnabled: false,\n    maxLookahead: 3,\n    dynamicTokensEnabled: false,\n    outputCst: true,\n    errorMessageProvider: defaultParserErrorProvider,\n    nodeLocationTracking: \"none\",\n    traceInitPerf: false,\n    skipValidations: false\n  });\n  const DEFAULT_RULE_CONFIG = Object.freeze({\n    recoveryValueFunc: () => void 0,\n    resyncEnabled: true\n  });\n  var ParserDefinitionErrorType;\n  (function (ParserDefinitionErrorType2) {\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"INVALID_RULE_NAME\"] = 0] = \"INVALID_RULE_NAME\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"DUPLICATE_RULE_NAME\"] = 1] = \"DUPLICATE_RULE_NAME\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"INVALID_RULE_OVERRIDE\"] = 2] = \"INVALID_RULE_OVERRIDE\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"DUPLICATE_PRODUCTIONS\"] = 3] = \"DUPLICATE_PRODUCTIONS\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"UNRESOLVED_SUBRULE_REF\"] = 4] = \"UNRESOLVED_SUBRULE_REF\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"LEFT_RECURSION\"] = 5] = \"LEFT_RECURSION\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"NONE_LAST_EMPTY_ALT\"] = 6] = \"NONE_LAST_EMPTY_ALT\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"AMBIGUOUS_ALTS\"] = 7] = \"AMBIGUOUS_ALTS\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"CONFLICT_TOKENS_RULES_NAMESPACE\"] = 8] = \"CONFLICT_TOKENS_RULES_NAMESPACE\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"INVALID_TOKEN_NAME\"] = 9] = \"INVALID_TOKEN_NAME\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"NO_NON_EMPTY_LOOKAHEAD\"] = 10] = \"NO_NON_EMPTY_LOOKAHEAD\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"AMBIGUOUS_PREFIX_ALTS\"] = 11] = \"AMBIGUOUS_PREFIX_ALTS\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"TOO_MANY_ALTS\"] = 12] = \"TOO_MANY_ALTS\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"CUSTOM_LOOKAHEAD_VALIDATION\"] = 13] = \"CUSTOM_LOOKAHEAD_VALIDATION\";\n  })(ParserDefinitionErrorType || (ParserDefinitionErrorType = {}));\n  class Parser {\n    /**\n     *  @deprecated use the **instance** method with the same name instead\n     */\n    static performSelfAnalysis(parserInstance) {\n      throw Error(\"The **static** `performSelfAnalysis` method has been deprecated.\t\\nUse the **instance** method with the same name instead.\");\n    }\n    performSelfAnalysis() {\n      this.TRACE_INIT(\"performSelfAnalysis\", () => {\n        let defErrorsMsgs;\n        this.selfAnalysisDone = true;\n        const className = this.className;\n        this.TRACE_INIT(\"toFastProps\", () => {\n          toFastProperties(this);\n        });\n        this.TRACE_INIT(\"Grammar Recording\", () => {\n          try {\n            this.enableRecording();\n            forEach(this.definedRulesNames, currRuleName => {\n              const wrappedRule = this[currRuleName];\n              const originalGrammarAction = wrappedRule[\"originalGrammarAction\"];\n              let recordedRuleGast;\n              this.TRACE_INIT(`${currRuleName} Rule`, () => {\n                recordedRuleGast = this.topLevelRuleRecord(currRuleName, originalGrammarAction);\n              });\n              this.gastProductionsCache[currRuleName] = recordedRuleGast;\n            });\n          } finally {\n            this.disableRecording();\n          }\n        });\n        let resolverErrors = [];\n        this.TRACE_INIT(\"Grammar Resolving\", () => {\n          resolverErrors = resolveGrammar({\n            rules: values(this.gastProductionsCache)\n          });\n          this.definitionErrors = this.definitionErrors.concat(resolverErrors);\n        });\n        this.TRACE_INIT(\"Grammar Validations\", () => {\n          if (isEmpty(resolverErrors) && this.skipValidations === false) {\n            const validationErrors = validateGrammar({\n              rules: values(this.gastProductionsCache),\n              tokenTypes: values(this.tokensMap),\n              errMsgProvider: defaultGrammarValidatorErrorProvider,\n              grammarName: className\n            });\n            const lookaheadValidationErrors = validateLookahead({\n              lookaheadStrategy: this.lookaheadStrategy,\n              rules: values(this.gastProductionsCache),\n              tokenTypes: values(this.tokensMap),\n              grammarName: className\n            });\n            this.definitionErrors = this.definitionErrors.concat(validationErrors, lookaheadValidationErrors);\n          }\n        });\n        if (isEmpty(this.definitionErrors)) {\n          if (this.recoveryEnabled) {\n            this.TRACE_INIT(\"computeAllProdsFollows\", () => {\n              const allFollows = computeAllProdsFollows(values(this.gastProductionsCache));\n              this.resyncFollows = allFollows;\n            });\n          }\n          this.TRACE_INIT(\"ComputeLookaheadFunctions\", () => {\n            var _a, _b;\n            (_b = (_a = this.lookaheadStrategy).initialize) === null || _b === void 0 ? void 0 : _b.call(_a, {\n              rules: values(this.gastProductionsCache)\n            });\n            this.preComputeLookaheadFunctions(values(this.gastProductionsCache));\n          });\n        }\n        if (!Parser.DEFER_DEFINITION_ERRORS_HANDLING && !isEmpty(this.definitionErrors)) {\n          defErrorsMsgs = map(this.definitionErrors, defError => defError.message);\n          throw new Error(`Parser Definition Errors detected:\n ${defErrorsMsgs.join(\"\\n-------------------------------\\n\")}`);\n        }\n      });\n    }\n    constructor(tokenVocabulary, config) {\n      this.definitionErrors = [];\n      this.selfAnalysisDone = false;\n      const that = this;\n      that.initErrorHandler(config);\n      that.initLexerAdapter();\n      that.initLooksAhead(config);\n      that.initRecognizerEngine(tokenVocabulary, config);\n      that.initRecoverable(config);\n      that.initTreeBuilder(config);\n      that.initContentAssist();\n      that.initGastRecorder(config);\n      that.initPerformanceTracer(config);\n      if (has(config, \"ignoredIssues\")) {\n        throw new Error(\"The <ignoredIssues> IParserConfig property has been deprecated.\\n\tPlease use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\\n\tSee: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\\n\tFor further details.\");\n      }\n      this.skipValidations = has(config, \"skipValidations\") ? config.skipValidations : DEFAULT_PARSER_CONFIG.skipValidations;\n    }\n  }\n  Parser.DEFER_DEFINITION_ERRORS_HANDLING = false;\n  applyMixins(Parser, [Recoverable, LooksAhead, TreeBuilder, LexerAdapter, RecognizerEngine, RecognizerApi, ErrorHandler, ContentAssist, GastRecorder, PerformanceTracer]);\n  class CstParser2 extends Parser {\n    constructor(tokenVocabulary, config = DEFAULT_PARSER_CONFIG) {\n      const configClone = clone(config);\n      configClone.outputCst = true;\n      super(tokenVocabulary, configClone);\n    }\n  }\n  return {\n    CstParser: CstParser2,\n    Lexer: Lexer2,\n    createToken: createToken2\n  };\n})();\nexport { CstParser, Lexer, createToken };","map":{"version":3,"sources":["../../src/libs/chevrotain.js"],"names":["map","values","key","othValue","collection","includes","Lexer","LexerDefinitionErrorType","msg","currConfig","createToken","getExtraProductionArgument","PROD_TYPE","tokenMatcher","keys","prefixKeys","collectorVisitor","CstVisitorDefinitionError","allTokenTypes","invokeRuleWithTry","ParserDefinitionErrorType","CstParser"],"mappings":"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","sourcesContent":["const { CstParser, Lexer, createToken } = (() => {\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global\n\n  const freeGlobal$1 = freeGlobal\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal$1 || freeSelf || Function('return this')()\n\n  const root$1 = root\n\n  /** Built-in value references. */\n  var Symbol$1 = root$1.Symbol\n\n  const Symbol$2 = Symbol$1\n\n  /** Used for built-in method references. */\n  var objectProto$j = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$g = objectProto$j.hasOwnProperty\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var nativeObjectToString$1 = objectProto$j.toString\n\n  /** Built-in value references. */\n  var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : undefined\n\n  /**\n   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the raw `toStringTag`.\n   */\n  function getRawTag(value) {\n    var isOwn = hasOwnProperty$g.call(value, symToStringTag$1),\n      tag = value[symToStringTag$1]\n\n    try {\n      value[symToStringTag$1] = undefined\n      var unmasked = true\n    } catch (e) {}\n\n    var result = nativeObjectToString$1.call(value)\n    if (unmasked) {\n      if (isOwn) {\n        value[symToStringTag$1] = tag\n      } else {\n        delete value[symToStringTag$1]\n      }\n    }\n    return result\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$i = Object.prototype\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var nativeObjectToString = objectProto$i.toString\n\n  /**\n   * Converts `value` to a string using `Object.prototype.toString`.\n   *\n   * @private\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   */\n  function objectToString(value) {\n    return nativeObjectToString.call(value)\n  }\n\n  /** `Object#toString` result references. */\n  var nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]'\n\n  /** Built-in value references. */\n  var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : undefined\n\n  /**\n   * The base implementation of `getTag` without fallbacks for buggy environments.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n  function baseGetTag(value) {\n    if (value == null) {\n      return value === undefined ? undefinedTag : nullTag\n    }\n    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value)\n  }\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike(value) {\n    return value != null && typeof value == 'object'\n  }\n\n  /** `Object#toString` result references. */\n  var symbolTag$3 = '[object Symbol]'\n\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n  function isSymbol(value) {\n    return typeof value == 'symbol' || (isObjectLike(value) && baseGetTag(value) == symbolTag$3)\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length)\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array)\n    }\n    return result\n  }\n\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(document.body.children);\n   * // => false\n   *\n   * _.isArray('abc');\n   * // => false\n   *\n   * _.isArray(_.noop);\n   * // => false\n   */\n  var isArray = Array.isArray\n\n  const isArray$1 = isArray\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY$3 = 1 / 0\n\n  /** Used to convert symbols to primitives and strings. */\n  var symbolProto$2 = Symbol$2 ? Symbol$2.prototype : undefined,\n    symbolToString = symbolProto$2 ? symbolProto$2.toString : undefined\n\n  /**\n   * The base implementation of `_.toString` which doesn't convert nullish\n   * values to empty strings.\n   *\n   * @private\n   * @param {*} value The value to process.\n   * @returns {string} Returns the string.\n   */\n  function baseToString(value) {\n    // Exit early for strings to avoid a performance hit in some environments.\n    if (typeof value == 'string') {\n      return value\n    }\n    if (isArray$1(value)) {\n      // Recursively convert values (susceptible to call stack limits).\n      return arrayMap(value, baseToString) + ''\n    }\n    if (isSymbol(value)) {\n      return symbolToString ? symbolToString.call(value) : ''\n    }\n    var result = value + ''\n    return result == '0' && 1 / value == -INFINITY$3 ? '-0' : result\n  }\n\n  /** Used to match a single whitespace character. */\n  var reWhitespace = /\\s/\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n   * character of `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the index of the last non-whitespace character.\n   */\n  function trimmedEndIndex(string) {\n    var index = string.length\n\n    while (index-- && reWhitespace.test(string.charAt(index))) {}\n    return index\n  }\n\n  /** Used to match leading whitespace. */\n  var reTrimStart = /^\\s+/\n\n  /**\n   * The base implementation of `_.trim`.\n   *\n   * @private\n   * @param {string} string The string to trim.\n   * @returns {string} Returns the trimmed string.\n   */\n  function baseTrim(string) {\n    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string\n  }\n\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n  function isObject(value) {\n    var type = typeof value\n    return value != null && (type == 'object' || type == 'function')\n  }\n\n  /** Used as references for various `Number` constants. */\n  var NAN = 0 / 0\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseInt = parseInt\n\n  /**\n   * Converts `value` to a number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to process.\n   * @returns {number} Returns the number.\n   * @example\n   *\n   * _.toNumber(3.2);\n   * // => 3.2\n   *\n   * _.toNumber(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toNumber(Infinity);\n   * // => Infinity\n   *\n   * _.toNumber('3.2');\n   * // => 3.2\n   */\n  function toNumber(value) {\n    if (typeof value == 'number') {\n      return value\n    }\n    if (isSymbol(value)) {\n      return NAN\n    }\n    if (isObject(value)) {\n      var other = typeof value.valueOf == 'function' ? value.valueOf() : value\n      value = isObject(other) ? other + '' : other\n    }\n    if (typeof value != 'string') {\n      return value === 0 ? value : +value\n    }\n    value = baseTrim(value)\n    var isBinary = reIsBinary.test(value)\n    return isBinary || reIsOctal.test(value)\n      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n      : reIsBadHex.test(value)\n      ? NAN\n      : +value\n  }\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY$2 = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e308\n\n  /**\n   * Converts `value` to a finite number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.12.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {number} Returns the converted number.\n   * @example\n   *\n   * _.toFinite(3.2);\n   * // => 3.2\n   *\n   * _.toFinite(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toFinite(Infinity);\n   * // => 1.7976931348623157e+308\n   *\n   * _.toFinite('3.2');\n   * // => 3.2\n   */\n  function toFinite(value) {\n    if (!value) {\n      return value === 0 ? value : 0\n    }\n    value = toNumber(value)\n    if (value === INFINITY$2 || value === -INFINITY$2) {\n      var sign = value < 0 ? -1 : 1\n      return sign * MAX_INTEGER\n    }\n    return value === value ? value : 0\n  }\n\n  /**\n   * Converts `value` to an integer.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {number} Returns the converted integer.\n   * @example\n   *\n   * _.toInteger(3.2);\n   * // => 3\n   *\n   * _.toInteger(Number.MIN_VALUE);\n   * // => 0\n   *\n   * _.toInteger(Infinity);\n   * // => 1.7976931348623157e+308\n   *\n   * _.toInteger('3.2');\n   * // => 3\n   */\n  function toInteger(value) {\n    var result = toFinite(value),\n      remainder = result % 1\n\n    return result === result ? (remainder ? result - remainder : result) : 0\n  }\n\n  /**\n   * This method returns the first argument it receives.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Util\n   * @param {*} value Any value.\n   * @returns {*} Returns `value`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   *\n   * console.log(_.identity(object) === object);\n   * // => true\n   */\n  function identity(value) {\n    return value\n  }\n\n  /** `Object#toString` result references. */\n  var asyncTag = '[object AsyncFunction]',\n    funcTag$2 = '[object Function]',\n    genTag$1 = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]'\n\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n  function isFunction(value) {\n    if (!isObject(value)) {\n      return false\n    }\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n    var tag = baseGetTag(value)\n    return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag\n  }\n\n  /** Used to detect overreaching core-js shims. */\n  var coreJsData = root$1['__core-js_shared__']\n\n  const coreJsData$1 = coreJsData\n\n  /** Used to detect methods masquerading as native. */\n  var maskSrcKey = (function () {\n    var uid = /[^.]+$/.exec((coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO) || '')\n    return uid ? 'Symbol(src)_1.' + uid : ''\n  })()\n\n  /**\n   * Checks if `func` has its source masked.\n   *\n   * @private\n   * @param {Function} func The function to check.\n   * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n   */\n  function isMasked(func) {\n    return !!maskSrcKey && maskSrcKey in func\n  }\n\n  /** Used for built-in method references. */\n  var funcProto$1 = Function.prototype\n\n  /** Used to resolve the decompiled source of functions. */\n  var funcToString$1 = funcProto$1.toString\n\n  /**\n   * Converts `func` to its source code.\n   *\n   * @private\n   * @param {Function} func The function to convert.\n   * @returns {string} Returns the source code.\n   */\n  function toSource(func) {\n    if (func != null) {\n      try {\n        return funcToString$1.call(func)\n      } catch (e) {}\n      try {\n        return func + ''\n      } catch (e) {}\n    }\n    return ''\n  }\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/\n\n  /** Used for built-in method references. */\n  var funcProto = Function.prototype,\n    objectProto$h = Object.prototype\n\n  /** Used to resolve the decompiled source of functions. */\n  var funcToString = funcProto.toString\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$f = objectProto$h.hasOwnProperty\n\n  /** Used to detect if a method is native. */\n  var reIsNative = RegExp(\n    '^' +\n      funcToString\n        .call(hasOwnProperty$f)\n        .replace(reRegExpChar, '\\\\$&')\n        .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') +\n      '$',\n  )\n\n  /**\n   * The base implementation of `_.isNative` without bad shim checks.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a native function,\n   *  else `false`.\n   */\n  function baseIsNative(value) {\n    if (!isObject(value) || isMasked(value)) {\n      return false\n    }\n    var pattern = isFunction(value) ? reIsNative : reIsHostCtor\n    return pattern.test(toSource(value))\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key]\n  }\n\n  /**\n   * Gets the native function at `key` of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {string} key The key of the method to get.\n   * @returns {*} Returns the function if it's native, else `undefined`.\n   */\n  function getNative(object, key) {\n    var value = getValue(object, key)\n    return baseIsNative(value) ? value : undefined\n  }\n\n  /* Built-in method references that are verified to be native. */\n  var WeakMap = getNative(root$1, 'WeakMap')\n\n  const WeakMap$1 = WeakMap\n\n  /** Built-in value references. */\n  var objectCreate = Object.create\n\n  /**\n   * The base implementation of `_.create` without support for assigning\n   * properties to the created object.\n   *\n   * @private\n   * @param {Object} proto The object to inherit from.\n   * @returns {Object} Returns the new object.\n   */\n  var baseCreate = (function () {\n    function object() {}\n    return function (proto) {\n      if (!isObject(proto)) {\n        return {}\n      }\n      if (objectCreate) {\n        return objectCreate(proto)\n      }\n      object.prototype = proto\n      var result = new object()\n      object.prototype = undefined\n      return result\n    }\n  })()\n\n  const baseCreate$1 = baseCreate\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0:\n        return func.call(thisArg)\n      case 1:\n        return func.call(thisArg, args[0])\n      case 2:\n        return func.call(thisArg, args[0], args[1])\n      case 3:\n        return func.call(thisArg, args[0], args[1], args[2])\n    }\n    return func.apply(thisArg, args)\n  }\n\n  /**\n   * This method returns `undefined`.\n   *\n   * @static\n   * @memberOf _\n   * @since 2.3.0\n   * @category Util\n   * @example\n   *\n   * _.times(2, _.noop);\n   * // => [undefined, undefined]\n   */\n  function noop() {\n    // No operation performed.\n  }\n\n  /**\n   * Copies the values of `source` to `array`.\n   *\n   * @private\n   * @param {Array} source The array to copy values from.\n   * @param {Array} [array=[]] The array to copy values to.\n   * @returns {Array} Returns `array`.\n   */\n  function copyArray(source, array) {\n    var index = -1,\n      length = source.length\n\n    array || (array = Array(length))\n    while (++index < length) {\n      array[index] = source[index]\n    }\n    return array\n  }\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n    HOT_SPAN = 16\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeNow = Date.now\n\n  /**\n   * Creates a function that'll short out and invoke `identity` instead\n   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n   * milliseconds.\n   *\n   * @private\n   * @param {Function} func The function to restrict.\n   * @returns {Function} Returns the new shortable function.\n   */\n  function shortOut(func) {\n    var count = 0,\n      lastCalled = 0\n\n    return function () {\n      var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled)\n\n      lastCalled = stamp\n      if (remaining > 0) {\n        if (++count >= HOT_COUNT) {\n          return arguments[0]\n        }\n      } else {\n        count = 0\n      }\n      return func.apply(undefined, arguments)\n    }\n  }\n\n  /**\n   * Creates a function that returns `value`.\n   *\n   * @static\n   * @memberOf _\n   * @since 2.4.0\n   * @category Util\n   * @param {*} value The value to return from the new function.\n   * @returns {Function} Returns the new constant function.\n   * @example\n   *\n   * var objects = _.times(2, _.constant({ 'a': 1 }));\n   *\n   * console.log(objects);\n   * // => [{ 'a': 1 }, { 'a': 1 }]\n   *\n   * console.log(objects[0] === objects[1]);\n   * // => true\n   */\n  function constant(value) {\n    return function () {\n      return value\n    }\n  }\n\n  var defineProperty = (function () {\n    try {\n      var func = getNative(Object, 'defineProperty')\n      func({}, '', {})\n      return func\n    } catch (e) {}\n  })()\n\n  const defineProperty$1 = defineProperty\n\n  /**\n   * The base implementation of `setToString` without support for hot loop shorting.\n   *\n   * @private\n   * @param {Function} func The function to modify.\n   * @param {Function} string The `toString` result.\n   * @returns {Function} Returns `func`.\n   */\n  var baseSetToString = !defineProperty$1\n    ? identity\n    : function (func, string) {\n        return defineProperty$1(func, 'toString', {\n          configurable: true,\n          enumerable: false,\n          value: constant(string),\n          writable: true,\n        })\n      }\n\n  const baseSetToString$1 = baseSetToString\n\n  /**\n   * Sets the `toString` method of `func` to return `string`.\n   *\n   * @private\n   * @param {Function} func The function to modify.\n   * @param {Function} string The `toString` result.\n   * @returns {Function} Returns `func`.\n   */\n  var setToString = shortOut(baseSetToString$1)\n\n  const setToString$1 = setToString\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n      length = array == null ? 0 : array.length\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break\n      }\n    }\n    return array\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1)\n\n    while (fromRight ? index-- : ++index < length) {\n      if (predicate(array[index], index, array)) {\n        return index\n      }\n    }\n    return -1\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n      length = array.length\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index\n      }\n    }\n    return -1\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex)\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length\n    return !!length && baseIndexOf(array, value, 0) > -1\n  }\n\n  /** Used as references for various `Number` constants. */\n  var MAX_SAFE_INTEGER$1 = 9007199254740991\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/\n\n  /**\n   * Checks if `value` is a valid array-like index.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n   */\n  function isIndex(value, length) {\n    var type = typeof value\n    length = length == null ? MAX_SAFE_INTEGER$1 : length\n\n    return (\n      !!length &&\n      (type == 'number' || (type != 'symbol' && reIsUint.test(value))) &&\n      value > -1 &&\n      value % 1 == 0 &&\n      value < length\n    )\n  }\n\n  /**\n   * The base implementation of `assignValue` and `assignMergeValue` without\n   * value checks.\n   *\n   * @private\n   * @param {Object} object The object to modify.\n   * @param {string} key The key of the property to assign.\n   * @param {*} value The value to assign.\n   */\n  function baseAssignValue(object, key, value) {\n    if (key == '__proto__' && defineProperty$1) {\n      defineProperty$1(object, key, {\n        configurable: true,\n        enumerable: true,\n        value: value,\n        writable: true,\n      })\n    } else {\n      object[key] = value\n    }\n  }\n\n  /**\n   * Performs a\n   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * comparison between two values to determine if they are equivalent.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   * var other = { 'a': 1 };\n   *\n   * _.eq(object, object);\n   * // => true\n   *\n   * _.eq(object, other);\n   * // => false\n   *\n   * _.eq('a', 'a');\n   * // => true\n   *\n   * _.eq('a', Object('a'));\n   * // => false\n   *\n   * _.eq(NaN, NaN);\n   * // => true\n   */\n  function eq(value, other) {\n    return value === other || (value !== value && other !== other)\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$g = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$e = objectProto$g.hasOwnProperty\n\n  /**\n   * Assigns `value` to `key` of `object` if the existing value is not equivalent\n   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * for equality comparisons.\n   *\n   * @private\n   * @param {Object} object The object to modify.\n   * @param {string} key The key of the property to assign.\n   * @param {*} value The value to assign.\n   */\n  function assignValue(object, key, value) {\n    var objValue = object[key]\n    if (!(hasOwnProperty$e.call(object, key) && eq(objValue, value)) || (value === undefined && !(key in object))) {\n      baseAssignValue(object, key, value)\n    }\n  }\n\n  /**\n   * Copies properties of `source` to `object`.\n   *\n   * @private\n   * @param {Object} source The object to copy properties from.\n   * @param {Array} props The property identifiers to copy.\n   * @param {Object} [object={}] The object to copy properties to.\n   * @param {Function} [customizer] The function to customize copied values.\n   * @returns {Object} Returns `object`.\n   */\n  function copyObject(source, props, object, customizer) {\n    var isNew = !object\n    object || (object = {})\n\n    var index = -1,\n      length = props.length\n\n    while (++index < length) {\n      var key = props[index]\n\n      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined\n\n      if (newValue === undefined) {\n        newValue = source[key]\n      }\n      if (isNew) {\n        baseAssignValue(object, key, newValue)\n      } else {\n        assignValue(object, key, newValue)\n      }\n    }\n    return object\n  }\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeMax$3 = Math.max\n\n  /**\n   * A specialized version of `baseRest` which transforms the rest array.\n   *\n   * @private\n   * @param {Function} func The function to apply a rest parameter to.\n   * @param {number} [start=func.length-1] The start position of the rest parameter.\n   * @param {Function} transform The rest array transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overRest(func, start, transform) {\n    start = nativeMax$3(start === undefined ? func.length - 1 : start, 0)\n    return function () {\n      var args = arguments,\n        index = -1,\n        length = nativeMax$3(args.length - start, 0),\n        array = Array(length)\n\n      while (++index < length) {\n        array[index] = args[start + index]\n      }\n      index = -1\n      var otherArgs = Array(start + 1)\n      while (++index < start) {\n        otherArgs[index] = args[index]\n      }\n      otherArgs[start] = transform(array)\n      return apply(func, this, otherArgs)\n    }\n  }\n\n  /**\n   * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n   *\n   * @private\n   * @param {Function} func The function to apply a rest parameter to.\n   * @param {number} [start=func.length-1] The start position of the rest parameter.\n   * @returns {Function} Returns the new function.\n   */\n  function baseRest(func, start) {\n    return setToString$1(overRest(func, start, identity), func + '')\n  }\n\n  /** Used as references for various `Number` constants. */\n  var MAX_SAFE_INTEGER = 9007199254740991\n\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n   * @example\n   *\n   * _.isLength(3);\n   * // => true\n   *\n   * _.isLength(Number.MIN_VALUE);\n   * // => false\n   *\n   * _.isLength(Infinity);\n   * // => false\n   *\n   * _.isLength('3');\n   * // => false\n   */\n  function isLength(value) {\n    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER\n  }\n\n  /**\n   * Checks if `value` is array-like. A value is considered array-like if it's\n   * not a function and has a `value.length` that's an integer greater than or\n   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n   * @example\n   *\n   * _.isArrayLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLike(document.body.children);\n   * // => true\n   *\n   * _.isArrayLike('abc');\n   * // => true\n   *\n   * _.isArrayLike(_.noop);\n   * // => false\n   */\n  function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value)\n  }\n\n  /**\n   * Checks if the given arguments are from an iteratee call.\n   *\n   * @private\n   * @param {*} value The potential iteratee value argument.\n   * @param {*} index The potential iteratee index or key argument.\n   * @param {*} object The potential iteratee object argument.\n   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n   *  else `false`.\n   */\n  function isIterateeCall(value, index, object) {\n    if (!isObject(object)) {\n      return false\n    }\n    var type = typeof index\n    if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {\n      return eq(object[index], value)\n    }\n    return false\n  }\n\n  /**\n   * Creates a function like `_.assign`.\n   *\n   * @private\n   * @param {Function} assigner The function to assign values.\n   * @returns {Function} Returns the new assigner function.\n   */\n  function createAssigner(assigner) {\n    return baseRest(function (object, sources) {\n      var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined\n\n      customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined\n\n      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n        customizer = length < 3 ? undefined : customizer\n        length = 1\n      }\n      object = Object(object)\n      while (++index < length) {\n        var source = sources[index]\n        if (source) {\n          assigner(object, source, index, customizer)\n        }\n      }\n      return object\n    })\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$f = Object.prototype\n\n  /**\n   * Checks if `value` is likely a prototype object.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n   */\n  function isPrototype(value) {\n    var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$f\n\n    return value === proto\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n      result = Array(n)\n\n    while (++index < n) {\n      result[index] = iteratee(index)\n    }\n    return result\n  }\n\n  /** `Object#toString` result references. */\n  var argsTag$3 = '[object Arguments]'\n\n  /**\n   * The base implementation of `_.isArguments`.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   */\n  function baseIsArguments(value) {\n    return isObjectLike(value) && baseGetTag(value) == argsTag$3\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$e = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$d = objectProto$e.hasOwnProperty\n\n  /** Built-in value references. */\n  var propertyIsEnumerable$1 = objectProto$e.propertyIsEnumerable\n\n  /**\n   * Checks if `value` is likely an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArguments(function() { return arguments; }());\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n  var isArguments = baseIsArguments(\n    (function () {\n      return arguments\n    })(),\n  )\n    ? baseIsArguments\n    : function (value) {\n        return (\n          isObjectLike(value) && hasOwnProperty$d.call(value, 'callee') && !propertyIsEnumerable$1.call(value, 'callee')\n        )\n      }\n\n  const isArguments$1 = isArguments\n\n  /**\n   * This method returns `false`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {boolean} Returns `false`.\n   * @example\n   *\n   * _.times(2, _.stubFalse);\n   * // => [false, false]\n   */\n  function stubFalse() {\n    return false\n  }\n\n  /** Detect free variable `exports`. */\n  var freeExports$2 = typeof exports == 'object' && exports && !exports.nodeType && exports\n\n  /** Detect free variable `module`. */\n  var freeModule$2 = freeExports$2 && typeof module == 'object' && module && !module.nodeType && module\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2\n\n  /** Built-in value references. */\n  var Buffer$1 = moduleExports$2 ? root$1.Buffer : undefined\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : undefined\n\n  /**\n   * Checks if `value` is a buffer.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.3.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n   * @example\n   *\n   * _.isBuffer(new Buffer(2));\n   * // => true\n   *\n   * _.isBuffer(new Uint8Array(2));\n   * // => false\n   */\n  var isBuffer = nativeIsBuffer || stubFalse\n\n  const isBuffer$1 = isBuffer\n\n  /** `Object#toString` result references. */\n  var argsTag$2 = '[object Arguments]',\n    arrayTag$2 = '[object Array]',\n    boolTag$3 = '[object Boolean]',\n    dateTag$3 = '[object Date]',\n    errorTag$2 = '[object Error]',\n    funcTag$1 = '[object Function]',\n    mapTag$6 = '[object Map]',\n    numberTag$3 = '[object Number]',\n    objectTag$3 = '[object Object]',\n    regexpTag$4 = '[object RegExp]',\n    setTag$6 = '[object Set]',\n    stringTag$4 = '[object String]',\n    weakMapTag$2 = '[object WeakMap]'\n\n  var arrayBufferTag$3 = '[object ArrayBuffer]',\n    dataViewTag$4 = '[object DataView]',\n    float32Tag$2 = '[object Float32Array]',\n    float64Tag$2 = '[object Float64Array]',\n    int8Tag$2 = '[object Int8Array]',\n    int16Tag$2 = '[object Int16Array]',\n    int32Tag$2 = '[object Int32Array]',\n    uint8Tag$2 = '[object Uint8Array]',\n    uint8ClampedTag$2 = '[object Uint8ClampedArray]',\n    uint16Tag$2 = '[object Uint16Array]',\n    uint32Tag$2 = '[object Uint32Array]'\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {}\n  typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[\n    int16Tag$2\n  ] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[\n    uint16Tag$2\n  ] = typedArrayTags[uint32Tag$2] = true\n  typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[\n    boolTag$3\n  ] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$2] = typedArrayTags[\n    funcTag$1\n  ] = typedArrayTags[mapTag$6] = typedArrayTags[numberTag$3] = typedArrayTags[objectTag$3] = typedArrayTags[\n    regexpTag$4\n  ] = typedArrayTags[setTag$6] = typedArrayTags[stringTag$4] = typedArrayTags[weakMapTag$2] = false\n\n  /**\n   * The base implementation of `_.isTypedArray` without Node.js optimizations.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   */\n  function baseIsTypedArray(value) {\n    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)]\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function (value) {\n      return func(value)\n    }\n  }\n\n  /** Detect free variable `exports`. */\n  var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports\n\n  /** Detect free variable `module`. */\n  var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports$1 && freeGlobal$1.process\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function () {\n    try {\n      // Use `util.types` for Node.js 10+.\n      var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types\n\n      if (types) {\n        return types\n      }\n\n      // Legacy `process.binding('util')` for Node.js < 10.\n      return freeProcess && freeProcess.binding && freeProcess.binding('util')\n    } catch (e) {}\n  })()\n\n  const nodeUtil$1 = nodeUtil\n\n  /* Node.js helper references. */\n  var nodeIsTypedArray = nodeUtil$1 && nodeUtil$1.isTypedArray\n\n  /**\n   * Checks if `value` is classified as a typed array.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   * @example\n   *\n   * _.isTypedArray(new Uint8Array);\n   * // => true\n   *\n   * _.isTypedArray([]);\n   * // => false\n   */\n  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray\n\n  const isTypedArray$1 = isTypedArray\n\n  /** Used for built-in method references. */\n  var objectProto$d = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$c = objectProto$d.hasOwnProperty\n\n  /**\n   * Creates an array of the enumerable property names of the array-like `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @param {boolean} inherited Specify returning inherited property names.\n   * @returns {Array} Returns the array of property names.\n   */\n  function arrayLikeKeys(value, inherited) {\n    var isArr = isArray$1(value),\n      isArg = !isArr && isArguments$1(value),\n      isBuff = !isArr && !isArg && isBuffer$1(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray$1(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length\n\n    for (var key in value) {\n      if (\n        (inherited || hasOwnProperty$c.call(value, key)) &&\n        !(\n          skipIndexes &&\n          // Safari 9 has enumerable `arguments.length` in strict mode.\n          (key == 'length' ||\n            // Node.js 0.10 has enumerable non-index properties on buffers.\n            (isBuff && (key == 'offset' || key == 'parent')) ||\n            // PhantomJS 2 has enumerable non-index properties on typed arrays.\n            (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n            // Skip index properties.\n            isIndex(key, length))\n        )\n      ) {\n        result.push(key)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function (arg) {\n      return func(transform(arg))\n    }\n  }\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeKeys = overArg(Object.keys, Object)\n\n  const nativeKeys$1 = nativeKeys\n\n  /** Used for built-in method references. */\n  var objectProto$c = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$b = objectProto$c.hasOwnProperty\n\n  /**\n   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n  function baseKeys(object) {\n    if (!isPrototype(object)) {\n      return nativeKeys$1(object)\n    }\n    var result = []\n    for (var key in Object(object)) {\n      if (hasOwnProperty$b.call(object, key) && key != 'constructor') {\n        result.push(key)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Creates an array of the own enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects. See the\n   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n   * for more details.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keys(new Foo);\n   * // => ['a', 'b'] (iteration order is not guaranteed)\n   *\n   * _.keys('hi');\n   * // => ['0', '1']\n   */\n  function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object)\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$b = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$a = objectProto$b.hasOwnProperty\n\n  /**\n   * Assigns own enumerable string keyed properties of source objects to the\n   * destination object. Source objects are applied from left to right.\n   * Subsequent sources overwrite property assignments of previous sources.\n   *\n   * **Note:** This method mutates `object` and is loosely based on\n   * [`Object.assign`](https://mdn.io/Object/assign).\n   *\n   * @static\n   * @memberOf _\n   * @since 0.10.0\n   * @category Object\n   * @param {Object} object The destination object.\n   * @param {...Object} [sources] The source objects.\n   * @returns {Object} Returns `object`.\n   * @see _.assignIn\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   * }\n   *\n   * function Bar() {\n   *   this.c = 3;\n   * }\n   *\n   * Foo.prototype.b = 2;\n   * Bar.prototype.d = 4;\n   *\n   * _.assign({ 'a': 0 }, new Foo, new Bar);\n   * // => { 'a': 1, 'c': 3 }\n   */\n  var assign = createAssigner(function (object, source) {\n    if (isPrototype(source) || isArrayLike(source)) {\n      copyObject(source, keys(source), object)\n      return\n    }\n    for (var key in source) {\n      if (hasOwnProperty$a.call(source, key)) {\n        assignValue(object, key, source[key])\n      }\n    }\n  })\n\n  const assign$1 = assign\n\n  /**\n   * This function is like\n   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n   * except that it includes inherited enumerable properties.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n  function nativeKeysIn(object) {\n    var result = []\n    if (object != null) {\n      for (var key in Object(object)) {\n        result.push(key)\n      }\n    }\n    return result\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$a = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$9 = objectProto$a.hasOwnProperty\n\n  /**\n   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n  function baseKeysIn(object) {\n    if (!isObject(object)) {\n      return nativeKeysIn(object)\n    }\n    var isProto = isPrototype(object),\n      result = []\n\n    for (var key in object) {\n      if (!(key == 'constructor' && (isProto || !hasOwnProperty$9.call(object, key)))) {\n        result.push(key)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Creates an array of the own and inherited enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keysIn(new Foo);\n   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n   */\n  function keysIn(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object)\n  }\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/\n\n  /**\n   * Checks if `value` is a property name and not a property path.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {Object} [object] The object to query keys on.\n   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n   */\n  function isKey(value, object) {\n    if (isArray$1(value)) {\n      return false\n    }\n    var type = typeof value\n    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {\n      return true\n    }\n    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || (object != null && value in Object(object))\n  }\n\n  /* Built-in method references that are verified to be native. */\n  var nativeCreate = getNative(Object, 'create')\n\n  const nativeCreate$1 = nativeCreate\n\n  /**\n   * Removes all key-value entries from the hash.\n   *\n   * @private\n   * @name clear\n   * @memberOf Hash\n   */\n  function hashClear() {\n    this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {}\n    this.size = 0\n  }\n\n  /**\n   * Removes `key` and its value from the hash.\n   *\n   * @private\n   * @name delete\n   * @memberOf Hash\n   * @param {Object} hash The hash to modify.\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n  function hashDelete(key) {\n    var result = this.has(key) && delete this.__data__[key]\n    this.size -= result ? 1 : 0\n    return result\n  }\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__'\n\n  /** Used for built-in method references. */\n  var objectProto$9 = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$8 = objectProto$9.hasOwnProperty\n\n  /**\n   * Gets the hash value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Hash\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n  function hashGet(key) {\n    var data = this.__data__\n    if (nativeCreate$1) {\n      var result = data[key]\n      return result === HASH_UNDEFINED$2 ? undefined : result\n    }\n    return hasOwnProperty$8.call(data, key) ? data[key] : undefined\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$8 = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$7 = objectProto$8.hasOwnProperty\n\n  /**\n   * Checks if a hash value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Hash\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function hashHas(key) {\n    var data = this.__data__\n    return nativeCreate$1 ? data[key] !== undefined : hasOwnProperty$7.call(data, key)\n  }\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__'\n\n  /**\n   * Sets the hash `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Hash\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the hash instance.\n   */\n  function hashSet(key, value) {\n    var data = this.__data__\n    this.size += this.has(key) ? 0 : 1\n    data[key] = nativeCreate$1 && value === undefined ? HASH_UNDEFINED$1 : value\n    return this\n  }\n\n  /**\n   * Creates a hash object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n  function Hash(entries) {\n    var index = -1,\n      length = entries == null ? 0 : entries.length\n\n    this.clear()\n    while (++index < length) {\n      var entry = entries[index]\n      this.set(entry[0], entry[1])\n    }\n  }\n\n  // Add methods to `Hash`.\n  Hash.prototype.clear = hashClear\n  Hash.prototype['delete'] = hashDelete\n  Hash.prototype.get = hashGet\n  Hash.prototype.has = hashHas\n  Hash.prototype.set = hashSet\n\n  /**\n   * Removes all key-value entries from the list cache.\n   *\n   * @private\n   * @name clear\n   * @memberOf ListCache\n   */\n  function listCacheClear() {\n    this.__data__ = []\n    this.size = 0\n  }\n\n  /**\n   * Gets the index at which the `key` is found in `array` of key-value pairs.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} key The key to search for.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function assocIndexOf(array, key) {\n    var length = array.length\n    while (length--) {\n      if (eq(array[length][0], key)) {\n        return length\n      }\n    }\n    return -1\n  }\n\n  /** Used for built-in method references. */\n  var arrayProto = Array.prototype\n\n  /** Built-in value references. */\n  var splice = arrayProto.splice\n\n  /**\n   * Removes `key` and its value from the list cache.\n   *\n   * @private\n   * @name delete\n   * @memberOf ListCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n  function listCacheDelete(key) {\n    var data = this.__data__,\n      index = assocIndexOf(data, key)\n\n    if (index < 0) {\n      return false\n    }\n    var lastIndex = data.length - 1\n    if (index == lastIndex) {\n      data.pop()\n    } else {\n      splice.call(data, index, 1)\n    }\n    --this.size\n    return true\n  }\n\n  /**\n   * Gets the list cache value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf ListCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n  function listCacheGet(key) {\n    var data = this.__data__,\n      index = assocIndexOf(data, key)\n\n    return index < 0 ? undefined : data[index][1]\n  }\n\n  /**\n   * Checks if a list cache value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf ListCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1\n  }\n\n  /**\n   * Sets the list cache `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf ListCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the list cache instance.\n   */\n  function listCacheSet(key, value) {\n    var data = this.__data__,\n      index = assocIndexOf(data, key)\n\n    if (index < 0) {\n      ++this.size\n      data.push([key, value])\n    } else {\n      data[index][1] = value\n    }\n    return this\n  }\n\n  /**\n   * Creates an list cache object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n  function ListCache(entries) {\n    var index = -1,\n      length = entries == null ? 0 : entries.length\n\n    this.clear()\n    while (++index < length) {\n      var entry = entries[index]\n      this.set(entry[0], entry[1])\n    }\n  }\n\n  // Add methods to `ListCache`.\n  ListCache.prototype.clear = listCacheClear\n  ListCache.prototype['delete'] = listCacheDelete\n  ListCache.prototype.get = listCacheGet\n  ListCache.prototype.has = listCacheHas\n  ListCache.prototype.set = listCacheSet\n\n  /* Built-in method references that are verified to be native. */\n  var Map$1 = getNative(root$1, 'Map')\n\n  const Map$2 = Map$1\n\n  /**\n   * Removes all key-value entries from the map.\n   *\n   * @private\n   * @name clear\n   * @memberOf MapCache\n   */\n  function mapCacheClear() {\n    this.size = 0\n    this.__data__ = {\n      hash: new Hash(),\n      map: new (Map$2 || ListCache)(),\n      string: new Hash(),\n    }\n  }\n\n  /**\n   * Checks if `value` is suitable for use as unique object key.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n   */\n  function isKeyable(value) {\n    var type = typeof value\n    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean'\n      ? value !== '__proto__'\n      : value === null\n  }\n\n  /**\n   * Gets the data for `map`.\n   *\n   * @private\n   * @param {Object} map The map to query.\n   * @param {string} key The reference key.\n   * @returns {*} Returns the map data.\n   */\n  function getMapData(map, key) {\n    var data = map.__data__\n    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map\n  }\n\n  /**\n   * Removes `key` and its value from the map.\n   *\n   * @private\n   * @name delete\n   * @memberOf MapCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n  function mapCacheDelete(key) {\n    var result = getMapData(this, key)['delete'](key)\n    this.size -= result ? 1 : 0\n    return result\n  }\n\n  /**\n   * Gets the map value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf MapCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n  function mapCacheGet(key) {\n    return getMapData(this, key).get(key)\n  }\n\n  /**\n   * Checks if a map value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf MapCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function mapCacheHas(key) {\n    return getMapData(this, key).has(key)\n  }\n\n  /**\n   * Sets the map `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf MapCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the map cache instance.\n   */\n  function mapCacheSet(key, value) {\n    var data = getMapData(this, key),\n      size = data.size\n\n    data.set(key, value)\n    this.size += data.size == size ? 0 : 1\n    return this\n  }\n\n  /**\n   * Creates a map cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n  function MapCache(entries) {\n    var index = -1,\n      length = entries == null ? 0 : entries.length\n\n    this.clear()\n    while (++index < length) {\n      var entry = entries[index]\n      this.set(entry[0], entry[1])\n    }\n  }\n\n  // Add methods to `MapCache`.\n  MapCache.prototype.clear = mapCacheClear\n  MapCache.prototype['delete'] = mapCacheDelete\n  MapCache.prototype.get = mapCacheGet\n  MapCache.prototype.has = mapCacheHas\n  MapCache.prototype.set = mapCacheSet\n\n  /** Error message constants. */\n  var FUNC_ERROR_TEXT$1 = 'Expected a function'\n\n  /**\n   * Creates a function that memoizes the result of `func`. If `resolver` is\n   * provided, it determines the cache key for storing the result based on the\n   * arguments provided to the memoized function. By default, the first argument\n   * provided to the memoized function is used as the map cache key. The `func`\n   * is invoked with the `this` binding of the memoized function.\n   *\n   * **Note:** The cache is exposed as the `cache` property on the memoized\n   * function. Its creation may be customized by replacing the `_.memoize.Cache`\n   * constructor with one whose instances implement the\n   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n   * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Function\n   * @param {Function} func The function to have its output memoized.\n   * @param {Function} [resolver] The function to resolve the cache key.\n   * @returns {Function} Returns the new memoized function.\n   * @example\n   *\n   * var object = { 'a': 1, 'b': 2 };\n   * var other = { 'c': 3, 'd': 4 };\n   *\n   * var values = _.memoize(_.values);\n   * values(object);\n   * // => [1, 2]\n   *\n   * values(other);\n   * // => [3, 4]\n   *\n   * object.a = 2;\n   * values(object);\n   * // => [1, 2]\n   *\n   * // Modify the result cache.\n   * values.cache.set(object, ['a', 'b']);\n   * values(object);\n   * // => ['a', 'b']\n   *\n   * // Replace `_.memoize.Cache`.\n   * _.memoize.Cache = WeakMap;\n   */\n  function memoize(func, resolver) {\n    if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n      throw new TypeError(FUNC_ERROR_TEXT$1)\n    }\n    var memoized = function () {\n      var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache\n\n      if (cache.has(key)) {\n        return cache.get(key)\n      }\n      var result = func.apply(this, args)\n      memoized.cache = cache.set(key, result) || cache\n      return result\n    }\n    memoized.cache = new (memoize.Cache || MapCache)()\n    return memoized\n  }\n\n  // Expose `MapCache`.\n  memoize.Cache = MapCache\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500\n\n  /**\n   * A specialized version of `_.memoize` which clears the memoized function's\n   * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n   *\n   * @private\n   * @param {Function} func The function to have its output memoized.\n   * @returns {Function} Returns the new memoized function.\n   */\n  function memoizeCapped(func) {\n    var result = memoize(func, function (key) {\n      if (cache.size === MAX_MEMOIZE_SIZE) {\n        cache.clear()\n      }\n      return key\n    })\n\n    var cache = result.cache\n    return result\n  }\n\n  /** Used to match property names within property paths. */\n  var rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g\n\n  /**\n   * Converts `string` to a property path array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the property path array.\n   */\n  var stringToPath = memoizeCapped(function (string) {\n    var result = []\n    if (string.charCodeAt(0) === 46 /* . */) {\n      result.push('')\n    }\n    string.replace(rePropName, function (match, number, quote, subString) {\n      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match)\n    })\n    return result\n  })\n\n  const stringToPath$1 = stringToPath\n\n  /**\n   * Converts `value` to a string. An empty string is returned for `null`\n   * and `undefined` values. The sign of `-0` is preserved.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   * @example\n   *\n   * _.toString(null);\n   * // => ''\n   *\n   * _.toString(-0);\n   * // => '-0'\n   *\n   * _.toString([1, 2, 3]);\n   * // => '1,2,3'\n   */\n  function toString(value) {\n    return value == null ? '' : baseToString(value)\n  }\n\n  /**\n   * Casts `value` to a path array if it's not one.\n   *\n   * @private\n   * @param {*} value The value to inspect.\n   * @param {Object} [object] The object to query keys on.\n   * @returns {Array} Returns the cast property path array.\n   */\n  function castPath(value, object) {\n    if (isArray$1(value)) {\n      return value\n    }\n    return isKey(value, object) ? [value] : stringToPath$1(toString(value))\n  }\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY$1 = 1 / 0\n\n  /**\n   * Converts `value` to a string key if it's not a string or symbol.\n   *\n   * @private\n   * @param {*} value The value to inspect.\n   * @returns {string|symbol} Returns the key.\n   */\n  function toKey(value) {\n    if (typeof value == 'string' || isSymbol(value)) {\n      return value\n    }\n    var result = value + ''\n    return result == '0' && 1 / value == -INFINITY$1 ? '-0' : result\n  }\n\n  /**\n   * The base implementation of `_.get` without support for default values.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path of the property to get.\n   * @returns {*} Returns the resolved value.\n   */\n  function baseGet(object, path) {\n    path = castPath(path, object)\n\n    var index = 0,\n      length = path.length\n\n    while (object != null && index < length) {\n      object = object[toKey(path[index++])]\n    }\n    return index && index == length ? object : undefined\n  }\n\n  /**\n   * Gets the value at `path` of `object`. If the resolved value is\n   * `undefined`, the `defaultValue` is returned in its place.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.7.0\n   * @category Object\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path of the property to get.\n   * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n   * @returns {*} Returns the resolved value.\n   * @example\n   *\n   * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n   *\n   * _.get(object, 'a[0].b.c');\n   * // => 3\n   *\n   * _.get(object, ['a', '0', 'b', 'c']);\n   * // => 3\n   *\n   * _.get(object, 'a.b.c', 'default');\n   * // => 'default'\n   */\n  function get(object, path, defaultValue) {\n    var result = object == null ? undefined : baseGet(object, path)\n    return result === undefined ? defaultValue : result\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n      length = values.length,\n      offset = array.length\n\n    while (++index < length) {\n      array[offset + index] = values[index]\n    }\n    return array\n  }\n\n  /** Built-in value references. */\n  var spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : undefined\n\n  /**\n   * Checks if `value` is a flattenable `arguments` object or array.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n   */\n  function isFlattenable(value) {\n    return isArray$1(value) || isArguments$1(value) || !!(spreadableSymbol && value && value[spreadableSymbol])\n  }\n\n  /**\n   * The base implementation of `_.flatten` with support for restricting flattening.\n   *\n   * @private\n   * @param {Array} array The array to flatten.\n   * @param {number} depth The maximum recursion depth.\n   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n   * @param {Array} [result=[]] The initial result value.\n   * @returns {Array} Returns the new flattened array.\n   */\n  function baseFlatten(array, depth, predicate, isStrict, result) {\n    var index = -1,\n      length = array.length\n\n    predicate || (predicate = isFlattenable)\n    result || (result = [])\n\n    while (++index < length) {\n      var value = array[index]\n      if (depth > 0 && predicate(value)) {\n        if (depth > 1) {\n          // Recursively flatten arrays (susceptible to call stack limits).\n          baseFlatten(value, depth - 1, predicate, isStrict, result)\n        } else {\n          arrayPush(result, value)\n        }\n      } else if (!isStrict) {\n        result[result.length] = value\n      }\n    }\n    return result\n  }\n\n  /**\n   * Flattens `array` a single level deep.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Array\n   * @param {Array} array The array to flatten.\n   * @returns {Array} Returns the new flattened array.\n   * @example\n   *\n   * _.flatten([1, [2, [3, [4]], 5]]);\n   * // => [1, 2, [3, [4]], 5]\n   */\n  function flatten(array) {\n    var length = array == null ? 0 : array.length\n    return length ? baseFlatten(array, 1) : []\n  }\n\n  /** Built-in value references. */\n  var getPrototype = overArg(Object.getPrototypeOf, Object)\n\n  const getPrototype$1 = getPrototype\n\n  /**\n   * The base implementation of `_.slice` without an iteratee call guard.\n   *\n   * @private\n   * @param {Array} array The array to slice.\n   * @param {number} [start=0] The start position.\n   * @param {number} [end=array.length] The end position.\n   * @returns {Array} Returns the slice of `array`.\n   */\n  function baseSlice(array, start, end) {\n    var index = -1,\n      length = array.length\n\n    if (start < 0) {\n      start = -start > length ? 0 : length + start\n    }\n    end = end > length ? length : end\n    if (end < 0) {\n      end += length\n    }\n    length = start > end ? 0 : (end - start) >>> 0\n    start >>>= 0\n\n    var result = Array(length)\n    while (++index < length) {\n      result[index] = array[index + start]\n    }\n    return result\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n      length = array == null ? 0 : array.length\n\n    if (initAccum && length) {\n      accumulator = array[++index]\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array)\n    }\n    return accumulator\n  }\n\n  /**\n   * Removes all key-value entries from the stack.\n   *\n   * @private\n   * @name clear\n   * @memberOf Stack\n   */\n  function stackClear() {\n    this.__data__ = new ListCache()\n    this.size = 0\n  }\n\n  /**\n   * Removes `key` and its value from the stack.\n   *\n   * @private\n   * @name delete\n   * @memberOf Stack\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n  function stackDelete(key) {\n    var data = this.__data__,\n      result = data['delete'](key)\n\n    this.size = data.size\n    return result\n  }\n\n  /**\n   * Gets the stack value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Stack\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n  function stackGet(key) {\n    return this.__data__.get(key)\n  }\n\n  /**\n   * Checks if a stack value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Stack\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function stackHas(key) {\n    return this.__data__.has(key)\n  }\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE$2 = 200\n\n  /**\n   * Sets the stack `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Stack\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the stack cache instance.\n   */\n  function stackSet(key, value) {\n    var data = this.__data__\n    if (data instanceof ListCache) {\n      var pairs = data.__data__\n      if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE$2 - 1) {\n        pairs.push([key, value])\n        this.size = ++data.size\n        return this\n      }\n      data = this.__data__ = new MapCache(pairs)\n    }\n    data.set(key, value)\n    this.size = data.size\n    return this\n  }\n\n  /**\n   * Creates a stack cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n  function Stack(entries) {\n    var data = (this.__data__ = new ListCache(entries))\n    this.size = data.size\n  }\n\n  // Add methods to `Stack`.\n  Stack.prototype.clear = stackClear\n  Stack.prototype['delete'] = stackDelete\n  Stack.prototype.get = stackGet\n  Stack.prototype.has = stackHas\n  Stack.prototype.set = stackSet\n\n  /**\n   * The base implementation of `_.assign` without support for multiple sources\n   * or `customizer` functions.\n   *\n   * @private\n   * @param {Object} object The destination object.\n   * @param {Object} source The source object.\n   * @returns {Object} Returns `object`.\n   */\n  function baseAssign(object, source) {\n    return object && copyObject(source, keys(source), object)\n  }\n\n  /**\n   * The base implementation of `_.assignIn` without support for multiple sources\n   * or `customizer` functions.\n   *\n   * @private\n   * @param {Object} object The destination object.\n   * @param {Object} source The source object.\n   * @returns {Object} Returns `object`.\n   */\n  function baseAssignIn(object, source) {\n    return object && copyObject(source, keysIn(source), object)\n  }\n\n  /** Detect free variable `exports`. */\n  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports\n\n  /** Built-in value references. */\n  var Buffer = moduleExports ? root$1.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined\n\n  /**\n   * Creates a clone of  `buffer`.\n   *\n   * @private\n   * @param {Buffer} buffer The buffer to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Buffer} Returns the cloned buffer.\n   */\n  function cloneBuffer(buffer, isDeep) {\n    if (isDeep) {\n      return buffer.slice()\n    }\n    var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length)\n\n    buffer.copy(result)\n    return result\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = []\n\n    while (++index < length) {\n      var value = array[index]\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value\n      }\n    }\n    return result\n  }\n\n  /**\n   * This method returns a new empty array.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {Array} Returns the new empty array.\n   * @example\n   *\n   * var arrays = _.times(2, _.stubArray);\n   *\n   * console.log(arrays);\n   * // => [[], []]\n   *\n   * console.log(arrays[0] === arrays[1]);\n   * // => false\n   */\n  function stubArray() {\n    return []\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$7 = Object.prototype\n\n  /** Built-in value references. */\n  var propertyIsEnumerable = objectProto$7.propertyIsEnumerable\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeGetSymbols$1 = Object.getOwnPropertySymbols\n\n  /**\n   * Creates an array of the own enumerable symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of symbols.\n   */\n  var getSymbols = !nativeGetSymbols$1\n    ? stubArray\n    : function (object) {\n        if (object == null) {\n          return []\n        }\n        object = Object(object)\n        return arrayFilter(nativeGetSymbols$1(object), function (symbol) {\n          return propertyIsEnumerable.call(object, symbol)\n        })\n      }\n\n  const getSymbols$1 = getSymbols\n\n  /**\n   * Copies own symbols of `source` to `object`.\n   *\n   * @private\n   * @param {Object} source The object to copy symbols from.\n   * @param {Object} [object={}] The object to copy symbols to.\n   * @returns {Object} Returns `object`.\n   */\n  function copySymbols(source, object) {\n    return copyObject(source, getSymbols$1(source), object)\n  }\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeGetSymbols = Object.getOwnPropertySymbols\n\n  /**\n   * Creates an array of the own and inherited enumerable symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of symbols.\n   */\n  var getSymbolsIn = !nativeGetSymbols\n    ? stubArray\n    : function (object) {\n        var result = []\n        while (object) {\n          arrayPush(result, getSymbols$1(object))\n          object = getPrototype$1(object)\n        }\n        return result\n      }\n\n  const getSymbolsIn$1 = getSymbolsIn\n\n  /**\n   * Copies own and inherited symbols of `source` to `object`.\n   *\n   * @private\n   * @param {Object} source The object to copy symbols from.\n   * @param {Object} [object={}] The object to copy symbols to.\n   * @returns {Object} Returns `object`.\n   */\n  function copySymbolsIn(source, object) {\n    return copyObject(source, getSymbolsIn$1(source), object)\n  }\n\n  /**\n   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n   * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n   * symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Function} keysFunc The function to get the keys of `object`.\n   * @param {Function} symbolsFunc The function to get the symbols of `object`.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n  function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n    var result = keysFunc(object)\n    return isArray$1(object) ? result : arrayPush(result, symbolsFunc(object))\n  }\n\n  /**\n   * Creates an array of own enumerable property names and symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n  function getAllKeys(object) {\n    return baseGetAllKeys(object, keys, getSymbols$1)\n  }\n\n  /**\n   * Creates an array of own and inherited enumerable property names and\n   * symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n  function getAllKeysIn(object) {\n    return baseGetAllKeys(object, keysIn, getSymbolsIn$1)\n  }\n\n  /* Built-in method references that are verified to be native. */\n  var DataView = getNative(root$1, 'DataView')\n\n  const DataView$1 = DataView\n\n  /* Built-in method references that are verified to be native. */\n  var Promise$1 = getNative(root$1, 'Promise')\n\n  const Promise$2 = Promise$1\n\n  /* Built-in method references that are verified to be native. */\n  var Set = getNative(root$1, 'Set')\n\n  const Set$1 = Set\n\n  /** `Object#toString` result references. */\n  var mapTag$5 = '[object Map]',\n    objectTag$2 = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag$5 = '[object Set]',\n    weakMapTag$1 = '[object WeakMap]'\n\n  var dataViewTag$3 = '[object DataView]'\n\n  /** Used to detect maps, sets, and weakmaps. */\n  var dataViewCtorString = toSource(DataView$1),\n    mapCtorString = toSource(Map$2),\n    promiseCtorString = toSource(Promise$2),\n    setCtorString = toSource(Set$1),\n    weakMapCtorString = toSource(WeakMap$1)\n\n  /**\n   * Gets the `toStringTag` of `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n  var getTag = baseGetTag\n\n  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n  if (\n    (DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag$3) ||\n    (Map$2 && getTag(new Map$2()) != mapTag$5) ||\n    (Promise$2 && getTag(Promise$2.resolve()) != promiseTag) ||\n    (Set$1 && getTag(new Set$1()) != setTag$5) ||\n    (WeakMap$1 && getTag(new WeakMap$1()) != weakMapTag$1)\n  ) {\n    getTag = function (value) {\n      var result = baseGetTag(value),\n        Ctor = result == objectTag$2 ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : ''\n\n      if (ctorString) {\n        switch (ctorString) {\n          case dataViewCtorString:\n            return dataViewTag$3\n          case mapCtorString:\n            return mapTag$5\n          case promiseCtorString:\n            return promiseTag\n          case setCtorString:\n            return setTag$5\n          case weakMapCtorString:\n            return weakMapTag$1\n        }\n      }\n      return result\n    }\n  }\n\n  const getTag$1 = getTag\n\n  /** Used for built-in method references. */\n  var objectProto$6 = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$6 = objectProto$6.hasOwnProperty\n\n  /**\n   * Initializes an array clone.\n   *\n   * @private\n   * @param {Array} array The array to clone.\n   * @returns {Array} Returns the initialized clone.\n   */\n  function initCloneArray(array) {\n    var length = array.length,\n      result = new array.constructor(length)\n\n    // Add properties assigned by `RegExp#exec`.\n    if (length && typeof array[0] == 'string' && hasOwnProperty$6.call(array, 'index')) {\n      result.index = array.index\n      result.input = array.input\n    }\n    return result\n  }\n\n  /** Built-in value references. */\n  var Uint8Array = root$1.Uint8Array\n\n  const Uint8Array$1 = Uint8Array\n\n  /**\n   * Creates a clone of `arrayBuffer`.\n   *\n   * @private\n   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n   * @returns {ArrayBuffer} Returns the cloned array buffer.\n   */\n  function cloneArrayBuffer(arrayBuffer) {\n    var result = new arrayBuffer.constructor(arrayBuffer.byteLength)\n    new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer))\n    return result\n  }\n\n  /**\n   * Creates a clone of `dataView`.\n   *\n   * @private\n   * @param {Object} dataView The data view to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the cloned data view.\n   */\n  function cloneDataView(dataView, isDeep) {\n    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer\n    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength)\n  }\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/\n\n  /**\n   * Creates a clone of `regexp`.\n   *\n   * @private\n   * @param {Object} regexp The regexp to clone.\n   * @returns {Object} Returns the cloned regexp.\n   */\n  function cloneRegExp(regexp) {\n    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp))\n    result.lastIndex = regexp.lastIndex\n    return result\n  }\n\n  /** Used to convert symbols to primitives and strings. */\n  var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : undefined,\n    symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined\n\n  /**\n   * Creates a clone of the `symbol` object.\n   *\n   * @private\n   * @param {Object} symbol The symbol object to clone.\n   * @returns {Object} Returns the cloned symbol object.\n   */\n  function cloneSymbol(symbol) {\n    return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {}\n  }\n\n  /**\n   * Creates a clone of `typedArray`.\n   *\n   * @private\n   * @param {Object} typedArray The typed array to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the cloned typed array.\n   */\n  function cloneTypedArray(typedArray, isDeep) {\n    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer\n    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length)\n  }\n\n  /** `Object#toString` result references. */\n  var boolTag$2 = '[object Boolean]',\n    dateTag$2 = '[object Date]',\n    mapTag$4 = '[object Map]',\n    numberTag$2 = '[object Number]',\n    regexpTag$3 = '[object RegExp]',\n    setTag$4 = '[object Set]',\n    stringTag$3 = '[object String]',\n    symbolTag$2 = '[object Symbol]'\n\n  var arrayBufferTag$2 = '[object ArrayBuffer]',\n    dataViewTag$2 = '[object DataView]',\n    float32Tag$1 = '[object Float32Array]',\n    float64Tag$1 = '[object Float64Array]',\n    int8Tag$1 = '[object Int8Array]',\n    int16Tag$1 = '[object Int16Array]',\n    int32Tag$1 = '[object Int32Array]',\n    uint8Tag$1 = '[object Uint8Array]',\n    uint8ClampedTag$1 = '[object Uint8ClampedArray]',\n    uint16Tag$1 = '[object Uint16Array]',\n    uint32Tag$1 = '[object Uint32Array]'\n\n  /**\n   * Initializes an object clone based on its `toStringTag`.\n   *\n   * **Note:** This function only supports cloning values with tags of\n   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n   *\n   * @private\n   * @param {Object} object The object to clone.\n   * @param {string} tag The `toStringTag` of the object to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the initialized clone.\n   */\n  function initCloneByTag(object, tag, isDeep) {\n    var Ctor = object.constructor\n    switch (tag) {\n      case arrayBufferTag$2:\n        return cloneArrayBuffer(object)\n\n      case boolTag$2:\n      case dateTag$2:\n        return new Ctor(+object)\n\n      case dataViewTag$2:\n        return cloneDataView(object, isDeep)\n\n      case float32Tag$1:\n      case float64Tag$1:\n      case int8Tag$1:\n      case int16Tag$1:\n      case int32Tag$1:\n      case uint8Tag$1:\n      case uint8ClampedTag$1:\n      case uint16Tag$1:\n      case uint32Tag$1:\n        return cloneTypedArray(object, isDeep)\n\n      case mapTag$4:\n        return new Ctor()\n\n      case numberTag$2:\n      case stringTag$3:\n        return new Ctor(object)\n\n      case regexpTag$3:\n        return cloneRegExp(object)\n\n      case setTag$4:\n        return new Ctor()\n\n      case symbolTag$2:\n        return cloneSymbol(object)\n    }\n  }\n\n  /**\n   * Initializes an object clone.\n   *\n   * @private\n   * @param {Object} object The object to clone.\n   * @returns {Object} Returns the initialized clone.\n   */\n  function initCloneObject(object) {\n    return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate$1(getPrototype$1(object)) : {}\n  }\n\n  /** `Object#toString` result references. */\n  var mapTag$3 = '[object Map]'\n\n  /**\n   * The base implementation of `_.isMap` without Node.js optimizations.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n   */\n  function baseIsMap(value) {\n    return isObjectLike(value) && getTag$1(value) == mapTag$3\n  }\n\n  /* Node.js helper references. */\n  var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap\n\n  /**\n   * Checks if `value` is classified as a `Map` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.3.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n   * @example\n   *\n   * _.isMap(new Map);\n   * // => true\n   *\n   * _.isMap(new WeakMap);\n   * // => false\n   */\n  var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap\n\n  const isMap$1 = isMap\n\n  /** `Object#toString` result references. */\n  var setTag$3 = '[object Set]'\n\n  /**\n   * The base implementation of `_.isSet` without Node.js optimizations.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n   */\n  function baseIsSet(value) {\n    return isObjectLike(value) && getTag$1(value) == setTag$3\n  }\n\n  /* Node.js helper references. */\n  var nodeIsSet = nodeUtil$1 && nodeUtil$1.isSet\n\n  /**\n   * Checks if `value` is classified as a `Set` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.3.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n   * @example\n   *\n   * _.isSet(new Set);\n   * // => true\n   *\n   * _.isSet(new WeakSet);\n   * // => false\n   */\n  var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet\n\n  const isSet$1 = isSet\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG$1 = 4\n\n  /** `Object#toString` result references. */\n  var argsTag$1 = '[object Arguments]',\n    arrayTag$1 = '[object Array]',\n    boolTag$1 = '[object Boolean]',\n    dateTag$1 = '[object Date]',\n    errorTag$1 = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag$2 = '[object Map]',\n    numberTag$1 = '[object Number]',\n    objectTag$1 = '[object Object]',\n    regexpTag$2 = '[object RegExp]',\n    setTag$2 = '[object Set]',\n    stringTag$2 = '[object String]',\n    symbolTag$1 = '[object Symbol]',\n    weakMapTag = '[object WeakMap]'\n\n  var arrayBufferTag$1 = '[object ArrayBuffer]',\n    dataViewTag$1 = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]'\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {}\n  cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[\n    dataViewTag$1\n  ] = cloneableTags[boolTag$1] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[\n    float64Tag\n  ] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[\n    mapTag$2\n  ] = cloneableTags[numberTag$1] = cloneableTags[objectTag$1] = cloneableTags[regexpTag$2] = cloneableTags[\n    setTag$2\n  ] = cloneableTags[stringTag$2] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag] = cloneableTags[\n    uint8ClampedTag\n  ] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true\n  cloneableTags[errorTag$1] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false\n\n  /**\n   * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n   * traversed objects.\n   *\n   * @private\n   * @param {*} value The value to clone.\n   * @param {boolean} bitmask The bitmask flags.\n   *  1 - Deep clone\n   *  2 - Flatten inherited properties\n   *  4 - Clone symbols\n   * @param {Function} [customizer] The function to customize cloning.\n   * @param {string} [key] The key of `value`.\n   * @param {Object} [object] The parent object of `value`.\n   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n   * @returns {*} Returns the cloned value.\n   */\n  function baseClone(value, bitmask, customizer, key, object, stack) {\n    var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG$1\n\n    if (customizer) {\n      result = object ? customizer(value, key, object, stack) : customizer(value)\n    }\n    if (result !== undefined) {\n      return result\n    }\n    if (!isObject(value)) {\n      return value\n    }\n    var isArr = isArray$1(value)\n    if (isArr) {\n      result = initCloneArray(value)\n      if (!isDeep) {\n        return copyArray(value, result)\n      }\n    } else {\n      var tag = getTag$1(value),\n        isFunc = tag == funcTag || tag == genTag\n\n      if (isBuffer$1(value)) {\n        return cloneBuffer(value, isDeep)\n      }\n      if (tag == objectTag$1 || tag == argsTag$1 || (isFunc && !object)) {\n        result = isFlat || isFunc ? {} : initCloneObject(value)\n        if (!isDeep) {\n          return isFlat\n            ? copySymbolsIn(value, baseAssignIn(result, value))\n            : copySymbols(value, baseAssign(result, value))\n        }\n      } else {\n        if (!cloneableTags[tag]) {\n          return object ? value : {}\n        }\n        result = initCloneByTag(value, tag, isDeep)\n      }\n    }\n    // Check for circular references and return its corresponding clone.\n    stack || (stack = new Stack())\n    var stacked = stack.get(value)\n    if (stacked) {\n      return stacked\n    }\n    stack.set(value, result)\n\n    if (isSet$1(value)) {\n      value.forEach(function (subValue) {\n        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack))\n      })\n    } else if (isMap$1(value)) {\n      value.forEach(function (subValue, key) {\n        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack))\n      })\n    }\n\n    var keysFunc = isFull ? (isFlat ? getAllKeysIn : getAllKeys) : isFlat ? keysIn : keys\n\n    var props = isArr ? undefined : keysFunc(value)\n    arrayEach(props || value, function (subValue, key) {\n      if (props) {\n        key = subValue\n        subValue = value[key]\n      }\n      // Recursively populate clone (susceptible to call stack limits).\n      assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack))\n    })\n    return result\n  }\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_SYMBOLS_FLAG = 4\n\n  /**\n   * Creates a shallow clone of `value`.\n   *\n   * **Note:** This method is loosely based on the\n   * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n   * and supports cloning arrays, array buffers, booleans, date objects, maps,\n   * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n   * arrays. The own enumerable properties of `arguments` objects are cloned\n   * as plain objects. An empty object is returned for uncloneable values such\n   * as error objects, functions, DOM nodes, and WeakMaps.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to clone.\n   * @returns {*} Returns the cloned value.\n   * @see _.cloneDeep\n   * @example\n   *\n   * var objects = [{ 'a': 1 }, { 'b': 2 }];\n   *\n   * var shallow = _.clone(objects);\n   * console.log(shallow[0] === objects[0]);\n   * // => true\n   */\n  function clone(value) {\n    return baseClone(value, CLONE_SYMBOLS_FLAG)\n  }\n\n  /**\n   * Creates an array with all falsey values removed. The values `false`, `null`,\n   * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Array\n   * @param {Array} array The array to compact.\n   * @returns {Array} Returns the new array of filtered values.\n   * @example\n   *\n   * _.compact([0, 1, false, 2, '', 3]);\n   * // => [1, 2, 3]\n   */\n  function compact(array) {\n    var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = []\n\n    while (++index < length) {\n      var value = array[index]\n      if (value) {\n        result[resIndex++] = value\n      }\n    }\n    return result\n  }\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__'\n\n  /**\n   * Adds `value` to the array cache.\n   *\n   * @private\n   * @name add\n   * @memberOf SetCache\n   * @alias push\n   * @param {*} value The value to cache.\n   * @returns {Object} Returns the cache instance.\n   */\n  function setCacheAdd(value) {\n    this.__data__.set(value, HASH_UNDEFINED)\n    return this\n  }\n\n  /**\n   * Checks if `value` is in the array cache.\n   *\n   * @private\n   * @name has\n   * @memberOf SetCache\n   * @param {*} value The value to search for.\n   * @returns {number} Returns `true` if `value` is found, else `false`.\n   */\n  function setCacheHas(value) {\n    return this.__data__.has(value)\n  }\n\n  /**\n   *\n   * Creates an array cache object to store unique values.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [values] The values to cache.\n   */\n  function SetCache(values) {\n    var index = -1,\n      length = values == null ? 0 : values.length\n\n    this.__data__ = new MapCache()\n    while (++index < length) {\n      this.add(values[index])\n    }\n  }\n\n  // Add methods to `SetCache`.\n  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd\n  SetCache.prototype.has = setCacheHas\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n      length = array == null ? 0 : array.length\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true\n      }\n    }\n    return false\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key)\n  }\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG$5 = 1,\n    COMPARE_UNORDERED_FLAG$3 = 2\n\n  /**\n   * A specialized version of `baseIsEqualDeep` for arrays with support for\n   * partial deep comparisons.\n   *\n   * @private\n   * @param {Array} array The array to compare.\n   * @param {Array} other The other array to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `array` and `other` objects.\n   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n   */\n  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,\n      arrLength = array.length,\n      othLength = other.length\n\n    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n      return false\n    }\n    // Check that cyclic values are equal.\n    var arrStacked = stack.get(array)\n    var othStacked = stack.get(other)\n    if (arrStacked && othStacked) {\n      return arrStacked == other && othStacked == array\n    }\n    var index = -1,\n      result = true,\n      seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache() : undefined\n\n    stack.set(array, other)\n    stack.set(other, array)\n\n    // Ignore non-index properties.\n    while (++index < arrLength) {\n      var arrValue = array[index],\n        othValue = other[index]\n\n      if (customizer) {\n        var compared = isPartial\n          ? customizer(othValue, arrValue, index, other, array, stack)\n          : customizer(arrValue, othValue, index, array, other, stack)\n      }\n      if (compared !== undefined) {\n        if (compared) {\n          continue\n        }\n        result = false\n        break\n      }\n      // Recursively compare arrays (susceptible to call stack limits).\n      if (seen) {\n        if (\n          !arraySome(other, function (othValue, othIndex) {\n            if (\n              !cacheHas(seen, othIndex) &&\n              (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))\n            ) {\n              return seen.push(othIndex)\n            }\n          })\n        ) {\n          result = false\n          break\n        }\n      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n        result = false\n        break\n      }\n    }\n    stack['delete'](array)\n    stack['delete'](other)\n    return result\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n      result = Array(map.size)\n\n    map.forEach(function (value, key) {\n      result[++index] = [key, value]\n    })\n    return result\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n      result = Array(set.size)\n\n    set.forEach(function (value) {\n      result[++index] = value\n    })\n    return result\n  }\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG$4 = 1,\n    COMPARE_UNORDERED_FLAG$2 = 2\n\n  /** `Object#toString` result references. */\n  var boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag$1 = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag$1 = '[object RegExp]',\n    setTag$1 = '[object Set]',\n    stringTag$1 = '[object String]',\n    symbolTag = '[object Symbol]'\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]'\n\n  /** Used to convert symbols to primitives and strings. */\n  var symbolProto = Symbol$2 ? Symbol$2.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined\n\n  /**\n   * A specialized version of `baseIsEqualDeep` for comparing objects of\n   * the same `toStringTag`.\n   *\n   * **Note:** This function only supports comparing values with tags of\n   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {string} tag The `toStringTag` of the objects to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n    switch (tag) {\n      case dataViewTag:\n        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {\n          return false\n        }\n        object = object.buffer\n        other = other.buffer\n\n      case arrayBufferTag:\n        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {\n          return false\n        }\n        return true\n\n      case boolTag:\n      case dateTag:\n      case numberTag:\n        // Coerce booleans to `1` or `0` and dates to milliseconds.\n        // Invalid dates are coerced to `NaN`.\n        return eq(+object, +other)\n\n      case errorTag:\n        return object.name == other.name && object.message == other.message\n\n      case regexpTag$1:\n      case stringTag$1:\n        // Coerce regexes to strings and treat strings, primitives and objects,\n        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n        // for more details.\n        return object == other + ''\n\n      case mapTag$1:\n        var convert = mapToArray\n\n      case setTag$1:\n        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4\n        convert || (convert = setToArray)\n\n        if (object.size != other.size && !isPartial) {\n          return false\n        }\n        // Assume cyclic values are equal.\n        var stacked = stack.get(object)\n        if (stacked) {\n          return stacked == other\n        }\n        bitmask |= COMPARE_UNORDERED_FLAG$2\n\n        // Recursively compare objects (susceptible to call stack limits).\n        stack.set(object, other)\n        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack)\n        stack['delete'](object)\n        return result\n\n      case symbolTag:\n        if (symbolValueOf) {\n          return symbolValueOf.call(object) == symbolValueOf.call(other)\n        }\n    }\n    return false\n  }\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG$3 = 1\n\n  /** Used for built-in method references. */\n  var objectProto$5 = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$5 = objectProto$5.hasOwnProperty\n\n  /**\n   * A specialized version of `baseIsEqualDeep` for objects with support for\n   * partial deep comparisons.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length\n\n    if (objLength != othLength && !isPartial) {\n      return false\n    }\n    var index = objLength\n    while (index--) {\n      var key = objProps[index]\n      if (!(isPartial ? key in other : hasOwnProperty$5.call(other, key))) {\n        return false\n      }\n    }\n    // Check that cyclic values are equal.\n    var objStacked = stack.get(object)\n    var othStacked = stack.get(other)\n    if (objStacked && othStacked) {\n      return objStacked == other && othStacked == object\n    }\n    var result = true\n    stack.set(object, other)\n    stack.set(other, object)\n\n    var skipCtor = isPartial\n    while (++index < objLength) {\n      key = objProps[index]\n      var objValue = object[key],\n        othValue = other[key]\n\n      if (customizer) {\n        var compared = isPartial\n          ? customizer(othValue, objValue, key, other, object, stack)\n          : customizer(objValue, othValue, key, object, other, stack)\n      }\n      // Recursively compare objects (susceptible to call stack limits).\n      if (\n        !(compared === undefined\n          ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack)\n          : compared)\n      ) {\n        result = false\n        break\n      }\n      skipCtor || (skipCtor = key == 'constructor')\n    }\n    if (result && !skipCtor) {\n      var objCtor = object.constructor,\n        othCtor = other.constructor\n\n      // Non `Object` object instances with different constructors are not equal.\n      if (\n        objCtor != othCtor &&\n        'constructor' in object &&\n        'constructor' in other &&\n        !(\n          typeof objCtor == 'function' &&\n          objCtor instanceof objCtor &&\n          typeof othCtor == 'function' &&\n          othCtor instanceof othCtor\n        )\n      ) {\n        result = false\n      }\n    }\n    stack['delete'](object)\n    stack['delete'](other)\n    return result\n  }\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG$2 = 1\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]'\n\n  /** Used for built-in method references. */\n  var objectProto$4 = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$4 = objectProto$4.hasOwnProperty\n\n  /**\n   * A specialized version of `baseIsEqual` for arrays and objects which performs\n   * deep comparisons and tracks traversed objects enabling objects with circular\n   * references to be compared.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n    var objIsArr = isArray$1(object),\n      othIsArr = isArray$1(other),\n      objTag = objIsArr ? arrayTag : getTag$1(object),\n      othTag = othIsArr ? arrayTag : getTag$1(other)\n\n    objTag = objTag == argsTag ? objectTag : objTag\n    othTag = othTag == argsTag ? objectTag : othTag\n\n    var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag\n\n    if (isSameTag && isBuffer$1(object)) {\n      if (!isBuffer$1(other)) {\n        return false\n      }\n      objIsArr = true\n      objIsObj = false\n    }\n    if (isSameTag && !objIsObj) {\n      stack || (stack = new Stack())\n      return objIsArr || isTypedArray$1(object)\n        ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n        : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack)\n    }\n    if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {\n      var objIsWrapped = objIsObj && hasOwnProperty$4.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty$4.call(other, '__wrapped__')\n\n      if (objIsWrapped || othIsWrapped) {\n        var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other\n\n        stack || (stack = new Stack())\n        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack)\n      }\n    }\n    if (!isSameTag) {\n      return false\n    }\n    stack || (stack = new Stack())\n    return equalObjects(object, other, bitmask, customizer, equalFunc, stack)\n  }\n\n  /**\n   * The base implementation of `_.isEqual` which supports partial comparisons\n   * and tracks traversed objects.\n   *\n   * @private\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @param {boolean} bitmask The bitmask flags.\n   *  1 - Unordered comparison\n   *  2 - Partial comparison\n   * @param {Function} [customizer] The function to customize comparisons.\n   * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   */\n  function baseIsEqual(value, other, bitmask, customizer, stack) {\n    if (value === other) {\n      return true\n    }\n    if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n      return value !== value && other !== other\n    }\n    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack)\n  }\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG$1 = 1,\n    COMPARE_UNORDERED_FLAG$1 = 2\n\n  /**\n   * The base implementation of `_.isMatch` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Object} object The object to inspect.\n   * @param {Object} source The object of property values to match.\n   * @param {Array} matchData The property names, values, and compare flags to match.\n   * @param {Function} [customizer] The function to customize comparisons.\n   * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n   */\n  function baseIsMatch(object, source, matchData, customizer) {\n    var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer\n\n    if (object == null) {\n      return !length\n    }\n    object = Object(object)\n    while (index--) {\n      var data = matchData[index]\n      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {\n        return false\n      }\n    }\n    while (++index < length) {\n      data = matchData[index]\n      var key = data[0],\n        objValue = object[key],\n        srcValue = data[1]\n\n      if (noCustomizer && data[2]) {\n        if (objValue === undefined && !(key in object)) {\n          return false\n        }\n      } else {\n        var stack = new Stack()\n        if (customizer) {\n          var result = customizer(objValue, srcValue, key, object, source, stack)\n        }\n        if (\n          !(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack)\n            : result)\n        ) {\n          return false\n        }\n      }\n    }\n    return true\n  }\n\n  /**\n   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` if suitable for strict\n   *  equality comparisons, else `false`.\n   */\n  function isStrictComparable(value) {\n    return value === value && !isObject(value)\n  }\n\n  /**\n   * Gets the property names, values, and compare flags of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the match data of `object`.\n   */\n  function getMatchData(object) {\n    var result = keys(object),\n      length = result.length\n\n    while (length--) {\n      var key = result[length],\n        value = object[key]\n\n      result[length] = [key, value, isStrictComparable(value)]\n    }\n    return result\n  }\n\n  /**\n   * A specialized version of `matchesProperty` for source values suitable\n   * for strict equality comparisons, i.e. `===`.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @param {*} srcValue The value to match.\n   * @returns {Function} Returns the new spec function.\n   */\n  function matchesStrictComparable(key, srcValue) {\n    return function (object) {\n      if (object == null) {\n        return false\n      }\n      return object[key] === srcValue && (srcValue !== undefined || key in Object(object))\n    }\n  }\n\n  /**\n   * The base implementation of `_.matches` which doesn't clone `source`.\n   *\n   * @private\n   * @param {Object} source The object of property values to match.\n   * @returns {Function} Returns the new spec function.\n   */\n  function baseMatches(source) {\n    var matchData = getMatchData(source)\n    if (matchData.length == 1 && matchData[0][2]) {\n      return matchesStrictComparable(matchData[0][0], matchData[0][1])\n    }\n    return function (object) {\n      return object === source || baseIsMatch(object, source, matchData)\n    }\n  }\n\n  /**\n   * The base implementation of `_.hasIn` without support for deep paths.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {Array|string} key The key to check.\n   * @returns {boolean} Returns `true` if `key` exists, else `false`.\n   */\n  function baseHasIn(object, key) {\n    return object != null && key in Object(object)\n  }\n\n  /**\n   * Checks if `path` exists on `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path to check.\n   * @param {Function} hasFunc The function to check properties.\n   * @returns {boolean} Returns `true` if `path` exists, else `false`.\n   */\n  function hasPath(object, path, hasFunc) {\n    path = castPath(path, object)\n\n    var index = -1,\n      length = path.length,\n      result = false\n\n    while (++index < length) {\n      var key = toKey(path[index])\n      if (!(result = object != null && hasFunc(object, key))) {\n        break\n      }\n      object = object[key]\n    }\n    if (result || ++index != length) {\n      return result\n    }\n    length = object == null ? 0 : object.length\n    return !!length && isLength(length) && isIndex(key, length) && (isArray$1(object) || isArguments$1(object))\n  }\n\n  /**\n   * Checks if `path` is a direct or inherited property of `object`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Object\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path to check.\n   * @returns {boolean} Returns `true` if `path` exists, else `false`.\n   * @example\n   *\n   * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n   *\n   * _.hasIn(object, 'a');\n   * // => true\n   *\n   * _.hasIn(object, 'a.b');\n   * // => true\n   *\n   * _.hasIn(object, ['a', 'b']);\n   * // => true\n   *\n   * _.hasIn(object, 'b');\n   * // => false\n   */\n  function hasIn(object, path) {\n    return object != null && hasPath(object, path, baseHasIn)\n  }\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2\n\n  /**\n   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n   *\n   * @private\n   * @param {string} path The path of the property to get.\n   * @param {*} srcValue The value to match.\n   * @returns {Function} Returns the new spec function.\n   */\n  function baseMatchesProperty(path, srcValue) {\n    if (isKey(path) && isStrictComparable(srcValue)) {\n      return matchesStrictComparable(toKey(path), srcValue)\n    }\n    return function (object) {\n      var objValue = get(object, path)\n      return objValue === undefined && objValue === srcValue\n        ? hasIn(object, path)\n        : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG)\n    }\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function (object) {\n      return object == null ? undefined : object[key]\n    }\n  }\n\n  /**\n   * A specialized version of `baseProperty` which supports deep paths.\n   *\n   * @private\n   * @param {Array|string} path The path of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyDeep(path) {\n    return function (object) {\n      return baseGet(object, path)\n    }\n  }\n\n  /**\n   * Creates a function that returns the value at `path` of a given object.\n   *\n   * @static\n   * @memberOf _\n   * @since 2.4.0\n   * @category Util\n   * @param {Array|string} path The path of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   * @example\n   *\n   * var objects = [\n   *   { 'a': { 'b': 2 } },\n   *   { 'a': { 'b': 1 } }\n   * ];\n   *\n   * _.map(objects, _.property('a.b'));\n   * // => [2, 1]\n   *\n   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n   * // => [1, 2]\n   */\n  function property(path) {\n    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path)\n  }\n\n  /**\n   * The base implementation of `_.iteratee`.\n   *\n   * @private\n   * @param {*} [value=_.identity] The value to convert to an iteratee.\n   * @returns {Function} Returns the iteratee.\n   */\n  function baseIteratee(value) {\n    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n    if (typeof value == 'function') {\n      return value\n    }\n    if (value == null) {\n      return identity\n    }\n    if (typeof value == 'object') {\n      return isArray$1(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value)\n    }\n    return property(value)\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n      length = array == null ? 0 : array.length\n\n    while (++index < length) {\n      var value = array[index]\n      setter(accumulator, value, iteratee(value), array)\n    }\n    return accumulator\n  }\n\n  /**\n   * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n   *\n   * @private\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {Function} Returns the new base function.\n   */\n  function createBaseFor(fromRight) {\n    return function (object, iteratee, keysFunc) {\n      var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length\n\n      while (length--) {\n        var key = props[fromRight ? length : ++index]\n        if (iteratee(iterable[key], key, iterable) === false) {\n          break\n        }\n      }\n      return object\n    }\n  }\n\n  /**\n   * The base implementation of `baseForOwn` which iterates over `object`\n   * properties returned by `keysFunc` and invokes `iteratee` for each property.\n   * Iteratee functions may exit iteration early by explicitly returning `false`.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {Function} keysFunc The function to get the keys of `object`.\n   * @returns {Object} Returns `object`.\n   */\n  var baseFor = createBaseFor()\n\n  const baseFor$1 = baseFor\n\n  /**\n   * The base implementation of `_.forOwn` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Object} Returns `object`.\n   */\n  function baseForOwn(object, iteratee) {\n    return object && baseFor$1(object, iteratee, keys)\n  }\n\n  /**\n   * Creates a `baseEach` or `baseEachRight` function.\n   *\n   * @private\n   * @param {Function} eachFunc The function to iterate over a collection.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {Function} Returns the new base function.\n   */\n  function createBaseEach(eachFunc, fromRight) {\n    return function (collection, iteratee) {\n      if (collection == null) {\n        return collection\n      }\n      if (!isArrayLike(collection)) {\n        return eachFunc(collection, iteratee)\n      }\n      var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection)\n\n      while (fromRight ? index-- : ++index < length) {\n        if (iteratee(iterable[index], index, iterable) === false) {\n          break\n        }\n      }\n      return collection\n    }\n  }\n\n  /**\n   * The base implementation of `_.forEach` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array|Object} Returns `collection`.\n   */\n  var baseEach = createBaseEach(baseForOwn)\n\n  const baseEach$1 = baseEach\n\n  /**\n   * Aggregates elements of `collection` on `accumulator` with keys transformed\n   * by `iteratee` and values set by `setter`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function baseAggregator(collection, setter, iteratee, accumulator) {\n    baseEach$1(collection, function (value, key, collection) {\n      setter(accumulator, value, iteratee(value), collection)\n    })\n    return accumulator\n  }\n\n  /**\n   * Creates a function like `_.groupBy`.\n   *\n   * @private\n   * @param {Function} setter The function to set accumulator values.\n   * @param {Function} [initializer] The accumulator object initializer.\n   * @returns {Function} Returns the new aggregator function.\n   */\n  function createAggregator(setter, initializer) {\n    return function (collection, iteratee) {\n      var func = isArray$1(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {}\n\n      return func(collection, setter, baseIteratee(iteratee), accumulator)\n    }\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$3 = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$3 = objectProto$3.hasOwnProperty\n\n  /**\n   * Assigns own and inherited enumerable string keyed properties of source\n   * objects to the destination object for all destination properties that\n   * resolve to `undefined`. Source objects are applied from left to right.\n   * Once a property is set, additional values of the same property are ignored.\n   *\n   * **Note:** This method mutates `object`.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The destination object.\n   * @param {...Object} [sources] The source objects.\n   * @returns {Object} Returns `object`.\n   * @see _.defaultsDeep\n   * @example\n   *\n   * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n   * // => { 'a': 1, 'b': 2 }\n   */\n  var defaults = baseRest(function (object, sources) {\n    object = Object(object)\n\n    var index = -1\n    var length = sources.length\n    var guard = length > 2 ? sources[2] : undefined\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      length = 1\n    }\n\n    while (++index < length) {\n      var source = sources[index]\n      var props = keysIn(source)\n      var propsIndex = -1\n      var propsLength = props.length\n\n      while (++propsIndex < propsLength) {\n        var key = props[propsIndex]\n        var value = object[key]\n\n        if (value === undefined || (eq(value, objectProto$3[key]) && !hasOwnProperty$3.call(object, key))) {\n          object[key] = source[key]\n        }\n      }\n    }\n\n    return object\n  })\n\n  const defaults$1 = defaults\n\n  /**\n   * This method is like `_.isArrayLike` except that it also checks if `value`\n   * is an object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array-like object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArrayLikeObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLikeObject(document.body.children);\n   * // => true\n   *\n   * _.isArrayLikeObject('abc');\n   * // => false\n   *\n   * _.isArrayLikeObject(_.noop);\n   * // => false\n   */\n  function isArrayLikeObject(value) {\n    return isObjectLike(value) && isArrayLike(value)\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n      length = array == null ? 0 : array.length\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true\n      }\n    }\n    return false\n  }\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE$1 = 200\n\n  /**\n   * The base implementation of methods like `_.difference` without support\n   * for excluding multiple arrays or iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Array} values The values to exclude.\n   * @param {Function} [iteratee] The iteratee invoked per element.\n   * @param {Function} [comparator] The comparator invoked per element.\n   * @returns {Array} Returns the new array of filtered values.\n   */\n  function baseDifference(array, values, iteratee, comparator) {\n    var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length\n\n    if (!length) {\n      return result\n    }\n    if (iteratee) {\n      values = arrayMap(values, baseUnary(iteratee))\n    }\n    if (comparator) {\n      includes = arrayIncludesWith\n      isCommon = false\n    } else if (values.length >= LARGE_ARRAY_SIZE$1) {\n      includes = cacheHas\n      isCommon = false\n      values = new SetCache(values)\n    }\n    outer: while (++index < length) {\n      var value = array[index],\n        computed = iteratee == null ? value : iteratee(value)\n\n      value = comparator || value !== 0 ? value : 0\n      if (isCommon && computed === computed) {\n        var valuesIndex = valuesLength\n        while (valuesIndex--) {\n          if (values[valuesIndex] === computed) {\n            continue outer\n          }\n        }\n        result.push(value)\n      } else if (!includes(values, computed, comparator)) {\n        result.push(value)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Creates an array of `array` values not included in the other given arrays\n   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * for equality comparisons. The order and references of result values are\n   * determined by the first array.\n   *\n   * **Note:** Unlike `_.pullAll`, this method returns a new array.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Array\n   * @param {Array} array The array to inspect.\n   * @param {...Array} [values] The values to exclude.\n   * @returns {Array} Returns the new array of filtered values.\n   * @see _.without, _.xor\n   * @example\n   *\n   * _.difference([2, 1], [2, 3]);\n   * // => [1]\n   */\n  var difference = baseRest(function (array, values) {\n    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : []\n  })\n\n  const difference$1 = difference\n\n  /**\n   * Gets the last element of `array`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Array\n   * @param {Array} array The array to query.\n   * @returns {*} Returns the last element of `array`.\n   * @example\n   *\n   * _.last([1, 2, 3]);\n   * // => 3\n   */\n  function last(array) {\n    var length = array == null ? 0 : array.length\n    return length ? array[length - 1] : undefined\n  }\n\n  /**\n   * Creates a slice of `array` with `n` elements dropped from the beginning.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.5.0\n   * @category Array\n   * @param {Array} array The array to query.\n   * @param {number} [n=1] The number of elements to drop.\n   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n   * @returns {Array} Returns the slice of `array`.\n   * @example\n   *\n   * _.drop([1, 2, 3]);\n   * // => [2, 3]\n   *\n   * _.drop([1, 2, 3], 2);\n   * // => [3]\n   *\n   * _.drop([1, 2, 3], 5);\n   * // => []\n   *\n   * _.drop([1, 2, 3], 0);\n   * // => [1, 2, 3]\n   */\n  function drop(array, n, guard) {\n    var length = array == null ? 0 : array.length\n    if (!length) {\n      return []\n    }\n    n = guard || n === undefined ? 1 : toInteger(n)\n    return baseSlice(array, n < 0 ? 0 : n, length)\n  }\n\n  /**\n   * Creates a slice of `array` with `n` elements dropped from the end.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Array\n   * @param {Array} array The array to query.\n   * @param {number} [n=1] The number of elements to drop.\n   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n   * @returns {Array} Returns the slice of `array`.\n   * @example\n   *\n   * _.dropRight([1, 2, 3]);\n   * // => [1, 2]\n   *\n   * _.dropRight([1, 2, 3], 2);\n   * // => [1]\n   *\n   * _.dropRight([1, 2, 3], 5);\n   * // => []\n   *\n   * _.dropRight([1, 2, 3], 0);\n   * // => [1, 2, 3]\n   */\n  function dropRight(array, n, guard) {\n    var length = array == null ? 0 : array.length\n    if (!length) {\n      return []\n    }\n    n = guard || n === undefined ? 1 : toInteger(n)\n    n = length - n\n    return baseSlice(array, 0, n < 0 ? 0 : n)\n  }\n\n  /**\n   * Casts `value` to `identity` if it's not a function.\n   *\n   * @private\n   * @param {*} value The value to inspect.\n   * @returns {Function} Returns cast function.\n   */\n  function castFunction(value) {\n    return typeof value == 'function' ? value : identity\n  }\n\n  /**\n   * Iterates over elements of `collection` and invokes `iteratee` for each element.\n   * The iteratee is invoked with three arguments: (value, index|key, collection).\n   * Iteratee functions may exit iteration early by explicitly returning `false`.\n   *\n   * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n   * property are iterated like arrays. To avoid this behavior use `_.forIn`\n   * or `_.forOwn` for object iteration.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @alias each\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n   * @returns {Array|Object} Returns `collection`.\n   * @see _.forEachRight\n   * @example\n   *\n   * _.forEach([1, 2], function(value) {\n   *   console.log(value);\n   * });\n   * // => Logs `1` then `2`.\n   *\n   * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n   *   console.log(key);\n   * });\n   * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n   */\n  function forEach(collection, iteratee) {\n    var func = isArray$1(collection) ? arrayEach : baseEach$1\n    return func(collection, castFunction(iteratee))\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n      length = array == null ? 0 : array.length\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  /**\n   * The base implementation of `_.every` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`\n   */\n  function baseEvery(collection, predicate) {\n    var result = true\n    baseEach$1(collection, function (value, index, collection) {\n      result = !!predicate(value, index, collection)\n      return result\n    })\n    return result\n  }\n\n  /**\n   * Checks if `predicate` returns truthy for **all** elements of `collection`.\n   * Iteration is stopped once `predicate` returns falsey. The predicate is\n   * invoked with three arguments: (value, index|key, collection).\n   *\n   * **Note:** This method returns `true` for\n   * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n   * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n   * elements of empty collections.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [predicate=_.identity] The function invoked per iteration.\n   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   * @example\n   *\n   * _.every([true, 1, null, 'yes'], Boolean);\n   * // => false\n   *\n   * var users = [\n   *   { 'user': 'barney', 'age': 36, 'active': false },\n   *   { 'user': 'fred',   'age': 40, 'active': false }\n   * ];\n   *\n   * // The `_.matches` iteratee shorthand.\n   * _.every(users, { 'user': 'barney', 'active': false });\n   * // => false\n   *\n   * // The `_.matchesProperty` iteratee shorthand.\n   * _.every(users, ['active', false]);\n   * // => true\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.every(users, 'active');\n   * // => false\n   */\n  function every(collection, predicate, guard) {\n    var func = isArray$1(collection) ? arrayEvery : baseEvery\n    if (guard && isIterateeCall(collection, predicate, guard)) {\n      predicate = undefined\n    }\n    return func(collection, baseIteratee(predicate))\n  }\n\n  /**\n   * The base implementation of `_.filter` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function baseFilter(collection, predicate) {\n    var result = []\n    baseEach$1(collection, function (value, index, collection) {\n      if (predicate(value, index, collection)) {\n        result.push(value)\n      }\n    })\n    return result\n  }\n\n  /**\n   * Iterates over elements of `collection`, returning an array of all elements\n   * `predicate` returns truthy for. The predicate is invoked with three\n   * arguments: (value, index|key, collection).\n   *\n   * **Note:** Unlike `_.remove`, this method returns a new array.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [predicate=_.identity] The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   * @see _.reject\n   * @example\n   *\n   * var users = [\n   *   { 'user': 'barney', 'age': 36, 'active': true },\n   *   { 'user': 'fred',   'age': 40, 'active': false }\n   * ];\n   *\n   * _.filter(users, function(o) { return !o.active; });\n   * // => objects for ['fred']\n   *\n   * // The `_.matches` iteratee shorthand.\n   * _.filter(users, { 'age': 36, 'active': true });\n   * // => objects for ['barney']\n   *\n   * // The `_.matchesProperty` iteratee shorthand.\n   * _.filter(users, ['active', false]);\n   * // => objects for ['fred']\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.filter(users, 'active');\n   * // => objects for ['barney']\n   *\n   * // Combining several predicates using `_.overEvery` or `_.overSome`.\n   * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n   * // => objects for ['fred', 'barney']\n   */\n  function filter(collection, predicate) {\n    var func = isArray$1(collection) ? arrayFilter : baseFilter\n    return func(collection, baseIteratee(predicate))\n  }\n\n  /**\n   * Creates a `_.find` or `_.findLast` function.\n   *\n   * @private\n   * @param {Function} findIndexFunc The function to find the collection index.\n   * @returns {Function} Returns the new find function.\n   */\n  function createFind(findIndexFunc) {\n    return function (collection, predicate, fromIndex) {\n      var iterable = Object(collection)\n      if (!isArrayLike(collection)) {\n        var iteratee = baseIteratee(predicate)\n        collection = keys(collection)\n        predicate = function (key) {\n          return iteratee(iterable[key], key, iterable)\n        }\n      }\n      var index = findIndexFunc(collection, predicate, fromIndex)\n      return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined\n    }\n  }\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeMax$2 = Math.max\n\n  /**\n   * This method is like `_.find` except that it returns the index of the first\n   * element `predicate` returns truthy for instead of the element itself.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Array\n   * @param {Array} array The array to inspect.\n   * @param {Function} [predicate=_.identity] The function invoked per iteration.\n   * @param {number} [fromIndex=0] The index to search from.\n   * @returns {number} Returns the index of the found element, else `-1`.\n   * @example\n   *\n   * var users = [\n   *   { 'user': 'barney',  'active': false },\n   *   { 'user': 'fred',    'active': false },\n   *   { 'user': 'pebbles', 'active': true }\n   * ];\n   *\n   * _.findIndex(users, function(o) { return o.user == 'barney'; });\n   * // => 0\n   *\n   * // The `_.matches` iteratee shorthand.\n   * _.findIndex(users, { 'user': 'fred', 'active': false });\n   * // => 1\n   *\n   * // The `_.matchesProperty` iteratee shorthand.\n   * _.findIndex(users, ['active', false]);\n   * // => 0\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.findIndex(users, 'active');\n   * // => 2\n   */\n  function findIndex(array, predicate, fromIndex) {\n    var length = array == null ? 0 : array.length\n    if (!length) {\n      return -1\n    }\n    var index = fromIndex == null ? 0 : toInteger(fromIndex)\n    if (index < 0) {\n      index = nativeMax$2(length + index, 0)\n    }\n    return baseFindIndex(array, baseIteratee(predicate), index)\n  }\n\n  /**\n   * Iterates over elements of `collection`, returning the first element\n   * `predicate` returns truthy for. The predicate is invoked with three\n   * arguments: (value, index|key, collection).\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} [predicate=_.identity] The function invoked per iteration.\n   * @param {number} [fromIndex=0] The index to search from.\n   * @returns {*} Returns the matched element, else `undefined`.\n   * @example\n   *\n   * var users = [\n   *   { 'user': 'barney',  'age': 36, 'active': true },\n   *   { 'user': 'fred',    'age': 40, 'active': false },\n   *   { 'user': 'pebbles', 'age': 1,  'active': true }\n   * ];\n   *\n   * _.find(users, function(o) { return o.age < 40; });\n   * // => object for 'barney'\n   *\n   * // The `_.matches` iteratee shorthand.\n   * _.find(users, { 'age': 1, 'active': true });\n   * // => object for 'pebbles'\n   *\n   * // The `_.matchesProperty` iteratee shorthand.\n   * _.find(users, ['active', false]);\n   * // => object for 'fred'\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.find(users, 'active');\n   * // => object for 'barney'\n   */\n  var find = createFind(findIndex)\n\n  const find$1 = find\n\n  /**\n   * Gets the first element of `array`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @alias first\n   * @category Array\n   * @param {Array} array The array to query.\n   * @returns {*} Returns the first element of `array`.\n   * @example\n   *\n   * _.head([1, 2, 3]);\n   * // => 1\n   *\n   * _.head([]);\n   * // => undefined\n   */\n  function head(array) {\n    return array && array.length ? array[0] : undefined\n  }\n\n  /**\n   * The base implementation of `_.map` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function baseMap(collection, iteratee) {\n    var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : []\n\n    baseEach$1(collection, function (value, key, collection) {\n      result[++index] = iteratee(value, key, collection)\n    })\n    return result\n  }\n\n  /**\n   * Creates an array of values by running each element in `collection` thru\n   * `iteratee`. The iteratee is invoked with three arguments:\n   * (value, index|key, collection).\n   *\n   * Many lodash methods are guarded to work as iteratees for methods like\n   * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n   *\n   * The guarded methods are:\n   * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n   * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n   * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n   * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   * @example\n   *\n   * function square(n) {\n   *   return n * n;\n   * }\n   *\n   * _.map([4, 8], square);\n   * // => [16, 64]\n   *\n   * _.map({ 'a': 4, 'b': 8 }, square);\n   * // => [16, 64] (iteration order is not guaranteed)\n   *\n   * var users = [\n   *   { 'user': 'barney' },\n   *   { 'user': 'fred' }\n   * ];\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.map(users, 'user');\n   * // => ['barney', 'fred']\n   */\n  function map(collection, iteratee) {\n    var func = isArray$1(collection) ? arrayMap : baseMap\n    return func(collection, baseIteratee(iteratee))\n  }\n\n  /**\n   * Creates a flattened array of values by running each element in `collection`\n   * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n   * with three arguments: (value, index|key, collection).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n   * @returns {Array} Returns the new flattened array.\n   * @example\n   *\n   * function duplicate(n) {\n   *   return [n, n];\n   * }\n   *\n   * _.flatMap([1, 2], duplicate);\n   * // => [1, 1, 2, 2]\n   */\n  function flatMap(collection, iteratee) {\n    return baseFlatten(map(collection, iteratee), 1)\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$2 = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$2 = objectProto$2.hasOwnProperty\n\n  /**\n   * Creates an object composed of keys generated from the results of running\n   * each element of `collection` thru `iteratee`. The order of grouped values\n   * is determined by the order they occur in `collection`. The corresponding\n   * value of each key is an array of elements responsible for generating the\n   * key. The iteratee is invoked with one argument: (value).\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n   * @returns {Object} Returns the composed aggregate object.\n   * @example\n   *\n   * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n   * // => { '4': [4.2], '6': [6.1, 6.3] }\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.groupBy(['one', 'two', 'three'], 'length');\n   * // => { '3': ['one', 'two'], '5': ['three'] }\n   */\n  var groupBy = createAggregator(function (result, value, key) {\n    if (hasOwnProperty$2.call(result, key)) {\n      result[key].push(value)\n    } else {\n      baseAssignValue(result, key, [value])\n    }\n  })\n\n  const groupBy$1 = groupBy\n\n  /** Used for built-in method references. */\n  var objectProto$1 = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$1 = objectProto$1.hasOwnProperty\n\n  /**\n   * The base implementation of `_.has` without support for deep paths.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {Array|string} key The key to check.\n   * @returns {boolean} Returns `true` if `key` exists, else `false`.\n   */\n  function baseHas(object, key) {\n    return object != null && hasOwnProperty$1.call(object, key)\n  }\n\n  /**\n   * Checks if `path` is a direct property of `object`.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path to check.\n   * @returns {boolean} Returns `true` if `path` exists, else `false`.\n   * @example\n   *\n   * var object = { 'a': { 'b': 2 } };\n   * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n   *\n   * _.has(object, 'a');\n   * // => true\n   *\n   * _.has(object, 'a.b');\n   * // => true\n   *\n   * _.has(object, ['a', 'b']);\n   * // => true\n   *\n   * _.has(other, 'a');\n   * // => false\n   */\n  function has(object, path) {\n    return object != null && hasPath(object, path, baseHas)\n  }\n\n  /** `Object#toString` result references. */\n  var stringTag = '[object String]'\n\n  /**\n   * Checks if `value` is classified as a `String` primitive or object.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n   * @example\n   *\n   * _.isString('abc');\n   * // => true\n   *\n   * _.isString(1);\n   * // => false\n   */\n  function isString(value) {\n    return typeof value == 'string' || (!isArray$1(value) && isObjectLike(value) && baseGetTag(value) == stringTag)\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function (key) {\n      return object[key]\n    })\n  }\n\n  /**\n   * Creates an array of the own enumerable string keyed property values of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property values.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.values(new Foo);\n   * // => [1, 2] (iteration order is not guaranteed)\n   *\n   * _.values('hi');\n   * // => ['h', 'i']\n   */\n  function values(object) {\n    return object == null ? [] : baseValues(object, keys(object))\n  }\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeMax$1 = Math.max\n\n  /**\n   * Checks if `value` is in `collection`. If `collection` is a string, it's\n   * checked for a substring of `value`, otherwise\n   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * is used for equality comparisons. If `fromIndex` is negative, it's used as\n   * the offset from the end of `collection`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object|string} collection The collection to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} [fromIndex=0] The index to search from.\n   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n   * @returns {boolean} Returns `true` if `value` is found, else `false`.\n   * @example\n   *\n   * _.includes([1, 2, 3], 1);\n   * // => true\n   *\n   * _.includes([1, 2, 3], 1, 2);\n   * // => false\n   *\n   * _.includes({ 'a': 1, 'b': 2 }, 1);\n   * // => true\n   *\n   * _.includes('abcd', 'bc');\n   * // => true\n   */\n  function includes(collection, value, fromIndex, guard) {\n    collection = isArrayLike(collection) ? collection : values(collection)\n    fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0\n\n    var length = collection.length\n    if (fromIndex < 0) {\n      fromIndex = nativeMax$1(length + fromIndex, 0)\n    }\n    return isString(collection)\n      ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1\n      : !!length && baseIndexOf(collection, value, fromIndex) > -1\n  }\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeMax = Math.max\n\n  /**\n   * Gets the index at which the first occurrence of `value` is found in `array`\n   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * for equality comparisons. If `fromIndex` is negative, it's used as the\n   * offset from the end of `array`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Array\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} [fromIndex=0] The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   * @example\n   *\n   * _.indexOf([1, 2, 1, 2], 2);\n   * // => 1\n   *\n   * // Search from the `fromIndex`.\n   * _.indexOf([1, 2, 1, 2], 2, 2);\n   * // => 3\n   */\n  function indexOf(array, value, fromIndex) {\n    var length = array == null ? 0 : array.length\n    if (!length) {\n      return -1\n    }\n    var index = fromIndex == null ? 0 : toInteger(fromIndex)\n    if (index < 0) {\n      index = nativeMax(length + index, 0)\n    }\n    return baseIndexOf(array, value, index)\n  }\n\n  /** `Object#toString` result references. */\n  var mapTag = '[object Map]',\n    setTag = '[object Set]'\n\n  /** Used for built-in method references. */\n  var objectProto = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty = objectProto.hasOwnProperty\n\n  /**\n   * Checks if `value` is an empty object, collection, map, or set.\n   *\n   * Objects are considered empty if they have no own enumerable string keyed\n   * properties.\n   *\n   * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n   * jQuery-like collections are considered empty if they have a `length` of `0`.\n   * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n   * @example\n   *\n   * _.isEmpty(null);\n   * // => true\n   *\n   * _.isEmpty(true);\n   * // => true\n   *\n   * _.isEmpty(1);\n   * // => true\n   *\n   * _.isEmpty([1, 2, 3]);\n   * // => false\n   *\n   * _.isEmpty({ 'a': 1 });\n   * // => false\n   */\n  function isEmpty(value) {\n    if (value == null) {\n      return true\n    }\n    if (\n      isArrayLike(value) &&\n      (isArray$1(value) ||\n        typeof value == 'string' ||\n        typeof value.splice == 'function' ||\n        isBuffer$1(value) ||\n        isTypedArray$1(value) ||\n        isArguments$1(value))\n    ) {\n      return !value.length\n    }\n    var tag = getTag$1(value)\n    if (tag == mapTag || tag == setTag) {\n      return !value.size\n    }\n    if (isPrototype(value)) {\n      return !baseKeys(value).length\n    }\n    for (var key in value) {\n      if (hasOwnProperty.call(value, key)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  /** `Object#toString` result references. */\n  var regexpTag = '[object RegExp]'\n\n  /**\n   * The base implementation of `_.isRegExp` without Node.js optimizations.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n   */\n  function baseIsRegExp(value) {\n    return isObjectLike(value) && baseGetTag(value) == regexpTag\n  }\n\n  /* Node.js helper references. */\n  var nodeIsRegExp = nodeUtil$1 && nodeUtil$1.isRegExp\n\n  /**\n   * Checks if `value` is classified as a `RegExp` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n   * @example\n   *\n   * _.isRegExp(/abc/);\n   * // => true\n   *\n   * _.isRegExp('/abc/');\n   * // => false\n   */\n  var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp\n\n  const isRegExp$1 = isRegExp\n\n  /**\n   * Checks if `value` is `undefined`.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n   * @example\n   *\n   * _.isUndefined(void 0);\n   * // => true\n   *\n   * _.isUndefined(null);\n   * // => false\n   */\n  function isUndefined(value) {\n    return value === undefined\n  }\n\n  /** Error message constants. */\n  var FUNC_ERROR_TEXT = 'Expected a function'\n\n  /**\n   * Creates a function that negates the result of the predicate `func`. The\n   * `func` predicate is invoked with the `this` binding and arguments of the\n   * created function.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Function\n   * @param {Function} predicate The predicate to negate.\n   * @returns {Function} Returns the new negated function.\n   * @example\n   *\n   * function isEven(n) {\n   *   return n % 2 == 0;\n   * }\n   *\n   * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n   * // => [1, 3, 5]\n   */\n  function negate(predicate) {\n    if (typeof predicate != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT)\n    }\n    return function () {\n      var args = arguments\n      switch (args.length) {\n        case 0:\n          return !predicate.call(this)\n        case 1:\n          return !predicate.call(this, args[0])\n        case 2:\n          return !predicate.call(this, args[0], args[1])\n        case 3:\n          return !predicate.call(this, args[0], args[1], args[2])\n      }\n      return !predicate.apply(this, args)\n    }\n  }\n\n  /**\n   * The base implementation of `_.set`.\n   *\n   * @private\n   * @param {Object} object The object to modify.\n   * @param {Array|string} path The path of the property to set.\n   * @param {*} value The value to set.\n   * @param {Function} [customizer] The function to customize path creation.\n   * @returns {Object} Returns `object`.\n   */\n  function baseSet(object, path, value, customizer) {\n    if (!isObject(object)) {\n      return object\n    }\n    path = castPath(path, object)\n\n    var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object\n\n    while (nested != null && ++index < length) {\n      var key = toKey(path[index]),\n        newValue = value\n\n      if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n        return object\n      }\n\n      if (index != lastIndex) {\n        var objValue = nested[key]\n        newValue = customizer ? customizer(objValue, key, nested) : undefined\n        if (newValue === undefined) {\n          newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {}\n        }\n      }\n      assignValue(nested, key, newValue)\n      nested = nested[key]\n    }\n    return object\n  }\n\n  /**\n   * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Object} object The source object.\n   * @param {string[]} paths The property paths to pick.\n   * @param {Function} predicate The function invoked per property.\n   * @returns {Object} Returns the new object.\n   */\n  function basePickBy(object, paths, predicate) {\n    var index = -1,\n      length = paths.length,\n      result = {}\n\n    while (++index < length) {\n      var path = paths[index],\n        value = baseGet(object, path)\n\n      if (predicate(value, path)) {\n        baseSet(result, castPath(path, object), value)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Creates an object composed of the `object` properties `predicate` returns\n   * truthy for. The predicate is invoked with two arguments: (value, key).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Object\n   * @param {Object} object The source object.\n   * @param {Function} [predicate=_.identity] The function invoked per property.\n   * @returns {Object} Returns the new object.\n   * @example\n   *\n   * var object = { 'a': 1, 'b': '2', 'c': 3 };\n   *\n   * _.pickBy(object, _.isNumber);\n   * // => { 'a': 1, 'c': 3 }\n   */\n  function pickBy(object, predicate) {\n    if (object == null) {\n      return {}\n    }\n    var props = arrayMap(getAllKeysIn(object), function (prop) {\n      return [prop]\n    })\n    predicate = baseIteratee(predicate)\n    return basePickBy(object, props, function (value, path) {\n      return predicate(value, path[0])\n    })\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function (value, index, collection) {\n      accumulator = initAccum ? ((initAccum = false), value) : iteratee(accumulator, value, index, collection)\n    })\n    return accumulator\n  }\n\n  /**\n   * Reduces `collection` to a value which is the accumulated result of running\n   * each element in `collection` thru `iteratee`, where each successive\n   * invocation is supplied the return value of the previous. If `accumulator`\n   * is not given, the first element of `collection` is used as the initial\n   * value. The iteratee is invoked with four arguments:\n   * (accumulator, value, index|key, collection).\n   *\n   * Many lodash methods are guarded to work as iteratees for methods like\n   * `_.reduce`, `_.reduceRight`, and `_.transform`.\n   *\n   * The guarded methods are:\n   * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n   * and `sortBy`\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @returns {*} Returns the accumulated value.\n   * @see _.reduceRight\n   * @example\n   *\n   * _.reduce([1, 2], function(sum, n) {\n   *   return sum + n;\n   * }, 0);\n   * // => 3\n   *\n   * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n   *   (result[value] || (result[value] = [])).push(key);\n   *   return result;\n   * }, {});\n   * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n   */\n  function reduce(collection, iteratee, accumulator) {\n    var func = isArray$1(collection) ? arrayReduce : baseReduce,\n      initAccum = arguments.length < 3\n\n    return func(collection, baseIteratee(iteratee), accumulator, initAccum, baseEach$1)\n  }\n\n  /**\n   * The opposite of `_.filter`; this method returns the elements of `collection`\n   * that `predicate` does **not** return truthy for.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [predicate=_.identity] The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   * @see _.filter\n   * @example\n   *\n   * var users = [\n   *   { 'user': 'barney', 'age': 36, 'active': false },\n   *   { 'user': 'fred',   'age': 40, 'active': true }\n   * ];\n   *\n   * _.reject(users, function(o) { return !o.active; });\n   * // => objects for ['fred']\n   *\n   * // The `_.matches` iteratee shorthand.\n   * _.reject(users, { 'age': 40, 'active': true });\n   * // => objects for ['barney']\n   *\n   * // The `_.matchesProperty` iteratee shorthand.\n   * _.reject(users, ['active', false]);\n   * // => objects for ['fred']\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.reject(users, 'active');\n   * // => objects for ['barney']\n   */\n  function reject(collection, predicate) {\n    var func = isArray$1(collection) ? arrayFilter : baseFilter\n    return func(collection, negate(baseIteratee(predicate)))\n  }\n\n  /**\n   * The base implementation of `_.some` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function baseSome(collection, predicate) {\n    var result\n\n    baseEach$1(collection, function (value, index, collection) {\n      result = predicate(value, index, collection)\n      return !result\n    })\n    return !!result\n  }\n\n  /**\n   * Checks if `predicate` returns truthy for **any** element of `collection`.\n   * Iteration is stopped once `predicate` returns truthy. The predicate is\n   * invoked with three arguments: (value, index|key, collection).\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [predicate=_.identity] The function invoked per iteration.\n   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   * @example\n   *\n   * _.some([null, 0, 'yes', false], Boolean);\n   * // => true\n   *\n   * var users = [\n   *   { 'user': 'barney', 'active': true },\n   *   { 'user': 'fred',   'active': false }\n   * ];\n   *\n   * // The `_.matches` iteratee shorthand.\n   * _.some(users, { 'user': 'barney', 'active': false });\n   * // => false\n   *\n   * // The `_.matchesProperty` iteratee shorthand.\n   * _.some(users, ['active', false]);\n   * // => true\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.some(users, 'active');\n   * // => true\n   */\n  function some(collection, predicate, guard) {\n    var func = isArray$1(collection) ? arraySome : baseSome\n    if (guard && isIterateeCall(collection, predicate, guard)) {\n      predicate = undefined\n    }\n    return func(collection, baseIteratee(predicate))\n  }\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0\n\n  /**\n   * Creates a set object of `values`.\n   *\n   * @private\n   * @param {Array} values The values to add to the set.\n   * @returns {Object} Returns the new set.\n   */\n  var createSet = !(Set$1 && 1 / setToArray(new Set$1([, -0]))[1] == INFINITY)\n    ? noop\n    : function (values) {\n        return new Set$1(values)\n      }\n\n  const createSet$1 = createSet\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200\n\n  /**\n   * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} [iteratee] The iteratee invoked per element.\n   * @param {Function} [comparator] The comparator invoked per element.\n   * @returns {Array} Returns the new duplicate free array.\n   */\n  function baseUniq(array, iteratee, comparator) {\n    var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result\n\n    if (comparator) {\n      isCommon = false\n      includes = arrayIncludesWith\n    } else if (length >= LARGE_ARRAY_SIZE) {\n      var set = iteratee ? null : createSet$1(array)\n      if (set) {\n        return setToArray(set)\n      }\n      isCommon = false\n      includes = cacheHas\n      seen = new SetCache()\n    } else {\n      seen = iteratee ? [] : result\n    }\n    outer: while (++index < length) {\n      var value = array[index],\n        computed = iteratee ? iteratee(value) : value\n\n      value = comparator || value !== 0 ? value : 0\n      if (isCommon && computed === computed) {\n        var seenIndex = seen.length\n        while (seenIndex--) {\n          if (seen[seenIndex] === computed) {\n            continue outer\n          }\n        }\n        if (iteratee) {\n          seen.push(computed)\n        }\n        result.push(value)\n      } else if (!includes(seen, computed, comparator)) {\n        if (seen !== result) {\n          seen.push(computed)\n        }\n        result.push(value)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Creates a duplicate-free version of an array, using\n   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * for equality comparisons, in which only the first occurrence of each element\n   * is kept. The order of result values is determined by the order they occur\n   * in the array.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Array\n   * @param {Array} array The array to inspect.\n   * @returns {Array} Returns the new duplicate free array.\n   * @example\n   *\n   * _.uniq([2, 1, 2]);\n   * // => [2, 1]\n   */\n  function uniq(array) {\n    return array && array.length ? baseUniq(array) : []\n  }\n\n  function PRINT_ERROR(msg) {\n    /* istanbul ignore else - can't override global.console in node.js */\n    if (console && console.error) {\n      console.error(`Error: ${msg}`)\n    }\n  }\n  function PRINT_WARNING(msg) {\n    /* istanbul ignore else - can't override global.console in node.js*/\n    if (console && console.warn) {\n      // TODO: modify docs accordingly\n      console.warn(`Warning: ${msg}`)\n    }\n  }\n\n  function timer(func) {\n    const start = new Date().getTime()\n    const val = func()\n    const end = new Date().getTime()\n    const total = end - start\n    return { time: total, value: val }\n  }\n\n  // based on: https://github.com/petkaantonov/bluebird/blob/b97c0d2d487e8c5076e8bd897e0dcd4622d31846/src/util.js#L201-L216\n  function toFastProperties(toBecomeFast) {\n    function FakeConstructor() {}\n    // If our object is used as a constructor, it would receive\n    FakeConstructor.prototype = toBecomeFast\n    const fakeInstance = new FakeConstructor()\n    function fakeAccess() {\n      return typeof fakeInstance.bar\n    }\n    // help V8 understand this is a \"real\" prototype by actually using\n    // the fake instance.\n    fakeAccess()\n    fakeAccess()\n    // Always true condition to suppress the Firefox warning of unreachable\n    // code after a return statement.\n    return toBecomeFast\n  }\n\n  // TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\n  function tokenLabel$1(tokType) {\n    if (hasTokenLabel$1(tokType)) {\n      return tokType.LABEL\n    } else {\n      return tokType.name\n    }\n  }\n  // TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\n  function hasTokenLabel$1(obj) {\n    return isString(obj.LABEL) && obj.LABEL !== ''\n  }\n  class AbstractProduction {\n    get definition() {\n      return this._definition\n    }\n    set definition(value) {\n      this._definition = value\n    }\n    constructor(_definition) {\n      this._definition = _definition\n    }\n    accept(visitor) {\n      visitor.visit(this)\n      forEach(this.definition, (prod) => {\n        prod.accept(visitor)\n      })\n    }\n  }\n  class NonTerminal extends AbstractProduction {\n    constructor(options) {\n      super([])\n      this.idx = 1\n      assign$1(\n        this,\n        pickBy(options, (v) => v !== undefined),\n      )\n    }\n    set definition(definition) {\n      // immutable\n    }\n    get definition() {\n      if (this.referencedRule !== undefined) {\n        return this.referencedRule.definition\n      }\n      return []\n    }\n    accept(visitor) {\n      visitor.visit(this)\n      // don't visit children of a reference, we will get cyclic infinite loops if we do so\n    }\n  }\n  class Rule extends AbstractProduction {\n    constructor(options) {\n      super(options.definition)\n      this.orgText = ''\n      assign$1(\n        this,\n        pickBy(options, (v) => v !== undefined),\n      )\n    }\n  }\n  class Alternative extends AbstractProduction {\n    constructor(options) {\n      super(options.definition)\n      this.ignoreAmbiguities = false\n      assign$1(\n        this,\n        pickBy(options, (v) => v !== undefined),\n      )\n    }\n  }\n  class Option extends AbstractProduction {\n    constructor(options) {\n      super(options.definition)\n      this.idx = 1\n      assign$1(\n        this,\n        pickBy(options, (v) => v !== undefined),\n      )\n    }\n  }\n  class RepetitionMandatory extends AbstractProduction {\n    constructor(options) {\n      super(options.definition)\n      this.idx = 1\n      assign$1(\n        this,\n        pickBy(options, (v) => v !== undefined),\n      )\n    }\n  }\n  class RepetitionMandatoryWithSeparator extends AbstractProduction {\n    constructor(options) {\n      super(options.definition)\n      this.idx = 1\n      assign$1(\n        this,\n        pickBy(options, (v) => v !== undefined),\n      )\n    }\n  }\n  class Repetition extends AbstractProduction {\n    constructor(options) {\n      super(options.definition)\n      this.idx = 1\n      assign$1(\n        this,\n        pickBy(options, (v) => v !== undefined),\n      )\n    }\n  }\n  class RepetitionWithSeparator extends AbstractProduction {\n    constructor(options) {\n      super(options.definition)\n      this.idx = 1\n      assign$1(\n        this,\n        pickBy(options, (v) => v !== undefined),\n      )\n    }\n  }\n  class Alternation extends AbstractProduction {\n    get definition() {\n      return this._definition\n    }\n    set definition(value) {\n      this._definition = value\n    }\n    constructor(options) {\n      super(options.definition)\n      this.idx = 1\n      this.ignoreAmbiguities = false\n      this.hasPredicates = false\n      assign$1(\n        this,\n        pickBy(options, (v) => v !== undefined),\n      )\n    }\n  }\n  class Terminal {\n    constructor(options) {\n      this.idx = 1\n      assign$1(\n        this,\n        pickBy(options, (v) => v !== undefined),\n      )\n    }\n    accept(visitor) {\n      visitor.visit(this)\n    }\n  }\n  function serializeGrammar(topRules) {\n    return map(topRules, serializeProduction)\n  }\n  function serializeProduction(node) {\n    function convertDefinition(definition) {\n      return map(definition, serializeProduction)\n    }\n    /* istanbul ignore else */\n    if (node instanceof NonTerminal) {\n      const serializedNonTerminal = {\n        type: 'NonTerminal',\n        name: node.nonTerminalName,\n        idx: node.idx,\n      }\n      if (isString(node.label)) {\n        serializedNonTerminal.label = node.label\n      }\n      return serializedNonTerminal\n    } else if (node instanceof Alternative) {\n      return {\n        type: 'Alternative',\n        definition: convertDefinition(node.definition),\n      }\n    } else if (node instanceof Option) {\n      return {\n        type: 'Option',\n        idx: node.idx,\n        definition: convertDefinition(node.definition),\n      }\n    } else if (node instanceof RepetitionMandatory) {\n      return {\n        type: 'RepetitionMandatory',\n        idx: node.idx,\n        definition: convertDefinition(node.definition),\n      }\n    } else if (node instanceof RepetitionMandatoryWithSeparator) {\n      return {\n        type: 'RepetitionMandatoryWithSeparator',\n        idx: node.idx,\n        separator: serializeProduction(new Terminal({ terminalType: node.separator })),\n        definition: convertDefinition(node.definition),\n      }\n    } else if (node instanceof RepetitionWithSeparator) {\n      return {\n        type: 'RepetitionWithSeparator',\n        idx: node.idx,\n        separator: serializeProduction(new Terminal({ terminalType: node.separator })),\n        definition: convertDefinition(node.definition),\n      }\n    } else if (node instanceof Repetition) {\n      return {\n        type: 'Repetition',\n        idx: node.idx,\n        definition: convertDefinition(node.definition),\n      }\n    } else if (node instanceof Alternation) {\n      return {\n        type: 'Alternation',\n        idx: node.idx,\n        definition: convertDefinition(node.definition),\n      }\n    } else if (node instanceof Terminal) {\n      const serializedTerminal = {\n        type: 'Terminal',\n        name: node.terminalType.name,\n        label: tokenLabel$1(node.terminalType),\n        idx: node.idx,\n      }\n      if (isString(node.label)) {\n        serializedTerminal.terminalLabel = node.label\n      }\n      const pattern = node.terminalType.PATTERN\n      if (node.terminalType.PATTERN) {\n        serializedTerminal.pattern = isRegExp$1(pattern) ? pattern.source : pattern\n      }\n      return serializedTerminal\n    } else if (node instanceof Rule) {\n      return {\n        type: 'Rule',\n        name: node.name,\n        orgText: node.orgText,\n        definition: convertDefinition(node.definition),\n      }\n      /* c8 ignore next 3 */\n    } else {\n      throw Error('non exhaustive match')\n    }\n  }\n\n  class GAstVisitor {\n    visit(node) {\n      const nodeAny = node\n      switch (nodeAny.constructor) {\n        case NonTerminal:\n          return this.visitNonTerminal(nodeAny)\n        case Alternative:\n          return this.visitAlternative(nodeAny)\n        case Option:\n          return this.visitOption(nodeAny)\n        case RepetitionMandatory:\n          return this.visitRepetitionMandatory(nodeAny)\n        case RepetitionMandatoryWithSeparator:\n          return this.visitRepetitionMandatoryWithSeparator(nodeAny)\n        case RepetitionWithSeparator:\n          return this.visitRepetitionWithSeparator(nodeAny)\n        case Repetition:\n          return this.visitRepetition(nodeAny)\n        case Alternation:\n          return this.visitAlternation(nodeAny)\n        case Terminal:\n          return this.visitTerminal(nodeAny)\n        case Rule:\n          return this.visitRule(nodeAny)\n        /* c8 ignore next 2 */\n        default:\n          throw Error('non exhaustive match')\n      }\n    }\n    /* c8 ignore next */\n    visitNonTerminal(node) {}\n    /* c8 ignore next */\n    visitAlternative(node) {}\n    /* c8 ignore next */\n    visitOption(node) {}\n    /* c8 ignore next */\n    visitRepetition(node) {}\n    /* c8 ignore next */\n    visitRepetitionMandatory(node) {}\n    /* c8 ignore next 3 */\n    visitRepetitionMandatoryWithSeparator(node) {}\n    /* c8 ignore next */\n    visitRepetitionWithSeparator(node) {}\n    /* c8 ignore next */\n    visitAlternation(node) {}\n    /* c8 ignore next */\n    visitTerminal(node) {}\n    /* c8 ignore next */\n    visitRule(node) {}\n  }\n\n  function isSequenceProd(prod) {\n    return (\n      prod instanceof Alternative ||\n      prod instanceof Option ||\n      prod instanceof Repetition ||\n      prod instanceof RepetitionMandatory ||\n      prod instanceof RepetitionMandatoryWithSeparator ||\n      prod instanceof RepetitionWithSeparator ||\n      prod instanceof Terminal ||\n      prod instanceof Rule\n    )\n  }\n  function isOptionalProd(prod, alreadyVisited = []) {\n    const isDirectlyOptional =\n      prod instanceof Option || prod instanceof Repetition || prod instanceof RepetitionWithSeparator\n    if (isDirectlyOptional) {\n      return true\n    }\n    // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n    // empty optional top rule\n    // may be indirectly optional ((A?B?C?) | (D?E?F?))\n    if (prod instanceof Alternation) {\n      // for OR its enough for just one of the alternatives to be optional\n      return some(prod.definition, (subProd) => {\n        return isOptionalProd(subProd, alreadyVisited)\n      })\n    } else if (prod instanceof NonTerminal && includes(alreadyVisited, prod)) {\n      // avoiding stack overflow due to infinite recursion\n      return false\n    } else if (prod instanceof AbstractProduction) {\n      if (prod instanceof NonTerminal) {\n        alreadyVisited.push(prod)\n      }\n      return every(prod.definition, (subProd) => {\n        return isOptionalProd(subProd, alreadyVisited)\n      })\n    } else {\n      return false\n    }\n  }\n  function isBranchingProd(prod) {\n    return prod instanceof Alternation\n  }\n  function getProductionDslName(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof NonTerminal) {\n      return 'SUBRULE'\n    } else if (prod instanceof Option) {\n      return 'OPTION'\n    } else if (prod instanceof Alternation) {\n      return 'OR'\n    } else if (prod instanceof RepetitionMandatory) {\n      return 'AT_LEAST_ONE'\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      return 'AT_LEAST_ONE_SEP'\n    } else if (prod instanceof RepetitionWithSeparator) {\n      return 'MANY_SEP'\n    } else if (prod instanceof Repetition) {\n      return 'MANY'\n    } else if (prod instanceof Terminal) {\n      return 'CONSUME'\n      /* c8 ignore next 3 */\n    } else {\n      throw Error('non exhaustive match')\n    }\n  }\n\n  /**\n   *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n   */\n  class RestWalker {\n    walk(prod, prevRest = []) {\n      forEach(prod.definition, (subProd, index) => {\n        const currRest = drop(prod.definition, index + 1)\n        /* istanbul ignore else */\n        if (subProd instanceof NonTerminal) {\n          this.walkProdRef(subProd, currRest, prevRest)\n        } else if (subProd instanceof Terminal) {\n          this.walkTerminal(subProd, currRest, prevRest)\n        } else if (subProd instanceof Alternative) {\n          this.walkFlat(subProd, currRest, prevRest)\n        } else if (subProd instanceof Option) {\n          this.walkOption(subProd, currRest, prevRest)\n        } else if (subProd instanceof RepetitionMandatory) {\n          this.walkAtLeastOne(subProd, currRest, prevRest)\n        } else if (subProd instanceof RepetitionMandatoryWithSeparator) {\n          this.walkAtLeastOneSep(subProd, currRest, prevRest)\n        } else if (subProd instanceof RepetitionWithSeparator) {\n          this.walkManySep(subProd, currRest, prevRest)\n        } else if (subProd instanceof Repetition) {\n          this.walkMany(subProd, currRest, prevRest)\n        } else if (subProd instanceof Alternation) {\n          this.walkOr(subProd, currRest, prevRest)\n        } else {\n          throw Error('non exhaustive match')\n        }\n      })\n    }\n    walkTerminal(terminal, currRest, prevRest) {}\n    walkProdRef(refProd, currRest, prevRest) {}\n    walkFlat(flatProd, currRest, prevRest) {\n      // ABCDEF => after the D the rest is EF\n      const fullOrRest = currRest.concat(prevRest)\n      this.walk(flatProd, fullOrRest)\n    }\n    walkOption(optionProd, currRest, prevRest) {\n      // ABC(DE)?F => after the (DE)? the rest is F\n      const fullOrRest = currRest.concat(prevRest)\n      this.walk(optionProd, fullOrRest)\n    }\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n      // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n      const fullAtLeastOneRest = [new Option({ definition: atLeastOneProd.definition })].concat(currRest, prevRest)\n      this.walk(atLeastOneProd, fullAtLeastOneRest)\n    }\n    walkAtLeastOneSep(atLeastOneSepProd, currRest, prevRest) {\n      // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n      const fullAtLeastOneSepRest = restForRepetitionWithSeparator(atLeastOneSepProd, currRest, prevRest)\n      this.walk(atLeastOneSepProd, fullAtLeastOneSepRest)\n    }\n    walkMany(manyProd, currRest, prevRest) {\n      // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n      const fullManyRest = [new Option({ definition: manyProd.definition })].concat(currRest, prevRest)\n      this.walk(manyProd, fullManyRest)\n    }\n    walkManySep(manySepProd, currRest, prevRest) {\n      // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n      const fullManySepRest = restForRepetitionWithSeparator(manySepProd, currRest, prevRest)\n      this.walk(manySepProd, fullManySepRest)\n    }\n    walkOr(orProd, currRest, prevRest) {\n      // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n      const fullOrRest = currRest.concat(prevRest)\n      // walk all different alternatives\n      forEach(orProd.definition, (alt) => {\n        // wrapping each alternative in a single definition wrapper\n        // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n        // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n        const prodWrapper = new Alternative({ definition: [alt] })\n        this.walk(prodWrapper, fullOrRest)\n      })\n    }\n  }\n  function restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {\n    const repSepRest = [\n      new Option({\n        definition: [new Terminal({ terminalType: repSepProd.separator })].concat(repSepProd.definition),\n      }),\n    ]\n    const fullRepSepRest = repSepRest.concat(currRest, prevRest)\n    return fullRepSepRest\n  }\n\n  function first(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof NonTerminal) {\n      // this could in theory cause infinite loops if\n      // (1) prod A refs prod B.\n      // (2) prod B refs prod A\n      // (3) AB can match the empty set\n      // in other words a cycle where everything is optional so the first will keep\n      // looking ahead for the next optional part and will never exit\n      // currently there is no safeguard for this unique edge case because\n      // (1) not sure a grammar in which this can happen is useful for anything (productive)\n      return first(prod.referencedRule)\n    } else if (prod instanceof Terminal) {\n      return firstForTerminal(prod)\n    } else if (isSequenceProd(prod)) {\n      return firstForSequence(prod)\n    } else if (isBranchingProd(prod)) {\n      return firstForBranching(prod)\n    } else {\n      throw Error('non exhaustive match')\n    }\n  }\n  function firstForSequence(prod) {\n    let firstSet = []\n    const seq = prod.definition\n    let nextSubProdIdx = 0\n    let hasInnerProdsRemaining = seq.length > nextSubProdIdx\n    let currSubProd\n    // so we enter the loop at least once (if the definition is not empty\n    let isLastInnerProdOptional = true\n    // scan a sequence until it's end or until we have found a NONE optional production in it\n    while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n      currSubProd = seq[nextSubProdIdx]\n      isLastInnerProdOptional = isOptionalProd(currSubProd)\n      firstSet = firstSet.concat(first(currSubProd))\n      nextSubProdIdx = nextSubProdIdx + 1\n      hasInnerProdsRemaining = seq.length > nextSubProdIdx\n    }\n    return uniq(firstSet)\n  }\n  function firstForBranching(prod) {\n    const allAlternativesFirsts = map(prod.definition, (innerProd) => {\n      return first(innerProd)\n    })\n    return uniq(flatten(allAlternativesFirsts))\n  }\n  function firstForTerminal(terminal) {\n    return [terminal.terminalType]\n  }\n\n  // TODO: can this be removed? where is it used?\n  const IN = '_~IN~_'\n\n  // This ResyncFollowsWalker computes all of the follows required for RESYNC\n  // (skipping reference production).\n  class ResyncFollowsWalker extends RestWalker {\n    constructor(topProd) {\n      super()\n      this.topProd = topProd\n      this.follows = {}\n    }\n    startWalking() {\n      this.walk(this.topProd)\n      return this.follows\n    }\n    walkTerminal(terminal, currRest, prevRest) {\n      // do nothing! just like in the public sector after 13:00\n    }\n    walkProdRef(refProd, currRest, prevRest) {\n      const followName = buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) + this.topProd.name\n      const fullRest = currRest.concat(prevRest)\n      const restProd = new Alternative({ definition: fullRest })\n      const t_in_topProd_follows = first(restProd)\n      this.follows[followName] = t_in_topProd_follows\n    }\n  }\n  function computeAllProdsFollows(topProductions) {\n    const reSyncFollows = {}\n    forEach(topProductions, (topProd) => {\n      const currRefsFollow = new ResyncFollowsWalker(topProd).startWalking()\n      assign$1(reSyncFollows, currRefsFollow)\n    })\n    return reSyncFollows\n  }\n  function buildBetweenProdsFollowPrefix(inner, occurenceInParent) {\n    return inner.name + occurenceInParent + IN\n  }\n\n  function cc(char) {\n    return char.charCodeAt(0)\n  }\n  function insertToSet(item, set) {\n    if (Array.isArray(item)) {\n      item.forEach(function (subItem) {\n        set.push(subItem)\n      })\n    } else {\n      set.push(item)\n    }\n  }\n  function addFlag(flagObj, flagKey) {\n    if (flagObj[flagKey] === true) {\n      throw 'duplicate flag ' + flagKey\n    }\n    flagObj[flagKey]\n    flagObj[flagKey] = true\n  }\n  function ASSERT_EXISTS(obj) {\n    // istanbul ignore next\n    if (obj === undefined) {\n      throw Error('Internal Error - Should never get here!')\n    }\n    return true\n  }\n  // istanbul ignore next\n  function ASSERT_NEVER_REACH_HERE() {\n    throw Error('Internal Error - Should never get here!')\n  }\n  function isCharacter(obj) {\n    return obj['type'] === 'Character'\n  }\n\n  const digitsCharCodes = []\n  for (let i = cc('0'); i <= cc('9'); i++) {\n    digitsCharCodes.push(i)\n  }\n  const wordCharCodes = [cc('_')].concat(digitsCharCodes)\n  for (let i = cc('a'); i <= cc('z'); i++) {\n    wordCharCodes.push(i)\n  }\n  for (let i = cc('A'); i <= cc('Z'); i++) {\n    wordCharCodes.push(i)\n  }\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes\n  const whitespaceCodes = [\n    cc(' '),\n    cc('\\f'),\n    cc('\\n'),\n    cc('\\r'),\n    cc('\\t'),\n    cc('\\v'),\n    cc('\\t'),\n    cc('\\u00a0'),\n    cc('\\u1680'),\n    cc('\\u2000'),\n    cc('\\u2001'),\n    cc('\\u2002'),\n    cc('\\u2003'),\n    cc('\\u2004'),\n    cc('\\u2005'),\n    cc('\\u2006'),\n    cc('\\u2007'),\n    cc('\\u2008'),\n    cc('\\u2009'),\n    cc('\\u200a'),\n    cc('\\u2028'),\n    cc('\\u2029'),\n    cc('\\u202f'),\n    cc('\\u205f'),\n    cc('\\u3000'),\n    cc('\\ufeff'),\n  ]\n\n  // consts and utilities\n  const hexDigitPattern = /[0-9a-fA-F]/\n  const decimalPattern = /[0-9]/\n  const decimalPatternNoZero = /[1-9]/\n  // https://hackernoon.com/the-madness-of-parsing-real-world-javascript-regexps-d9ee336df983\n  // https://www.ecma-international.org/ecma-262/8.0/index.html#prod-Pattern\n  class RegExpParser {\n    constructor() {\n      this.idx = 0\n      this.input = ''\n      this.groupIdx = 0\n    }\n    saveState() {\n      return {\n        idx: this.idx,\n        input: this.input,\n        groupIdx: this.groupIdx,\n      }\n    }\n    restoreState(newState) {\n      this.idx = newState.idx\n      this.input = newState.input\n      this.groupIdx = newState.groupIdx\n    }\n    pattern(input) {\n      // parser state\n      this.idx = 0\n      this.input = input\n      this.groupIdx = 0\n      this.consumeChar('/')\n      const value = this.disjunction()\n      this.consumeChar('/')\n      const flags = {\n        type: 'Flags',\n        loc: { begin: this.idx, end: input.length },\n        global: false,\n        ignoreCase: false,\n        multiLine: false,\n        unicode: false,\n        sticky: false,\n      }\n      while (this.isRegExpFlag()) {\n        switch (this.popChar()) {\n          case 'g':\n            addFlag(flags, 'global')\n            break\n          case 'i':\n            addFlag(flags, 'ignoreCase')\n            break\n          case 'm':\n            addFlag(flags, 'multiLine')\n            break\n          case 'u':\n            addFlag(flags, 'unicode')\n            break\n          case 'y':\n            addFlag(flags, 'sticky')\n            break\n        }\n      }\n      if (this.idx !== this.input.length) {\n        throw Error('Redundant input: ' + this.input.substring(this.idx))\n      }\n      return {\n        type: 'Pattern',\n        flags: flags,\n        value: value,\n        loc: this.loc(0),\n      }\n    }\n    disjunction() {\n      const alts = []\n      const begin = this.idx\n      alts.push(this.alternative())\n      while (this.peekChar() === '|') {\n        this.consumeChar('|')\n        alts.push(this.alternative())\n      }\n      return { type: 'Disjunction', value: alts, loc: this.loc(begin) }\n    }\n    alternative() {\n      const terms = []\n      const begin = this.idx\n      while (this.isTerm()) {\n        terms.push(this.term())\n      }\n      return { type: 'Alternative', value: terms, loc: this.loc(begin) }\n    }\n    term() {\n      if (this.isAssertion()) {\n        return this.assertion()\n      } else {\n        return this.atom()\n      }\n    }\n    assertion() {\n      const begin = this.idx\n      switch (this.popChar()) {\n        case '^':\n          return {\n            type: 'StartAnchor',\n            loc: this.loc(begin),\n          }\n        case '$':\n          return { type: 'EndAnchor', loc: this.loc(begin) }\n        // '\\b' or '\\B'\n        case '\\\\':\n          switch (this.popChar()) {\n            case 'b':\n              return {\n                type: 'WordBoundary',\n                loc: this.loc(begin),\n              }\n            case 'B':\n              return {\n                type: 'NonWordBoundary',\n                loc: this.loc(begin),\n              }\n          }\n          // istanbul ignore next\n          throw Error('Invalid Assertion Escape')\n        // '(?=' or '(?!'\n        case '(':\n          this.consumeChar('?')\n          let type\n          switch (this.popChar()) {\n            case '=':\n              type = 'Lookahead'\n              break\n            case '!':\n              type = 'NegativeLookahead'\n              break\n          }\n          ASSERT_EXISTS(type)\n          const disjunction = this.disjunction()\n          this.consumeChar(')')\n          return {\n            type: type,\n            value: disjunction,\n            loc: this.loc(begin),\n          }\n      }\n      // istanbul ignore next\n      return ASSERT_NEVER_REACH_HERE()\n    }\n    quantifier(isBacktracking = false) {\n      let range = undefined\n      const begin = this.idx\n      switch (this.popChar()) {\n        case '*':\n          range = {\n            atLeast: 0,\n            atMost: Infinity,\n          }\n          break\n        case '+':\n          range = {\n            atLeast: 1,\n            atMost: Infinity,\n          }\n          break\n        case '?':\n          range = {\n            atLeast: 0,\n            atMost: 1,\n          }\n          break\n        case '{':\n          const atLeast = this.integerIncludingZero()\n          switch (this.popChar()) {\n            case '}':\n              range = {\n                atLeast: atLeast,\n                atMost: atLeast,\n              }\n              break\n            case ',':\n              let atMost\n              if (this.isDigit()) {\n                atMost = this.integerIncludingZero()\n                range = {\n                  atLeast: atLeast,\n                  atMost: atMost,\n                }\n              } else {\n                range = {\n                  atLeast: atLeast,\n                  atMost: Infinity,\n                }\n              }\n              this.consumeChar('}')\n              break\n          }\n          // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n          // causes severe performance degradations\n          if (isBacktracking === true && range === undefined) {\n            return undefined\n          }\n          ASSERT_EXISTS(range)\n          break\n      }\n      // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n      // causes severe performance degradations\n      if (isBacktracking === true && range === undefined) {\n        return undefined\n      }\n      // istanbul ignore else\n      if (ASSERT_EXISTS(range)) {\n        if (this.peekChar(0) === '?') {\n          this.consumeChar('?')\n          range.greedy = false\n        } else {\n          range.greedy = true\n        }\n        range.type = 'Quantifier'\n        range.loc = this.loc(begin)\n        return range\n      }\n    }\n    atom() {\n      let atom\n      const begin = this.idx\n      switch (this.peekChar()) {\n        case '.':\n          atom = this.dotAll()\n          break\n        case '\\\\':\n          atom = this.atomEscape()\n          break\n        case '[':\n          atom = this.characterClass()\n          break\n        case '(':\n          atom = this.group()\n          break\n      }\n      if (atom === undefined && this.isPatternCharacter()) {\n        atom = this.patternCharacter()\n      }\n      // istanbul ignore else\n      if (ASSERT_EXISTS(atom)) {\n        atom.loc = this.loc(begin)\n        if (this.isQuantifier()) {\n          atom.quantifier = this.quantifier()\n        }\n        return atom\n      }\n    }\n    dotAll() {\n      this.consumeChar('.')\n      return {\n        type: 'Set',\n        complement: true,\n        value: [cc('\\n'), cc('\\r'), cc('\\u2028'), cc('\\u2029')],\n      }\n    }\n    atomEscape() {\n      this.consumeChar('\\\\')\n      switch (this.peekChar()) {\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n          return this.decimalEscapeAtom()\n        case 'd':\n        case 'D':\n        case 's':\n        case 'S':\n        case 'w':\n        case 'W':\n          return this.characterClassEscape()\n        case 'f':\n        case 'n':\n        case 'r':\n        case 't':\n        case 'v':\n          return this.controlEscapeAtom()\n        case 'c':\n          return this.controlLetterEscapeAtom()\n        case '0':\n          return this.nulCharacterAtom()\n        case 'x':\n          return this.hexEscapeSequenceAtom()\n        case 'u':\n          return this.regExpUnicodeEscapeSequenceAtom()\n        default:\n          return this.identityEscapeAtom()\n      }\n    }\n    decimalEscapeAtom() {\n      const value = this.positiveInteger()\n      return { type: 'GroupBackReference', value: value }\n    }\n    characterClassEscape() {\n      let set\n      let complement = false\n      switch (this.popChar()) {\n        case 'd':\n          set = digitsCharCodes\n          break\n        case 'D':\n          set = digitsCharCodes\n          complement = true\n          break\n        case 's':\n          set = whitespaceCodes\n          break\n        case 'S':\n          set = whitespaceCodes\n          complement = true\n          break\n        case 'w':\n          set = wordCharCodes\n          break\n        case 'W':\n          set = wordCharCodes\n          complement = true\n          break\n      }\n      // istanbul ignore else\n      if (ASSERT_EXISTS(set)) {\n        return { type: 'Set', value: set, complement: complement }\n      }\n    }\n    controlEscapeAtom() {\n      let escapeCode\n      switch (this.popChar()) {\n        case 'f':\n          escapeCode = cc('\\f')\n          break\n        case 'n':\n          escapeCode = cc('\\n')\n          break\n        case 'r':\n          escapeCode = cc('\\r')\n          break\n        case 't':\n          escapeCode = cc('\\t')\n          break\n        case 'v':\n          escapeCode = cc('\\v')\n          break\n      }\n      // istanbul ignore else\n      if (ASSERT_EXISTS(escapeCode)) {\n        return { type: 'Character', value: escapeCode }\n      }\n    }\n    controlLetterEscapeAtom() {\n      this.consumeChar('c')\n      const letter = this.popChar()\n      if (/[a-zA-Z]/.test(letter) === false) {\n        throw Error('Invalid ')\n      }\n      const letterCode = letter.toUpperCase().charCodeAt(0) - 64\n      return { type: 'Character', value: letterCode }\n    }\n    nulCharacterAtom() {\n      // TODO implement '[lookahead ∉ DecimalDigit]'\n      // TODO: for the deprecated octal escape sequence\n      this.consumeChar('0')\n      return { type: 'Character', value: cc('\\0') }\n    }\n    hexEscapeSequenceAtom() {\n      this.consumeChar('x')\n      return this.parseHexDigits(2)\n    }\n    regExpUnicodeEscapeSequenceAtom() {\n      this.consumeChar('u')\n      return this.parseHexDigits(4)\n    }\n    identityEscapeAtom() {\n      // TODO: implement \"SourceCharacter but not UnicodeIDContinue\"\n      // // http://unicode.org/reports/tr31/#Specific_Character_Adjustments\n      const escapedChar = this.popChar()\n      return { type: 'Character', value: cc(escapedChar) }\n    }\n    classPatternCharacterAtom() {\n      switch (this.peekChar()) {\n        // istanbul ignore next\n        case '\\n':\n        // istanbul ignore next\n        case '\\r':\n        // istanbul ignore next\n        case '\\u2028':\n        // istanbul ignore next\n        case '\\u2029':\n        // istanbul ignore next\n        case '\\\\':\n        // istanbul ignore next\n        case ']':\n          throw Error('TBD')\n        default:\n          const nextChar = this.popChar()\n          return { type: 'Character', value: cc(nextChar) }\n      }\n    }\n    characterClass() {\n      const set = []\n      let complement = false\n      this.consumeChar('[')\n      if (this.peekChar(0) === '^') {\n        this.consumeChar('^')\n        complement = true\n      }\n      while (this.isClassAtom()) {\n        const from = this.classAtom()\n        from.type === 'Character'\n        if (isCharacter(from) && this.isRangeDash()) {\n          this.consumeChar('-')\n          const to = this.classAtom()\n          to.type === 'Character'\n          // a range can only be used when both sides are single characters\n          if (isCharacter(to)) {\n            if (to.value < from.value) {\n              throw Error('Range out of order in character class')\n            }\n            set.push({ from: from.value, to: to.value })\n          } else {\n            // literal dash\n            insertToSet(from.value, set)\n            set.push(cc('-'))\n            insertToSet(to.value, set)\n          }\n        } else {\n          insertToSet(from.value, set)\n        }\n      }\n      this.consumeChar(']')\n      return { type: 'Set', complement: complement, value: set }\n    }\n    classAtom() {\n      switch (this.peekChar()) {\n        // istanbul ignore next\n        case ']':\n        // istanbul ignore next\n        case '\\n':\n        // istanbul ignore next\n        case '\\r':\n        // istanbul ignore next\n        case '\\u2028':\n        // istanbul ignore next\n        case '\\u2029':\n          throw Error('TBD')\n        case '\\\\':\n          return this.classEscape()\n        default:\n          return this.classPatternCharacterAtom()\n      }\n    }\n    classEscape() {\n      this.consumeChar('\\\\')\n      switch (this.peekChar()) {\n        // Matches a backspace.\n        // (Not to be confused with \\b word boundary outside characterClass)\n        case 'b':\n          this.consumeChar('b')\n          return { type: 'Character', value: cc('\\u0008') }\n        case 'd':\n        case 'D':\n        case 's':\n        case 'S':\n        case 'w':\n        case 'W':\n          return this.characterClassEscape()\n        case 'f':\n        case 'n':\n        case 'r':\n        case 't':\n        case 'v':\n          return this.controlEscapeAtom()\n        case 'c':\n          return this.controlLetterEscapeAtom()\n        case '0':\n          return this.nulCharacterAtom()\n        case 'x':\n          return this.hexEscapeSequenceAtom()\n        case 'u':\n          return this.regExpUnicodeEscapeSequenceAtom()\n        default:\n          return this.identityEscapeAtom()\n      }\n    }\n    group() {\n      let capturing = true\n      this.consumeChar('(')\n      switch (this.peekChar(0)) {\n        case '?':\n          this.consumeChar('?')\n          this.consumeChar(':')\n          capturing = false\n          break\n        default:\n          this.groupIdx++\n          break\n      }\n      const value = this.disjunction()\n      this.consumeChar(')')\n      const groupAst = {\n        type: 'Group',\n        capturing: capturing,\n        value: value,\n      }\n      if (capturing) {\n        groupAst['idx'] = this.groupIdx\n      }\n      return groupAst\n    }\n    positiveInteger() {\n      let number = this.popChar()\n      // istanbul ignore next - can't ever get here due to previous lookahead checks\n      // still implementing this error checking in case this ever changes.\n      if (decimalPatternNoZero.test(number) === false) {\n        throw Error('Expecting a positive integer')\n      }\n      while (decimalPattern.test(this.peekChar(0))) {\n        number += this.popChar()\n      }\n      return parseInt(number, 10)\n    }\n    integerIncludingZero() {\n      let number = this.popChar()\n      if (decimalPattern.test(number) === false) {\n        throw Error('Expecting an integer')\n      }\n      while (decimalPattern.test(this.peekChar(0))) {\n        number += this.popChar()\n      }\n      return parseInt(number, 10)\n    }\n    patternCharacter() {\n      const nextChar = this.popChar()\n      switch (nextChar) {\n        // istanbul ignore next\n        case '\\n':\n        // istanbul ignore next\n        case '\\r':\n        // istanbul ignore next\n        case '\\u2028':\n        // istanbul ignore next\n        case '\\u2029':\n        // istanbul ignore next\n        case '^':\n        // istanbul ignore next\n        case '$':\n        // istanbul ignore next\n        case '\\\\':\n        // istanbul ignore next\n        case '.':\n        // istanbul ignore next\n        case '*':\n        // istanbul ignore next\n        case '+':\n        // istanbul ignore next\n        case '?':\n        // istanbul ignore next\n        case '(':\n        // istanbul ignore next\n        case ')':\n        // istanbul ignore next\n        case '[':\n        // istanbul ignore next\n        case '|':\n          // istanbul ignore next\n          throw Error('TBD')\n        default:\n          return { type: 'Character', value: cc(nextChar) }\n      }\n    }\n    isRegExpFlag() {\n      switch (this.peekChar(0)) {\n        case 'g':\n        case 'i':\n        case 'm':\n        case 'u':\n        case 'y':\n          return true\n        default:\n          return false\n      }\n    }\n    isRangeDash() {\n      return this.peekChar() === '-' && this.isClassAtom(1)\n    }\n    isDigit() {\n      return decimalPattern.test(this.peekChar(0))\n    }\n    isClassAtom(howMuch = 0) {\n      switch (this.peekChar(howMuch)) {\n        case ']':\n        case '\\n':\n        case '\\r':\n        case '\\u2028':\n        case '\\u2029':\n          return false\n        default:\n          return true\n      }\n    }\n    isTerm() {\n      return this.isAtom() || this.isAssertion()\n    }\n    isAtom() {\n      if (this.isPatternCharacter()) {\n        return true\n      }\n      switch (this.peekChar(0)) {\n        case '.':\n        case '\\\\': // atomEscape\n        case '[': // characterClass\n        // TODO: isAtom must be called before isAssertion - disambiguate\n        case '(': // group\n          return true\n        default:\n          return false\n      }\n    }\n    isAssertion() {\n      switch (this.peekChar(0)) {\n        case '^':\n        case '$':\n          return true\n        // '\\b' or '\\B'\n        case '\\\\':\n          switch (this.peekChar(1)) {\n            case 'b':\n            case 'B':\n              return true\n            default:\n              return false\n          }\n        // '(?=' or '(?!'\n        case '(':\n          return this.peekChar(1) === '?' && (this.peekChar(2) === '=' || this.peekChar(2) === '!')\n        default:\n          return false\n      }\n    }\n    isQuantifier() {\n      const prevState = this.saveState()\n      try {\n        return this.quantifier(true) !== undefined\n      } catch (e) {\n        return false\n      } finally {\n        this.restoreState(prevState)\n      }\n    }\n    isPatternCharacter() {\n      switch (this.peekChar()) {\n        case '^':\n        case '$':\n        case '\\\\':\n        case '.':\n        case '*':\n        case '+':\n        case '?':\n        case '(':\n        case ')':\n        case '[':\n        case '|':\n        case '/':\n        case '\\n':\n        case '\\r':\n        case '\\u2028':\n        case '\\u2029':\n          return false\n        default:\n          return true\n      }\n    }\n    parseHexDigits(howMany) {\n      let hexString = ''\n      for (let i = 0; i < howMany; i++) {\n        const hexChar = this.popChar()\n        if (hexDigitPattern.test(hexChar) === false) {\n          throw Error('Expecting a HexDecimal digits')\n        }\n        hexString += hexChar\n      }\n      const charCode = parseInt(hexString, 16)\n      return { type: 'Character', value: charCode }\n    }\n    peekChar(howMuch = 0) {\n      return this.input[this.idx + howMuch]\n    }\n    popChar() {\n      const nextChar = this.peekChar(0)\n      this.consumeChar(undefined)\n      return nextChar\n    }\n    consumeChar(char) {\n      if (char !== undefined && this.input[this.idx] !== char) {\n        throw Error(\"Expected: '\" + char + \"' but found: '\" + this.input[this.idx] + \"' at offset: \" + this.idx)\n      }\n      if (this.idx >= this.input.length) {\n        throw Error('Unexpected end of input')\n      }\n      this.idx++\n    }\n    loc(begin) {\n      return { begin: begin, end: this.idx }\n    }\n  }\n\n  class BaseRegExpVisitor {\n    visitChildren(node) {\n      for (const key in node) {\n        const child = node[key]\n        /* istanbul ignore else */\n        if (node.hasOwnProperty(key)) {\n          if (child.type !== undefined) {\n            this.visit(child)\n          } else if (Array.isArray(child)) {\n            child.forEach((subChild) => {\n              this.visit(subChild)\n            }, this)\n          }\n        }\n      }\n    }\n    visit(node) {\n      switch (node.type) {\n        case 'Pattern':\n          this.visitPattern(node)\n          break\n        case 'Flags':\n          this.visitFlags(node)\n          break\n        case 'Disjunction':\n          this.visitDisjunction(node)\n          break\n        case 'Alternative':\n          this.visitAlternative(node)\n          break\n        case 'StartAnchor':\n          this.visitStartAnchor(node)\n          break\n        case 'EndAnchor':\n          this.visitEndAnchor(node)\n          break\n        case 'WordBoundary':\n          this.visitWordBoundary(node)\n          break\n        case 'NonWordBoundary':\n          this.visitNonWordBoundary(node)\n          break\n        case 'Lookahead':\n          this.visitLookahead(node)\n          break\n        case 'NegativeLookahead':\n          this.visitNegativeLookahead(node)\n          break\n        case 'Character':\n          this.visitCharacter(node)\n          break\n        case 'Set':\n          this.visitSet(node)\n          break\n        case 'Group':\n          this.visitGroup(node)\n          break\n        case 'GroupBackReference':\n          this.visitGroupBackReference(node)\n          break\n        case 'Quantifier':\n          this.visitQuantifier(node)\n          break\n      }\n      this.visitChildren(node)\n    }\n    visitPattern(node) {}\n    visitFlags(node) {}\n    visitDisjunction(node) {}\n    visitAlternative(node) {}\n    // Assertion\n    visitStartAnchor(node) {}\n    visitEndAnchor(node) {}\n    visitWordBoundary(node) {}\n    visitNonWordBoundary(node) {}\n    visitLookahead(node) {}\n    visitNegativeLookahead(node) {}\n    // atoms\n    visitCharacter(node) {}\n    visitSet(node) {}\n    visitGroup(node) {}\n    visitGroupBackReference(node) {}\n    visitQuantifier(node) {}\n  }\n\n  let regExpAstCache = {}\n  const regExpParser = new RegExpParser()\n  function getRegExpAst(regExp) {\n    const regExpStr = regExp.toString()\n    if (regExpAstCache.hasOwnProperty(regExpStr)) {\n      return regExpAstCache[regExpStr]\n    } else {\n      const regExpAst = regExpParser.pattern(regExpStr)\n      regExpAstCache[regExpStr] = regExpAst\n      return regExpAst\n    }\n  }\n  function clearRegExpParserCache() {\n    regExpAstCache = {}\n  }\n\n  const complementErrorMessage = 'Complement Sets are not supported for first char optimization'\n  const failedOptimizationPrefixMsg = 'Unable to use \"first char\" lexer optimizations:\\n'\n  function getOptimizedStartCodesIndices(regExp, ensureOptimizations = false) {\n    try {\n      const ast = getRegExpAst(regExp)\n      const firstChars = firstCharOptimizedIndices(ast.value, {}, ast.flags.ignoreCase)\n      return firstChars\n    } catch (e) {\n      /* istanbul ignore next */\n      // Testing this relies on the regexp-to-ast library having a bug... */\n      // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n      if (e.message === complementErrorMessage) {\n        if (ensureOptimizations) {\n          PRINT_WARNING(\n            `${failedOptimizationPrefixMsg}` +\n              `\\tUnable to optimize: < ${regExp.toString()} >\\n` +\n              '\\tComplement Sets cannot be automatically optimized.\\n' +\n              \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n              '\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.',\n          )\n        }\n      } else {\n        let msgSuffix = ''\n        if (ensureOptimizations) {\n          msgSuffix =\n            \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" +\n            '\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.'\n        }\n        PRINT_ERROR(\n          `${failedOptimizationPrefixMsg}\\n` +\n            `\\tFailed parsing: < ${regExp.toString()} >\\n` +\n            `\\tUsing the @chevrotain/regexp-to-ast library\\n` +\n            '\\tPlease open an issue at: https://github.com/chevrotain/chevrotain/issues' +\n            msgSuffix,\n        )\n      }\n    }\n    return []\n  }\n  function firstCharOptimizedIndices(ast, result, ignoreCase) {\n    switch (ast.type) {\n      case 'Disjunction':\n        for (let i = 0; i < ast.value.length; i++) {\n          firstCharOptimizedIndices(ast.value[i], result, ignoreCase)\n        }\n        break\n      case 'Alternative':\n        const terms = ast.value\n        for (let i = 0; i < terms.length; i++) {\n          const term = terms[i]\n          // skip terms that cannot effect the first char results\n          switch (term.type) {\n            case 'EndAnchor':\n            // A group back reference cannot affect potential starting char.\n            // because if a back reference is the first production than automatically\n            // the group being referenced has had to come BEFORE so its codes have already been added\n            case 'GroupBackReference':\n            // assertions do not affect potential starting codes\n            case 'Lookahead':\n            case 'NegativeLookahead':\n            case 'StartAnchor':\n            case 'WordBoundary':\n            case 'NonWordBoundary':\n              continue\n          }\n          const atom = term\n          switch (atom.type) {\n            case 'Character':\n              addOptimizedIdxToResult(atom.value, result, ignoreCase)\n              break\n            case 'Set':\n              if (atom.complement === true) {\n                throw Error(complementErrorMessage)\n              }\n              forEach(atom.value, (code) => {\n                if (typeof code === 'number') {\n                  addOptimizedIdxToResult(code, result, ignoreCase)\n                } else {\n                  // range\n                  const range = code\n                  // cannot optimize when ignoreCase is\n                  if (ignoreCase === true) {\n                    for (let rangeCode = range.from; rangeCode <= range.to; rangeCode++) {\n                      addOptimizedIdxToResult(rangeCode, result, ignoreCase)\n                    }\n                  }\n                  // Optimization (2 orders of magnitude less work for very large ranges)\n                  else {\n                    // handle unoptimized values\n                    for (\n                      let rangeCode = range.from;\n                      rangeCode <= range.to && rangeCode < minOptimizationVal;\n                      rangeCode++\n                    ) {\n                      addOptimizedIdxToResult(rangeCode, result, ignoreCase)\n                    }\n                    // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n                    if (range.to >= minOptimizationVal) {\n                      const minUnOptVal = range.from >= minOptimizationVal ? range.from : minOptimizationVal\n                      const maxUnOptVal = range.to\n                      const minOptIdx = charCodeToOptimizedIndex(minUnOptVal)\n                      const maxOptIdx = charCodeToOptimizedIndex(maxUnOptVal)\n                      for (let currOptIdx = minOptIdx; currOptIdx <= maxOptIdx; currOptIdx++) {\n                        result[currOptIdx] = currOptIdx\n                      }\n                    }\n                  }\n                }\n              })\n              break\n            case 'Group':\n              firstCharOptimizedIndices(atom.value, result, ignoreCase)\n              break\n            /* istanbul ignore next */\n            default:\n              throw Error('Non Exhaustive Match')\n          }\n          // reached a mandatory production, no more **start** codes can be found on this alternative\n          const isOptionalQuantifier = atom.quantifier !== undefined && atom.quantifier.atLeast === 0\n          if (\n            // A group may be optional due to empty contents /(?:)/\n            // or if everything inside it is optional /((a)?)/\n            (atom.type === 'Group' && isWholeOptional(atom) === false) ||\n            // If this term is not a group it may only be optional if it has an optional quantifier\n            (atom.type !== 'Group' && isOptionalQuantifier === false)\n          ) {\n            break\n          }\n        }\n        break\n      /* istanbul ignore next */\n      default:\n        throw Error('non exhaustive match!')\n    }\n    // console.log(Object.keys(result).length)\n    return values(result)\n  }\n  function addOptimizedIdxToResult(code, result, ignoreCase) {\n    const optimizedCharIdx = charCodeToOptimizedIndex(code)\n    result[optimizedCharIdx] = optimizedCharIdx\n    if (ignoreCase === true) {\n      handleIgnoreCase(code, result)\n    }\n  }\n  function handleIgnoreCase(code, result) {\n    const char = String.fromCharCode(code)\n    const upperChar = char.toUpperCase()\n    /* istanbul ignore else */\n    if (upperChar !== char) {\n      const optimizedCharIdx = charCodeToOptimizedIndex(upperChar.charCodeAt(0))\n      result[optimizedCharIdx] = optimizedCharIdx\n    } else {\n      const lowerChar = char.toLowerCase()\n      if (lowerChar !== char) {\n        const optimizedCharIdx = charCodeToOptimizedIndex(lowerChar.charCodeAt(0))\n        result[optimizedCharIdx] = optimizedCharIdx\n      }\n    }\n  }\n  function findCode(setNode, targetCharCodes) {\n    return find$1(setNode.value, (codeOrRange) => {\n      if (typeof codeOrRange === 'number') {\n        return includes(targetCharCodes, codeOrRange)\n      } else {\n        // range\n        const range = codeOrRange\n        return find$1(targetCharCodes, (targetCode) => range.from <= targetCode && targetCode <= range.to) !== undefined\n      }\n    })\n  }\n  function isWholeOptional(ast) {\n    const quantifier = ast.quantifier\n    if (quantifier && quantifier.atLeast === 0) {\n      return true\n    }\n    if (!ast.value) {\n      return false\n    }\n    return isArray$1(ast.value) ? every(ast.value, isWholeOptional) : isWholeOptional(ast.value)\n  }\n  class CharCodeFinder extends BaseRegExpVisitor {\n    constructor(targetCharCodes) {\n      super()\n      this.targetCharCodes = targetCharCodes\n      this.found = false\n    }\n    visitChildren(node) {\n      // No need to keep looking...\n      if (this.found === true) {\n        return\n      }\n      // switch lookaheads as they do not actually consume any characters thus\n      // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n      switch (node.type) {\n        case 'Lookahead':\n          this.visitLookahead(node)\n          return\n        case 'NegativeLookahead':\n          this.visitNegativeLookahead(node)\n          return\n      }\n      super.visitChildren(node)\n    }\n    visitCharacter(node) {\n      if (includes(this.targetCharCodes, node.value)) {\n        this.found = true\n      }\n    }\n    visitSet(node) {\n      if (node.complement) {\n        if (findCode(node, this.targetCharCodes) === undefined) {\n          this.found = true\n        }\n      } else {\n        if (findCode(node, this.targetCharCodes) !== undefined) {\n          this.found = true\n        }\n      }\n    }\n  }\n  function canMatchCharCode(charCodes, pattern) {\n    if (pattern instanceof RegExp) {\n      const ast = getRegExpAst(pattern)\n      const charCodeFinder = new CharCodeFinder(charCodes)\n      charCodeFinder.visit(ast)\n      return charCodeFinder.found\n    } else {\n      return (\n        find$1(pattern, (char) => {\n          return includes(charCodes, char.charCodeAt(0))\n        }) !== undefined\n      )\n    }\n  }\n\n  const PATTERN = 'PATTERN'\n  const DEFAULT_MODE = 'defaultMode'\n  const MODES = 'modes'\n  let SUPPORT_STICKY = typeof new RegExp('(?:)').sticky === 'boolean'\n  function analyzeTokenTypes(tokenTypes, options) {\n    options = defaults$1(options, {\n      useSticky: SUPPORT_STICKY,\n      debug: false,\n      safeMode: false,\n      positionTracking: 'full',\n      lineTerminatorCharacters: ['\\r', '\\n'],\n      tracer: (msg, action) => action(),\n    })\n    const tracer = options.tracer\n    tracer('initCharCodeToOptimizedIndexMap', () => {\n      initCharCodeToOptimizedIndexMap()\n    })\n    let onlyRelevantTypes\n    tracer('Reject Lexer.NA', () => {\n      onlyRelevantTypes = reject(tokenTypes, (currType) => {\n        return currType[PATTERN] === Lexer.NA\n      })\n    })\n    let hasCustom = false\n    let allTransformedPatterns\n    tracer('Transform Patterns', () => {\n      hasCustom = false\n      allTransformedPatterns = map(onlyRelevantTypes, (currType) => {\n        const currPattern = currType[PATTERN]\n        /* istanbul ignore else */\n        if (isRegExp$1(currPattern)) {\n          const regExpSource = currPattern.source\n          if (\n            regExpSource.length === 1 &&\n            // only these regExp meta characters which can appear in a length one regExp\n            regExpSource !== '^' &&\n            regExpSource !== '$' &&\n            regExpSource !== '.' &&\n            !currPattern.ignoreCase\n          ) {\n            return regExpSource\n          } else if (\n            regExpSource.length === 2 &&\n            regExpSource[0] === '\\\\' &&\n            // not a meta character\n            !includes(['d', 'D', 's', 'S', 't', 'r', 'n', 't', '0', 'c', 'b', 'B', 'f', 'v', 'w', 'W'], regExpSource[1])\n          ) {\n            // escaped meta Characters: /\\+/ /\\[/\n            // or redundant escaping: /\\a/\n            // without the escaping \"\\\"\n            return regExpSource[1]\n          } else {\n            return options.useSticky ? addStickyFlag(currPattern) : addStartOfInput(currPattern)\n          }\n        } else if (isFunction(currPattern)) {\n          hasCustom = true\n          // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n          return { exec: currPattern }\n        } else if (typeof currPattern === 'object') {\n          hasCustom = true\n          // ICustomPattern\n          return currPattern\n        } else if (typeof currPattern === 'string') {\n          if (currPattern.length === 1) {\n            return currPattern\n          } else {\n            const escapedRegExpString = currPattern.replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n            const wrappedRegExp = new RegExp(escapedRegExpString)\n            return options.useSticky ? addStickyFlag(wrappedRegExp) : addStartOfInput(wrappedRegExp)\n          }\n        } else {\n          throw Error('non exhaustive match')\n        }\n      })\n    })\n    let patternIdxToType\n    let patternIdxToGroup\n    let patternIdxToLongerAltIdxArr\n    let patternIdxToPushMode\n    let patternIdxToPopMode\n    tracer('misc mapping', () => {\n      patternIdxToType = map(onlyRelevantTypes, (currType) => currType.tokenTypeIdx)\n      patternIdxToGroup = map(onlyRelevantTypes, (clazz) => {\n        const groupName = clazz.GROUP\n        /* istanbul ignore next */\n        if (groupName === Lexer.SKIPPED) {\n          return undefined\n        } else if (isString(groupName)) {\n          return groupName\n        } else if (isUndefined(groupName)) {\n          return false\n        } else {\n          throw Error('non exhaustive match')\n        }\n      })\n      patternIdxToLongerAltIdxArr = map(onlyRelevantTypes, (clazz) => {\n        const longerAltType = clazz.LONGER_ALT\n        if (longerAltType) {\n          const longerAltIdxArr = isArray$1(longerAltType)\n            ? map(longerAltType, (type) => indexOf(onlyRelevantTypes, type))\n            : [indexOf(onlyRelevantTypes, longerAltType)]\n          return longerAltIdxArr\n        }\n      })\n      patternIdxToPushMode = map(onlyRelevantTypes, (clazz) => clazz.PUSH_MODE)\n      patternIdxToPopMode = map(onlyRelevantTypes, (clazz) => has(clazz, 'POP_MODE'))\n    })\n    let patternIdxToCanLineTerminator\n    tracer('Line Terminator Handling', () => {\n      const lineTerminatorCharCodes = getCharCodes(options.lineTerminatorCharacters)\n      patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => false)\n      if (options.positionTracking !== 'onlyOffset') {\n        patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => {\n          if (has(tokType, 'LINE_BREAKS')) {\n            return !!tokType.LINE_BREAKS\n          } else {\n            return (\n              checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false &&\n              canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN)\n            )\n          }\n        })\n      }\n    })\n    let patternIdxToIsCustom\n    let patternIdxToShort\n    let emptyGroups\n    let patternIdxToConfig\n    tracer('Misc Mapping #2', () => {\n      patternIdxToIsCustom = map(onlyRelevantTypes, isCustomPattern)\n      patternIdxToShort = map(allTransformedPatterns, isShortPattern)\n      emptyGroups = reduce(\n        onlyRelevantTypes,\n        (acc, clazz) => {\n          const groupName = clazz.GROUP\n          if (isString(groupName) && !(groupName === Lexer.SKIPPED)) {\n            acc[groupName] = []\n          }\n          return acc\n        },\n        {},\n      )\n      patternIdxToConfig = map(allTransformedPatterns, (x, idx) => {\n        return {\n          pattern: allTransformedPatterns[idx],\n          longerAlt: patternIdxToLongerAltIdxArr[idx],\n          canLineTerminator: patternIdxToCanLineTerminator[idx],\n          isCustom: patternIdxToIsCustom[idx],\n          short: patternIdxToShort[idx],\n          group: patternIdxToGroup[idx],\n          push: patternIdxToPushMode[idx],\n          pop: patternIdxToPopMode[idx],\n          tokenTypeIdx: patternIdxToType[idx],\n          tokenType: onlyRelevantTypes[idx],\n        }\n      })\n    })\n    let canBeOptimized = true\n    let charCodeToPatternIdxToConfig = []\n    if (!options.safeMode) {\n      tracer('First Char Optimization', () => {\n        charCodeToPatternIdxToConfig = reduce(\n          onlyRelevantTypes,\n          (result, currTokType, idx) => {\n            if (typeof currTokType.PATTERN === 'string') {\n              const charCode = currTokType.PATTERN.charCodeAt(0)\n              const optimizedIdx = charCodeToOptimizedIndex(charCode)\n              addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx])\n            } else if (isArray$1(currTokType.START_CHARS_HINT)) {\n              let lastOptimizedIdx\n              forEach(currTokType.START_CHARS_HINT, (charOrInt) => {\n                const charCode = typeof charOrInt === 'string' ? charOrInt.charCodeAt(0) : charOrInt\n                const currOptimizedIdx = charCodeToOptimizedIndex(charCode)\n                // Avoid adding the config multiple times\n                /* istanbul ignore else */\n                // - Difficult to check this scenario effects as it is only a performance\n                //   optimization that does not change correctness\n                if (lastOptimizedIdx !== currOptimizedIdx) {\n                  lastOptimizedIdx = currOptimizedIdx\n                  addToMapOfArrays(result, currOptimizedIdx, patternIdxToConfig[idx])\n                }\n              })\n            } else if (isRegExp$1(currTokType.PATTERN)) {\n              if (currTokType.PATTERN.unicode) {\n                canBeOptimized = false\n                if (options.ensureOptimizations) {\n                  PRINT_ERROR(\n                    `${failedOptimizationPrefixMsg}` +\n                      `\\tUnable to analyze < ${currTokType.PATTERN.toString()} > pattern.\\n` +\n                      '\\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n' +\n                      \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                      '\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE',\n                  )\n                }\n              } else {\n                const optimizedCodes = getOptimizedStartCodesIndices(currTokType.PATTERN, options.ensureOptimizations)\n                /* istanbul ignore if */\n                // start code will only be empty given an empty regExp or failure of regexp-to-ast library\n                // the first should be a different validation and the second cannot be tested.\n                if (isEmpty(optimizedCodes)) {\n                  // we cannot understand what codes may start possible matches\n                  // The optimization correctness requires knowing start codes for ALL patterns.\n                  // Not actually sure this is an error, no debug message\n                  canBeOptimized = false\n                }\n                forEach(optimizedCodes, (code) => {\n                  addToMapOfArrays(result, code, patternIdxToConfig[idx])\n                })\n              }\n            } else {\n              if (options.ensureOptimizations) {\n                PRINT_ERROR(\n                  `${failedOptimizationPrefixMsg}` +\n                    `\\tTokenType: <${currTokType.name}> is using a custom token pattern without providing <start_chars_hint> parameter.\\n` +\n                    \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                    '\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE',\n                )\n              }\n              canBeOptimized = false\n            }\n            return result\n          },\n          [],\n        )\n      })\n    }\n    return {\n      emptyGroups: emptyGroups,\n      patternIdxToConfig: patternIdxToConfig,\n      charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,\n      hasCustom: hasCustom,\n      canBeOptimized: canBeOptimized,\n    }\n  }\n  function validatePatterns(tokenTypes, validModesNames) {\n    let errors = []\n    const missingResult = findMissingPatterns(tokenTypes)\n    errors = errors.concat(missingResult.errors)\n    const invalidResult = findInvalidPatterns(missingResult.valid)\n    const validTokenTypes = invalidResult.valid\n    errors = errors.concat(invalidResult.errors)\n    errors = errors.concat(validateRegExpPattern(validTokenTypes))\n    errors = errors.concat(findInvalidGroupType(validTokenTypes))\n    errors = errors.concat(findModesThatDoNotExist(validTokenTypes, validModesNames))\n    errors = errors.concat(findUnreachablePatterns(validTokenTypes))\n    return errors\n  }\n  function validateRegExpPattern(tokenTypes) {\n    let errors = []\n    const withRegExpPatterns = filter(tokenTypes, (currTokType) => isRegExp$1(currTokType[PATTERN]))\n    errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns))\n    errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns))\n    errors = errors.concat(findUnsupportedFlags(withRegExpPatterns))\n    errors = errors.concat(findDuplicatePatterns(withRegExpPatterns))\n    errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns))\n    return errors\n  }\n  function findMissingPatterns(tokenTypes) {\n    const tokenTypesWithMissingPattern = filter(tokenTypes, (currType) => {\n      return !has(currType, PATTERN)\n    })\n    const errors = map(tokenTypesWithMissingPattern, (currType) => {\n      return {\n        message: 'Token Type: ->' + currType.name + \"<- missing static 'PATTERN' property\",\n        type: LexerDefinitionErrorType.MISSING_PATTERN,\n        tokenTypes: [currType],\n      }\n    })\n    const valid = difference$1(tokenTypes, tokenTypesWithMissingPattern)\n    return { errors, valid }\n  }\n  function findInvalidPatterns(tokenTypes) {\n    const tokenTypesWithInvalidPattern = filter(tokenTypes, (currType) => {\n      const pattern = currType[PATTERN]\n      return !isRegExp$1(pattern) && !isFunction(pattern) && !has(pattern, 'exec') && !isString(pattern)\n    })\n    const errors = map(tokenTypesWithInvalidPattern, (currType) => {\n      return {\n        message:\n          'Token Type: ->' +\n          currType.name +\n          \"<- static 'PATTERN' can only be a RegExp, a\" +\n          ' Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.',\n        type: LexerDefinitionErrorType.INVALID_PATTERN,\n        tokenTypes: [currType],\n      }\n    })\n    const valid = difference$1(tokenTypes, tokenTypesWithInvalidPattern)\n    return { errors, valid }\n  }\n  const end_of_input = /[^\\\\][$]/\n  function findEndOfInputAnchor(tokenTypes) {\n    class EndAnchorFinder extends BaseRegExpVisitor {\n      constructor() {\n        super(...arguments)\n        this.found = false\n      }\n      visitEndAnchor(node) {\n        this.found = true\n      }\n    }\n    const invalidRegex = filter(tokenTypes, (currType) => {\n      const pattern = currType.PATTERN\n      try {\n        const regexpAst = getRegExpAst(pattern)\n        const endAnchorVisitor = new EndAnchorFinder()\n        endAnchorVisitor.visit(regexpAst)\n        return endAnchorVisitor.found\n      } catch (e) {\n        // old behavior in case of runtime exceptions with regexp-to-ast.\n        /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n        return end_of_input.test(pattern.source)\n      }\n    })\n    const errors = map(invalidRegex, (currType) => {\n      return {\n        message:\n          'Unexpected RegExp Anchor Error:\\n' +\n          '\\tToken Type: ->' +\n          currType.name +\n          \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\" +\n          '\\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS' +\n          '\\tfor details.',\n        type: LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n        tokenTypes: [currType],\n      }\n    })\n    return errors\n  }\n  function findEmptyMatchRegExps(tokenTypes) {\n    const matchesEmptyString = filter(tokenTypes, (currType) => {\n      const pattern = currType.PATTERN\n      return pattern.test('')\n    })\n    const errors = map(matchesEmptyString, (currType) => {\n      return {\n        message: 'Token Type: ->' + currType.name + \"<- static 'PATTERN' must not match an empty string\",\n        type: LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n        tokenTypes: [currType],\n      }\n    })\n    return errors\n  }\n  const start_of_input = /[^\\\\[][\\^]|^\\^/\n  function findStartOfInputAnchor(tokenTypes) {\n    class StartAnchorFinder extends BaseRegExpVisitor {\n      constructor() {\n        super(...arguments)\n        this.found = false\n      }\n      visitStartAnchor(node) {\n        this.found = true\n      }\n    }\n    const invalidRegex = filter(tokenTypes, (currType) => {\n      const pattern = currType.PATTERN\n      try {\n        const regexpAst = getRegExpAst(pattern)\n        const startAnchorVisitor = new StartAnchorFinder()\n        startAnchorVisitor.visit(regexpAst)\n        return startAnchorVisitor.found\n      } catch (e) {\n        // old behavior in case of runtime exceptions with regexp-to-ast.\n        /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n        return start_of_input.test(pattern.source)\n      }\n    })\n    const errors = map(invalidRegex, (currType) => {\n      return {\n        message:\n          'Unexpected RegExp Anchor Error:\\n' +\n          '\\tToken Type: ->' +\n          currType.name +\n          \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\" +\n          '\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS' +\n          '\\tfor details.',\n        type: LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n        tokenTypes: [currType],\n      }\n    })\n    return errors\n  }\n  function findUnsupportedFlags(tokenTypes) {\n    const invalidFlags = filter(tokenTypes, (currType) => {\n      const pattern = currType[PATTERN]\n      return pattern instanceof RegExp && (pattern.multiline || pattern.global)\n    })\n    const errors = map(invalidFlags, (currType) => {\n      return {\n        message: 'Token Type: ->' + currType.name + \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n        type: LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n        tokenTypes: [currType],\n      }\n    })\n    return errors\n  }\n  // This can only test for identical duplicate RegExps, not semantically equivalent ones.\n  function findDuplicatePatterns(tokenTypes) {\n    const found = []\n    let identicalPatterns = map(tokenTypes, (outerType) => {\n      return reduce(\n        tokenTypes,\n        (result, innerType) => {\n          if (\n            outerType.PATTERN.source === innerType.PATTERN.source &&\n            !includes(found, innerType) &&\n            innerType.PATTERN !== Lexer.NA\n          ) {\n            // this avoids duplicates in the result, each Token Type may only appear in one \"set\"\n            // in essence we are creating Equivalence classes on equality relation.\n            found.push(innerType)\n            result.push(innerType)\n            return result\n          }\n          return result\n        },\n        [],\n      )\n    })\n    identicalPatterns = compact(identicalPatterns)\n    const duplicatePatterns = filter(identicalPatterns, (currIdenticalSet) => {\n      return currIdenticalSet.length > 1\n    })\n    const errors = map(duplicatePatterns, (setOfIdentical) => {\n      const tokenTypeNames = map(setOfIdentical, (currType) => {\n        return currType.name\n      })\n      const dupPatternSrc = head(setOfIdentical).PATTERN\n      return {\n        message:\n          `The same RegExp pattern ->${dupPatternSrc}<-` +\n          `has been used in all of the following Token Types: ${tokenTypeNames.join(', ')} <-`,\n        type: LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n        tokenTypes: setOfIdentical,\n      }\n    })\n    return errors\n  }\n  function findInvalidGroupType(tokenTypes) {\n    const invalidTypes = filter(tokenTypes, (clazz) => {\n      if (!has(clazz, 'GROUP')) {\n        return false\n      }\n      const group = clazz.GROUP\n      return group !== Lexer.SKIPPED && group !== Lexer.NA && !isString(group)\n    })\n    const errors = map(invalidTypes, (currType) => {\n      return {\n        message: 'Token Type: ->' + currType.name + \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n        type: LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n        tokenTypes: [currType],\n      }\n    })\n    return errors\n  }\n  function findModesThatDoNotExist(tokenTypes, validModes) {\n    const invalidModes = filter(tokenTypes, (clazz) => {\n      return clazz.PUSH_MODE !== undefined && !includes(validModes, clazz.PUSH_MODE)\n    })\n    const errors = map(invalidModes, (tokType) => {\n      const msg =\n        `Token Type: ->${tokType.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${tokType.PUSH_MODE}<-` +\n        `which does not exist`\n      return {\n        message: msg,\n        type: LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n        tokenTypes: [tokType],\n      }\n    })\n    return errors\n  }\n  function findUnreachablePatterns(tokenTypes) {\n    const errors = []\n    const canBeTested = reduce(\n      tokenTypes,\n      (result, tokType, idx) => {\n        const pattern = tokType.PATTERN\n        if (pattern === Lexer.NA) {\n          return result\n        }\n        // a more comprehensive validation for all forms of regExps would require\n        // deeper regExp analysis capabilities\n        if (isString(pattern)) {\n          result.push({ str: pattern, idx, tokenType: tokType })\n        } else if (isRegExp$1(pattern) && noMetaChar(pattern)) {\n          result.push({ str: pattern.source, idx, tokenType: tokType })\n        }\n        return result\n      },\n      [],\n    )\n    forEach(tokenTypes, (tokType, testIdx) => {\n      forEach(canBeTested, ({ str, idx, tokenType }) => {\n        if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n          const msg =\n            `Token: ->${tokenType.name}<- can never be matched.\\n` +\n            `Because it appears AFTER the Token Type ->${tokType.name}<-` +\n            `in the lexer's definition.\\n` +\n            `See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`\n          errors.push({\n            message: msg,\n            type: LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n            tokenTypes: [tokType, tokenType],\n          })\n        }\n      })\n    })\n    return errors\n  }\n  function testTokenType(str, pattern) {\n    /* istanbul ignore else */\n    if (isRegExp$1(pattern)) {\n      const regExpArray = pattern.exec(str)\n      return regExpArray !== null && regExpArray.index === 0\n    } else if (isFunction(pattern)) {\n      // maintain the API of custom patterns\n      return pattern(str, 0, [], {})\n    } else if (has(pattern, 'exec')) {\n      // maintain the API of custom patterns\n      return pattern.exec(str, 0, [], {})\n    } else if (typeof pattern === 'string') {\n      return pattern === str\n    } else {\n      throw Error('non exhaustive match')\n    }\n  }\n  function noMetaChar(regExp) {\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n    const metaChars = ['.', '\\\\', '[', ']', '|', '^', '$', '(', ')', '?', '*', '+', '{']\n    return find$1(metaChars, (char) => regExp.source.indexOf(char) !== -1) === undefined\n  }\n  function addStartOfInput(pattern) {\n    const flags = pattern.ignoreCase ? 'i' : ''\n    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n    return new RegExp(`^(?:${pattern.source})`, flags)\n  }\n  function addStickyFlag(pattern) {\n    const flags = pattern.ignoreCase ? 'iy' : 'y'\n    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n    return new RegExp(`${pattern.source}`, flags)\n  }\n  function performRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n    const errors = []\n    // some run time checks to help the end users.\n    if (!has(lexerDefinition, DEFAULT_MODE)) {\n      errors.push({\n        message:\n          'A MultiMode Lexer cannot be initialized without a <' + DEFAULT_MODE + '> property in its definition\\n',\n        type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n      })\n    }\n    if (!has(lexerDefinition, MODES)) {\n      errors.push({\n        message: 'A MultiMode Lexer cannot be initialized without a <' + MODES + '> property in its definition\\n',\n        type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n      })\n    }\n    if (\n      has(lexerDefinition, MODES) &&\n      has(lexerDefinition, DEFAULT_MODE) &&\n      !has(lexerDefinition.modes, lexerDefinition.defaultMode)\n    ) {\n      errors.push({\n        message:\n          `A MultiMode Lexer cannot be initialized with a ${DEFAULT_MODE}: <${lexerDefinition.defaultMode}>` +\n          `which does not exist\\n`,\n        type: LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n      })\n    }\n    if (has(lexerDefinition, MODES)) {\n      forEach(lexerDefinition.modes, (currModeValue, currModeName) => {\n        forEach(currModeValue, (currTokType, currIdx) => {\n          if (isUndefined(currTokType)) {\n            errors.push({\n              message:\n                `A Lexer cannot be initialized using an undefined Token Type. Mode:` +\n                `<${currModeName}> at index: <${currIdx}>\\n`,\n              type: LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n            })\n          } else if (has(currTokType, 'LONGER_ALT')) {\n            const longerAlt = isArray$1(currTokType.LONGER_ALT) ? currTokType.LONGER_ALT : [currTokType.LONGER_ALT]\n            forEach(longerAlt, (currLongerAlt) => {\n              if (!isUndefined(currLongerAlt) && !includes(currModeValue, currLongerAlt)) {\n                errors.push({\n                  message: `A MultiMode Lexer cannot be initialized with a longer_alt <${currLongerAlt.name}> on token <${currTokType.name}> outside of mode <${currModeName}>\\n`,\n                  type: LexerDefinitionErrorType.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n                })\n              }\n            })\n          }\n        })\n      })\n    }\n    return errors\n  }\n  function performWarningRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n    const warnings = []\n    let hasAnyLineBreak = false\n    const allTokenTypes = compact(flatten(values(lexerDefinition.modes)))\n    const concreteTokenTypes = reject(allTokenTypes, (currType) => currType[PATTERN] === Lexer.NA)\n    const terminatorCharCodes = getCharCodes(lineTerminatorCharacters)\n    if (trackLines) {\n      forEach(concreteTokenTypes, (tokType) => {\n        const currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes)\n        if (currIssue !== false) {\n          const message = buildLineBreakIssueMessage(tokType, currIssue)\n          const warningDescriptor = {\n            message,\n            type: currIssue.issue,\n            tokenType: tokType,\n          }\n          warnings.push(warningDescriptor)\n        } else {\n          // we don't want to attempt to scan if the user explicitly specified the line_breaks option.\n          if (has(tokType, 'LINE_BREAKS')) {\n            if (tokType.LINE_BREAKS === true) {\n              hasAnyLineBreak = true\n            }\n          } else {\n            if (canMatchCharCode(terminatorCharCodes, tokType.PATTERN)) {\n              hasAnyLineBreak = true\n            }\n          }\n        }\n      })\n    }\n    if (trackLines && !hasAnyLineBreak) {\n      warnings.push({\n        message:\n          'Warning: No LINE_BREAKS Found.\\n' +\n          '\\tThis Lexer has been defined to track line and column information,\\n' +\n          '\\tBut none of the Token Types can be identified as matching a line terminator.\\n' +\n          '\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n' +\n          '\\tfor details.',\n        type: LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS,\n      })\n    }\n    return warnings\n  }\n  function cloneEmptyGroups(emptyGroups) {\n    const clonedResult = {}\n    const groupKeys = keys(emptyGroups)\n    forEach(groupKeys, (currKey) => {\n      const currGroupValue = emptyGroups[currKey]\n      /* istanbul ignore else */\n      if (isArray$1(currGroupValue)) {\n        clonedResult[currKey] = []\n      } else {\n        throw Error('non exhaustive match')\n      }\n    })\n    return clonedResult\n  }\n  // TODO: refactor to avoid duplication\n  function isCustomPattern(tokenType) {\n    const pattern = tokenType.PATTERN\n    /* istanbul ignore else */\n    if (isRegExp$1(pattern)) {\n      return false\n    } else if (isFunction(pattern)) {\n      // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n      return true\n    } else if (has(pattern, 'exec')) {\n      // ICustomPattern\n      return true\n    } else if (isString(pattern)) {\n      return false\n    } else {\n      throw Error('non exhaustive match')\n    }\n  }\n  function isShortPattern(pattern) {\n    if (isString(pattern) && pattern.length === 1) {\n      return pattern.charCodeAt(0)\n    } else {\n      return false\n    }\n  }\n  /**\n   * Faster than using a RegExp for default newline detection during lexing.\n   */\n  const LineTerminatorOptimizedTester = {\n    // implements /\\n|\\r\\n?/g.test\n    test: function (text) {\n      const len = text.length\n      for (let i = this.lastIndex; i < len; i++) {\n        const c = text.charCodeAt(i)\n        if (c === 10) {\n          this.lastIndex = i + 1\n          return true\n        } else if (c === 13) {\n          if (text.charCodeAt(i + 1) === 10) {\n            this.lastIndex = i + 2\n          } else {\n            this.lastIndex = i + 1\n          }\n          return true\n        }\n      }\n      return false\n    },\n    lastIndex: 0,\n  }\n  function checkLineBreaksIssues(tokType, lineTerminatorCharCodes) {\n    if (has(tokType, 'LINE_BREAKS')) {\n      // if the user explicitly declared the line_breaks option we will respect their choice\n      // and assume it is correct.\n      return false\n    } else {\n      /* istanbul ignore else */\n      if (isRegExp$1(tokType.PATTERN)) {\n        try {\n          // TODO: why is the casting suddenly needed?\n          canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN)\n        } catch (e) {\n          /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */\n          return {\n            issue: LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n            errMsg: e.message,\n          }\n        }\n        return false\n      } else if (isString(tokType.PATTERN)) {\n        // string literal patterns can always be analyzed to detect line terminator usage\n        return false\n      } else if (isCustomPattern(tokType)) {\n        // custom token types\n        return { issue: LexerDefinitionErrorType.CUSTOM_LINE_BREAK }\n      } else {\n        throw Error('non exhaustive match')\n      }\n    }\n  }\n  function buildLineBreakIssueMessage(tokType, details) {\n    /* istanbul ignore else */\n    if (details.issue === LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n      return (\n        'Warning: unable to identify line terminator usage in pattern.\\n' +\n        `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n        `\\t Root cause: ${details.errMsg}.\\n` +\n        '\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR'\n      )\n    } else if (details.issue === LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n      return (\n        'Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n' +\n        `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n        '\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK'\n      )\n    } else {\n      throw Error('non exhaustive match')\n    }\n  }\n  function getCharCodes(charsOrCodes) {\n    const charCodes = map(charsOrCodes, (numOrString) => {\n      if (isString(numOrString)) {\n        return numOrString.charCodeAt(0)\n      } else {\n        return numOrString\n      }\n    })\n    return charCodes\n  }\n  function addToMapOfArrays(map, key, value) {\n    if (map[key] === undefined) {\n      map[key] = [value]\n    } else {\n      map[key].push(value)\n    }\n  }\n  const minOptimizationVal = 256\n  /**\n   * We are mapping charCode above ASCI (256) into buckets each in the size of 256.\n   * This is because ASCI are the most common start chars so each one of those will get its own\n   * possible token configs vector.\n   *\n   * Tokens starting with charCodes \"above\" ASCI are uncommon, so we can \"afford\"\n   * to place these into buckets of possible token configs, What we gain from\n   * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'\n   * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).\n   * Our 'charCodeToPatternIdxToConfig' max size will now be:\n   * 256 + (2^16 / 2^8) - 1 === 511\n   *\n   * note the hack for fast division integer part extraction\n   * See: https://stackoverflow.com/a/4228528\n   */\n  let charCodeToOptimizedIdxMap = []\n  function charCodeToOptimizedIndex(charCode) {\n    return charCode < minOptimizationVal ? charCode : charCodeToOptimizedIdxMap[charCode]\n  }\n  /**\n   * This is a compromise between cold start / hot running performance\n   * Creating this array takes ~3ms on a modern machine,\n   * But if we perform the computation at runtime as needed the CSS Lexer benchmark\n   * performance degrades by ~10%\n   *\n   * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.\n   */\n  function initCharCodeToOptimizedIndexMap() {\n    if (isEmpty(charCodeToOptimizedIdxMap)) {\n      charCodeToOptimizedIdxMap = new Array(65536)\n      for (let i = 0; i < 65536; i++) {\n        charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i\n      }\n    }\n  }\n\n  function tokenStructuredMatcher(tokInstance, tokConstructor) {\n    const instanceType = tokInstance.tokenTypeIdx\n    if (instanceType === tokConstructor.tokenTypeIdx) {\n      return true\n    } else {\n      return tokConstructor.isParent === true && tokConstructor.categoryMatchesMap[instanceType] === true\n    }\n  }\n  // Optimized tokenMatcher in case our grammar does not use token categories\n  // Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\n  function tokenStructuredMatcherNoCategories(token, tokType) {\n    return token.tokenTypeIdx === tokType.tokenTypeIdx\n  }\n  let tokenShortNameIdx = 1\n  const tokenIdxToClass = {}\n  function augmentTokenTypes(tokenTypes) {\n    // collect the parent Token Types as well.\n    const tokenTypesAndParents = expandCategories(tokenTypes)\n    // add required tokenType and categoryMatches properties\n    assignTokenDefaultProps(tokenTypesAndParents)\n    // fill up the categoryMatches\n    assignCategoriesMapProp(tokenTypesAndParents)\n    assignCategoriesTokensProp(tokenTypesAndParents)\n    forEach(tokenTypesAndParents, (tokType) => {\n      tokType.isParent = tokType.categoryMatches.length > 0\n    })\n  }\n  function expandCategories(tokenTypes) {\n    let result = clone(tokenTypes)\n    let categories = tokenTypes\n    let searching = true\n    while (searching) {\n      categories = compact(flatten(map(categories, (currTokType) => currTokType.CATEGORIES)))\n      const newCategories = difference$1(categories, result)\n      result = result.concat(newCategories)\n      if (isEmpty(newCategories)) {\n        searching = false\n      } else {\n        categories = newCategories\n      }\n    }\n    return result\n  }\n  function assignTokenDefaultProps(tokenTypes) {\n    forEach(tokenTypes, (currTokType) => {\n      if (!hasShortKeyProperty(currTokType)) {\n        tokenIdxToClass[tokenShortNameIdx] = currTokType\n        currTokType.tokenTypeIdx = tokenShortNameIdx++\n      }\n      // CATEGORIES? : TokenType | TokenType[]\n      if (\n        hasCategoriesProperty(currTokType) &&\n        !isArray$1(currTokType.CATEGORIES)\n        // &&\n        // !isUndefined(currTokType.CATEGORIES.PATTERN)\n      ) {\n        currTokType.CATEGORIES = [currTokType.CATEGORIES]\n      }\n      if (!hasCategoriesProperty(currTokType)) {\n        currTokType.CATEGORIES = []\n      }\n      if (!hasExtendingTokensTypesProperty(currTokType)) {\n        currTokType.categoryMatches = []\n      }\n      if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n        currTokType.categoryMatchesMap = {}\n      }\n    })\n  }\n  function assignCategoriesTokensProp(tokenTypes) {\n    forEach(tokenTypes, (currTokType) => {\n      // avoid duplications\n      currTokType.categoryMatches = []\n      forEach(currTokType.categoryMatchesMap, (val, key) => {\n        currTokType.categoryMatches.push(tokenIdxToClass[key].tokenTypeIdx)\n      })\n    })\n  }\n  function assignCategoriesMapProp(tokenTypes) {\n    forEach(tokenTypes, (currTokType) => {\n      singleAssignCategoriesToksMap([], currTokType)\n    })\n  }\n  function singleAssignCategoriesToksMap(path, nextNode) {\n    forEach(path, (pathNode) => {\n      nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true\n    })\n    forEach(nextNode.CATEGORIES, (nextCategory) => {\n      const newPath = path.concat(nextNode)\n      // avoids infinite loops due to cyclic categories.\n      if (!includes(newPath, nextCategory)) {\n        singleAssignCategoriesToksMap(newPath, nextCategory)\n      }\n    })\n  }\n  function hasShortKeyProperty(tokType) {\n    return has(tokType, 'tokenTypeIdx')\n  }\n  function hasCategoriesProperty(tokType) {\n    return has(tokType, 'CATEGORIES')\n  }\n  function hasExtendingTokensTypesProperty(tokType) {\n    return has(tokType, 'categoryMatches')\n  }\n  function hasExtendingTokensTypesMapProperty(tokType) {\n    return has(tokType, 'categoryMatchesMap')\n  }\n  function isTokenType(tokType) {\n    return has(tokType, 'tokenTypeIdx')\n  }\n\n  const defaultLexerErrorProvider = {\n    buildUnableToPopLexerModeMessage(token) {\n      return `Unable to pop Lexer Mode after encountering Token ->${token.image}<- The Mode Stack is empty`\n    },\n    buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column) {\n      return (\n        `unexpected character: ->${fullText.charAt(startOffset)}<- at offset: ${startOffset},` +\n        ` skipped ${length} characters.`\n      )\n    },\n  }\n\n  var LexerDefinitionErrorType\n  ;(function (LexerDefinitionErrorType) {\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['MISSING_PATTERN'] = 0)] = 'MISSING_PATTERN'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['INVALID_PATTERN'] = 1)] = 'INVALID_PATTERN'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['EOI_ANCHOR_FOUND'] = 2)] = 'EOI_ANCHOR_FOUND'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['UNSUPPORTED_FLAGS_FOUND'] = 3)] = 'UNSUPPORTED_FLAGS_FOUND'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['DUPLICATE_PATTERNS_FOUND'] = 4)] = 'DUPLICATE_PATTERNS_FOUND'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['INVALID_GROUP_TYPE_FOUND'] = 5)] = 'INVALID_GROUP_TYPE_FOUND'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['PUSH_MODE_DOES_NOT_EXIST'] = 6)] = 'PUSH_MODE_DOES_NOT_EXIST'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE'] = 7)] =\n      'MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY'] = 8)] =\n      'MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST'] = 9)] =\n      'MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED'] = 10)] =\n      'LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['SOI_ANCHOR_FOUND'] = 11)] = 'SOI_ANCHOR_FOUND'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['EMPTY_MATCH_PATTERN'] = 12)] = 'EMPTY_MATCH_PATTERN'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['NO_LINE_BREAKS_FLAGS'] = 13)] = 'NO_LINE_BREAKS_FLAGS'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['UNREACHABLE_PATTERN'] = 14)] = 'UNREACHABLE_PATTERN'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['IDENTIFY_TERMINATOR'] = 15)] = 'IDENTIFY_TERMINATOR'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['CUSTOM_LINE_BREAK'] = 16)] = 'CUSTOM_LINE_BREAK'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE'] = 17)] =\n      'MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE'\n  })(LexerDefinitionErrorType || (LexerDefinitionErrorType = {}))\n  const DEFAULT_LEXER_CONFIG = {\n    deferDefinitionErrorsHandling: false,\n    positionTracking: 'full',\n    lineTerminatorsPattern: /\\n|\\r\\n?/g,\n    lineTerminatorCharacters: ['\\n', '\\r'],\n    ensureOptimizations: false,\n    safeMode: false,\n    errorMessageProvider: defaultLexerErrorProvider,\n    traceInitPerf: false,\n    skipValidations: false,\n    recoveryEnabled: true,\n  }\n  Object.freeze(DEFAULT_LEXER_CONFIG)\n  class Lexer {\n    constructor(lexerDefinition, config = DEFAULT_LEXER_CONFIG) {\n      this.lexerDefinition = lexerDefinition\n      this.lexerDefinitionErrors = []\n      this.lexerDefinitionWarning = []\n      this.patternIdxToConfig = {}\n      this.charCodeToPatternIdxToConfig = {}\n      this.modes = []\n      this.emptyGroups = {}\n      this.trackStartLines = true\n      this.trackEndLines = true\n      this.hasCustom = false\n      this.canModeBeOptimized = {}\n      // Duplicated from the parser's perf trace trait to allow future extraction\n      // of the lexer to a separate package.\n      this.TRACE_INIT = (phaseDesc, phaseImpl) => {\n        // No need to optimize this using NOOP pattern because\n        // It is not called in a hot spot...\n        if (this.traceInitPerf === true) {\n          this.traceInitIndent++\n          const indent = new Array(this.traceInitIndent + 1).join('\\t')\n          if (this.traceInitIndent < this.traceInitMaxIdent) {\n            console.log(`${indent}--> <${phaseDesc}>`)\n          }\n          const { time, value } = timer(phaseImpl)\n          /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n          const traceMethod = time > 10 ? console.warn : console.log\n          if (this.traceInitIndent < this.traceInitMaxIdent) {\n            traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`)\n          }\n          this.traceInitIndent--\n          return value\n        } else {\n          return phaseImpl()\n        }\n      }\n      if (typeof config === 'boolean') {\n        throw Error(\n          'The second argument to the Lexer constructor is now an ILexerConfig Object.\\n' +\n            'a boolean 2nd argument is no longer supported',\n        )\n      }\n      // todo: defaults func?\n      this.config = assign$1({}, DEFAULT_LEXER_CONFIG, config)\n      const traceInitVal = this.config.traceInitPerf\n      if (traceInitVal === true) {\n        this.traceInitMaxIdent = Infinity\n        this.traceInitPerf = true\n      } else if (typeof traceInitVal === 'number') {\n        this.traceInitMaxIdent = traceInitVal\n        this.traceInitPerf = true\n      }\n      this.traceInitIndent = -1\n      this.TRACE_INIT('Lexer Constructor', () => {\n        let actualDefinition\n        let hasOnlySingleMode = true\n        this.TRACE_INIT('Lexer Config handling', () => {\n          if (this.config.lineTerminatorsPattern === DEFAULT_LEXER_CONFIG.lineTerminatorsPattern) {\n            // optimized built-in implementation for the defaults definition of lineTerminators\n            this.config.lineTerminatorsPattern = LineTerminatorOptimizedTester\n          } else {\n            if (this.config.lineTerminatorCharacters === DEFAULT_LEXER_CONFIG.lineTerminatorCharacters) {\n              throw Error(\n                'Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n' +\n                  '\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS',\n              )\n            }\n          }\n          if (config.safeMode && config.ensureOptimizations) {\n            throw Error('\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.')\n          }\n          this.trackStartLines = /full|onlyStart/i.test(this.config.positionTracking)\n          this.trackEndLines = /full/i.test(this.config.positionTracking)\n          // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n          if (isArray$1(lexerDefinition)) {\n            actualDefinition = {\n              modes: { defaultMode: clone(lexerDefinition) },\n              defaultMode: DEFAULT_MODE,\n            }\n          } else {\n            // no conversion needed, input should already be a IMultiModeLexerDefinition\n            hasOnlySingleMode = false\n            actualDefinition = clone(lexerDefinition)\n          }\n        })\n        if (this.config.skipValidations === false) {\n          this.TRACE_INIT('performRuntimeChecks', () => {\n            this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n              performRuntimeChecks(actualDefinition, this.trackStartLines, this.config.lineTerminatorCharacters),\n            )\n          })\n          this.TRACE_INIT('performWarningRuntimeChecks', () => {\n            this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(\n              performWarningRuntimeChecks(actualDefinition, this.trackStartLines, this.config.lineTerminatorCharacters),\n            )\n          })\n        }\n        // for extra robustness to avoid throwing an none informative error message\n        actualDefinition.modes = actualDefinition.modes ? actualDefinition.modes : {}\n        // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n        // this transformation is to increase robustness in the case of partially invalid lexer definition.\n        forEach(actualDefinition.modes, (currModeValue, currModeName) => {\n          actualDefinition.modes[currModeName] = reject(currModeValue, (currTokType) => isUndefined(currTokType))\n        })\n        const allModeNames = keys(actualDefinition.modes)\n        forEach(actualDefinition.modes, (currModDef, currModName) => {\n          this.TRACE_INIT(`Mode: <${currModName}> processing`, () => {\n            this.modes.push(currModName)\n            if (this.config.skipValidations === false) {\n              this.TRACE_INIT(`validatePatterns`, () => {\n                this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n                  validatePatterns(currModDef, allModeNames),\n                )\n              })\n            }\n            // If definition errors were encountered, the analysis phase may fail unexpectedly/\n            // Considering a lexer with definition errors may never be used, there is no point\n            // to performing the analysis anyhow...\n            if (isEmpty(this.lexerDefinitionErrors)) {\n              augmentTokenTypes(currModDef)\n              let currAnalyzeResult\n              this.TRACE_INIT(`analyzeTokenTypes`, () => {\n                currAnalyzeResult = analyzeTokenTypes(currModDef, {\n                  lineTerminatorCharacters: this.config.lineTerminatorCharacters,\n                  positionTracking: config.positionTracking,\n                  ensureOptimizations: config.ensureOptimizations,\n                  safeMode: config.safeMode,\n                  tracer: this.TRACE_INIT,\n                })\n              })\n              this.patternIdxToConfig[currModName] = currAnalyzeResult.patternIdxToConfig\n              this.charCodeToPatternIdxToConfig[currModName] = currAnalyzeResult.charCodeToPatternIdxToConfig\n              this.emptyGroups = assign$1({}, this.emptyGroups, currAnalyzeResult.emptyGroups)\n              this.hasCustom = currAnalyzeResult.hasCustom || this.hasCustom\n              this.canModeBeOptimized[currModName] = currAnalyzeResult.canBeOptimized\n            }\n          })\n        })\n        this.defaultMode = actualDefinition.defaultMode\n        if (!isEmpty(this.lexerDefinitionErrors) && !this.config.deferDefinitionErrorsHandling) {\n          const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n            return error.message\n          })\n          const allErrMessagesString = allErrMessages.join('-----------------------\\n')\n          throw new Error('Errors detected in definition of Lexer:\\n' + allErrMessagesString)\n        }\n        // Only print warning if there are no errors, This will avoid pl\n        forEach(this.lexerDefinitionWarning, (warningDescriptor) => {\n          PRINT_WARNING(warningDescriptor.message)\n        })\n        this.TRACE_INIT('Choosing sub-methods implementations', () => {\n          // Choose the relevant internal implementations for this specific parser.\n          // These implementations should be in-lined by the JavaScript engine\n          // to provide optimal performance in each scenario.\n          if (SUPPORT_STICKY) {\n            this.chopInput = identity\n            this.match = this.matchWithTest\n          } else {\n            this.updateLastIndex = noop\n            this.match = this.matchWithExec\n          }\n          if (hasOnlySingleMode) {\n            this.handleModes = noop\n          }\n          if (this.trackStartLines === false) {\n            this.computeNewColumn = identity\n          }\n          if (this.trackEndLines === false) {\n            this.updateTokenEndLineColumnLocation = noop\n          }\n          if (/full/i.test(this.config.positionTracking)) {\n            this.createTokenInstance = this.createFullToken\n          } else if (/onlyStart/i.test(this.config.positionTracking)) {\n            this.createTokenInstance = this.createStartOnlyToken\n          } else if (/onlyOffset/i.test(this.config.positionTracking)) {\n            this.createTokenInstance = this.createOffsetOnlyToken\n          } else {\n            throw Error(`Invalid <positionTracking> config option: \"${this.config.positionTracking}\"`)\n          }\n          if (this.hasCustom) {\n            this.addToken = this.addTokenUsingPush\n            this.handlePayload = this.handlePayloadWithCustom\n          } else {\n            this.addToken = this.addTokenUsingMemberAccess\n            this.handlePayload = this.handlePayloadNoCustom\n          }\n        })\n        this.TRACE_INIT('Failed Optimization Warnings', () => {\n          const unOptimizedModes = reduce(\n            this.canModeBeOptimized,\n            (cannotBeOptimized, canBeOptimized, modeName) => {\n              if (canBeOptimized === false) {\n                cannotBeOptimized.push(modeName)\n              }\n              return cannotBeOptimized\n            },\n            [],\n          )\n          if (config.ensureOptimizations && !isEmpty(unOptimizedModes)) {\n            throw Error(\n              `Lexer Modes: < ${unOptimizedModes.join(', ')} > cannot be optimized.\\n` +\n                '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' +\n                '\\t Or inspect the console log for details on how to resolve these issues.',\n            )\n          }\n        })\n        this.TRACE_INIT('clearRegExpParserCache', () => {\n          clearRegExpParserCache()\n        })\n        this.TRACE_INIT('toFastProperties', () => {\n          toFastProperties(this)\n        })\n      })\n    }\n    tokenize(text, initialMode = this.defaultMode) {\n      if (!isEmpty(this.lexerDefinitionErrors)) {\n        const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n          return error.message\n        })\n        const allErrMessagesString = allErrMessages.join('-----------------------\\n')\n        throw new Error('Unable to Tokenize because Errors detected in definition of Lexer:\\n' + allErrMessagesString)\n      }\n      return this.tokenizeInternal(text, initialMode)\n    }\n    // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n    // This is intentional due to performance considerations.\n    // this method also used quite a bit of `!` none null assertions because it is too optimized\n    // for `tsc` to always understand it is \"safe\"\n    tokenizeInternal(text, initialMode) {\n      let i,\n        j,\n        k,\n        matchAltImage,\n        longerAlt,\n        matchedImage,\n        payload,\n        altPayload,\n        imageLength,\n        group,\n        tokType,\n        newToken,\n        errLength,\n        msg,\n        match\n      const orgText = text\n      const orgLength = orgText.length\n      let offset = 0\n      let matchedTokensIndex = 0\n      // initializing the tokensArray to the \"guessed\" size.\n      // guessing too little will still reduce the number of array re-sizes on pushes.\n      // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n      // but would still have a faster runtime by avoiding (All but one) array resizing.\n      const guessedNumberOfTokens = this.hasCustom\n        ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n        : Math.floor(text.length / 10)\n      const matchedTokens = new Array(guessedNumberOfTokens)\n      const errors = []\n      let line = this.trackStartLines ? 1 : undefined\n      let column = this.trackStartLines ? 1 : undefined\n      const groups = cloneEmptyGroups(this.emptyGroups)\n      const trackLines = this.trackStartLines\n      const lineTerminatorPattern = this.config.lineTerminatorsPattern\n      let currModePatternsLength = 0\n      let patternIdxToConfig = []\n      let currCharCodeToPatternIdxToConfig = []\n      const modeStack = []\n      const emptyArray = []\n      Object.freeze(emptyArray)\n      let getPossiblePatterns\n      function getPossiblePatternsSlow() {\n        return patternIdxToConfig\n      }\n      function getPossiblePatternsOptimized(charCode) {\n        const optimizedCharIdx = charCodeToOptimizedIndex(charCode)\n        const possiblePatterns = currCharCodeToPatternIdxToConfig[optimizedCharIdx]\n        if (possiblePatterns === undefined) {\n          return emptyArray\n        } else {\n          return possiblePatterns\n        }\n      }\n      const pop_mode = (popToken) => {\n        // TODO: perhaps avoid this error in the edge case there is no more input?\n        if (\n          modeStack.length === 1 &&\n          // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n          // So no error should occur.\n          popToken.tokenType.PUSH_MODE === undefined\n        ) {\n          // if we try to pop the last mode there lexer will no longer have ANY mode.\n          // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n          const msg = this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(popToken)\n          errors.push({\n            offset: popToken.startOffset,\n            line: popToken.startLine,\n            column: popToken.startColumn,\n            length: popToken.image.length,\n            message: msg,\n          })\n        } else {\n          modeStack.pop()\n          const newMode = last(modeStack)\n          patternIdxToConfig = this.patternIdxToConfig[newMode]\n          currCharCodeToPatternIdxToConfig = this.charCodeToPatternIdxToConfig[newMode]\n          currModePatternsLength = patternIdxToConfig.length\n          const modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false\n          if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n            getPossiblePatterns = getPossiblePatternsOptimized\n          } else {\n            getPossiblePatterns = getPossiblePatternsSlow\n          }\n        }\n      }\n      function push_mode(newMode) {\n        modeStack.push(newMode)\n        currCharCodeToPatternIdxToConfig = this.charCodeToPatternIdxToConfig[newMode]\n        patternIdxToConfig = this.patternIdxToConfig[newMode]\n        currModePatternsLength = patternIdxToConfig.length\n        currModePatternsLength = patternIdxToConfig.length\n        const modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false\n        if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n          getPossiblePatterns = getPossiblePatternsOptimized\n        } else {\n          getPossiblePatterns = getPossiblePatternsSlow\n        }\n      }\n      // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n      // seem to matter performance wise.\n      push_mode.call(this, initialMode)\n      let currConfig\n      const recoveryEnabled = this.config.recoveryEnabled\n      while (offset < orgLength) {\n        matchedImage = null\n        const nextCharCode = orgText.charCodeAt(offset)\n        const chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode)\n        const chosenPatternsLength = chosenPatternIdxToConfig.length\n        for (i = 0; i < chosenPatternsLength; i++) {\n          currConfig = chosenPatternIdxToConfig[i]\n          const currPattern = currConfig.pattern\n          payload = null\n          // manually in-lined because > 600 chars won't be in-lined in V8\n          const singleCharCode = currConfig.short\n          if (singleCharCode !== false) {\n            if (nextCharCode === singleCharCode) {\n              // single character string\n              matchedImage = currPattern\n            }\n          } else if (currConfig.isCustom === true) {\n            match = currPattern.exec(orgText, offset, matchedTokens, groups)\n            if (match !== null) {\n              matchedImage = match[0]\n              if (match.payload !== undefined) {\n                payload = match.payload\n              }\n            } else {\n              matchedImage = null\n            }\n          } else {\n            this.updateLastIndex(currPattern, offset)\n            matchedImage = this.match(currPattern, text, offset)\n          }\n          if (matchedImage !== null) {\n            // even though this pattern matched we must try a another longer alternative.\n            // this can be used to prioritize keywords over identifiers\n            longerAlt = currConfig.longerAlt\n            if (longerAlt !== undefined) {\n              // TODO: micro optimize, avoid extra prop access\n              // by saving/linking longerAlt on the original config?\n              const longerAltLength = longerAlt.length\n              for (k = 0; k < longerAltLength; k++) {\n                const longerAltConfig = patternIdxToConfig[longerAlt[k]]\n                const longerAltPattern = longerAltConfig.pattern\n                altPayload = null\n                // single Char can never be a longer alt so no need to test it.\n                // manually in-lined because > 600 chars won't be in-lined in V8\n                if (longerAltConfig.isCustom === true) {\n                  match = longerAltPattern.exec(orgText, offset, matchedTokens, groups)\n                  if (match !== null) {\n                    matchAltImage = match[0]\n                    if (match.payload !== undefined) {\n                      altPayload = match.payload\n                    }\n                  } else {\n                    matchAltImage = null\n                  }\n                } else {\n                  this.updateLastIndex(longerAltPattern, offset)\n                  matchAltImage = this.match(longerAltPattern, text, offset)\n                }\n                if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                  matchedImage = matchAltImage\n                  payload = altPayload\n                  currConfig = longerAltConfig\n                  // Exit the loop early after matching one of the longer alternatives\n                  // The first matched alternative takes precedence\n                  break\n                }\n              }\n            }\n            break\n          }\n        }\n        // successful match\n        if (matchedImage !== null) {\n          imageLength = matchedImage.length\n          group = currConfig.group\n          if (group !== undefined) {\n            tokType = currConfig.tokenTypeIdx\n            // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n            // createFullToken method\n            newToken = this.createTokenInstance(\n              matchedImage,\n              offset,\n              tokType,\n              currConfig.tokenType,\n              line,\n              column,\n              imageLength,\n            )\n            this.handlePayload(newToken, payload)\n            // TODO: optimize NOOP in case there are no special groups?\n            if (group === false) {\n              matchedTokensIndex = this.addToken(matchedTokens, matchedTokensIndex, newToken)\n            } else {\n              groups[group].push(newToken)\n            }\n          }\n          text = this.chopInput(text, imageLength)\n          offset = offset + imageLength\n          // TODO: with newlines the column may be assigned twice\n          column = this.computeNewColumn(column, imageLength)\n          if (trackLines === true && currConfig.canLineTerminator === true) {\n            let numOfLTsInMatch = 0\n            let foundTerminator\n            let lastLTEndOffset\n            lineTerminatorPattern.lastIndex = 0\n            do {\n              foundTerminator = lineTerminatorPattern.test(matchedImage)\n              if (foundTerminator === true) {\n                lastLTEndOffset = lineTerminatorPattern.lastIndex - 1\n                numOfLTsInMatch++\n              }\n            } while (foundTerminator === true)\n            if (numOfLTsInMatch !== 0) {\n              line = line + numOfLTsInMatch\n              column = imageLength - lastLTEndOffset\n              this.updateTokenEndLineColumnLocation(\n                newToken,\n                group,\n                lastLTEndOffset,\n                numOfLTsInMatch,\n                line,\n                column,\n                imageLength,\n              )\n            }\n          }\n          // will be NOOP if no modes present\n          this.handleModes(currConfig, pop_mode, push_mode, newToken)\n        } else {\n          // error recovery, drop characters until we identify a valid token's start point\n          const errorStartOffset = offset\n          const errorLine = line\n          const errorColumn = column\n          let foundResyncPoint = recoveryEnabled === false\n          while (foundResyncPoint === false && offset < orgLength) {\n            // Identity Func (when sticky flag is enabled)\n            text = this.chopInput(text, 1)\n            offset++\n            for (j = 0; j < currModePatternsLength; j++) {\n              const currConfig = patternIdxToConfig[j]\n              const currPattern = currConfig.pattern\n              // manually in-lined because > 600 chars won't be in-lined in V8\n              const singleCharCode = currConfig.short\n              if (singleCharCode !== false) {\n                if (orgText.charCodeAt(offset) === singleCharCode) {\n                  // single character string\n                  foundResyncPoint = true\n                }\n              } else if (currConfig.isCustom === true) {\n                foundResyncPoint = currPattern.exec(orgText, offset, matchedTokens, groups) !== null\n              } else {\n                this.updateLastIndex(currPattern, offset)\n                foundResyncPoint = currPattern.exec(text) !== null\n              }\n              if (foundResyncPoint === true) {\n                break\n              }\n            }\n          }\n          errLength = offset - errorStartOffset\n          column = this.computeNewColumn(column, errLength)\n          // at this point we either re-synced or reached the end of the input text\n          msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(\n            orgText,\n            errorStartOffset,\n            errLength,\n            errorLine,\n            errorColumn,\n          )\n          errors.push({\n            offset: errorStartOffset,\n            line: errorLine,\n            column: errorColumn,\n            length: errLength,\n            message: msg,\n          })\n          if (recoveryEnabled === false) {\n            break\n          }\n        }\n      }\n      // if we do have custom patterns which push directly into the\n      // TODO: custom tokens should not push directly??\n      if (!this.hasCustom) {\n        // if we guessed a too large size for the tokens array this will shrink it to the right size.\n        matchedTokens.length = matchedTokensIndex\n      }\n      return {\n        tokens: matchedTokens,\n        groups: groups,\n        errors: errors,\n      }\n    }\n    handleModes(config, pop_mode, push_mode, newToken) {\n      if (config.pop === true) {\n        // need to save the PUSH_MODE property as if the mode is popped\n        // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n        const pushMode = config.push\n        pop_mode(newToken)\n        if (pushMode !== undefined) {\n          push_mode.call(this, pushMode)\n        }\n      } else if (config.push !== undefined) {\n        push_mode.call(this, config.push)\n      }\n    }\n    chopInput(text, length) {\n      return text.substring(length)\n    }\n    updateLastIndex(regExp, newLastIndex) {\n      regExp.lastIndex = newLastIndex\n    }\n    // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n    updateTokenEndLineColumnLocation(newToken, group, lastLTIdx, numOfLTsInMatch, line, column, imageLength) {\n      let lastCharIsLT, fixForEndingInLT\n      if (group !== undefined) {\n        // a none skipped multi line Token, need to update endLine/endColumn\n        lastCharIsLT = lastLTIdx === imageLength - 1\n        fixForEndingInLT = lastCharIsLT ? -1 : 0\n        if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n          // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n          newToken.endLine = line + fixForEndingInLT\n          // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n          // inclusive to exclusive range.\n          newToken.endColumn = column - 1 + -fixForEndingInLT\n        }\n        // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n      }\n    }\n    computeNewColumn(oldColumn, imageLength) {\n      return oldColumn + imageLength\n    }\n    createOffsetOnlyToken(image, startOffset, tokenTypeIdx, tokenType) {\n      return {\n        image,\n        startOffset,\n        tokenTypeIdx,\n        tokenType,\n      }\n    }\n    createStartOnlyToken(image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn) {\n      return {\n        image,\n        startOffset,\n        startLine,\n        startColumn,\n        tokenTypeIdx,\n        tokenType,\n      }\n    }\n    createFullToken(image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn, imageLength) {\n      return {\n        image,\n        startOffset,\n        endOffset: startOffset + imageLength - 1,\n        startLine,\n        endLine: startLine,\n        startColumn,\n        endColumn: startColumn + imageLength - 1,\n        tokenTypeIdx,\n        tokenType,\n      }\n    }\n    addTokenUsingPush(tokenVector, index, tokenToAdd) {\n      tokenVector.push(tokenToAdd)\n      return index\n    }\n    addTokenUsingMemberAccess(tokenVector, index, tokenToAdd) {\n      tokenVector[index] = tokenToAdd\n      index++\n      return index\n    }\n    handlePayloadNoCustom(token, payload) {}\n    handlePayloadWithCustom(token, payload) {\n      if (payload !== null) {\n        token.payload = payload\n      }\n    }\n    matchWithTest(pattern, text, offset) {\n      const found = pattern.test(text)\n      if (found === true) {\n        return text.substring(offset, pattern.lastIndex)\n      }\n      return null\n    }\n    matchWithExec(pattern, text) {\n      const regExpArray = pattern.exec(text)\n      return regExpArray !== null ? regExpArray[0] : null\n    }\n  }\n  Lexer.SKIPPED =\n    'This marks a skipped Token pattern, this means each token identified by it will' +\n    'be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.'\n  Lexer.NA = /NOT_APPLICABLE/\n\n  function tokenLabel(tokType) {\n    if (hasTokenLabel(tokType)) {\n      return tokType.LABEL\n    } else {\n      return tokType.name\n    }\n  }\n  function hasTokenLabel(obj) {\n    return isString(obj.LABEL) && obj.LABEL !== ''\n  }\n  const PARENT = 'parent'\n  const CATEGORIES = 'categories'\n  const LABEL = 'label'\n  const GROUP = 'group'\n  const PUSH_MODE = 'push_mode'\n  const POP_MODE = 'pop_mode'\n  const LONGER_ALT = 'longer_alt'\n  const LINE_BREAKS = 'line_breaks'\n  const START_CHARS_HINT = 'start_chars_hint'\n  function createToken(config) {\n    return createTokenInternal(config)\n  }\n  function createTokenInternal(config) {\n    const pattern = config.pattern\n    const tokenType = {}\n    tokenType.name = config.name\n    if (!isUndefined(pattern)) {\n      tokenType.PATTERN = pattern\n    }\n    if (has(config, PARENT)) {\n      throw (\n        'The parent property is no longer supported.\\n' +\n        'See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.'\n      )\n    }\n    if (has(config, CATEGORIES)) {\n      // casting to ANY as this will be fixed inside `augmentTokenTypes``\n      tokenType.CATEGORIES = config[CATEGORIES]\n    }\n    augmentTokenTypes([tokenType])\n    if (has(config, LABEL)) {\n      tokenType.LABEL = config[LABEL]\n    }\n    if (has(config, GROUP)) {\n      tokenType.GROUP = config[GROUP]\n    }\n    if (has(config, POP_MODE)) {\n      tokenType.POP_MODE = config[POP_MODE]\n    }\n    if (has(config, PUSH_MODE)) {\n      tokenType.PUSH_MODE = config[PUSH_MODE]\n    }\n    if (has(config, LONGER_ALT)) {\n      tokenType.LONGER_ALT = config[LONGER_ALT]\n    }\n    if (has(config, LINE_BREAKS)) {\n      tokenType.LINE_BREAKS = config[LINE_BREAKS]\n    }\n    if (has(config, START_CHARS_HINT)) {\n      tokenType.START_CHARS_HINT = config[START_CHARS_HINT]\n    }\n    return tokenType\n  }\n  const EOF = createToken({ name: 'EOF', pattern: Lexer.NA })\n  augmentTokenTypes([EOF])\n  function createTokenInstance(tokType, image, startOffset, endOffset, startLine, endLine, startColumn, endColumn) {\n    return {\n      image,\n      startOffset,\n      endOffset,\n      startLine,\n      endLine,\n      startColumn,\n      endColumn,\n      tokenTypeIdx: tokType.tokenTypeIdx,\n      tokenType: tokType,\n    }\n  }\n  function tokenMatcher(token, tokType) {\n    return tokenStructuredMatcher(token, tokType)\n  }\n\n  const defaultParserErrorProvider = {\n    buildMismatchTokenMessage({ expected, actual, previous, ruleName }) {\n      const hasLabel = hasTokenLabel(expected)\n      const expectedMsg = hasLabel ? `--> ${tokenLabel(expected)} <--` : `token of type --> ${expected.name} <--`\n      const msg = `Expecting ${expectedMsg} but found --> '${actual.image}' <--`\n      return msg\n    },\n    buildNotAllInputParsedMessage({ firstRedundant, ruleName }) {\n      return 'Redundant input, expecting EOF but found: ' + firstRedundant.image\n    },\n    buildNoViableAltMessage({ expectedPathsPerAlt, actual, previous, customUserDescription, ruleName }) {\n      const errPrefix = 'Expecting: '\n      // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n      const actualText = head(actual).image\n      const errSuffix = \"\\nbut found: '\" + actualText + \"'\"\n      if (customUserDescription) {\n        return errPrefix + customUserDescription + errSuffix\n      } else {\n        const allLookAheadPaths = reduce(expectedPathsPerAlt, (result, currAltPaths) => result.concat(currAltPaths), [])\n        const nextValidTokenSequences = map(\n          allLookAheadPaths,\n          (currPath) => `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(', ')}]`,\n        )\n        const nextValidSequenceItems = map(nextValidTokenSequences, (itemMsg, idx) => `  ${idx + 1}. ${itemMsg}`)\n        const calculatedDescription = `one of these possible Token sequences:\\n${nextValidSequenceItems.join('\\n')}`\n        return errPrefix + calculatedDescription + errSuffix\n      }\n    },\n    buildEarlyExitMessage({ expectedIterationPaths, actual, customUserDescription, ruleName }) {\n      const errPrefix = 'Expecting: '\n      // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n      const actualText = head(actual).image\n      const errSuffix = \"\\nbut found: '\" + actualText + \"'\"\n      if (customUserDescription) {\n        return errPrefix + customUserDescription + errSuffix\n      } else {\n        const nextValidTokenSequences = map(\n          expectedIterationPaths,\n          (currPath) => `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(',')}]`,\n        )\n        const calculatedDescription =\n          `expecting at least one iteration which starts with one of these possible Token sequences::\\n  ` +\n          `<${nextValidTokenSequences.join(' ,')}>`\n        return errPrefix + calculatedDescription + errSuffix\n      }\n    },\n  }\n  Object.freeze(defaultParserErrorProvider)\n  const defaultGrammarResolverErrorProvider = {\n    buildRuleNotFoundError(topLevelRule, undefinedRule) {\n      const msg =\n        'Invalid grammar, reference to a rule which is not defined: ->' +\n        undefinedRule.nonTerminalName +\n        '<-\\n' +\n        'inside top level rule: ->' +\n        topLevelRule.name +\n        '<-'\n      return msg\n    },\n  }\n  const defaultGrammarValidatorErrorProvider = {\n    buildDuplicateFoundError(topLevelRule, duplicateProds) {\n      function getExtraProductionArgument(prod) {\n        if (prod instanceof Terminal) {\n          return prod.terminalType.name\n        } else if (prod instanceof NonTerminal) {\n          return prod.nonTerminalName\n        } else {\n          return ''\n        }\n      }\n      const topLevelName = topLevelRule.name\n      const duplicateProd = head(duplicateProds)\n      const index = duplicateProd.idx\n      const dslName = getProductionDslName(duplicateProd)\n      const extraArgument = getExtraProductionArgument(duplicateProd)\n      const hasExplicitIndex = index > 0\n      let msg = `->${dslName}${hasExplicitIndex ? index : ''}<- ${\n        extraArgument ? `with argument: ->${extraArgument}<-` : ''\n      }\n                  appears more than once (${\n                    duplicateProds.length\n                  } times) in the top level rule: ->${topLevelName}<-.                  \n                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  `\n      // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...\n      msg = msg.replace(/[ \\t]+/g, ' ')\n      msg = msg.replace(/\\s\\s+/g, '\\n')\n      return msg\n    },\n    buildNamespaceConflictError(rule) {\n      const errMsg =\n        `Namespace conflict found in grammar.\\n` +\n        `The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${rule.name}>.\\n` +\n        `To resolve this make sure each Terminal and Non-Terminal names are unique\\n` +\n        `This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\\n` +\n        `and Non-Terminal names start with a lower case letter.`\n      return errMsg\n    },\n    buildAlternationPrefixAmbiguityError(options) {\n      const pathMsg = map(options.prefixPath, (currTok) => tokenLabel(currTok)).join(', ')\n      const occurrence = options.alternation.idx === 0 ? '' : options.alternation.idx\n      const errMsg =\n        `Ambiguous alternatives: <${options.ambiguityIndices.join(' ,')}> due to common lookahead prefix\\n` +\n        `in <OR${occurrence}> inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n` +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\\n` +\n        `For Further details.`\n      return errMsg\n    },\n    buildAlternationAmbiguityError(options) {\n      const pathMsg = map(options.prefixPath, (currtok) => tokenLabel(currtok)).join(', ')\n      const occurrence = options.alternation.idx === 0 ? '' : options.alternation.idx\n      let currMessage =\n        `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(' ,')}> in <OR${occurrence}>` +\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`\n      currMessage =\n        currMessage +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\n        `For Further details.`\n      return currMessage\n    },\n    buildEmptyRepetitionError(options) {\n      let dslName = getProductionDslName(options.repetition)\n      if (options.repetition.idx !== 0) {\n        dslName += options.repetition.idx\n      }\n      const errMsg =\n        `The repetition <${dslName}> within Rule <${options.topLevelRule.name}> can never consume any tokens.\\n` +\n        `This could lead to an infinite loop.`\n      return errMsg\n    },\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildTokenNameError(options) {\n      /* istanbul ignore next */\n      return 'deprecated'\n    },\n    buildEmptyAlternationError(options) {\n      const errMsg =\n        `Ambiguous empty alternative: <${options.emptyChoiceIdx + 1}>` +\n        ` in <OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n` +\n        `Only the last alternative may be an empty alternative.`\n      return errMsg\n    },\n    buildTooManyAlternativesError(options) {\n      const errMsg =\n        `An Alternation cannot have more than 256 alternatives:\\n` +\n        `<OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n has ${\n          options.alternation.definition.length + 1\n        } alternatives.`\n      return errMsg\n    },\n    buildLeftRecursionError(options) {\n      const ruleName = options.topLevelRule.name\n      const pathNames = map(options.leftRecursionPath, (currRule) => currRule.name)\n      const leftRecursivePath = `${ruleName} --> ${pathNames.concat([ruleName]).join(' --> ')}`\n      const errMsg =\n        `Left Recursion found in grammar.\\n` +\n        `rule: <${ruleName}> can be invoked from itself (directly or indirectly)\\n` +\n        `without consuming any Tokens. The grammar path that causes this is: \\n ${leftRecursivePath}\\n` +\n        ` To fix this refactor your grammar to remove the left recursion.\\n` +\n        `see: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.`\n      return errMsg\n    },\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildInvalidRuleNameError(options) {\n      /* istanbul ignore next */\n      return 'deprecated'\n    },\n    buildDuplicateRuleNameError(options) {\n      let ruleName\n      if (options.topLevelRule instanceof Rule) {\n        ruleName = options.topLevelRule.name\n      } else {\n        ruleName = options.topLevelRule\n      }\n      const errMsg = `Duplicate definition, rule: ->${ruleName}<- is already defined in the grammar: ->${options.grammarName}<-`\n      return errMsg\n    },\n  }\n\n  function resolveGrammar$1(topLevels, errMsgProvider) {\n    const refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider)\n    refResolver.resolveRefs()\n    return refResolver.errors\n  }\n  class GastRefResolverVisitor extends GAstVisitor {\n    constructor(nameToTopRule, errMsgProvider) {\n      super()\n      this.nameToTopRule = nameToTopRule\n      this.errMsgProvider = errMsgProvider\n      this.errors = []\n    }\n    resolveRefs() {\n      forEach(values(this.nameToTopRule), (prod) => {\n        this.currTopLevel = prod\n        prod.accept(this)\n      })\n    }\n    visitNonTerminal(node) {\n      const ref = this.nameToTopRule[node.nonTerminalName]\n      if (!ref) {\n        const msg = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, node)\n        this.errors.push({\n          message: msg,\n          type: ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n          ruleName: this.currTopLevel.name,\n          unresolvedRefName: node.nonTerminalName,\n        })\n      } else {\n        node.referencedRule = ref\n      }\n    }\n  }\n\n  class AbstractNextPossibleTokensWalker extends RestWalker {\n    constructor(topProd, path) {\n      super()\n      this.topProd = topProd\n      this.path = path\n      this.possibleTokTypes = []\n      this.nextProductionName = ''\n      this.nextProductionOccurrence = 0\n      this.found = false\n      this.isAtEndOfPath = false\n    }\n    startWalking() {\n      this.found = false\n      if (this.path.ruleStack[0] !== this.topProd.name) {\n        throw Error(\"The path does not start with the walker's top Rule!\")\n      }\n      // immutable for the win\n      this.ruleStack = clone(this.path.ruleStack).reverse() // intelij bug requires assertion\n      this.occurrenceStack = clone(this.path.occurrenceStack).reverse() // intelij bug requires assertion\n      // already verified that the first production is valid, we now seek the 2nd production\n      this.ruleStack.pop()\n      this.occurrenceStack.pop()\n      this.updateExpectedNext()\n      this.walk(this.topProd)\n      return this.possibleTokTypes\n    }\n    walk(prod, prevRest = []) {\n      // stop scanning once we found the path\n      if (!this.found) {\n        super.walk(prod, prevRest)\n      }\n    }\n    walkProdRef(refProd, currRest, prevRest) {\n      // found the next production, need to keep walking in it\n      if (refProd.referencedRule.name === this.nextProductionName && refProd.idx === this.nextProductionOccurrence) {\n        const fullRest = currRest.concat(prevRest)\n        this.updateExpectedNext()\n        this.walk(refProd.referencedRule, fullRest)\n      }\n    }\n    updateExpectedNext() {\n      // need to consume the Terminal\n      if (isEmpty(this.ruleStack)) {\n        // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n        // really seeking is the last Terminal...\n        this.nextProductionName = ''\n        this.nextProductionOccurrence = 0\n        this.isAtEndOfPath = true\n      } else {\n        this.nextProductionName = this.ruleStack.pop()\n        this.nextProductionOccurrence = this.occurrenceStack.pop()\n      }\n    }\n  }\n  class NextAfterTokenWalker extends AbstractNextPossibleTokensWalker {\n    constructor(topProd, path) {\n      super(topProd, path)\n      this.path = path\n      this.nextTerminalName = ''\n      this.nextTerminalOccurrence = 0\n      this.nextTerminalName = this.path.lastTok.name\n      this.nextTerminalOccurrence = this.path.lastTokOccurrence\n    }\n    walkTerminal(terminal, currRest, prevRest) {\n      if (\n        this.isAtEndOfPath &&\n        terminal.terminalType.name === this.nextTerminalName &&\n        terminal.idx === this.nextTerminalOccurrence &&\n        !this.found\n      ) {\n        const fullRest = currRest.concat(prevRest)\n        const restProd = new Alternative({ definition: fullRest })\n        this.possibleTokTypes = first(restProd)\n        this.found = true\n      }\n    }\n  }\n  /**\n   * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n   * it never \"follows\" production refs\n   */\n  class AbstractNextTerminalAfterProductionWalker extends RestWalker {\n    constructor(topRule, occurrence) {\n      super()\n      this.topRule = topRule\n      this.occurrence = occurrence\n      this.result = {\n        token: undefined,\n        occurrence: undefined,\n        isEndOfRule: undefined,\n      }\n    }\n    startWalking() {\n      this.walk(this.topRule)\n      return this.result\n    }\n  }\n  class NextTerminalAfterManyWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkMany(manyProd, currRest, prevRest) {\n      if (manyProd.idx === this.occurrence) {\n        const firstAfterMany = head(currRest.concat(prevRest))\n        this.result.isEndOfRule = firstAfterMany === undefined\n        if (firstAfterMany instanceof Terminal) {\n          this.result.token = firstAfterMany.terminalType\n          this.result.occurrence = firstAfterMany.idx\n        }\n      } else {\n        super.walkMany(manyProd, currRest, prevRest)\n      }\n    }\n  }\n  class NextTerminalAfterManySepWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkManySep(manySepProd, currRest, prevRest) {\n      if (manySepProd.idx === this.occurrence) {\n        const firstAfterManySep = head(currRest.concat(prevRest))\n        this.result.isEndOfRule = firstAfterManySep === undefined\n        if (firstAfterManySep instanceof Terminal) {\n          this.result.token = firstAfterManySep.terminalType\n          this.result.occurrence = firstAfterManySep.idx\n        }\n      } else {\n        super.walkManySep(manySepProd, currRest, prevRest)\n      }\n    }\n  }\n  class NextTerminalAfterAtLeastOneWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n      if (atLeastOneProd.idx === this.occurrence) {\n        const firstAfterAtLeastOne = head(currRest.concat(prevRest))\n        this.result.isEndOfRule = firstAfterAtLeastOne === undefined\n        if (firstAfterAtLeastOne instanceof Terminal) {\n          this.result.token = firstAfterAtLeastOne.terminalType\n          this.result.occurrence = firstAfterAtLeastOne.idx\n        }\n      } else {\n        super.walkAtLeastOne(atLeastOneProd, currRest, prevRest)\n      }\n    }\n  }\n  // TODO: reduce code duplication in the AfterWalkers\n  class NextTerminalAfterAtLeastOneSepWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest) {\n      if (atleastOneSepProd.idx === this.occurrence) {\n        const firstAfterfirstAfterAtLeastOneSep = head(currRest.concat(prevRest))\n        this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined\n        if (firstAfterfirstAfterAtLeastOneSep instanceof Terminal) {\n          this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType\n          this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx\n        }\n      } else {\n        super.walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest)\n      }\n    }\n  }\n  function possiblePathsFrom(targetDef, maxLength, currPath = []) {\n    // avoid side effects\n    currPath = clone(currPath)\n    let result = []\n    let i = 0\n    // TODO: avoid inner funcs\n    function remainingPathWith(nextDef) {\n      return nextDef.concat(drop(targetDef, i + 1))\n    }\n    // TODO: avoid inner funcs\n    function getAlternativesForProd(definition) {\n      const alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath)\n      return result.concat(alternatives)\n    }\n    /**\n     * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n     * following (rest) of the targetDef.\n     *\n     * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n     * the optional production.\n     */\n    while (currPath.length < maxLength && i < targetDef.length) {\n      const prod = targetDef[i]\n      /* istanbul ignore else */\n      if (prod instanceof Alternative) {\n        return getAlternativesForProd(prod.definition)\n      } else if (prod instanceof NonTerminal) {\n        return getAlternativesForProd(prod.definition)\n      } else if (prod instanceof Option) {\n        result = getAlternativesForProd(prod.definition)\n      } else if (prod instanceof RepetitionMandatory) {\n        const newDef = prod.definition.concat([\n          new Repetition({\n            definition: prod.definition,\n          }),\n        ])\n        return getAlternativesForProd(newDef)\n      } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n        const newDef = [\n          new Alternative({ definition: prod.definition }),\n          new Repetition({\n            definition: [new Terminal({ terminalType: prod.separator })].concat(prod.definition),\n          }),\n        ]\n        return getAlternativesForProd(newDef)\n      } else if (prod instanceof RepetitionWithSeparator) {\n        const newDef = prod.definition.concat([\n          new Repetition({\n            definition: [new Terminal({ terminalType: prod.separator })].concat(prod.definition),\n          }),\n        ])\n        result = getAlternativesForProd(newDef)\n      } else if (prod instanceof Repetition) {\n        const newDef = prod.definition.concat([\n          new Repetition({\n            definition: prod.definition,\n          }),\n        ])\n        result = getAlternativesForProd(newDef)\n      } else if (prod instanceof Alternation) {\n        forEach(prod.definition, (currAlt) => {\n          // TODO: this is a limited check for empty alternatives\n          //   It would prevent a common case of infinite loops during parser initialization.\n          //   However **in-directly** empty alternatives may still cause issues.\n          if (isEmpty(currAlt.definition) === false) {\n            result = getAlternativesForProd(currAlt.definition)\n          }\n        })\n        return result\n      } else if (prod instanceof Terminal) {\n        currPath.push(prod.terminalType)\n      } else {\n        throw Error('non exhaustive match')\n      }\n      i++\n    }\n    result.push({\n      partialPath: currPath,\n      suffixDef: drop(targetDef, i),\n    })\n    return result\n  }\n  function nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {\n    const EXIT_NON_TERMINAL = 'EXIT_NONE_TERMINAL'\n    // to avoid creating a new Array each time.\n    const EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL]\n    const EXIT_ALTERNATIVE = 'EXIT_ALTERNATIVE'\n    let foundCompletePath = false\n    const tokenVectorLength = tokenVector.length\n    const minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1\n    const result = []\n    const possiblePaths = []\n    possiblePaths.push({\n      idx: -1,\n      def: initialDef,\n      ruleStack: [],\n      occurrenceStack: [],\n    })\n    while (!isEmpty(possiblePaths)) {\n      const currPath = possiblePaths.pop()\n      // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n      if (currPath === EXIT_ALTERNATIVE) {\n        if (foundCompletePath && last(possiblePaths).idx <= minimalAlternativesIndex) {\n          // remove irrelevant alternative\n          possiblePaths.pop()\n        }\n        continue\n      }\n      const currDef = currPath.def\n      const currIdx = currPath.idx\n      const currRuleStack = currPath.ruleStack\n      const currOccurrenceStack = currPath.occurrenceStack\n      // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n      if (isEmpty(currDef)) {\n        continue\n      }\n      const prod = currDef[0]\n      /* istanbul ignore else */\n      if (prod === EXIT_NON_TERMINAL) {\n        const nextPath = {\n          idx: currIdx,\n          def: drop(currDef),\n          ruleStack: dropRight(currRuleStack),\n          occurrenceStack: dropRight(currOccurrenceStack),\n        }\n        possiblePaths.push(nextPath)\n      } else if (prod instanceof Terminal) {\n        /* istanbul ignore else */\n        if (currIdx < tokenVectorLength - 1) {\n          const nextIdx = currIdx + 1\n          const actualToken = tokenVector[nextIdx]\n          if (tokMatcher(actualToken, prod.terminalType)) {\n            const nextPath = {\n              idx: nextIdx,\n              def: drop(currDef),\n              ruleStack: currRuleStack,\n              occurrenceStack: currOccurrenceStack,\n            }\n            possiblePaths.push(nextPath)\n          }\n          // end of the line\n        } else if (currIdx === tokenVectorLength - 1) {\n          // IGNORE ABOVE ELSE\n          result.push({\n            nextTokenType: prod.terminalType,\n            nextTokenOccurrence: prod.idx,\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack,\n          })\n          foundCompletePath = true\n        } else {\n          throw Error('non exhaustive match')\n        }\n      } else if (prod instanceof NonTerminal) {\n        const newRuleStack = clone(currRuleStack)\n        newRuleStack.push(prod.nonTerminalName)\n        const newOccurrenceStack = clone(currOccurrenceStack)\n        newOccurrenceStack.push(prod.idx)\n        const nextPath = {\n          idx: currIdx,\n          def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, drop(currDef)),\n          ruleStack: newRuleStack,\n          occurrenceStack: newOccurrenceStack,\n        }\n        possiblePaths.push(nextPath)\n      } else if (prod instanceof Option) {\n        // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n        const nextPathWithout = {\n          idx: currIdx,\n          def: drop(currDef),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        }\n        possiblePaths.push(nextPathWithout)\n        // required marker to avoid backtracking paths whose higher priority alternatives already matched\n        possiblePaths.push(EXIT_ALTERNATIVE)\n        const nextPathWith = {\n          idx: currIdx,\n          def: prod.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        }\n        possiblePaths.push(nextPathWith)\n      } else if (prod instanceof RepetitionMandatory) {\n        // TODO:(THE NEW operators here take a while...) (convert once?)\n        const secondIteration = new Repetition({\n          definition: prod.definition,\n          idx: prod.idx,\n        })\n        const nextDef = prod.definition.concat([secondIteration], drop(currDef))\n        const nextPath = {\n          idx: currIdx,\n          def: nextDef,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        }\n        possiblePaths.push(nextPath)\n      } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n        // TODO:(THE NEW operators here take a while...) (convert once?)\n        const separatorGast = new Terminal({\n          terminalType: prod.separator,\n        })\n        const secondIteration = new Repetition({\n          definition: [separatorGast].concat(prod.definition),\n          idx: prod.idx,\n        })\n        const nextDef = prod.definition.concat([secondIteration], drop(currDef))\n        const nextPath = {\n          idx: currIdx,\n          def: nextDef,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        }\n        possiblePaths.push(nextPath)\n      } else if (prod instanceof RepetitionWithSeparator) {\n        // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n        const nextPathWithout = {\n          idx: currIdx,\n          def: drop(currDef),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        }\n        possiblePaths.push(nextPathWithout)\n        // required marker to avoid backtracking paths whose higher priority alternatives already matched\n        possiblePaths.push(EXIT_ALTERNATIVE)\n        const separatorGast = new Terminal({\n          terminalType: prod.separator,\n        })\n        const nthRepetition = new Repetition({\n          definition: [separatorGast].concat(prod.definition),\n          idx: prod.idx,\n        })\n        const nextDef = prod.definition.concat([nthRepetition], drop(currDef))\n        const nextPathWith = {\n          idx: currIdx,\n          def: nextDef,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        }\n        possiblePaths.push(nextPathWith)\n      } else if (prod instanceof Repetition) {\n        // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n        const nextPathWithout = {\n          idx: currIdx,\n          def: drop(currDef),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        }\n        possiblePaths.push(nextPathWithout)\n        // required marker to avoid backtracking paths whose higher priority alternatives already matched\n        possiblePaths.push(EXIT_ALTERNATIVE)\n        // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n        const nthRepetition = new Repetition({\n          definition: prod.definition,\n          idx: prod.idx,\n        })\n        const nextDef = prod.definition.concat([nthRepetition], drop(currDef))\n        const nextPathWith = {\n          idx: currIdx,\n          def: nextDef,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        }\n        possiblePaths.push(nextPathWith)\n      } else if (prod instanceof Alternation) {\n        // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n        for (let i = prod.definition.length - 1; i >= 0; i--) {\n          const currAlt = prod.definition[i]\n          const currAltPath = {\n            idx: currIdx,\n            def: currAlt.definition.concat(drop(currDef)),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack,\n          }\n          possiblePaths.push(currAltPath)\n          possiblePaths.push(EXIT_ALTERNATIVE)\n        }\n      } else if (prod instanceof Alternative) {\n        possiblePaths.push({\n          idx: currIdx,\n          def: prod.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        })\n      } else if (prod instanceof Rule) {\n        // last because we should only encounter at most a single one of these per invocation.\n        possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack))\n      } else {\n        throw Error('non exhaustive match')\n      }\n    }\n    return result\n  }\n  function expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {\n    const newRuleStack = clone(currRuleStack)\n    newRuleStack.push(topRule.name)\n    const newCurrOccurrenceStack = clone(currOccurrenceStack)\n    // top rule is always assumed to have been called with occurrence index 1\n    newCurrOccurrenceStack.push(1)\n    return {\n      idx: currIdx,\n      def: topRule.definition,\n      ruleStack: newRuleStack,\n      occurrenceStack: newCurrOccurrenceStack,\n    }\n  }\n\n  var PROD_TYPE\n  ;(function (PROD_TYPE) {\n    PROD_TYPE[(PROD_TYPE['OPTION'] = 0)] = 'OPTION'\n    PROD_TYPE[(PROD_TYPE['REPETITION'] = 1)] = 'REPETITION'\n    PROD_TYPE[(PROD_TYPE['REPETITION_MANDATORY'] = 2)] = 'REPETITION_MANDATORY'\n    PROD_TYPE[(PROD_TYPE['REPETITION_MANDATORY_WITH_SEPARATOR'] = 3)] = 'REPETITION_MANDATORY_WITH_SEPARATOR'\n    PROD_TYPE[(PROD_TYPE['REPETITION_WITH_SEPARATOR'] = 4)] = 'REPETITION_WITH_SEPARATOR'\n    PROD_TYPE[(PROD_TYPE['ALTERNATION'] = 5)] = 'ALTERNATION'\n  })(PROD_TYPE || (PROD_TYPE = {}))\n  function getProdType(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof Option || prod === 'Option') {\n      return PROD_TYPE.OPTION\n    } else if (prod instanceof Repetition || prod === 'Repetition') {\n      return PROD_TYPE.REPETITION\n    } else if (prod instanceof RepetitionMandatory || prod === 'RepetitionMandatory') {\n      return PROD_TYPE.REPETITION_MANDATORY\n    } else if (prod instanceof RepetitionMandatoryWithSeparator || prod === 'RepetitionMandatoryWithSeparator') {\n      return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR\n    } else if (prod instanceof RepetitionWithSeparator || prod === 'RepetitionWithSeparator') {\n      return PROD_TYPE.REPETITION_WITH_SEPARATOR\n    } else if (prod instanceof Alternation || prod === 'Alternation') {\n      return PROD_TYPE.ALTERNATION\n    } else {\n      throw Error('non exhaustive match')\n    }\n  }\n  function buildLookaheadFuncForOr(\n    occurrence,\n    ruleGrammar,\n    maxLookahead,\n    hasPredicates,\n    dynamicTokensEnabled,\n    laFuncBuilder,\n  ) {\n    const lookAheadPaths = getLookaheadPathsForOr(occurrence, ruleGrammar, maxLookahead)\n    const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n      ? tokenStructuredMatcherNoCategories\n      : tokenStructuredMatcher\n    return laFuncBuilder(lookAheadPaths, hasPredicates, tokenMatcher, dynamicTokensEnabled)\n  }\n  /**\n   *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n   *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n   *\n   *  Example: given a production:\n   *  ABC(DE)?DF\n   *\n   *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n   *  alternatives.\n   *\n   *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n   */\n  function buildLookaheadFuncForOptionalProd(\n    occurrence,\n    ruleGrammar,\n    k,\n    dynamicTokensEnabled,\n    prodType,\n    lookaheadBuilder,\n  ) {\n    const lookAheadPaths = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k)\n    const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n      ? tokenStructuredMatcherNoCategories\n      : tokenStructuredMatcher\n    return lookaheadBuilder(lookAheadPaths[0], tokenMatcher, dynamicTokensEnabled)\n  }\n  function buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {\n    const numOfAlts = alts.length\n    const areAllOneTokenLookahead = every(alts, (currAlt) => {\n      return every(currAlt, (currPath) => {\n        return currPath.length === 1\n      })\n    })\n    // This version takes into account the predicates as well.\n    if (hasPredicates) {\n      /**\n       * @returns {number} - The chosen alternative index\n       */\n      return function (orAlts) {\n        // unfortunately the predicates must be extracted every single time\n        // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n        // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n        const predicates = map(orAlts, (currAlt) => currAlt.GATE)\n        for (let t = 0; t < numOfAlts; t++) {\n          const currAlt = alts[t]\n          const currNumOfPaths = currAlt.length\n          const currPredicate = predicates[t]\n          if (currPredicate !== undefined && currPredicate.call(this) === false) {\n            // if the predicate does not match there is no point in checking the paths\n            continue\n          }\n          nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n            const currPath = currAlt[j]\n            const currPathLength = currPath.length\n            for (let i = 0; i < currPathLength; i++) {\n              const nextToken = this.LA(i + 1)\n              if (tokenMatcher(nextToken, currPath[i]) === false) {\n                // mismatch in current path\n                // try the next pth\n                continue nextPath\n              }\n            }\n            // found a full path that matches.\n            // this will also work for an empty ALT as the loop will be skipped\n            return t\n          }\n          // none of the paths for the current alternative matched\n          // try the next alternative\n        }\n        // none of the alternatives could be matched\n        return undefined\n      }\n    } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n      // optimized (common) case of all the lookaheads paths requiring only\n      // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n      const singleTokenAlts = map(alts, (currAlt) => {\n        return flatten(currAlt)\n      })\n      const choiceToAlt = reduce(\n        singleTokenAlts,\n        (result, currAlt, idx) => {\n          forEach(currAlt, (currTokType) => {\n            if (!has(result, currTokType.tokenTypeIdx)) {\n              result[currTokType.tokenTypeIdx] = idx\n            }\n            forEach(currTokType.categoryMatches, (currExtendingType) => {\n              if (!has(result, currExtendingType)) {\n                result[currExtendingType] = idx\n              }\n            })\n          })\n          return result\n        },\n        {},\n      )\n      /**\n       * @returns {number} - The chosen alternative index\n       */\n      return function () {\n        const nextToken = this.LA(1)\n        return choiceToAlt[nextToken.tokenTypeIdx]\n      }\n    } else {\n      // optimized lookahead without needing to check the predicates at all.\n      // this causes code duplication which is intentional to improve performance.\n      /**\n       * @returns {number} - The chosen alternative index\n       */\n      return function () {\n        for (let t = 0; t < numOfAlts; t++) {\n          const currAlt = alts[t]\n          const currNumOfPaths = currAlt.length\n          nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n            const currPath = currAlt[j]\n            const currPathLength = currPath.length\n            for (let i = 0; i < currPathLength; i++) {\n              const nextToken = this.LA(i + 1)\n              if (tokenMatcher(nextToken, currPath[i]) === false) {\n                // mismatch in current path\n                // try the next pth\n                continue nextPath\n              }\n            }\n            // found a full path that matches.\n            // this will also work for an empty ALT as the loop will be skipped\n            return t\n          }\n          // none of the paths for the current alternative matched\n          // try the next alternative\n        }\n        // none of the alternatives could be matched\n        return undefined\n      }\n    }\n  }\n  function buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled) {\n    const areAllOneTokenLookahead = every(alt, (currPath) => {\n      return currPath.length === 1\n    })\n    const numOfPaths = alt.length\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead.\n    if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n      const singleTokensTypes = flatten(alt)\n      if (singleTokensTypes.length === 1 && isEmpty(singleTokensTypes[0].categoryMatches)) {\n        const expectedTokenType = singleTokensTypes[0]\n        const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx\n        return function () {\n          return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey\n        }\n      } else {\n        const choiceToAlt = reduce(\n          singleTokensTypes,\n          (result, currTokType, idx) => {\n            result[currTokType.tokenTypeIdx] = true\n            forEach(currTokType.categoryMatches, (currExtendingType) => {\n              result[currExtendingType] = true\n            })\n            return result\n          },\n          [],\n        )\n        return function () {\n          const nextToken = this.LA(1)\n          return choiceToAlt[nextToken.tokenTypeIdx] === true\n        }\n      }\n    } else {\n      return function () {\n        nextPath: for (let j = 0; j < numOfPaths; j++) {\n          const currPath = alt[j]\n          const currPathLength = currPath.length\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1)\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath\n            }\n          }\n          // found a full path that matches.\n          return true\n        }\n        // none of the paths matched\n        return false\n      }\n    }\n  }\n  class RestDefinitionFinderWalker extends RestWalker {\n    constructor(topProd, targetOccurrence, targetProdType) {\n      super()\n      this.topProd = topProd\n      this.targetOccurrence = targetOccurrence\n      this.targetProdType = targetProdType\n    }\n    startWalking() {\n      this.walk(this.topProd)\n      return this.restDef\n    }\n    checkIsTarget(node, expectedProdType, currRest, prevRest) {\n      if (node.idx === this.targetOccurrence && this.targetProdType === expectedProdType) {\n        this.restDef = currRest.concat(prevRest)\n        return true\n      }\n      // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n      return false\n    }\n    walkOption(optionProd, currRest, prevRest) {\n      if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n        super.walkOption(optionProd, currRest, prevRest)\n      }\n    }\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n      if (!this.checkIsTarget(atLeastOneProd, PROD_TYPE.REPETITION_MANDATORY, currRest, prevRest)) {\n        super.walkOption(atLeastOneProd, currRest, prevRest)\n      }\n    }\n    walkAtLeastOneSep(atLeastOneSepProd, currRest, prevRest) {\n      if (!this.checkIsTarget(atLeastOneSepProd, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currRest, prevRest)) {\n        super.walkOption(atLeastOneSepProd, currRest, prevRest)\n      }\n    }\n    walkMany(manyProd, currRest, prevRest) {\n      if (!this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)) {\n        super.walkOption(manyProd, currRest, prevRest)\n      }\n    }\n    walkManySep(manySepProd, currRest, prevRest) {\n      if (!this.checkIsTarget(manySepProd, PROD_TYPE.REPETITION_WITH_SEPARATOR, currRest, prevRest)) {\n        super.walkOption(manySepProd, currRest, prevRest)\n      }\n    }\n  }\n  /**\n   * Returns the definition of a target production in a top level level rule.\n   */\n  class InsideDefinitionFinderVisitor extends GAstVisitor {\n    constructor(targetOccurrence, targetProdType, targetRef) {\n      super()\n      this.targetOccurrence = targetOccurrence\n      this.targetProdType = targetProdType\n      this.targetRef = targetRef\n      this.result = []\n    }\n    checkIsTarget(node, expectedProdName) {\n      if (\n        node.idx === this.targetOccurrence &&\n        this.targetProdType === expectedProdName &&\n        (this.targetRef === undefined || node === this.targetRef)\n      ) {\n        this.result = node.definition\n      }\n    }\n    visitOption(node) {\n      this.checkIsTarget(node, PROD_TYPE.OPTION)\n    }\n    visitRepetition(node) {\n      this.checkIsTarget(node, PROD_TYPE.REPETITION)\n    }\n    visitRepetitionMandatory(node) {\n      this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY)\n    }\n    visitRepetitionMandatoryWithSeparator(node) {\n      this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR)\n    }\n    visitRepetitionWithSeparator(node) {\n      this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR)\n    }\n    visitAlternation(node) {\n      this.checkIsTarget(node, PROD_TYPE.ALTERNATION)\n    }\n  }\n  function initializeArrayOfArrays(size) {\n    const result = new Array(size)\n    for (let i = 0; i < size; i++) {\n      result[i] = []\n    }\n    return result\n  }\n  /**\n   * A sort of hash function between a Path in the grammar and a string.\n   * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n   * -  A single path with categories may match multiple **actual** paths.\n   */\n  function pathToHashKeys(path) {\n    let keys = ['']\n    for (let i = 0; i < path.length; i++) {\n      const tokType = path[i]\n      const longerKeys = []\n      for (let j = 0; j < keys.length; j++) {\n        const currShorterKey = keys[j]\n        longerKeys.push(currShorterKey + '_' + tokType.tokenTypeIdx)\n        for (let t = 0; t < tokType.categoryMatches.length; t++) {\n          const categoriesKeySuffix = '_' + tokType.categoryMatches[t]\n          longerKeys.push(currShorterKey + categoriesKeySuffix)\n        }\n      }\n      keys = longerKeys\n    }\n    return keys\n  }\n  /**\n   * Imperative style due to being called from a hot spot\n   */\n  function isUniquePrefixHash(altKnownPathsKeys, searchPathKeys, idx) {\n    for (let currAltIdx = 0; currAltIdx < altKnownPathsKeys.length; currAltIdx++) {\n      // We only want to test vs the other alternatives\n      if (currAltIdx === idx) {\n        continue\n      }\n      const otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx]\n      for (let searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n        const searchKey = searchPathKeys[searchIdx]\n        if (otherAltKnownPathsKeys[searchKey] === true) {\n          return false\n        }\n      }\n    }\n    // None of the SearchPathKeys were found in any of the other alternatives\n    return true\n  }\n  function lookAheadSequenceFromAlternatives(altsDefs, k) {\n    const partialAlts = map(altsDefs, (currAlt) => possiblePathsFrom([currAlt], 1))\n    const finalResult = initializeArrayOfArrays(partialAlts.length)\n    const altsHashes = map(partialAlts, (currAltPaths) => {\n      const dict = {}\n      forEach(currAltPaths, (item) => {\n        const keys = pathToHashKeys(item.partialPath)\n        forEach(keys, (currKey) => {\n          dict[currKey] = true\n        })\n      })\n      return dict\n    })\n    let newData = partialAlts\n    // maxLookahead loop\n    for (let pathLength = 1; pathLength <= k; pathLength++) {\n      const currDataset = newData\n      newData = initializeArrayOfArrays(currDataset.length)\n      // alternatives loop\n      for (let altIdx = 0; altIdx < currDataset.length; altIdx++) {\n        const currAltPathsAndSuffixes = currDataset[altIdx]\n        // paths in current alternative loop\n        for (let currPathIdx = 0; currPathIdx < currAltPathsAndSuffixes.length; currPathIdx++) {\n          const currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath\n          const suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef\n          const prefixKeys = pathToHashKeys(currPathPrefix)\n          const isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx)\n          // End of the line for this path.\n          if (isUnique || isEmpty(suffixDef) || currPathPrefix.length === k) {\n            const currAltResult = finalResult[altIdx]\n            // TODO: Can we implement a containsPath using Maps/Dictionaries?\n            if (containsPath(currAltResult, currPathPrefix) === false) {\n              currAltResult.push(currPathPrefix)\n              // Update all new  keys for the current path.\n              for (let j = 0; j < prefixKeys.length; j++) {\n                const currKey = prefixKeys[j]\n                altsHashes[altIdx][currKey] = true\n              }\n            }\n          }\n          // Expand longer paths\n          else {\n            const newPartialPathsAndSuffixes = possiblePathsFrom(suffixDef, pathLength + 1, currPathPrefix)\n            newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes)\n            // Update keys for new known paths\n            forEach(newPartialPathsAndSuffixes, (item) => {\n              const prefixKeys = pathToHashKeys(item.partialPath)\n              forEach(prefixKeys, (key) => {\n                altsHashes[altIdx][key] = true\n              })\n            })\n          }\n        }\n      }\n    }\n    return finalResult\n  }\n  function getLookaheadPathsForOr(occurrence, ruleGrammar, k, orProd) {\n    const visitor = new InsideDefinitionFinderVisitor(occurrence, PROD_TYPE.ALTERNATION, orProd)\n    ruleGrammar.accept(visitor)\n    return lookAheadSequenceFromAlternatives(visitor.result, k)\n  }\n  function getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k) {\n    const insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType)\n    ruleGrammar.accept(insideDefVisitor)\n    const insideDef = insideDefVisitor.result\n    const afterDefWalker = new RestDefinitionFinderWalker(ruleGrammar, occurrence, prodType)\n    const afterDef = afterDefWalker.startWalking()\n    const insideFlat = new Alternative({ definition: insideDef })\n    const afterFlat = new Alternative({ definition: afterDef })\n    return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k)\n  }\n  function containsPath(alternative, searchPath) {\n    compareOtherPath: for (let i = 0; i < alternative.length; i++) {\n      const otherPath = alternative[i]\n      if (otherPath.length !== searchPath.length) {\n        continue\n      }\n      for (let j = 0; j < otherPath.length; j++) {\n        const searchTok = searchPath[j]\n        const otherTok = otherPath[j]\n        const matchingTokens =\n          searchTok === otherTok || otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !== undefined\n        if (matchingTokens === false) {\n          continue compareOtherPath\n        }\n      }\n      return true\n    }\n    return false\n  }\n  function isStrictPrefixOfPath(prefix, other) {\n    return (\n      prefix.length < other.length &&\n      every(prefix, (tokType, idx) => {\n        const otherTokType = other[idx]\n        return tokType === otherTokType || otherTokType.categoryMatchesMap[tokType.tokenTypeIdx]\n      })\n    )\n  }\n  function areTokenCategoriesNotUsed(lookAheadPaths) {\n    return every(lookAheadPaths, (singleAltPaths) =>\n      every(singleAltPaths, (singlePath) => every(singlePath, (token) => isEmpty(token.categoryMatches))),\n    )\n  }\n\n  function validateLookahead(options) {\n    const lookaheadValidationErrorMessages = options.lookaheadStrategy.validate({\n      rules: options.rules,\n      tokenTypes: options.tokenTypes,\n      grammarName: options.grammarName,\n    })\n    return map(lookaheadValidationErrorMessages, (errorMessage) =>\n      Object.assign({ type: ParserDefinitionErrorType.CUSTOM_LOOKAHEAD_VALIDATION }, errorMessage),\n    )\n  }\n  function validateGrammar$1(topLevels, tokenTypes, errMsgProvider, grammarName) {\n    const duplicateErrors = flatMap(topLevels, (currTopLevel) =>\n      validateDuplicateProductions(currTopLevel, errMsgProvider),\n    )\n    const termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider)\n    const tooManyAltsErrors = flatMap(topLevels, (curRule) => validateTooManyAlts(curRule, errMsgProvider))\n    const duplicateRulesError = flatMap(topLevels, (curRule) =>\n      validateRuleDoesNotAlreadyExist(curRule, topLevels, grammarName, errMsgProvider),\n    )\n    return duplicateErrors.concat(termsNamespaceConflictErrors, tooManyAltsErrors, duplicateRulesError)\n  }\n  function validateDuplicateProductions(topLevelRule, errMsgProvider) {\n    const collectorVisitor = new OccurrenceValidationCollector()\n    topLevelRule.accept(collectorVisitor)\n    const allRuleProductions = collectorVisitor.allProductions\n    const productionGroups = groupBy$1(allRuleProductions, identifyProductionForDuplicates)\n    const duplicates = pickBy(productionGroups, (currGroup) => {\n      return currGroup.length > 1\n    })\n    const errors = map(values(duplicates), (currDuplicates) => {\n      const firstProd = head(currDuplicates)\n      const msg = errMsgProvider.buildDuplicateFoundError(topLevelRule, currDuplicates)\n      const dslName = getProductionDslName(firstProd)\n      const defError = {\n        message: msg,\n        type: ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n        ruleName: topLevelRule.name,\n        dslName: dslName,\n        occurrence: firstProd.idx,\n      }\n      const param = getExtraProductionArgument(firstProd)\n      if (param) {\n        defError.parameter = param\n      }\n      return defError\n    })\n    return errors\n  }\n  function identifyProductionForDuplicates(prod) {\n    return `${getProductionDslName(prod)}_#_${prod.idx}_#_${getExtraProductionArgument(prod)}`\n  }\n  function getExtraProductionArgument(prod) {\n    if (prod instanceof Terminal) {\n      return prod.terminalType.name\n    } else if (prod instanceof NonTerminal) {\n      return prod.nonTerminalName\n    } else {\n      return ''\n    }\n  }\n  class OccurrenceValidationCollector extends GAstVisitor {\n    constructor() {\n      super(...arguments)\n      this.allProductions = []\n    }\n    visitNonTerminal(subrule) {\n      this.allProductions.push(subrule)\n    }\n    visitOption(option) {\n      this.allProductions.push(option)\n    }\n    visitRepetitionWithSeparator(manySep) {\n      this.allProductions.push(manySep)\n    }\n    visitRepetitionMandatory(atLeastOne) {\n      this.allProductions.push(atLeastOne)\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n      this.allProductions.push(atLeastOneSep)\n    }\n    visitRepetition(many) {\n      this.allProductions.push(many)\n    }\n    visitAlternation(or) {\n      this.allProductions.push(or)\n    }\n    visitTerminal(terminal) {\n      this.allProductions.push(terminal)\n    }\n  }\n  function validateRuleDoesNotAlreadyExist(rule, allRules, className, errMsgProvider) {\n    const errors = []\n    const occurrences = reduce(\n      allRules,\n      (result, curRule) => {\n        if (curRule.name === rule.name) {\n          return result + 1\n        }\n        return result\n      },\n      0,\n    )\n    if (occurrences > 1) {\n      const errMsg = errMsgProvider.buildDuplicateRuleNameError({\n        topLevelRule: rule,\n        grammarName: className,\n      })\n      errors.push({\n        message: errMsg,\n        type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n        ruleName: rule.name,\n      })\n    }\n    return errors\n  }\n  // TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n  // This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n  // The grammar structure, only at runtime.\n  function validateRuleIsOverridden(ruleName, definedRulesNames, className) {\n    const errors = []\n    let errMsg\n    if (!includes(definedRulesNames, ruleName)) {\n      errMsg =\n        `Invalid rule override, rule: ->${ruleName}<- cannot be overridden in the grammar: ->${className}<-` +\n        `as it is not defined in any of the super grammars `\n      errors.push({\n        message: errMsg,\n        type: ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n        ruleName: ruleName,\n      })\n    }\n    return errors\n  }\n  function validateNoLeftRecursion(topRule, currRule, errMsgProvider, path = []) {\n    const errors = []\n    const nextNonTerminals = getFirstNoneTerminal(currRule.definition)\n    if (isEmpty(nextNonTerminals)) {\n      return []\n    } else {\n      const ruleName = topRule.name\n      const foundLeftRecursion = includes(nextNonTerminals, topRule)\n      if (foundLeftRecursion) {\n        errors.push({\n          message: errMsgProvider.buildLeftRecursionError({\n            topLevelRule: topRule,\n            leftRecursionPath: path,\n          }),\n          type: ParserDefinitionErrorType.LEFT_RECURSION,\n          ruleName: ruleName,\n        })\n      }\n      // we are only looking for cyclic paths leading back to the specific topRule\n      // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n      const validNextSteps = difference$1(nextNonTerminals, path.concat([topRule]))\n      const errorsFromNextSteps = flatMap(validNextSteps, (currRefRule) => {\n        const newPath = clone(path)\n        newPath.push(currRefRule)\n        return validateNoLeftRecursion(topRule, currRefRule, errMsgProvider, newPath)\n      })\n      return errors.concat(errorsFromNextSteps)\n    }\n  }\n  function getFirstNoneTerminal(definition) {\n    let result = []\n    if (isEmpty(definition)) {\n      return result\n    }\n    const firstProd = head(definition)\n    /* istanbul ignore else */\n    if (firstProd instanceof NonTerminal) {\n      result.push(firstProd.referencedRule)\n    } else if (\n      firstProd instanceof Alternative ||\n      firstProd instanceof Option ||\n      firstProd instanceof RepetitionMandatory ||\n      firstProd instanceof RepetitionMandatoryWithSeparator ||\n      firstProd instanceof RepetitionWithSeparator ||\n      firstProd instanceof Repetition\n    ) {\n      result = result.concat(getFirstNoneTerminal(firstProd.definition))\n    } else if (firstProd instanceof Alternation) {\n      // each sub definition in alternation is a FLAT\n      result = flatten(map(firstProd.definition, (currSubDef) => getFirstNoneTerminal(currSubDef.definition)))\n    } else if (firstProd instanceof Terminal);\n    else {\n      throw Error('non exhaustive match')\n    }\n    const isFirstOptional = isOptionalProd(firstProd)\n    const hasMore = definition.length > 1\n    if (isFirstOptional && hasMore) {\n      const rest = drop(definition)\n      return result.concat(getFirstNoneTerminal(rest))\n    } else {\n      return result\n    }\n  }\n  class OrCollector extends GAstVisitor {\n    constructor() {\n      super(...arguments)\n      this.alternations = []\n    }\n    visitAlternation(node) {\n      this.alternations.push(node)\n    }\n  }\n  function validateEmptyOrAlternative(topLevelRule, errMsgProvider) {\n    const orCollector = new OrCollector()\n    topLevelRule.accept(orCollector)\n    const ors = orCollector.alternations\n    const errors = flatMap(ors, (currOr) => {\n      const exceptLast = dropRight(currOr.definition)\n      return flatMap(exceptLast, (currAlternative, currAltIdx) => {\n        const possibleFirstInAlt = nextPossibleTokensAfter([currAlternative], [], tokenStructuredMatcher, 1)\n        if (isEmpty(possibleFirstInAlt)) {\n          return [\n            {\n              message: errMsgProvider.buildEmptyAlternationError({\n                topLevelRule: topLevelRule,\n                alternation: currOr,\n                emptyChoiceIdx: currAltIdx,\n              }),\n              type: ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n              ruleName: topLevelRule.name,\n              occurrence: currOr.idx,\n              alternative: currAltIdx + 1,\n            },\n          ]\n        } else {\n          return []\n        }\n      })\n    })\n    return errors\n  }\n  function validateAmbiguousAlternationAlternatives(topLevelRule, globalMaxLookahead, errMsgProvider) {\n    const orCollector = new OrCollector()\n    topLevelRule.accept(orCollector)\n    let ors = orCollector.alternations\n    // New Handling of ignoring ambiguities\n    // - https://github.com/chevrotain/chevrotain/issues/869\n    ors = reject(ors, (currOr) => currOr.ignoreAmbiguities === true)\n    const errors = flatMap(ors, (currOr) => {\n      const currOccurrence = currOr.idx\n      const actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead\n      const alternatives = getLookaheadPathsForOr(currOccurrence, topLevelRule, actualMaxLookahead, currOr)\n      const altsAmbiguityErrors = checkAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider)\n      const altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(\n        alternatives,\n        currOr,\n        topLevelRule,\n        errMsgProvider,\n      )\n      return altsAmbiguityErrors.concat(altsPrefixAmbiguityErrors)\n    })\n    return errors\n  }\n  class RepetitionCollector extends GAstVisitor {\n    constructor() {\n      super(...arguments)\n      this.allProductions = []\n    }\n    visitRepetitionWithSeparator(manySep) {\n      this.allProductions.push(manySep)\n    }\n    visitRepetitionMandatory(atLeastOne) {\n      this.allProductions.push(atLeastOne)\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n      this.allProductions.push(atLeastOneSep)\n    }\n    visitRepetition(many) {\n      this.allProductions.push(many)\n    }\n  }\n  function validateTooManyAlts(topLevelRule, errMsgProvider) {\n    const orCollector = new OrCollector()\n    topLevelRule.accept(orCollector)\n    const ors = orCollector.alternations\n    const errors = flatMap(ors, (currOr) => {\n      if (currOr.definition.length > 255) {\n        return [\n          {\n            message: errMsgProvider.buildTooManyAlternativesError({\n              topLevelRule: topLevelRule,\n              alternation: currOr,\n            }),\n            type: ParserDefinitionErrorType.TOO_MANY_ALTS,\n            ruleName: topLevelRule.name,\n            occurrence: currOr.idx,\n          },\n        ]\n      } else {\n        return []\n      }\n    })\n    return errors\n  }\n  function validateSomeNonEmptyLookaheadPath(topLevelRules, maxLookahead, errMsgProvider) {\n    const errors = []\n    forEach(topLevelRules, (currTopRule) => {\n      const collectorVisitor = new RepetitionCollector()\n      currTopRule.accept(collectorVisitor)\n      const allRuleProductions = collectorVisitor.allProductions\n      forEach(allRuleProductions, (currProd) => {\n        const prodType = getProdType(currProd)\n        const actualMaxLookahead = currProd.maxLookahead || maxLookahead\n        const currOccurrence = currProd.idx\n        const paths = getLookaheadPathsForOptionalProd(currOccurrence, currTopRule, prodType, actualMaxLookahead)\n        const pathsInsideProduction = paths[0]\n        if (isEmpty(flatten(pathsInsideProduction))) {\n          const errMsg = errMsgProvider.buildEmptyRepetitionError({\n            topLevelRule: currTopRule,\n            repetition: currProd,\n          })\n          errors.push({\n            message: errMsg,\n            type: ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n            ruleName: currTopRule.name,\n          })\n        }\n      })\n    })\n    return errors\n  }\n  function checkAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    const foundAmbiguousPaths = []\n    const identicalAmbiguities = reduce(\n      alternatives,\n      (result, currAlt, currAltIdx) => {\n        // ignore (skip) ambiguities with this alternative\n        if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n          return result\n        }\n        forEach(currAlt, (currPath) => {\n          const altsCurrPathAppearsIn = [currAltIdx]\n          forEach(alternatives, (currOtherAlt, currOtherAltIdx) => {\n            if (\n              currAltIdx !== currOtherAltIdx &&\n              containsPath(currOtherAlt, currPath) &&\n              // ignore (skip) ambiguities with this \"other\" alternative\n              alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true\n            ) {\n              altsCurrPathAppearsIn.push(currOtherAltIdx)\n            }\n          })\n          if (altsCurrPathAppearsIn.length > 1 && !containsPath(foundAmbiguousPaths, currPath)) {\n            foundAmbiguousPaths.push(currPath)\n            result.push({\n              alts: altsCurrPathAppearsIn,\n              path: currPath,\n            })\n          }\n        })\n        return result\n      },\n      [],\n    )\n    const currErrors = map(identicalAmbiguities, (currAmbDescriptor) => {\n      const ambgIndices = map(currAmbDescriptor.alts, (currAltIdx) => currAltIdx + 1)\n      const currMessage = errMsgProvider.buildAlternationAmbiguityError({\n        topLevelRule: rule,\n        alternation: alternation,\n        ambiguityIndices: ambgIndices,\n        prefixPath: currAmbDescriptor.path,\n      })\n      return {\n        message: currMessage,\n        type: ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n        ruleName: rule.name,\n        occurrence: alternation.idx,\n        alternatives: currAmbDescriptor.alts,\n      }\n    })\n    return currErrors\n  }\n  function checkPrefixAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    // flatten\n    const pathsAndIndices = reduce(\n      alternatives,\n      (result, currAlt, idx) => {\n        const currPathsAndIdx = map(currAlt, (currPath) => {\n          return { idx: idx, path: currPath }\n        })\n        return result.concat(currPathsAndIdx)\n      },\n      [],\n    )\n    const errors = compact(\n      flatMap(pathsAndIndices, (currPathAndIdx) => {\n        const alternativeGast = alternation.definition[currPathAndIdx.idx]\n        // ignore (skip) ambiguities with this alternative\n        if (alternativeGast.ignoreAmbiguities === true) {\n          return []\n        }\n        const targetIdx = currPathAndIdx.idx\n        const targetPath = currPathAndIdx.path\n        const prefixAmbiguitiesPathsAndIndices = filter(pathsAndIndices, (searchPathAndIdx) => {\n          // prefix ambiguity can only be created from lower idx (higher priority) path\n          return (\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !== true &&\n            searchPathAndIdx.idx < targetIdx &&\n            // checking for strict prefix because identical lookaheads\n            // will be be detected using a different validation.\n            isStrictPrefixOfPath(searchPathAndIdx.path, targetPath)\n          )\n        })\n        const currPathPrefixErrors = map(prefixAmbiguitiesPathsAndIndices, (currAmbPathAndIdx) => {\n          const ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1]\n          const occurrence = alternation.idx === 0 ? '' : alternation.idx\n          const message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n            topLevelRule: rule,\n            alternation: alternation,\n            ambiguityIndices: ambgIndices,\n            prefixPath: currAmbPathAndIdx.path,\n          })\n          return {\n            message: message,\n            type: ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n            ruleName: rule.name,\n            occurrence: occurrence,\n            alternatives: ambgIndices,\n          }\n        })\n        return currPathPrefixErrors\n      }),\n    )\n    return errors\n  }\n  function checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider) {\n    const errors = []\n    const tokenNames = map(tokenTypes, (currToken) => currToken.name)\n    forEach(topLevels, (currRule) => {\n      const currRuleName = currRule.name\n      if (includes(tokenNames, currRuleName)) {\n        const errMsg = errMsgProvider.buildNamespaceConflictError(currRule)\n        errors.push({\n          message: errMsg,\n          type: ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n          ruleName: currRuleName,\n        })\n      }\n    })\n    return errors\n  }\n\n  function resolveGrammar(options) {\n    const actualOptions = defaults$1(options, {\n      errMsgProvider: defaultGrammarResolverErrorProvider,\n    })\n    const topRulesTable = {}\n    forEach(options.rules, (rule) => {\n      topRulesTable[rule.name] = rule\n    })\n    return resolveGrammar$1(topRulesTable, actualOptions.errMsgProvider)\n  }\n  function validateGrammar(options) {\n    options = defaults$1(options, {\n      errMsgProvider: defaultGrammarValidatorErrorProvider,\n    })\n    return validateGrammar$1(options.rules, options.tokenTypes, options.errMsgProvider, options.grammarName)\n  }\n\n  const MISMATCHED_TOKEN_EXCEPTION = 'MismatchedTokenException'\n  const NO_VIABLE_ALT_EXCEPTION = 'NoViableAltException'\n  const EARLY_EXIT_EXCEPTION = 'EarlyExitException'\n  const NOT_ALL_INPUT_PARSED_EXCEPTION = 'NotAllInputParsedException'\n  const RECOGNITION_EXCEPTION_NAMES = [\n    MISMATCHED_TOKEN_EXCEPTION,\n    NO_VIABLE_ALT_EXCEPTION,\n    EARLY_EXIT_EXCEPTION,\n    NOT_ALL_INPUT_PARSED_EXCEPTION,\n  ]\n  Object.freeze(RECOGNITION_EXCEPTION_NAMES)\n  // hacks to bypass no support for custom Errors in javascript/typescript\n  function isRecognitionException(error) {\n    // can't do instanceof on hacked custom js exceptions\n    return includes(RECOGNITION_EXCEPTION_NAMES, error.name)\n  }\n  class RecognitionException extends Error {\n    constructor(message, token) {\n      super(message)\n      this.token = token\n      this.resyncedTokens = []\n      // fix prototype chain when typescript target is ES5\n      Object.setPrototypeOf(this, new.target.prototype)\n      /* istanbul ignore next - V8 workaround to remove constructor from stacktrace when typescript target is ES5 */\n      if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, this.constructor)\n      }\n    }\n  }\n  class MismatchedTokenException extends RecognitionException {\n    constructor(message, token, previousToken) {\n      super(message, token)\n      this.previousToken = previousToken\n      this.name = MISMATCHED_TOKEN_EXCEPTION\n    }\n  }\n  class NoViableAltException extends RecognitionException {\n    constructor(message, token, previousToken) {\n      super(message, token)\n      this.previousToken = previousToken\n      this.name = NO_VIABLE_ALT_EXCEPTION\n    }\n  }\n  class NotAllInputParsedException extends RecognitionException {\n    constructor(message, token) {\n      super(message, token)\n      this.name = NOT_ALL_INPUT_PARSED_EXCEPTION\n    }\n  }\n  class EarlyExitException extends RecognitionException {\n    constructor(message, token, previousToken) {\n      super(message, token)\n      this.previousToken = previousToken\n      this.name = EARLY_EXIT_EXCEPTION\n    }\n  }\n\n  const EOF_FOLLOW_KEY = {}\n  const IN_RULE_RECOVERY_EXCEPTION = 'InRuleRecoveryException'\n  class InRuleRecoveryException extends Error {\n    constructor(message) {\n      super(message)\n      this.name = IN_RULE_RECOVERY_EXCEPTION\n    }\n  }\n  /**\n   * This trait is responsible for the error recovery and fault tolerant logic\n   */\n  class Recoverable {\n    initRecoverable(config) {\n      this.firstAfterRepMap = {}\n      this.resyncFollows = {}\n      this.recoveryEnabled = has(config, 'recoveryEnabled')\n        ? config.recoveryEnabled // assumes end user provides the correct config value/type\n        : DEFAULT_PARSER_CONFIG.recoveryEnabled\n      // performance optimization, NOOP will be inlined which\n      // effectively means that this optional feature does not exist\n      // when not used.\n      if (this.recoveryEnabled) {\n        this.attemptInRepetitionRecovery = attemptInRepetitionRecovery\n      }\n    }\n    getTokenToInsert(tokType) {\n      const tokToInsert = createTokenInstance(tokType, '', NaN, NaN, NaN, NaN, NaN, NaN)\n      tokToInsert.isInsertedInRecovery = true\n      return tokToInsert\n    }\n    canTokenTypeBeInsertedInRecovery(tokType) {\n      return true\n    }\n    canTokenTypeBeDeletedInRecovery(tokType) {\n      return true\n    }\n    tryInRepetitionRecovery(grammarRule, grammarRuleArgs, lookAheadFunc, expectedTokType) {\n      // TODO: can the resyncTokenType be cached?\n      const reSyncTokType = this.findReSyncTokenType()\n      const savedLexerState = this.exportLexerState()\n      const resyncedTokens = []\n      let passedResyncPoint = false\n      const nextTokenWithoutResync = this.LA(1)\n      let currToken = this.LA(1)\n      const generateErrorMessage = () => {\n        const previousToken = this.LA(0)\n        // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n        // the error that would have been thrown\n        const msg = this.errorMessageProvider.buildMismatchTokenMessage({\n          expected: expectedTokType,\n          actual: nextTokenWithoutResync,\n          previous: previousToken,\n          ruleName: this.getCurrRuleFullName(),\n        })\n        const error = new MismatchedTokenException(msg, nextTokenWithoutResync, this.LA(0))\n        // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n        error.resyncedTokens = dropRight(resyncedTokens)\n        this.SAVE_ERROR(error)\n      }\n      while (!passedResyncPoint) {\n        // re-synced to a point where we can safely exit the repetition/\n        if (this.tokenMatcher(currToken, expectedTokType)) {\n          generateErrorMessage()\n          return // must return here to avoid reverting the inputIdx\n        } else if (lookAheadFunc.call(this)) {\n          // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n          generateErrorMessage()\n          // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n          grammarRule.apply(this, grammarRuleArgs)\n          return // must return here to avoid reverting the inputIdx\n        } else if (this.tokenMatcher(currToken, reSyncTokType)) {\n          passedResyncPoint = true\n        } else {\n          currToken = this.SKIP_TOKEN()\n          this.addToResyncTokens(currToken, resyncedTokens)\n        }\n      }\n      // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n      // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n      // \"between rules\" resync recovery later in the flow.\n      this.importLexerState(savedLexerState)\n    }\n    shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck) {\n      // Edge case of arriving from a MANY repetition which is stuck\n      // Attempting recovery in this case could cause an infinite loop\n      if (notStuck === false) {\n        return false\n      }\n      // no need to recover, next token is what we expect...\n      if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n        return false\n      }\n      // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n      // and prefer some backtracking path that includes recovered errors.\n      if (this.isBackTracking()) {\n        return false\n      }\n      // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n      // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n      //noinspection RedundantIfStatementJS\n      if (\n        this.canPerformInRuleRecovery(\n          expectTokAfterLastMatch,\n          this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx),\n        )\n      ) {\n        return false\n      }\n      return true\n    }\n    // Error Recovery functionality\n    getFollowsForInRuleRecovery(tokType, tokIdxInRule) {\n      const grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule)\n      const follows = this.getNextPossibleTokenTypes(grammarPath)\n      return follows\n    }\n    tryInRuleRecovery(expectedTokType, follows) {\n      if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n        const tokToInsert = this.getTokenToInsert(expectedTokType)\n        return tokToInsert\n      }\n      if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n        const nextTok = this.SKIP_TOKEN()\n        this.consumeToken()\n        return nextTok\n      }\n      throw new InRuleRecoveryException('sad sad panda')\n    }\n    canPerformInRuleRecovery(expectedToken, follows) {\n      return (\n        this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||\n        this.canRecoverWithSingleTokenDeletion(expectedToken)\n      )\n    }\n    canRecoverWithSingleTokenInsertion(expectedTokType, follows) {\n      if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n        return false\n      }\n      // must know the possible following tokens to perform single token insertion\n      if (isEmpty(follows)) {\n        return false\n      }\n      const mismatchedTok = this.LA(1)\n      const isMisMatchedTokInFollows =\n        find$1(follows, (possibleFollowsTokType) => {\n          return this.tokenMatcher(mismatchedTok, possibleFollowsTokType)\n        }) !== undefined\n      return isMisMatchedTokInFollows\n    }\n    canRecoverWithSingleTokenDeletion(expectedTokType) {\n      if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {\n        return false\n      }\n      const isNextTokenWhatIsExpected = this.tokenMatcher(this.LA(2), expectedTokType)\n      return isNextTokenWhatIsExpected\n    }\n    isInCurrentRuleReSyncSet(tokenTypeIdx) {\n      const followKey = this.getCurrFollowKey()\n      const currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey)\n      return includes(currentRuleReSyncSet, tokenTypeIdx)\n    }\n    findReSyncTokenType() {\n      const allPossibleReSyncTokTypes = this.flattenFollowSet()\n      // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n      let nextToken = this.LA(1)\n      let k = 2\n      while (true) {\n        const foundMatch = find$1(allPossibleReSyncTokTypes, (resyncTokType) => {\n          const canMatch = tokenMatcher(nextToken, resyncTokType)\n          return canMatch\n        })\n        if (foundMatch !== undefined) {\n          return foundMatch\n        }\n        nextToken = this.LA(k)\n        k++\n      }\n    }\n    getCurrFollowKey() {\n      // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n      if (this.RULE_STACK.length === 1) {\n        return EOF_FOLLOW_KEY\n      }\n      const currRuleShortName = this.getLastExplicitRuleShortName()\n      const currRuleIdx = this.getLastExplicitRuleOccurrenceIndex()\n      const prevRuleShortName = this.getPreviousExplicitRuleShortName()\n      return {\n        ruleName: this.shortRuleNameToFullName(currRuleShortName),\n        idxInCallingRule: currRuleIdx,\n        inRule: this.shortRuleNameToFullName(prevRuleShortName),\n      }\n    }\n    buildFullFollowKeyStack() {\n      const explicitRuleStack = this.RULE_STACK\n      const explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK\n      return map(explicitRuleStack, (ruleName, idx) => {\n        if (idx === 0) {\n          return EOF_FOLLOW_KEY\n        }\n        return {\n          ruleName: this.shortRuleNameToFullName(ruleName),\n          idxInCallingRule: explicitOccurrenceStack[idx],\n          inRule: this.shortRuleNameToFullName(explicitRuleStack[idx - 1]),\n        }\n      })\n    }\n    flattenFollowSet() {\n      const followStack = map(this.buildFullFollowKeyStack(), (currKey) => {\n        return this.getFollowSetFromFollowKey(currKey)\n      })\n      return flatten(followStack)\n    }\n    getFollowSetFromFollowKey(followKey) {\n      if (followKey === EOF_FOLLOW_KEY) {\n        return [EOF]\n      }\n      const followName = followKey.ruleName + followKey.idxInCallingRule + IN + followKey.inRule\n      return this.resyncFollows[followName]\n    }\n    // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n    // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n    addToResyncTokens(token, resyncTokens) {\n      if (!this.tokenMatcher(token, EOF)) {\n        resyncTokens.push(token)\n      }\n      return resyncTokens\n    }\n    reSyncTo(tokType) {\n      const resyncedTokens = []\n      let nextTok = this.LA(1)\n      while (this.tokenMatcher(nextTok, tokType) === false) {\n        nextTok = this.SKIP_TOKEN()\n        this.addToResyncTokens(nextTok, resyncedTokens)\n      }\n      // the last token is not part of the error.\n      return dropRight(resyncedTokens)\n    }\n    attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n      // by default this is a NO-OP\n      // The actual implementation is with the function(not method) below\n    }\n    getCurrentGrammarPath(tokType, tokIdxInRule) {\n      const pathRuleStack = this.getHumanReadableRuleStack()\n      const pathOccurrenceStack = clone(this.RULE_OCCURRENCE_STACK)\n      const grammarPath = {\n        ruleStack: pathRuleStack,\n        occurrenceStack: pathOccurrenceStack,\n        lastTok: tokType,\n        lastTokOccurrence: tokIdxInRule,\n      }\n      return grammarPath\n    }\n    getHumanReadableRuleStack() {\n      return map(this.RULE_STACK, (currShortName) => this.shortRuleNameToFullName(currShortName))\n    }\n  }\n  function attemptInRepetitionRecovery(\n    prodFunc,\n    args,\n    lookaheadFunc,\n    dslMethodIdx,\n    prodOccurrence,\n    nextToksWalker,\n    notStuck,\n  ) {\n    const key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence)\n    let firstAfterRepInfo = this.firstAfterRepMap[key]\n    if (firstAfterRepInfo === undefined) {\n      const currRuleName = this.getCurrRuleFullName()\n      const ruleGrammar = this.getGAstProductions()[currRuleName]\n      const walker = new nextToksWalker(ruleGrammar, prodOccurrence)\n      firstAfterRepInfo = walker.startWalking()\n      this.firstAfterRepMap[key] = firstAfterRepInfo\n    }\n    let expectTokAfterLastMatch = firstAfterRepInfo.token\n    let nextTokIdx = firstAfterRepInfo.occurrence\n    const isEndOfRule = firstAfterRepInfo.isEndOfRule\n    // special edge case of a TOP most repetition after which the input should END.\n    // this will force an attempt for inRule recovery in that scenario.\n    if (this.RULE_STACK.length === 1 && isEndOfRule && expectTokAfterLastMatch === undefined) {\n      expectTokAfterLastMatch = EOF\n      nextTokIdx = 1\n    }\n    // We don't have anything to re-sync to...\n    // this condition was extracted from `shouldInRepetitionRecoveryBeTried` to act as a type-guard\n    if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n      return\n    }\n    if (this.shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck)) {\n      // TODO: performance optimization: instead of passing the original args here, we modify\n      // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n      // to avoid searching the cache for it once more.\n      this.tryInRepetitionRecovery(prodFunc, args, lookaheadFunc, expectTokAfterLastMatch)\n    }\n  }\n\n  // Lookahead keys are 32Bit integers in the form\n  // TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n  // XXXX -> Occurrence Index bitmap.\n  // YYYY -> DSL Method Type bitmap.\n  // ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n  // TTTTTTTTT -> alternation alternative index bitmap\n  const BITS_FOR_METHOD_TYPE = 4\n  const BITS_FOR_OCCURRENCE_IDX = 8\n  // short string used as part of mapping keys.\n  // being short improves the performance when composing KEYS for maps out of these\n  // The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\n  const OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX\n  const OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX\n  const MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX\n  const AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX\n  const MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX\n  const AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX\n  // this actually returns a number, but it is always used as a string (object prop key)\n  function getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {\n    return occurrence | dslMethodIdx | ruleIdx\n  }\n\n  class LLkLookaheadStrategy {\n    constructor(options) {\n      var _a\n      this.maxLookahead =\n        (_a = options === null || options === void 0 ? void 0 : options.maxLookahead) !== null && _a !== void 0\n          ? _a\n          : DEFAULT_PARSER_CONFIG.maxLookahead\n    }\n    validate(options) {\n      const leftRecursionErrors = this.validateNoLeftRecursion(options.rules)\n      if (isEmpty(leftRecursionErrors)) {\n        const emptyAltErrors = this.validateEmptyOrAlternatives(options.rules)\n        const ambiguousAltsErrors = this.validateAmbiguousAlternationAlternatives(options.rules, this.maxLookahead)\n        const emptyRepetitionErrors = this.validateSomeNonEmptyLookaheadPath(options.rules, this.maxLookahead)\n        const allErrors = [...leftRecursionErrors, ...emptyAltErrors, ...ambiguousAltsErrors, ...emptyRepetitionErrors]\n        return allErrors\n      }\n      return leftRecursionErrors\n    }\n    validateNoLeftRecursion(rules) {\n      return flatMap(rules, (currTopRule) =>\n        validateNoLeftRecursion(currTopRule, currTopRule, defaultGrammarValidatorErrorProvider),\n      )\n    }\n    validateEmptyOrAlternatives(rules) {\n      return flatMap(rules, (currTopRule) =>\n        validateEmptyOrAlternative(currTopRule, defaultGrammarValidatorErrorProvider),\n      )\n    }\n    validateAmbiguousAlternationAlternatives(rules, maxLookahead) {\n      return flatMap(rules, (currTopRule) =>\n        validateAmbiguousAlternationAlternatives(currTopRule, maxLookahead, defaultGrammarValidatorErrorProvider),\n      )\n    }\n    validateSomeNonEmptyLookaheadPath(rules, maxLookahead) {\n      return validateSomeNonEmptyLookaheadPath(rules, maxLookahead, defaultGrammarValidatorErrorProvider)\n    }\n    buildLookaheadForAlternation(options) {\n      return buildLookaheadFuncForOr(\n        options.prodOccurrence,\n        options.rule,\n        options.maxLookahead,\n        options.hasPredicates,\n        options.dynamicTokensEnabled,\n        buildAlternativesLookAheadFunc,\n      )\n    }\n    buildLookaheadForOptional(options) {\n      return buildLookaheadFuncForOptionalProd(\n        options.prodOccurrence,\n        options.rule,\n        options.maxLookahead,\n        options.dynamicTokensEnabled,\n        getProdType(options.prodType),\n        buildSingleAlternativeLookaheadFunction,\n      )\n    }\n  }\n\n  /**\n   * Trait responsible for the lookahead related utilities and optimizations.\n   */\n  class LooksAhead {\n    initLooksAhead(config) {\n      this.dynamicTokensEnabled = has(config, 'dynamicTokensEnabled')\n        ? config.dynamicTokensEnabled // assumes end user provides the correct config value/type\n        : DEFAULT_PARSER_CONFIG.dynamicTokensEnabled\n      this.maxLookahead = has(config, 'maxLookahead')\n        ? config.maxLookahead // assumes end user provides the correct config value/type\n        : DEFAULT_PARSER_CONFIG.maxLookahead\n      this.lookaheadStrategy = has(config, 'lookaheadStrategy')\n        ? config.lookaheadStrategy // assumes end user provides the correct config value/type\n        : new LLkLookaheadStrategy({ maxLookahead: this.maxLookahead })\n      this.lookAheadFuncsCache = new Map()\n    }\n    preComputeLookaheadFunctions(rules) {\n      forEach(rules, (currRule) => {\n        this.TRACE_INIT(`${currRule.name} Rule Lookahead`, () => {\n          const {\n            alternation,\n            repetition,\n            option,\n            repetitionMandatory,\n            repetitionMandatoryWithSeparator,\n            repetitionWithSeparator,\n          } = collectMethods(currRule)\n          forEach(alternation, (currProd) => {\n            const prodIdx = currProd.idx === 0 ? '' : currProd.idx\n            this.TRACE_INIT(`${getProductionDslName(currProd)}${prodIdx}`, () => {\n              const laFunc = this.lookaheadStrategy.buildLookaheadForAlternation({\n                prodOccurrence: currProd.idx,\n                rule: currRule,\n                maxLookahead: currProd.maxLookahead || this.maxLookahead,\n                hasPredicates: currProd.hasPredicates,\n                dynamicTokensEnabled: this.dynamicTokensEnabled,\n              })\n              const key = getKeyForAutomaticLookahead(this.fullRuleNameToShort[currRule.name], OR_IDX, currProd.idx)\n              this.setLaFuncCache(key, laFunc)\n            })\n          })\n          forEach(repetition, (currProd) => {\n            this.computeLookaheadFunc(\n              currRule,\n              currProd.idx,\n              MANY_IDX,\n              'Repetition',\n              currProd.maxLookahead,\n              getProductionDslName(currProd),\n            )\n          })\n          forEach(option, (currProd) => {\n            this.computeLookaheadFunc(\n              currRule,\n              currProd.idx,\n              OPTION_IDX,\n              'Option',\n              currProd.maxLookahead,\n              getProductionDslName(currProd),\n            )\n          })\n          forEach(repetitionMandatory, (currProd) => {\n            this.computeLookaheadFunc(\n              currRule,\n              currProd.idx,\n              AT_LEAST_ONE_IDX,\n              'RepetitionMandatory',\n              currProd.maxLookahead,\n              getProductionDslName(currProd),\n            )\n          })\n          forEach(repetitionMandatoryWithSeparator, (currProd) => {\n            this.computeLookaheadFunc(\n              currRule,\n              currProd.idx,\n              AT_LEAST_ONE_SEP_IDX,\n              'RepetitionMandatoryWithSeparator',\n              currProd.maxLookahead,\n              getProductionDslName(currProd),\n            )\n          })\n          forEach(repetitionWithSeparator, (currProd) => {\n            this.computeLookaheadFunc(\n              currRule,\n              currProd.idx,\n              MANY_SEP_IDX,\n              'RepetitionWithSeparator',\n              currProd.maxLookahead,\n              getProductionDslName(currProd),\n            )\n          })\n        })\n      })\n    }\n    computeLookaheadFunc(rule, prodOccurrence, prodKey, prodType, prodMaxLookahead, dslMethodName) {\n      this.TRACE_INIT(`${dslMethodName}${prodOccurrence === 0 ? '' : prodOccurrence}`, () => {\n        const laFunc = this.lookaheadStrategy.buildLookaheadForOptional({\n          prodOccurrence,\n          rule,\n          maxLookahead: prodMaxLookahead || this.maxLookahead,\n          dynamicTokensEnabled: this.dynamicTokensEnabled,\n          prodType,\n        })\n        const key = getKeyForAutomaticLookahead(this.fullRuleNameToShort[rule.name], prodKey, prodOccurrence)\n        this.setLaFuncCache(key, laFunc)\n      })\n    }\n    // this actually returns a number, but it is always used as a string (object prop key)\n    getKeyForAutomaticLookahead(dslMethodIdx, occurrence) {\n      const currRuleShortName = this.getLastExplicitRuleShortName()\n      return getKeyForAutomaticLookahead(currRuleShortName, dslMethodIdx, occurrence)\n    }\n    getLaFuncFromCache(key) {\n      return this.lookAheadFuncsCache.get(key)\n    }\n    /* istanbul ignore next */\n    setLaFuncCache(key, value) {\n      this.lookAheadFuncsCache.set(key, value)\n    }\n  }\n  class DslMethodsCollectorVisitor extends GAstVisitor {\n    constructor() {\n      super(...arguments)\n      this.dslMethods = {\n        option: [],\n        alternation: [],\n        repetition: [],\n        repetitionWithSeparator: [],\n        repetitionMandatory: [],\n        repetitionMandatoryWithSeparator: [],\n      }\n    }\n    reset() {\n      this.dslMethods = {\n        option: [],\n        alternation: [],\n        repetition: [],\n        repetitionWithSeparator: [],\n        repetitionMandatory: [],\n        repetitionMandatoryWithSeparator: [],\n      }\n    }\n    visitOption(option) {\n      this.dslMethods.option.push(option)\n    }\n    visitRepetitionWithSeparator(manySep) {\n      this.dslMethods.repetitionWithSeparator.push(manySep)\n    }\n    visitRepetitionMandatory(atLeastOne) {\n      this.dslMethods.repetitionMandatory.push(atLeastOne)\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n      this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep)\n    }\n    visitRepetition(many) {\n      this.dslMethods.repetition.push(many)\n    }\n    visitAlternation(or) {\n      this.dslMethods.alternation.push(or)\n    }\n  }\n  const collectorVisitor = new DslMethodsCollectorVisitor()\n  function collectMethods(rule) {\n    collectorVisitor.reset()\n    rule.accept(collectorVisitor)\n    const dslMethods = collectorVisitor.dslMethods\n    // avoid uncleaned references\n    collectorVisitor.reset()\n    return dslMethods\n  }\n\n  /**\n   * This nodeLocation tracking is not efficient and should only be used\n   * when error recovery is enabled or the Token Vector contains virtual Tokens\n   * (e.g, Python Indent/Outdent)\n   * As it executes the calculation for every single terminal/nonTerminal\n   * and does not rely on the fact the token vector is **sorted**\n   */\n  function setNodeLocationOnlyOffset(currNodeLocation, newLocationInfo) {\n    // First (valid) update for this cst node\n    if (isNaN(currNodeLocation.startOffset) === true) {\n      // assumption1: Token location information is either NaN or a valid number\n      // assumption2: Token location information is fully valid if it exist\n      // (both start/end offsets exist and are numbers).\n      currNodeLocation.startOffset = newLocationInfo.startOffset\n      currNodeLocation.endOffset = newLocationInfo.endOffset\n    }\n    // Once the startOffset has been updated with a valid number it should never receive\n    // any farther updates as the Token vector is sorted.\n    // We still have to check this this condition for every new possible location info\n    // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n    else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n      currNodeLocation.endOffset = newLocationInfo.endOffset\n    }\n  }\n  /**\n   * This nodeLocation tracking is not efficient and should only be used\n   * when error recovery is enabled or the Token Vector contains virtual Tokens\n   * (e.g, Python Indent/Outdent)\n   * As it executes the calculation for every single terminal/nonTerminal\n   * and does not rely on the fact the token vector is **sorted**\n   */\n  function setNodeLocationFull(currNodeLocation, newLocationInfo) {\n    // First (valid) update for this cst node\n    if (isNaN(currNodeLocation.startOffset) === true) {\n      // assumption1: Token location information is either NaN or a valid number\n      // assumption2: Token location information is fully valid if it exist\n      // (all start/end props exist and are numbers).\n      currNodeLocation.startOffset = newLocationInfo.startOffset\n      currNodeLocation.startColumn = newLocationInfo.startColumn\n      currNodeLocation.startLine = newLocationInfo.startLine\n      currNodeLocation.endOffset = newLocationInfo.endOffset\n      currNodeLocation.endColumn = newLocationInfo.endColumn\n      currNodeLocation.endLine = newLocationInfo.endLine\n    }\n    // Once the start props has been updated with a valid number it should never receive\n    // any farther updates as the Token vector is sorted.\n    // We still have to check this this condition for every new possible location info\n    // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n    else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n      currNodeLocation.endOffset = newLocationInfo.endOffset\n      currNodeLocation.endColumn = newLocationInfo.endColumn\n      currNodeLocation.endLine = newLocationInfo.endLine\n    }\n  }\n  function addTerminalToCst(node, token, tokenTypeName) {\n    if (node.children[tokenTypeName] === undefined) {\n      node.children[tokenTypeName] = [token]\n    } else {\n      node.children[tokenTypeName].push(token)\n    }\n  }\n  function addNoneTerminalToCst(node, ruleName, ruleResult) {\n    if (node.children[ruleName] === undefined) {\n      node.children[ruleName] = [ruleResult]\n    } else {\n      node.children[ruleName].push(ruleResult)\n    }\n  }\n\n  const NAME = 'name'\n  function defineNameProp(obj, nameValue) {\n    Object.defineProperty(obj, NAME, {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: nameValue,\n    })\n  }\n\n  function defaultVisit(ctx, param) {\n    const childrenNames = keys(ctx)\n    const childrenNamesLength = childrenNames.length\n    for (let i = 0; i < childrenNamesLength; i++) {\n      const currChildName = childrenNames[i]\n      const currChildArray = ctx[currChildName]\n      const currChildArrayLength = currChildArray.length\n      for (let j = 0; j < currChildArrayLength; j++) {\n        const currChild = currChildArray[j]\n        // distinction between Tokens Children and CstNode children\n        if (currChild.tokenTypeIdx === undefined) {\n          this[currChild.name](currChild.children, param)\n        }\n      }\n    }\n    // defaultVisit does not support generic out param\n  }\n  function createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n    const derivedConstructor = function () {}\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    defineNameProp(derivedConstructor, grammarName + 'BaseSemantics')\n    const semanticProto = {\n      visit: function (cstNode, param) {\n        // enables writing more concise visitor methods when CstNode has only a single child\n        if (isArray$1(cstNode)) {\n          // A CST Node's children dictionary can never have empty arrays as values\n          // If a key is defined there will be at least one element in the corresponding value array.\n          cstNode = cstNode[0]\n        }\n        // enables passing optional CstNodes concisely.\n        if (isUndefined(cstNode)) {\n          return undefined\n        }\n        return this[cstNode.name](cstNode.children, param)\n      },\n      validateVisitor: function () {\n        const semanticDefinitionErrors = validateVisitor(this, ruleNames)\n        if (!isEmpty(semanticDefinitionErrors)) {\n          const errorMessages = map(semanticDefinitionErrors, (currDefError) => currDefError.msg)\n          throw Error(\n            `Errors Detected in CST Visitor <${this.constructor.name}>:\\n\\t` +\n              `${errorMessages.join('\\n\\n').replace(/\\n/g, '\\n\\t')}`,\n          )\n        }\n      },\n    }\n    derivedConstructor.prototype = semanticProto\n    derivedConstructor.prototype.constructor = derivedConstructor\n    derivedConstructor._RULE_NAMES = ruleNames\n    return derivedConstructor\n  }\n  function createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n    const derivedConstructor = function () {}\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    defineNameProp(derivedConstructor, grammarName + 'BaseSemanticsWithDefaults')\n    const withDefaultsProto = Object.create(baseConstructor.prototype)\n    forEach(ruleNames, (ruleName) => {\n      withDefaultsProto[ruleName] = defaultVisit\n    })\n    derivedConstructor.prototype = withDefaultsProto\n    derivedConstructor.prototype.constructor = derivedConstructor\n    return derivedConstructor\n  }\n  var CstVisitorDefinitionError\n  ;(function (CstVisitorDefinitionError) {\n    CstVisitorDefinitionError[(CstVisitorDefinitionError['REDUNDANT_METHOD'] = 0)] = 'REDUNDANT_METHOD'\n    CstVisitorDefinitionError[(CstVisitorDefinitionError['MISSING_METHOD'] = 1)] = 'MISSING_METHOD'\n  })(CstVisitorDefinitionError || (CstVisitorDefinitionError = {}))\n  function validateVisitor(visitorInstance, ruleNames) {\n    const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames)\n    return missingErrors\n  }\n  function validateMissingCstMethods(visitorInstance, ruleNames) {\n    const missingRuleNames = filter(ruleNames, (currRuleName) => {\n      return isFunction(visitorInstance[currRuleName]) === false\n    })\n    const errors = map(missingRuleNames, (currRuleName) => {\n      return {\n        msg: `Missing visitor method: <${currRuleName}> on ${visitorInstance.constructor.name} CST Visitor.`,\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName,\n      }\n    })\n    return compact(errors)\n  }\n\n  /**\n   * This trait is responsible for the CST building logic.\n   */\n  class TreeBuilder {\n    initTreeBuilder(config) {\n      this.CST_STACK = []\n      // outputCst is no longer exposed/defined in the pubic API\n      this.outputCst = config.outputCst\n      this.nodeLocationTracking = has(config, 'nodeLocationTracking')\n        ? config.nodeLocationTracking // assumes end user provides the correct config value/type\n        : DEFAULT_PARSER_CONFIG.nodeLocationTracking\n      if (!this.outputCst) {\n        this.cstInvocationStateUpdate = noop\n        this.cstFinallyStateUpdate = noop\n        this.cstPostTerminal = noop\n        this.cstPostNonTerminal = noop\n        this.cstPostRule = noop\n      } else {\n        if (/full/i.test(this.nodeLocationTracking)) {\n          if (this.recoveryEnabled) {\n            this.setNodeLocationFromToken = setNodeLocationFull\n            this.setNodeLocationFromNode = setNodeLocationFull\n            this.cstPostRule = noop\n            this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery\n          } else {\n            this.setNodeLocationFromToken = noop\n            this.setNodeLocationFromNode = noop\n            this.cstPostRule = this.cstPostRuleFull\n            this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular\n          }\n        } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n          if (this.recoveryEnabled) {\n            this.setNodeLocationFromToken = setNodeLocationOnlyOffset\n            this.setNodeLocationFromNode = setNodeLocationOnlyOffset\n            this.cstPostRule = noop\n            this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery\n          } else {\n            this.setNodeLocationFromToken = noop\n            this.setNodeLocationFromNode = noop\n            this.cstPostRule = this.cstPostRuleOnlyOffset\n            this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular\n          }\n        } else if (/none/i.test(this.nodeLocationTracking)) {\n          this.setNodeLocationFromToken = noop\n          this.setNodeLocationFromNode = noop\n          this.cstPostRule = noop\n          this.setInitialNodeLocation = noop\n        } else {\n          throw Error(`Invalid <nodeLocationTracking> config option: \"${config.nodeLocationTracking}\"`)\n        }\n      }\n    }\n    setInitialNodeLocationOnlyOffsetRecovery(cstNode) {\n      cstNode.location = {\n        startOffset: NaN,\n        endOffset: NaN,\n      }\n    }\n    setInitialNodeLocationOnlyOffsetRegular(cstNode) {\n      cstNode.location = {\n        // without error recovery the starting Location of a new CstNode is guaranteed\n        // To be the next Token's startOffset (for valid inputs).\n        // For invalid inputs there won't be any CSTOutput so this potential\n        // inaccuracy does not matter\n        startOffset: this.LA(1).startOffset,\n        endOffset: NaN,\n      }\n    }\n    setInitialNodeLocationFullRecovery(cstNode) {\n      cstNode.location = {\n        startOffset: NaN,\n        startLine: NaN,\n        startColumn: NaN,\n        endOffset: NaN,\n        endLine: NaN,\n        endColumn: NaN,\n      }\n    }\n    /**\n       *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n  \n       * @param cstNode\n       */\n    setInitialNodeLocationFullRegular(cstNode) {\n      const nextToken = this.LA(1)\n      cstNode.location = {\n        startOffset: nextToken.startOffset,\n        startLine: nextToken.startLine,\n        startColumn: nextToken.startColumn,\n        endOffset: NaN,\n        endLine: NaN,\n        endColumn: NaN,\n      }\n    }\n    cstInvocationStateUpdate(fullRuleName) {\n      const cstNode = {\n        name: fullRuleName,\n        children: Object.create(null),\n      }\n      this.setInitialNodeLocation(cstNode)\n      this.CST_STACK.push(cstNode)\n    }\n    cstFinallyStateUpdate() {\n      this.CST_STACK.pop()\n    }\n    cstPostRuleFull(ruleCstNode) {\n      // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n      const prevToken = this.LA(0)\n      const loc = ruleCstNode.location\n      // If this condition is true it means we consumed at least one Token\n      // In this CstNode.\n      if (loc.startOffset <= prevToken.startOffset === true) {\n        loc.endOffset = prevToken.endOffset\n        loc.endLine = prevToken.endLine\n        loc.endColumn = prevToken.endColumn\n      }\n      // \"empty\" CstNode edge case\n      else {\n        loc.startOffset = NaN\n        loc.startLine = NaN\n        loc.startColumn = NaN\n      }\n    }\n    cstPostRuleOnlyOffset(ruleCstNode) {\n      const prevToken = this.LA(0)\n      // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n      const loc = ruleCstNode.location\n      // If this condition is true it means we consumed at least one Token\n      // In this CstNode.\n      if (loc.startOffset <= prevToken.startOffset === true) {\n        loc.endOffset = prevToken.endOffset\n      }\n      // \"empty\" CstNode edge case\n      else {\n        loc.startOffset = NaN\n      }\n    }\n    cstPostTerminal(key, consumedToken) {\n      const rootCst = this.CST_STACK[this.CST_STACK.length - 1]\n      addTerminalToCst(rootCst, consumedToken, key)\n      // This is only used when **both** error recovery and CST Output are enabled.\n      this.setNodeLocationFromToken(rootCst.location, consumedToken)\n    }\n    cstPostNonTerminal(ruleCstResult, ruleName) {\n      const preCstNode = this.CST_STACK[this.CST_STACK.length - 1]\n      addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult)\n      // This is only used when **both** error recovery and CST Output are enabled.\n      this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location)\n    }\n    getBaseCstVisitorConstructor() {\n      if (isUndefined(this.baseCstVisitorConstructor)) {\n        const newBaseCstVisitorConstructor = createBaseSemanticVisitorConstructor(\n          this.className,\n          keys(this.gastProductionsCache),\n        )\n        this.baseCstVisitorConstructor = newBaseCstVisitorConstructor\n        return newBaseCstVisitorConstructor\n      }\n      return this.baseCstVisitorConstructor\n    }\n    getBaseCstVisitorConstructorWithDefaults() {\n      if (isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n        const newConstructor = createBaseVisitorConstructorWithDefaults(\n          this.className,\n          keys(this.gastProductionsCache),\n          this.getBaseCstVisitorConstructor(),\n        )\n        this.baseCstVisitorWithDefaultsConstructor = newConstructor\n        return newConstructor\n      }\n      return this.baseCstVisitorWithDefaultsConstructor\n    }\n    getLastExplicitRuleShortName() {\n      const ruleStack = this.RULE_STACK\n      return ruleStack[ruleStack.length - 1]\n    }\n    getPreviousExplicitRuleShortName() {\n      const ruleStack = this.RULE_STACK\n      return ruleStack[ruleStack.length - 2]\n    }\n    getLastExplicitRuleOccurrenceIndex() {\n      const occurrenceStack = this.RULE_OCCURRENCE_STACK\n      return occurrenceStack[occurrenceStack.length - 1]\n    }\n  }\n\n  /**\n   * Trait responsible abstracting over the interaction with Lexer output (Token vector).\n   *\n   * This could be generalized to support other kinds of lexers, e.g.\n   * - Just in Time Lexing / Lexer-Less parsing.\n   * - Streaming Lexer.\n   */\n  class LexerAdapter {\n    initLexerAdapter() {\n      this.tokVector = []\n      this.tokVectorLength = 0\n      this.currIdx = -1\n    }\n    set input(newInput) {\n      // @ts-ignore - `this parameter` not supported in setters/getters\n      //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n      if (this.selfAnalysisDone !== true) {\n        throw Error(`Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.`)\n      }\n      // @ts-ignore - `this parameter` not supported in setters/getters\n      //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n      this.reset()\n      this.tokVector = newInput\n      this.tokVectorLength = newInput.length\n    }\n    get input() {\n      return this.tokVector\n    }\n    // skips a token and returns the next token\n    SKIP_TOKEN() {\n      if (this.currIdx <= this.tokVector.length - 2) {\n        this.consumeToken()\n        return this.LA(1)\n      } else {\n        return END_OF_FILE\n      }\n    }\n    // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers\n    // or lexers dependent on parser context.\n    LA(howMuch) {\n      const soughtIdx = this.currIdx + howMuch\n      if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {\n        return END_OF_FILE\n      } else {\n        return this.tokVector[soughtIdx]\n      }\n    }\n    consumeToken() {\n      this.currIdx++\n    }\n    exportLexerState() {\n      return this.currIdx\n    }\n    importLexerState(newState) {\n      this.currIdx = newState\n    }\n    resetLexerState() {\n      this.currIdx = -1\n    }\n    moveToTerminatedState() {\n      this.currIdx = this.tokVector.length - 1\n    }\n    getLexerPosition() {\n      return this.exportLexerState()\n    }\n  }\n\n  /**\n   * This trait is responsible for implementing the public API\n   * for defining Chevrotain parsers, i.e:\n   * - CONSUME\n   * - RULE\n   * - OPTION\n   * - ...\n   */\n  class RecognizerApi {\n    ACTION(impl) {\n      return impl.call(this)\n    }\n    consume(idx, tokType, options) {\n      return this.consumeInternal(tokType, idx, options)\n    }\n    subrule(idx, ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, idx, options)\n    }\n    option(idx, actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, idx)\n    }\n    or(idx, altsOrOpts) {\n      return this.orInternal(altsOrOpts, idx)\n    }\n    many(idx, actionORMethodDef) {\n      return this.manyInternal(idx, actionORMethodDef)\n    }\n    atLeastOne(idx, actionORMethodDef) {\n      return this.atLeastOneInternal(idx, actionORMethodDef)\n    }\n    CONSUME(tokType, options) {\n      return this.consumeInternal(tokType, 0, options)\n    }\n    CONSUME1(tokType, options) {\n      return this.consumeInternal(tokType, 1, options)\n    }\n    CONSUME2(tokType, options) {\n      return this.consumeInternal(tokType, 2, options)\n    }\n    CONSUME3(tokType, options) {\n      return this.consumeInternal(tokType, 3, options)\n    }\n    CONSUME4(tokType, options) {\n      return this.consumeInternal(tokType, 4, options)\n    }\n    CONSUME5(tokType, options) {\n      return this.consumeInternal(tokType, 5, options)\n    }\n    CONSUME6(tokType, options) {\n      return this.consumeInternal(tokType, 6, options)\n    }\n    CONSUME7(tokType, options) {\n      return this.consumeInternal(tokType, 7, options)\n    }\n    CONSUME8(tokType, options) {\n      return this.consumeInternal(tokType, 8, options)\n    }\n    CONSUME9(tokType, options) {\n      return this.consumeInternal(tokType, 9, options)\n    }\n    SUBRULE(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 0, options)\n    }\n    SUBRULE1(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 1, options)\n    }\n    SUBRULE2(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 2, options)\n    }\n    SUBRULE3(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 3, options)\n    }\n    SUBRULE4(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 4, options)\n    }\n    SUBRULE5(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 5, options)\n    }\n    SUBRULE6(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 6, options)\n    }\n    SUBRULE7(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 7, options)\n    }\n    SUBRULE8(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 8, options)\n    }\n    SUBRULE9(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 9, options)\n    }\n    OPTION(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 0)\n    }\n    OPTION1(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 1)\n    }\n    OPTION2(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 2)\n    }\n    OPTION3(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 3)\n    }\n    OPTION4(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 4)\n    }\n    OPTION5(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 5)\n    }\n    OPTION6(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 6)\n    }\n    OPTION7(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 7)\n    }\n    OPTION8(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 8)\n    }\n    OPTION9(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 9)\n    }\n    OR(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 0)\n    }\n    OR1(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 1)\n    }\n    OR2(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 2)\n    }\n    OR3(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 3)\n    }\n    OR4(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 4)\n    }\n    OR5(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 5)\n    }\n    OR6(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 6)\n    }\n    OR7(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 7)\n    }\n    OR8(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 8)\n    }\n    OR9(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 9)\n    }\n    MANY(actionORMethodDef) {\n      this.manyInternal(0, actionORMethodDef)\n    }\n    MANY1(actionORMethodDef) {\n      this.manyInternal(1, actionORMethodDef)\n    }\n    MANY2(actionORMethodDef) {\n      this.manyInternal(2, actionORMethodDef)\n    }\n    MANY3(actionORMethodDef) {\n      this.manyInternal(3, actionORMethodDef)\n    }\n    MANY4(actionORMethodDef) {\n      this.manyInternal(4, actionORMethodDef)\n    }\n    MANY5(actionORMethodDef) {\n      this.manyInternal(5, actionORMethodDef)\n    }\n    MANY6(actionORMethodDef) {\n      this.manyInternal(6, actionORMethodDef)\n    }\n    MANY7(actionORMethodDef) {\n      this.manyInternal(7, actionORMethodDef)\n    }\n    MANY8(actionORMethodDef) {\n      this.manyInternal(8, actionORMethodDef)\n    }\n    MANY9(actionORMethodDef) {\n      this.manyInternal(9, actionORMethodDef)\n    }\n    MANY_SEP(options) {\n      this.manySepFirstInternal(0, options)\n    }\n    MANY_SEP1(options) {\n      this.manySepFirstInternal(1, options)\n    }\n    MANY_SEP2(options) {\n      this.manySepFirstInternal(2, options)\n    }\n    MANY_SEP3(options) {\n      this.manySepFirstInternal(3, options)\n    }\n    MANY_SEP4(options) {\n      this.manySepFirstInternal(4, options)\n    }\n    MANY_SEP5(options) {\n      this.manySepFirstInternal(5, options)\n    }\n    MANY_SEP6(options) {\n      this.manySepFirstInternal(6, options)\n    }\n    MANY_SEP7(options) {\n      this.manySepFirstInternal(7, options)\n    }\n    MANY_SEP8(options) {\n      this.manySepFirstInternal(8, options)\n    }\n    MANY_SEP9(options) {\n      this.manySepFirstInternal(9, options)\n    }\n    AT_LEAST_ONE(actionORMethodDef) {\n      this.atLeastOneInternal(0, actionORMethodDef)\n    }\n    AT_LEAST_ONE1(actionORMethodDef) {\n      return this.atLeastOneInternal(1, actionORMethodDef)\n    }\n    AT_LEAST_ONE2(actionORMethodDef) {\n      this.atLeastOneInternal(2, actionORMethodDef)\n    }\n    AT_LEAST_ONE3(actionORMethodDef) {\n      this.atLeastOneInternal(3, actionORMethodDef)\n    }\n    AT_LEAST_ONE4(actionORMethodDef) {\n      this.atLeastOneInternal(4, actionORMethodDef)\n    }\n    AT_LEAST_ONE5(actionORMethodDef) {\n      this.atLeastOneInternal(5, actionORMethodDef)\n    }\n    AT_LEAST_ONE6(actionORMethodDef) {\n      this.atLeastOneInternal(6, actionORMethodDef)\n    }\n    AT_LEAST_ONE7(actionORMethodDef) {\n      this.atLeastOneInternal(7, actionORMethodDef)\n    }\n    AT_LEAST_ONE8(actionORMethodDef) {\n      this.atLeastOneInternal(8, actionORMethodDef)\n    }\n    AT_LEAST_ONE9(actionORMethodDef) {\n      this.atLeastOneInternal(9, actionORMethodDef)\n    }\n    AT_LEAST_ONE_SEP(options) {\n      this.atLeastOneSepFirstInternal(0, options)\n    }\n    AT_LEAST_ONE_SEP1(options) {\n      this.atLeastOneSepFirstInternal(1, options)\n    }\n    AT_LEAST_ONE_SEP2(options) {\n      this.atLeastOneSepFirstInternal(2, options)\n    }\n    AT_LEAST_ONE_SEP3(options) {\n      this.atLeastOneSepFirstInternal(3, options)\n    }\n    AT_LEAST_ONE_SEP4(options) {\n      this.atLeastOneSepFirstInternal(4, options)\n    }\n    AT_LEAST_ONE_SEP5(options) {\n      this.atLeastOneSepFirstInternal(5, options)\n    }\n    AT_LEAST_ONE_SEP6(options) {\n      this.atLeastOneSepFirstInternal(6, options)\n    }\n    AT_LEAST_ONE_SEP7(options) {\n      this.atLeastOneSepFirstInternal(7, options)\n    }\n    AT_LEAST_ONE_SEP8(options) {\n      this.atLeastOneSepFirstInternal(8, options)\n    }\n    AT_LEAST_ONE_SEP9(options) {\n      this.atLeastOneSepFirstInternal(9, options)\n    }\n    RULE(name, implementation, config = DEFAULT_RULE_CONFIG) {\n      if (includes(this.definedRulesNames, name)) {\n        const errMsg = defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({\n          topLevelRule: name,\n          grammarName: this.className,\n        })\n        const error = {\n          message: errMsg,\n          type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n          ruleName: name,\n        }\n        this.definitionErrors.push(error)\n      }\n      this.definedRulesNames.push(name)\n      const ruleImplementation = this.defineRule(name, implementation, config)\n      this[name] = ruleImplementation\n      return ruleImplementation\n    }\n    OVERRIDE_RULE(name, impl, config = DEFAULT_RULE_CONFIG) {\n      const ruleErrors = validateRuleIsOverridden(name, this.definedRulesNames, this.className)\n      this.definitionErrors = this.definitionErrors.concat(ruleErrors)\n      const ruleImplementation = this.defineRule(name, impl, config)\n      this[name] = ruleImplementation\n      return ruleImplementation\n    }\n    BACKTRACK(grammarRule, args) {\n      return function () {\n        // save org state\n        this.isBackTrackingStack.push(1)\n        const orgState = this.saveRecogState()\n        try {\n          grammarRule.apply(this, args)\n          // if no exception was thrown we have succeed parsing the rule.\n          return true\n        } catch (e) {\n          if (isRecognitionException(e)) {\n            return false\n          } else {\n            throw e\n          }\n        } finally {\n          this.reloadRecogState(orgState)\n          this.isBackTrackingStack.pop()\n        }\n      }\n    }\n    // GAST export APIs\n    getGAstProductions() {\n      return this.gastProductionsCache\n    }\n    getSerializedGastProductions() {\n      return serializeGrammar(values(this.gastProductionsCache))\n    }\n  }\n\n  /**\n   * This trait is responsible for the runtime parsing engine\n   * Used by the official API (recognizer_api.ts)\n   */\n  class RecognizerEngine {\n    initRecognizerEngine(tokenVocabulary, config) {\n      this.className = this.constructor.name\n      // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n      this.shortRuleNameToFull = {}\n      this.fullRuleNameToShort = {}\n      this.ruleShortNameIdx = 256\n      this.tokenMatcher = tokenStructuredMatcherNoCategories\n      this.subruleIdx = 0\n      this.definedRulesNames = []\n      this.tokensMap = {}\n      this.isBackTrackingStack = []\n      this.RULE_STACK = []\n      this.RULE_OCCURRENCE_STACK = []\n      this.gastProductionsCache = {}\n      if (has(config, 'serializedGrammar')) {\n        throw Error(\n          \"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" +\n            '\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n' +\n            '\\tFor Further details.',\n        )\n      }\n      if (isArray$1(tokenVocabulary)) {\n        // This only checks for Token vocabularies provided as arrays.\n        // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n        // rather than all edge cases of empty Token vocabularies.\n        if (isEmpty(tokenVocabulary)) {\n          throw Error(\n            'A Token Vocabulary cannot be empty.\\n' +\n              '\\tNote that the first argument for the parser constructor\\n' +\n              '\\tis no longer a Token vector (since v4.0).',\n          )\n        }\n        if (typeof tokenVocabulary[0].startOffset === 'number') {\n          throw Error(\n            'The Parser constructor no longer accepts a token vector as the first argument.\\n' +\n              '\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n' +\n              '\\tFor Further details.',\n          )\n        }\n      }\n      if (isArray$1(tokenVocabulary)) {\n        this.tokensMap = reduce(\n          tokenVocabulary,\n          (acc, tokType) => {\n            acc[tokType.name] = tokType\n            return acc\n          },\n          {},\n        )\n      } else if (has(tokenVocabulary, 'modes') && every(flatten(values(tokenVocabulary.modes)), isTokenType)) {\n        const allTokenTypes = flatten(values(tokenVocabulary.modes))\n        const uniqueTokens = uniq(allTokenTypes)\n        this.tokensMap = reduce(\n          uniqueTokens,\n          (acc, tokType) => {\n            acc[tokType.name] = tokType\n            return acc\n          },\n          {},\n        )\n      } else if (isObject(tokenVocabulary)) {\n        this.tokensMap = clone(tokenVocabulary)\n      } else {\n        throw new Error(\n          '<tokensDictionary> argument must be An Array of Token constructors,' +\n            ' A dictionary of Token constructors or an IMultiModeLexerDefinition',\n        )\n      }\n      // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n      // parsed with a clear error message (\"expecting EOF but found ...\")\n      this.tokensMap['EOF'] = EOF\n      const allTokenTypes = has(tokenVocabulary, 'modes')\n        ? flatten(values(tokenVocabulary.modes))\n        : values(tokenVocabulary)\n      const noTokenCategoriesUsed = every(allTokenTypes, (tokenConstructor) =>\n        isEmpty(tokenConstructor.categoryMatches),\n      )\n      this.tokenMatcher = noTokenCategoriesUsed ? tokenStructuredMatcherNoCategories : tokenStructuredMatcher\n      // Because ES2015+ syntax should be supported for creating Token classes\n      // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n      // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n      augmentTokenTypes(values(this.tokensMap))\n    }\n    defineRule(ruleName, impl, config) {\n      if (this.selfAnalysisDone) {\n        throw Error(\n          `Grammar rule <${ruleName}> may not be defined after the 'performSelfAnalysis' method has been called'\\n` +\n            `Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`,\n        )\n      }\n      const resyncEnabled = has(config, 'resyncEnabled')\n        ? config.resyncEnabled // assumes end user provides the correct config value/type\n        : DEFAULT_RULE_CONFIG.resyncEnabled\n      const recoveryValueFunc = has(config, 'recoveryValueFunc')\n        ? config.recoveryValueFunc // assumes end user provides the correct config value/type\n        : DEFAULT_RULE_CONFIG.recoveryValueFunc\n      // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n      // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n      const shortName = this.ruleShortNameIdx << (BITS_FOR_METHOD_TYPE + BITS_FOR_OCCURRENCE_IDX)\n      this.ruleShortNameIdx++\n      this.shortRuleNameToFull[shortName] = ruleName\n      this.fullRuleNameToShort[ruleName] = shortName\n      let invokeRuleWithTry\n      // Micro optimization, only check the condition **once** on rule definition\n      // instead of **every single** rule invocation.\n      if (this.outputCst === true) {\n        invokeRuleWithTry = function invokeRuleWithTry(...args) {\n          try {\n            this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx)\n            impl.apply(this, args)\n            const cst = this.CST_STACK[this.CST_STACK.length - 1]\n            this.cstPostRule(cst)\n            return cst\n          } catch (e) {\n            return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc)\n          } finally {\n            this.ruleFinallyStateUpdate()\n          }\n        }\n      } else {\n        invokeRuleWithTry = function invokeRuleWithTryCst(...args) {\n          try {\n            this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx)\n            return impl.apply(this, args)\n          } catch (e) {\n            return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc)\n          } finally {\n            this.ruleFinallyStateUpdate()\n          }\n        }\n      }\n      const wrappedGrammarRule = Object.assign(invokeRuleWithTry, { ruleName, originalGrammarAction: impl })\n      return wrappedGrammarRule\n    }\n    invokeRuleCatch(e, resyncEnabledConfig, recoveryValueFunc) {\n      const isFirstInvokedRule = this.RULE_STACK.length === 1\n      // note the reSync is always enabled for the first rule invocation, because we must always be able to\n      // reSync with EOF and just output some INVALID ParseTree\n      // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n      // path is really the most valid one\n      const reSyncEnabled = resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled\n      if (isRecognitionException(e)) {\n        const recogError = e\n        if (reSyncEnabled) {\n          const reSyncTokType = this.findReSyncTokenType()\n          if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n            recogError.resyncedTokens = this.reSyncTo(reSyncTokType)\n            if (this.outputCst) {\n              const partialCstResult = this.CST_STACK[this.CST_STACK.length - 1]\n              partialCstResult.recoveredNode = true\n              return partialCstResult\n            } else {\n              return recoveryValueFunc(e)\n            }\n          } else {\n            if (this.outputCst) {\n              const partialCstResult = this.CST_STACK[this.CST_STACK.length - 1]\n              partialCstResult.recoveredNode = true\n              recogError.partialCstResult = partialCstResult\n            }\n            // to be handled Further up the call stack\n            throw recogError\n          }\n        } else if (isFirstInvokedRule) {\n          // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n          this.moveToTerminatedState()\n          // the parser should never throw one of its own errors outside its flow.\n          // even if error recovery is disabled\n          return recoveryValueFunc(e)\n        } else {\n          // to be recovered Further up the call stack\n          throw recogError\n        }\n      } else {\n        // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n        throw e\n      }\n    }\n    // Implementation of parsing DSL\n    optionInternal(actionORMethodDef, occurrence) {\n      const key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence)\n      return this.optionInternalLogic(actionORMethodDef, occurrence, key)\n    }\n    optionInternalLogic(actionORMethodDef, occurrence, key) {\n      let lookAheadFunc = this.getLaFuncFromCache(key)\n      let action\n      if (typeof actionORMethodDef !== 'function') {\n        action = actionORMethodDef.DEF\n        const predicate = actionORMethodDef.GATE\n        // predicate present\n        if (predicate !== undefined) {\n          const orgLookaheadFunction = lookAheadFunc\n          lookAheadFunc = () => {\n            return predicate.call(this) && orgLookaheadFunction.call(this)\n          }\n        }\n      } else {\n        action = actionORMethodDef\n      }\n      if (lookAheadFunc.call(this) === true) {\n        return action.call(this)\n      }\n      return undefined\n    }\n    atLeastOneInternal(prodOccurrence, actionORMethodDef) {\n      const laKey = this.getKeyForAutomaticLookahead(AT_LEAST_ONE_IDX, prodOccurrence)\n      return this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, laKey)\n    }\n    atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, key) {\n      let lookAheadFunc = this.getLaFuncFromCache(key)\n      let action\n      if (typeof actionORMethodDef !== 'function') {\n        action = actionORMethodDef.DEF\n        const predicate = actionORMethodDef.GATE\n        // predicate present\n        if (predicate !== undefined) {\n          const orgLookaheadFunction = lookAheadFunc\n          lookAheadFunc = () => {\n            return predicate.call(this) && orgLookaheadFunction.call(this)\n          }\n        }\n      } else {\n        action = actionORMethodDef\n      }\n      if (lookAheadFunc.call(this) === true) {\n        let notStuck = this.doSingleRepetition(action)\n        while (lookAheadFunc.call(this) === true && notStuck === true) {\n          notStuck = this.doSingleRepetition(action)\n        }\n      } else {\n        throw this.raiseEarlyExitException(prodOccurrence, PROD_TYPE.REPETITION_MANDATORY, actionORMethodDef.ERR_MSG)\n      }\n      // note that while it may seem that this can cause an error because by using a recursive call to\n      // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n      // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.atLeastOneInternal,\n        [prodOccurrence, actionORMethodDef],\n        lookAheadFunc,\n        AT_LEAST_ONE_IDX,\n        prodOccurrence,\n        NextTerminalAfterAtLeastOneWalker,\n      )\n    }\n    atLeastOneSepFirstInternal(prodOccurrence, options) {\n      const laKey = this.getKeyForAutomaticLookahead(AT_LEAST_ONE_SEP_IDX, prodOccurrence)\n      this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey)\n    }\n    atLeastOneSepFirstInternalLogic(prodOccurrence, options, key) {\n      const action = options.DEF\n      const separator = options.SEP\n      const firstIterationLookaheadFunc = this.getLaFuncFromCache(key)\n      // 1st iteration\n      if (firstIterationLookaheadFunc.call(this) === true) {\n        action.call(this)\n        //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n        //  because it is only needed in error recovery scenarios.\n        const separatorLookAheadFunc = () => {\n          return this.tokenMatcher(this.LA(1), separator)\n        }\n        // 2nd..nth iterations\n        while (this.tokenMatcher(this.LA(1), separator) === true) {\n          // note that this CONSUME will never enter recovery because\n          // the separatorLookAheadFunc checks that the separator really does exist.\n          this.CONSUME(separator)\n          // No need for checking infinite loop here due to consuming the separator.\n          action.call(this)\n        }\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        this.attemptInRepetitionRecovery(\n          this.repetitionSepSecondInternal,\n          [prodOccurrence, separator, separatorLookAheadFunc, action, NextTerminalAfterAtLeastOneSepWalker],\n          separatorLookAheadFunc,\n          AT_LEAST_ONE_SEP_IDX,\n          prodOccurrence,\n          NextTerminalAfterAtLeastOneSepWalker,\n        )\n      } else {\n        throw this.raiseEarlyExitException(\n          prodOccurrence,\n          PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n          options.ERR_MSG,\n        )\n      }\n    }\n    manyInternal(prodOccurrence, actionORMethodDef) {\n      const laKey = this.getKeyForAutomaticLookahead(MANY_IDX, prodOccurrence)\n      return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey)\n    }\n    manyInternalLogic(prodOccurrence, actionORMethodDef, key) {\n      let lookaheadFunction = this.getLaFuncFromCache(key)\n      let action\n      if (typeof actionORMethodDef !== 'function') {\n        action = actionORMethodDef.DEF\n        const predicate = actionORMethodDef.GATE\n        // predicate present\n        if (predicate !== undefined) {\n          const orgLookaheadFunction = lookaheadFunction\n          lookaheadFunction = () => {\n            return predicate.call(this) && orgLookaheadFunction.call(this)\n          }\n        }\n      } else {\n        action = actionORMethodDef\n      }\n      let notStuck = true\n      while (lookaheadFunction.call(this) === true && notStuck === true) {\n        notStuck = this.doSingleRepetition(action)\n      }\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.manyInternal,\n        [prodOccurrence, actionORMethodDef],\n        lookaheadFunction,\n        MANY_IDX,\n        prodOccurrence,\n        NextTerminalAfterManyWalker,\n        // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n        // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n        // An infinite loop cannot occur as:\n        // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n        // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n        notStuck,\n      )\n    }\n    manySepFirstInternal(prodOccurrence, options) {\n      const laKey = this.getKeyForAutomaticLookahead(MANY_SEP_IDX, prodOccurrence)\n      this.manySepFirstInternalLogic(prodOccurrence, options, laKey)\n    }\n    manySepFirstInternalLogic(prodOccurrence, options, key) {\n      const action = options.DEF\n      const separator = options.SEP\n      const firstIterationLaFunc = this.getLaFuncFromCache(key)\n      // 1st iteration\n      if (firstIterationLaFunc.call(this) === true) {\n        action.call(this)\n        const separatorLookAheadFunc = () => {\n          return this.tokenMatcher(this.LA(1), separator)\n        }\n        // 2nd..nth iterations\n        while (this.tokenMatcher(this.LA(1), separator) === true) {\n          // note that this CONSUME will never enter recovery because\n          // the separatorLookAheadFunc checks that the separator really does exist.\n          this.CONSUME(separator)\n          // No need for checking infinite loop here due to consuming the separator.\n          action.call(this)\n        }\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        this.attemptInRepetitionRecovery(\n          this.repetitionSepSecondInternal,\n          [prodOccurrence, separator, separatorLookAheadFunc, action, NextTerminalAfterManySepWalker],\n          separatorLookAheadFunc,\n          MANY_SEP_IDX,\n          prodOccurrence,\n          NextTerminalAfterManySepWalker,\n        )\n      }\n    }\n    repetitionSepSecondInternal(prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker) {\n      while (separatorLookAheadFunc()) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator)\n        action.call(this)\n      }\n      // we can only arrive to this function after an error\n      // has occurred (hence the name 'second') so the following\n      // IF will always be entered, its possible to remove it...\n      // however it is kept to avoid confusion and be consistent.\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      /* istanbul ignore else */\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker],\n        separatorLookAheadFunc,\n        AT_LEAST_ONE_SEP_IDX,\n        prodOccurrence,\n        nextTerminalAfterWalker,\n      )\n    }\n    doSingleRepetition(action) {\n      const beforeIteration = this.getLexerPosition()\n      action.call(this)\n      const afterIteration = this.getLexerPosition()\n      // This boolean will indicate if this repetition progressed\n      // or if we are \"stuck\" (potential infinite loop in the repetition).\n      return afterIteration > beforeIteration\n    }\n    orInternal(altsOrOpts, occurrence) {\n      const laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence)\n      const alts = isArray$1(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF\n      const laFunc = this.getLaFuncFromCache(laKey)\n      const altIdxToTake = laFunc.call(this, alts)\n      if (altIdxToTake !== undefined) {\n        const chosenAlternative = alts[altIdxToTake]\n        return chosenAlternative.ALT.call(this)\n      }\n      this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG)\n    }\n    ruleFinallyStateUpdate() {\n      this.RULE_STACK.pop()\n      this.RULE_OCCURRENCE_STACK.pop()\n      // NOOP when cst is disabled\n      this.cstFinallyStateUpdate()\n      if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n        const firstRedundantTok = this.LA(1)\n        const errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n          firstRedundant: firstRedundantTok,\n          ruleName: this.getCurrRuleFullName(),\n        })\n        this.SAVE_ERROR(new NotAllInputParsedException(errMsg, firstRedundantTok))\n      }\n    }\n    subruleInternal(ruleToCall, idx, options) {\n      let ruleResult\n      try {\n        const args = options !== undefined ? options.ARGS : undefined\n        this.subruleIdx = idx\n        ruleResult = ruleToCall.apply(this, args)\n        this.cstPostNonTerminal(\n          ruleResult,\n          options !== undefined && options.LABEL !== undefined ? options.LABEL : ruleToCall.ruleName,\n        )\n        return ruleResult\n      } catch (e) {\n        throw this.subruleInternalError(e, options, ruleToCall.ruleName)\n      }\n    }\n    subruleInternalError(e, options, ruleName) {\n      if (isRecognitionException(e) && e.partialCstResult !== undefined) {\n        this.cstPostNonTerminal(\n          e.partialCstResult,\n          options !== undefined && options.LABEL !== undefined ? options.LABEL : ruleName,\n        )\n        delete e.partialCstResult\n      }\n      throw e\n    }\n    consumeInternal(tokType, idx, options) {\n      let consumedToken\n      try {\n        const nextToken = this.LA(1)\n        if (this.tokenMatcher(nextToken, tokType) === true) {\n          this.consumeToken()\n          consumedToken = nextToken\n        } else {\n          this.consumeInternalError(tokType, nextToken, options)\n        }\n      } catch (eFromConsumption) {\n        consumedToken = this.consumeInternalRecovery(tokType, idx, eFromConsumption)\n      }\n      this.cstPostTerminal(\n        options !== undefined && options.LABEL !== undefined ? options.LABEL : tokType.name,\n        consumedToken,\n      )\n      return consumedToken\n    }\n    consumeInternalError(tokType, nextToken, options) {\n      let msg\n      const previousToken = this.LA(0)\n      if (options !== undefined && options.ERR_MSG) {\n        msg = options.ERR_MSG\n      } else {\n        msg = this.errorMessageProvider.buildMismatchTokenMessage({\n          expected: tokType,\n          actual: nextToken,\n          previous: previousToken,\n          ruleName: this.getCurrRuleFullName(),\n        })\n      }\n      throw this.SAVE_ERROR(new MismatchedTokenException(msg, nextToken, previousToken))\n    }\n    consumeInternalRecovery(tokType, idx, eFromConsumption) {\n      // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n      // but the original syntax could have been parsed successfully without any backtracking + recovery\n      if (\n        this.recoveryEnabled &&\n        // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n        eFromConsumption.name === 'MismatchedTokenException' &&\n        !this.isBackTracking()\n      ) {\n        const follows = this.getFollowsForInRuleRecovery(tokType, idx)\n        try {\n          return this.tryInRuleRecovery(tokType, follows)\n        } catch (eFromInRuleRecovery) {\n          if (eFromInRuleRecovery.name === IN_RULE_RECOVERY_EXCEPTION) {\n            // failed in RuleRecovery.\n            // throw the original error in order to trigger reSync error recovery\n            throw eFromConsumption\n          } else {\n            throw eFromInRuleRecovery\n          }\n        }\n      } else {\n        throw eFromConsumption\n      }\n    }\n    saveRecogState() {\n      // errors is a getter which will clone the errors array\n      const savedErrors = this.errors\n      const savedRuleStack = clone(this.RULE_STACK)\n      return {\n        errors: savedErrors,\n        lexerState: this.exportLexerState(),\n        RULE_STACK: savedRuleStack,\n        CST_STACK: this.CST_STACK,\n      }\n    }\n    reloadRecogState(newState) {\n      this.errors = newState.errors\n      this.importLexerState(newState.lexerState)\n      this.RULE_STACK = newState.RULE_STACK\n    }\n    ruleInvocationStateUpdate(shortName, fullName, idxInCallingRule) {\n      this.RULE_OCCURRENCE_STACK.push(idxInCallingRule)\n      this.RULE_STACK.push(shortName)\n      // NOOP when cst is disabled\n      this.cstInvocationStateUpdate(fullName)\n    }\n    isBackTracking() {\n      return this.isBackTrackingStack.length !== 0\n    }\n    getCurrRuleFullName() {\n      const shortName = this.getLastExplicitRuleShortName()\n      return this.shortRuleNameToFull[shortName]\n    }\n    shortRuleNameToFullName(shortName) {\n      return this.shortRuleNameToFull[shortName]\n    }\n    isAtEndOfInput() {\n      return this.tokenMatcher(this.LA(1), EOF)\n    }\n    reset() {\n      this.resetLexerState()\n      this.subruleIdx = 0\n      this.isBackTrackingStack = []\n      this.errors = []\n      this.RULE_STACK = []\n      // TODO: extract a specific reset for TreeBuilder trait\n      this.CST_STACK = []\n      this.RULE_OCCURRENCE_STACK = []\n    }\n  }\n\n  /**\n   * Trait responsible for runtime parsing errors.\n   */\n  class ErrorHandler {\n    initErrorHandler(config) {\n      this._errors = []\n      this.errorMessageProvider = has(config, 'errorMessageProvider')\n        ? config.errorMessageProvider // assumes end user provides the correct config value/type\n        : DEFAULT_PARSER_CONFIG.errorMessageProvider\n    }\n    SAVE_ERROR(error) {\n      if (isRecognitionException(error)) {\n        error.context = {\n          ruleStack: this.getHumanReadableRuleStack(),\n          ruleOccurrenceStack: clone(this.RULE_OCCURRENCE_STACK),\n        }\n        this._errors.push(error)\n        return error\n      } else {\n        throw Error('Trying to save an Error which is not a RecognitionException')\n      }\n    }\n    get errors() {\n      return clone(this._errors)\n    }\n    set errors(newErrors) {\n      this._errors = newErrors\n    }\n    // TODO: consider caching the error message computed information\n    raiseEarlyExitException(occurrence, prodType, userDefinedErrMsg) {\n      const ruleName = this.getCurrRuleFullName()\n      const ruleGrammar = this.getGAstProductions()[ruleName]\n      const lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(\n        occurrence,\n        ruleGrammar,\n        prodType,\n        this.maxLookahead,\n      )\n      const insideProdPaths = lookAheadPathsPerAlternative[0]\n      const actualTokens = []\n      for (let i = 1; i <= this.maxLookahead; i++) {\n        actualTokens.push(this.LA(i))\n      }\n      const msg = this.errorMessageProvider.buildEarlyExitMessage({\n        expectedIterationPaths: insideProdPaths,\n        actual: actualTokens,\n        previous: this.LA(0),\n        customUserDescription: userDefinedErrMsg,\n        ruleName: ruleName,\n      })\n      throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)))\n    }\n    // TODO: consider caching the error message computed information\n    raiseNoAltException(occurrence, errMsgTypes) {\n      const ruleName = this.getCurrRuleFullName()\n      const ruleGrammar = this.getGAstProductions()[ruleName]\n      // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n      const lookAheadPathsPerAlternative = getLookaheadPathsForOr(occurrence, ruleGrammar, this.maxLookahead)\n      const actualTokens = []\n      for (let i = 1; i <= this.maxLookahead; i++) {\n        actualTokens.push(this.LA(i))\n      }\n      const previousToken = this.LA(0)\n      const errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n        expectedPathsPerAlt: lookAheadPathsPerAlternative,\n        actual: actualTokens,\n        previous: previousToken,\n        customUserDescription: errMsgTypes,\n        ruleName: this.getCurrRuleFullName(),\n      })\n      throw this.SAVE_ERROR(new NoViableAltException(errMsg, this.LA(1), previousToken))\n    }\n  }\n\n  class ContentAssist {\n    initContentAssist() {}\n    computeContentAssist(startRuleName, precedingInput) {\n      const startRuleGast = this.gastProductionsCache[startRuleName]\n      if (isUndefined(startRuleGast)) {\n        throw Error(`Rule ->${startRuleName}<- does not exist in this grammar.`)\n      }\n      return nextPossibleTokensAfter([startRuleGast], precedingInput, this.tokenMatcher, this.maxLookahead)\n    }\n    // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...\n    // TODO: should this be more explicitly part of the public API?\n    getNextPossibleTokenTypes(grammarPath) {\n      const topRuleName = head(grammarPath.ruleStack)\n      const gastProductions = this.getGAstProductions()\n      const topProduction = gastProductions[topRuleName]\n      const nextPossibleTokenTypes = new NextAfterTokenWalker(topProduction, grammarPath).startWalking()\n      return nextPossibleTokenTypes\n    }\n  }\n\n  const RECORDING_NULL_OBJECT = {\n    description: 'This Object indicates the Parser is during Recording Phase',\n  }\n  Object.freeze(RECORDING_NULL_OBJECT)\n  const HANDLE_SEPARATOR = true\n  const MAX_METHOD_IDX = Math.pow(2, BITS_FOR_OCCURRENCE_IDX) - 1\n  const RFT = createToken({ name: 'RECORDING_PHASE_TOKEN', pattern: Lexer.NA })\n  augmentTokenTypes([RFT])\n  const RECORDING_PHASE_TOKEN = createTokenInstance(\n    RFT,\n    'This IToken indicates the Parser is in Recording Phase\\n\\t' +\n      '' +\n      'See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details',\n    // Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n    // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n  )\n  Object.freeze(RECORDING_PHASE_TOKEN)\n  const RECORDING_PHASE_CSTNODE = {\n    name:\n      'This CSTNode indicates the Parser is in Recording Phase\\n\\t' +\n      'See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details',\n    children: {},\n  }\n  /**\n   * This trait handles the creation of the GAST structure for Chevrotain Grammars\n   */\n  class GastRecorder {\n    initGastRecorder(config) {\n      this.recordingProdStack = []\n      this.RECORDING_PHASE = false\n    }\n    enableRecording() {\n      this.RECORDING_PHASE = true\n      this.TRACE_INIT('Enable Recording', () => {\n        /**\n         * Warning Dark Voodoo Magic upcoming!\n         * We are \"replacing\" the public parsing DSL methods API\n         * With **new** alternative implementations on the Parser **instance**\n         *\n         * So far this is the only way I've found to avoid performance regressions during parsing time.\n         * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\n         *   implementations directly instead.\n         */\n        for (let i = 0; i < 10; i++) {\n          const idx = i > 0 ? i : ''\n          this[`CONSUME${idx}`] = function (arg1, arg2) {\n            return this.consumeInternalRecord(arg1, i, arg2)\n          }\n          this[`SUBRULE${idx}`] = function (arg1, arg2) {\n            return this.subruleInternalRecord(arg1, i, arg2)\n          }\n          this[`OPTION${idx}`] = function (arg1) {\n            return this.optionInternalRecord(arg1, i)\n          }\n          this[`OR${idx}`] = function (arg1) {\n            return this.orInternalRecord(arg1, i)\n          }\n          this[`MANY${idx}`] = function (arg1) {\n            this.manyInternalRecord(i, arg1)\n          }\n          this[`MANY_SEP${idx}`] = function (arg1) {\n            this.manySepFirstInternalRecord(i, arg1)\n          }\n          this[`AT_LEAST_ONE${idx}`] = function (arg1) {\n            this.atLeastOneInternalRecord(i, arg1)\n          }\n          this[`AT_LEAST_ONE_SEP${idx}`] = function (arg1) {\n            this.atLeastOneSepFirstInternalRecord(i, arg1)\n          }\n        }\n        // DSL methods with the idx(suffix) as an argument\n        this[`consume`] = function (idx, arg1, arg2) {\n          return this.consumeInternalRecord(arg1, idx, arg2)\n        }\n        this[`subrule`] = function (idx, arg1, arg2) {\n          return this.subruleInternalRecord(arg1, idx, arg2)\n        }\n        this[`option`] = function (idx, arg1) {\n          return this.optionInternalRecord(arg1, idx)\n        }\n        this[`or`] = function (idx, arg1) {\n          return this.orInternalRecord(arg1, idx)\n        }\n        this[`many`] = function (idx, arg1) {\n          this.manyInternalRecord(idx, arg1)\n        }\n        this[`atLeastOne`] = function (idx, arg1) {\n          this.atLeastOneInternalRecord(idx, arg1)\n        }\n        this.ACTION = this.ACTION_RECORD\n        this.BACKTRACK = this.BACKTRACK_RECORD\n        this.LA = this.LA_RECORD\n      })\n    }\n    disableRecording() {\n      this.RECORDING_PHASE = false\n      // By deleting these **instance** properties, any future invocation\n      // will be deferred to the original methods on the **prototype** object\n      // This seems to get rid of any incorrect optimizations that V8 may\n      // do during the recording phase.\n      this.TRACE_INIT('Deleting Recording methods', () => {\n        const that = this\n        for (let i = 0; i < 10; i++) {\n          const idx = i > 0 ? i : ''\n          delete that[`CONSUME${idx}`]\n          delete that[`SUBRULE${idx}`]\n          delete that[`OPTION${idx}`]\n          delete that[`OR${idx}`]\n          delete that[`MANY${idx}`]\n          delete that[`MANY_SEP${idx}`]\n          delete that[`AT_LEAST_ONE${idx}`]\n          delete that[`AT_LEAST_ONE_SEP${idx}`]\n        }\n        delete that[`consume`]\n        delete that[`subrule`]\n        delete that[`option`]\n        delete that[`or`]\n        delete that[`many`]\n        delete that[`atLeastOne`]\n        delete that.ACTION\n        delete that.BACKTRACK\n        delete that.LA\n      })\n    }\n    //   Parser methods are called inside an ACTION?\n    //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n    // @ts-expect-error -- noop place holder\n    ACTION_RECORD(impl) {\n      // NO-OP during recording\n    }\n    // Executing backtracking logic will break our recording logic assumptions\n    BACKTRACK_RECORD(grammarRule, args) {\n      return () => true\n    }\n    // LA is part of the official API and may be used for custom lookahead logic\n    // by end users who may forget to wrap it in ACTION or inside a GATE\n    LA_RECORD(howMuch) {\n      // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n      // On LA return EOF at the end of the input so an infinite loop may occur.\n      return END_OF_FILE\n    }\n    topLevelRuleRecord(name, def) {\n      try {\n        const newTopLevelRule = new Rule({ definition: [], name: name })\n        newTopLevelRule.name = name\n        this.recordingProdStack.push(newTopLevelRule)\n        def.call(this)\n        this.recordingProdStack.pop()\n        return newTopLevelRule\n      } catch (originalError) {\n        if (originalError.KNOWN_RECORDER_ERROR !== true) {\n          try {\n            originalError.message =\n              originalError.message +\n              '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' +\n              'https://chevrotain.io/docs/guide/internals.html#grammar-recording'\n          } catch (mutabilityError) {\n            // We may not be able to modify the original error object\n            throw originalError\n          }\n        }\n        throw originalError\n      }\n    }\n    // Implementation of parsing DSL\n    optionInternalRecord(actionORMethodDef, occurrence) {\n      return recordProd.call(this, Option, actionORMethodDef, occurrence)\n    }\n    atLeastOneInternalRecord(occurrence, actionORMethodDef) {\n      recordProd.call(this, RepetitionMandatory, actionORMethodDef, occurrence)\n    }\n    atLeastOneSepFirstInternalRecord(occurrence, options) {\n      recordProd.call(this, RepetitionMandatoryWithSeparator, options, occurrence, HANDLE_SEPARATOR)\n    }\n    manyInternalRecord(occurrence, actionORMethodDef) {\n      recordProd.call(this, Repetition, actionORMethodDef, occurrence)\n    }\n    manySepFirstInternalRecord(occurrence, options) {\n      recordProd.call(this, RepetitionWithSeparator, options, occurrence, HANDLE_SEPARATOR)\n    }\n    orInternalRecord(altsOrOpts, occurrence) {\n      return recordOrProd.call(this, altsOrOpts, occurrence)\n    }\n    subruleInternalRecord(ruleToCall, occurrence, options) {\n      assertMethodIdxIsValid(occurrence)\n      if (!ruleToCall || has(ruleToCall, 'ruleName') === false) {\n        const error = new Error(\n          `<SUBRULE${getIdxSuffix(occurrence)}> argument is invalid` +\n            ` expecting a Parser method reference but got: <${JSON.stringify(ruleToCall)}>` +\n            `\\n inside top level rule: <${this.recordingProdStack[0].name}>`,\n        )\n        error.KNOWN_RECORDER_ERROR = true\n        throw error\n      }\n      const prevProd = last(this.recordingProdStack)\n      const ruleName = ruleToCall.ruleName\n      const newNoneTerminal = new NonTerminal({\n        idx: occurrence,\n        nonTerminalName: ruleName,\n        label: options === null || options === void 0 ? void 0 : options.LABEL,\n        // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n        referencedRule: undefined,\n      })\n      prevProd.definition.push(newNoneTerminal)\n      return this.outputCst ? RECORDING_PHASE_CSTNODE : RECORDING_NULL_OBJECT\n    }\n    consumeInternalRecord(tokType, occurrence, options) {\n      assertMethodIdxIsValid(occurrence)\n      if (!hasShortKeyProperty(tokType)) {\n        const error = new Error(\n          `<CONSUME${getIdxSuffix(occurrence)}> argument is invalid` +\n            ` expecting a TokenType reference but got: <${JSON.stringify(tokType)}>` +\n            `\\n inside top level rule: <${this.recordingProdStack[0].name}>`,\n        )\n        error.KNOWN_RECORDER_ERROR = true\n        throw error\n      }\n      const prevProd = last(this.recordingProdStack)\n      const newNoneTerminal = new Terminal({\n        idx: occurrence,\n        terminalType: tokType,\n        label: options === null || options === void 0 ? void 0 : options.LABEL,\n      })\n      prevProd.definition.push(newNoneTerminal)\n      return RECORDING_PHASE_TOKEN\n    }\n  }\n  function recordProd(prodConstructor, mainProdArg, occurrence, handleSep = false) {\n    assertMethodIdxIsValid(occurrence)\n    const prevProd = last(this.recordingProdStack)\n    const grammarAction = isFunction(mainProdArg) ? mainProdArg : mainProdArg.DEF\n    const newProd = new prodConstructor({ definition: [], idx: occurrence })\n    if (handleSep) {\n      newProd.separator = mainProdArg.SEP\n    }\n    if (has(mainProdArg, 'MAX_LOOKAHEAD')) {\n      newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD\n    }\n    this.recordingProdStack.push(newProd)\n    grammarAction.call(this)\n    prevProd.definition.push(newProd)\n    this.recordingProdStack.pop()\n    return RECORDING_NULL_OBJECT\n  }\n  function recordOrProd(mainProdArg, occurrence) {\n    assertMethodIdxIsValid(occurrence)\n    const prevProd = last(this.recordingProdStack)\n    // Only an array of alternatives\n    const hasOptions = isArray$1(mainProdArg) === false\n    const alts = hasOptions === false ? mainProdArg : mainProdArg.DEF\n    const newOrProd = new Alternation({\n      definition: [],\n      idx: occurrence,\n      ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true,\n    })\n    if (has(mainProdArg, 'MAX_LOOKAHEAD')) {\n      newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD\n    }\n    const hasPredicates = some(alts, (currAlt) => isFunction(currAlt.GATE))\n    newOrProd.hasPredicates = hasPredicates\n    prevProd.definition.push(newOrProd)\n    forEach(alts, (currAlt) => {\n      const currAltFlat = new Alternative({ definition: [] })\n      newOrProd.definition.push(currAltFlat)\n      if (has(currAlt, 'IGNORE_AMBIGUITIES')) {\n        currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES // assumes end user provides the correct config value/type\n      }\n      // **implicit** ignoreAmbiguities due to usage of gate\n      else if (has(currAlt, 'GATE')) {\n        currAltFlat.ignoreAmbiguities = true\n      }\n      this.recordingProdStack.push(currAltFlat)\n      currAlt.ALT.call(this)\n      this.recordingProdStack.pop()\n    })\n    return RECORDING_NULL_OBJECT\n  }\n  function getIdxSuffix(idx) {\n    return idx === 0 ? '' : `${idx}`\n  }\n  function assertMethodIdxIsValid(idx) {\n    if (idx < 0 || idx > MAX_METHOD_IDX) {\n      const error = new Error(\n        // The stack trace will contain all the needed details\n        `Invalid DSL Method idx value: <${idx}>\\n\\t` +\n          `Idx value must be a none negative value smaller than ${MAX_METHOD_IDX + 1}`,\n      )\n      error.KNOWN_RECORDER_ERROR = true\n      throw error\n    }\n  }\n\n  /**\n   * Trait responsible for runtime parsing errors.\n   */\n  class PerformanceTracer {\n    initPerformanceTracer(config) {\n      if (has(config, 'traceInitPerf')) {\n        const userTraceInitPerf = config.traceInitPerf\n        const traceIsNumber = typeof userTraceInitPerf === 'number'\n        this.traceInitMaxIdent = traceIsNumber ? userTraceInitPerf : Infinity\n        this.traceInitPerf = traceIsNumber ? userTraceInitPerf > 0 : userTraceInitPerf // assumes end user provides the correct config value/type\n      } else {\n        this.traceInitMaxIdent = 0\n        this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf\n      }\n      this.traceInitIndent = -1\n    }\n    TRACE_INIT(phaseDesc, phaseImpl) {\n      // No need to optimize this using NOOP pattern because\n      // It is not called in a hot spot...\n      if (this.traceInitPerf === true) {\n        this.traceInitIndent++\n        const indent = new Array(this.traceInitIndent + 1).join('\\t')\n        if (this.traceInitIndent < this.traceInitMaxIdent) {\n          console.log(`${indent}--> <${phaseDesc}>`)\n        }\n        const { time, value } = timer(phaseImpl)\n        /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n        const traceMethod = time > 10 ? console.warn : console.log\n        if (this.traceInitIndent < this.traceInitMaxIdent) {\n          traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`)\n        }\n        this.traceInitIndent--\n        return value\n      } else {\n        return phaseImpl()\n      }\n    }\n  }\n\n  function applyMixins(derivedCtor, baseCtors) {\n    baseCtors.forEach((baseCtor) => {\n      const baseProto = baseCtor.prototype\n      Object.getOwnPropertyNames(baseProto).forEach((propName) => {\n        if (propName === 'constructor') {\n          return\n        }\n        const basePropDescriptor = Object.getOwnPropertyDescriptor(baseProto, propName)\n        // Handle Accessors\n        if (basePropDescriptor && (basePropDescriptor.get || basePropDescriptor.set)) {\n          Object.defineProperty(derivedCtor.prototype, propName, basePropDescriptor)\n        } else {\n          derivedCtor.prototype[propName] = baseCtor.prototype[propName]\n        }\n      })\n    })\n  }\n\n  const END_OF_FILE = createTokenInstance(EOF, '', NaN, NaN, NaN, NaN, NaN, NaN)\n  Object.freeze(END_OF_FILE)\n  const DEFAULT_PARSER_CONFIG = Object.freeze({\n    recoveryEnabled: false,\n    maxLookahead: 3,\n    dynamicTokensEnabled: false,\n    outputCst: true,\n    errorMessageProvider: defaultParserErrorProvider,\n    nodeLocationTracking: 'none',\n    traceInitPerf: false,\n    skipValidations: false,\n  })\n  const DEFAULT_RULE_CONFIG = Object.freeze({\n    recoveryValueFunc: () => undefined,\n    resyncEnabled: true,\n  })\n  var ParserDefinitionErrorType\n  ;(function (ParserDefinitionErrorType) {\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['INVALID_RULE_NAME'] = 0)] = 'INVALID_RULE_NAME'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['DUPLICATE_RULE_NAME'] = 1)] = 'DUPLICATE_RULE_NAME'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['INVALID_RULE_OVERRIDE'] = 2)] = 'INVALID_RULE_OVERRIDE'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['DUPLICATE_PRODUCTIONS'] = 3)] = 'DUPLICATE_PRODUCTIONS'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['UNRESOLVED_SUBRULE_REF'] = 4)] = 'UNRESOLVED_SUBRULE_REF'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['LEFT_RECURSION'] = 5)] = 'LEFT_RECURSION'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['NONE_LAST_EMPTY_ALT'] = 6)] = 'NONE_LAST_EMPTY_ALT'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['AMBIGUOUS_ALTS'] = 7)] = 'AMBIGUOUS_ALTS'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['CONFLICT_TOKENS_RULES_NAMESPACE'] = 8)] =\n      'CONFLICT_TOKENS_RULES_NAMESPACE'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['INVALID_TOKEN_NAME'] = 9)] = 'INVALID_TOKEN_NAME'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['NO_NON_EMPTY_LOOKAHEAD'] = 10)] = 'NO_NON_EMPTY_LOOKAHEAD'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['AMBIGUOUS_PREFIX_ALTS'] = 11)] = 'AMBIGUOUS_PREFIX_ALTS'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['TOO_MANY_ALTS'] = 12)] = 'TOO_MANY_ALTS'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['CUSTOM_LOOKAHEAD_VALIDATION'] = 13)] =\n      'CUSTOM_LOOKAHEAD_VALIDATION'\n  })(ParserDefinitionErrorType || (ParserDefinitionErrorType = {}))\n  class Parser {\n    /**\n     *  @deprecated use the **instance** method with the same name instead\n     */\n    static performSelfAnalysis(parserInstance) {\n      throw Error(\n        'The **static** `performSelfAnalysis` method has been deprecated.' +\n          '\\t\\nUse the **instance** method with the same name instead.',\n      )\n    }\n    performSelfAnalysis() {\n      this.TRACE_INIT('performSelfAnalysis', () => {\n        let defErrorsMsgs\n        this.selfAnalysisDone = true\n        const className = this.className\n        this.TRACE_INIT('toFastProps', () => {\n          // Without this voodoo magic the parser would be x3-x4 slower\n          // It seems it is better to invoke `toFastProperties` **before**\n          // Any manipulations of the `this` object done during the recording phase.\n          toFastProperties(this)\n        })\n        this.TRACE_INIT('Grammar Recording', () => {\n          try {\n            this.enableRecording()\n            // Building the GAST\n            forEach(this.definedRulesNames, (currRuleName) => {\n              const wrappedRule = this[currRuleName]\n              const originalGrammarAction = wrappedRule['originalGrammarAction']\n              let recordedRuleGast\n              this.TRACE_INIT(`${currRuleName} Rule`, () => {\n                recordedRuleGast = this.topLevelRuleRecord(currRuleName, originalGrammarAction)\n              })\n              this.gastProductionsCache[currRuleName] = recordedRuleGast\n            })\n          } finally {\n            this.disableRecording()\n          }\n        })\n        let resolverErrors = []\n        this.TRACE_INIT('Grammar Resolving', () => {\n          resolverErrors = resolveGrammar({\n            rules: values(this.gastProductionsCache),\n          })\n          this.definitionErrors = this.definitionErrors.concat(resolverErrors)\n        })\n        this.TRACE_INIT('Grammar Validations', () => {\n          // only perform additional grammar validations IFF no resolving errors have occurred.\n          // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.\n          if (isEmpty(resolverErrors) && this.skipValidations === false) {\n            const validationErrors = validateGrammar({\n              rules: values(this.gastProductionsCache),\n              tokenTypes: values(this.tokensMap),\n              errMsgProvider: defaultGrammarValidatorErrorProvider,\n              grammarName: className,\n            })\n            const lookaheadValidationErrors = validateLookahead({\n              lookaheadStrategy: this.lookaheadStrategy,\n              rules: values(this.gastProductionsCache),\n              tokenTypes: values(this.tokensMap),\n              grammarName: className,\n            })\n            this.definitionErrors = this.definitionErrors.concat(validationErrors, lookaheadValidationErrors)\n          }\n        })\n        // this analysis may fail if the grammar is not perfectly valid\n        if (isEmpty(this.definitionErrors)) {\n          // The results of these computations are not needed unless error recovery is enabled.\n          if (this.recoveryEnabled) {\n            this.TRACE_INIT('computeAllProdsFollows', () => {\n              const allFollows = computeAllProdsFollows(values(this.gastProductionsCache))\n              this.resyncFollows = allFollows\n            })\n          }\n          this.TRACE_INIT('ComputeLookaheadFunctions', () => {\n            var _a, _b\n            ;(_b = (_a = this.lookaheadStrategy).initialize) === null || _b === void 0\n              ? void 0\n              : _b.call(_a, {\n                  rules: values(this.gastProductionsCache),\n                })\n            this.preComputeLookaheadFunctions(values(this.gastProductionsCache))\n          })\n        }\n        if (!Parser.DEFER_DEFINITION_ERRORS_HANDLING && !isEmpty(this.definitionErrors)) {\n          defErrorsMsgs = map(this.definitionErrors, (defError) => defError.message)\n          throw new Error(\n            `Parser Definition Errors detected:\\n ${defErrorsMsgs.join('\\n-------------------------------\\n')}`,\n          )\n        }\n      })\n    }\n    constructor(tokenVocabulary, config) {\n      this.definitionErrors = []\n      this.selfAnalysisDone = false\n      const that = this\n      that.initErrorHandler(config)\n      that.initLexerAdapter()\n      that.initLooksAhead(config)\n      that.initRecognizerEngine(tokenVocabulary, config)\n      that.initRecoverable(config)\n      that.initTreeBuilder(config)\n      that.initContentAssist()\n      that.initGastRecorder(config)\n      that.initPerformanceTracer(config)\n      if (has(config, 'ignoredIssues')) {\n        throw new Error(\n          'The <ignoredIssues> IParserConfig property has been deprecated.\\n\\t' +\n            'Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\\n\\t' +\n            'See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\\n\\t' +\n            'For further details.',\n        )\n      }\n      this.skipValidations = has(config, 'skipValidations')\n        ? config.skipValidations // casting assumes the end user passing the correct type\n        : DEFAULT_PARSER_CONFIG.skipValidations\n    }\n  }\n  // Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.\n  // (normally during the parser's constructor).\n  // This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,\n  // for example: duplicate rule names, referencing an unresolved subrule, ect...\n  // This flag should not be enabled during normal usage, it is used in special situations, for example when\n  // needing to display the parser definition errors in some GUI(online playground).\n  Parser.DEFER_DEFINITION_ERRORS_HANDLING = false\n  applyMixins(Parser, [\n    Recoverable,\n    LooksAhead,\n    TreeBuilder,\n    LexerAdapter,\n    RecognizerEngine,\n    RecognizerApi,\n    ErrorHandler,\n    ContentAssist,\n    GastRecorder,\n    PerformanceTracer,\n  ])\n  class CstParser extends Parser {\n    constructor(tokenVocabulary, config = DEFAULT_PARSER_CONFIG) {\n      const configClone = clone(config)\n      configClone.outputCst = true\n      super(tokenVocabulary, configClone)\n    }\n  }\n\n  return { CstParser, Lexer, createToken }\n})()\n\nexport { CstParser, Lexer, createToken }\n"]},"metadata":{},"sourceType":"module"}