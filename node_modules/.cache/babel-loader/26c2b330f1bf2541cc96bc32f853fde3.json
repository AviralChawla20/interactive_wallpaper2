{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { UniformsUtils, ShaderMaterial } from \"three\";\nimport { FilmShader } from \"../shaders/FilmShader.js\";\nclass FilmPass extends Pass {\n  constructor(noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale) {\n    super();\n    __publicField(this, \"material\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"uniforms\");\n    if (FilmShader === void 0) console.error(\"THREE.FilmPass relies on FilmShader\");\n    const shader = FilmShader;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    if (grayscale !== void 0) this.uniforms.grayscale.value = grayscale;\n    if (noiseIntensity !== void 0) this.uniforms.nIntensity.value = noiseIntensity;\n    if (scanlinesIntensity !== void 0) this.uniforms.sIntensity.value = scanlinesIntensity;\n    if (scanlinesCount !== void 0) this.uniforms.sCount.value = scanlinesCount;\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime) {\n    this.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.uniforms[\"time\"].value += deltaTime;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n}\nexport { FilmPass };","map":{"version":3,"sources":["../../src/postprocessing/FilmPass.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAIA,MAAM,QAAA,SAAiB,IAAA,CAAK;EAM1B,WAAA,CAAY,cAAA,EAAyB,kBAAA,EAA6B,cAAA,EAAyB,SAAA,EAAqB;IACxG,KAAA,CAAA,CAAA;IAND,aAAA,CAAA,IAAA,EAAA,UAAA,CAAA;IACA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;IAEA,aAAA,CAAA,IAAA,EAAA,UAAA,CAAA;IAKL,IAAI,UAAA,KAAe,KAAA,CAAA,EAAW,OAAA,CAAQ,KAAA,CAAM,qCAAqC,CAAA;IAEjF,MAAM,MAAA,GAAS,UAAA;IAEf,IAAA,CAAK,QAAA,GAAW,aAAA,CAAc,KAAA,CAAM,MAAA,CAAO,QAAQ,CAAA;IAE9C,IAAA,CAAA,QAAA,GAAW,IAAI,cAAA,CAAe;MACjC,QAAA,EAAU,IAAA,CAAK,QAAA;MACf,YAAA,EAAc,MAAA,CAAO,YAAA;MACrB,cAAA,EAAgB,MAAA,CAAO;IAAA,CACxB,CAAA;IAED,IAAI,SAAA,KAAc,KAAA,CAAA,EAAgB,IAAA,CAAA,QAAA,CAAS,SAAA,CAAU,KAAA,GAAQ,SAAA;IAC7D,IAAI,cAAA,KAAmB,KAAA,CAAA,EAAgB,IAAA,CAAA,QAAA,CAAS,UAAA,CAAW,KAAA,GAAQ,cAAA;IACnE,IAAI,kBAAA,KAAuB,KAAA,CAAA,EAAgB,IAAA,CAAA,QAAA,CAAS,UAAA,CAAW,KAAA,GAAQ,kBAAA;IACvE,IAAI,cAAA,KAAmB,KAAA,CAAA,EAAgB,IAAA,CAAA,QAAA,CAAS,MAAA,CAAO,KAAA,GAAQ,cAAA;IAE/D,IAAA,CAAK,MAAA,GAAS,IAAI,cAAA,CAAe,IAAA,CAAK,QAAQ,CAAA;EAChD;EAEO,MAAA,CACL,QAAA,EACA,WAAA,EACA,UAAA,EACA,SAAA,EACM;IACN,IAAA,CAAK,QAAA,CAAS,UAAU,CAAA,CAAE,KAAA,GAAQ,UAAA,CAAW,OAAA;IACxC,IAAA,CAAA,QAAA,CAAS,MAAM,CAAA,CAAE,KAAA,IAAS,SAAA;IAE/B,IAAI,IAAA,CAAK,cAAA,EAAgB;MACvB,QAAA,CAAS,eAAA,CAAgB,IAAI,CAAA;MACxB,IAAA,CAAA,MAAA,CAAO,MAAA,CAAO,QAAQ,CAAA;IAAA,CAAA,MACtB;MACL,QAAA,CAAS,eAAA,CAAgB,WAAW,CAAA;MACpC,IAAI,IAAA,CAAK,KAAA,EAAO,QAAA,CAAS,KAAA,CAAM,CAAA;MAC1B,IAAA,CAAA,MAAA,CAAO,MAAA,CAAO,QAAQ,CAAA;IAC7B;EACF;AACF","sourcesContent":["import { Pass, FullScreenQuad } from './Pass'\nimport { IUniform, ShaderMaterial, UniformsUtils, WebGLRenderer, WebGLRenderTarget } from 'three'\nimport { FilmShader } from '../shaders/FilmShader'\n\nclass FilmPass extends Pass {\n  public material: ShaderMaterial\n  public fsQuad: FullScreenQuad\n\n  public uniforms: Record<keyof typeof FilmShader['uniforms'], IUniform<any>>\n\n  constructor(noiseIntensity?: number, scanlinesIntensity?: number, scanlinesCount?: number, grayscale?: boolean) {\n    super()\n\n    if (FilmShader === undefined) console.error('THREE.FilmPass relies on FilmShader')\n\n    const shader = FilmShader\n\n    this.uniforms = UniformsUtils.clone(shader.uniforms)\n\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n    })\n\n    if (grayscale !== undefined) this.uniforms.grayscale.value = grayscale\n    if (noiseIntensity !== undefined) this.uniforms.nIntensity.value = noiseIntensity\n    if (scanlinesIntensity !== undefined) this.uniforms.sIntensity.value = scanlinesIntensity\n    if (scanlinesCount !== undefined) this.uniforms.sCount.value = scanlinesCount\n\n    this.fsQuad = new FullScreenQuad(this.material)\n  }\n\n  public render(\n    renderer: WebGLRenderer,\n    writeBuffer: WebGLRenderTarget,\n    readBuffer: WebGLRenderTarget,\n    deltaTime: number,\n  ): void {\n    this.uniforms['tDiffuse'].value = readBuffer.texture\n    this.uniforms['time'].value += deltaTime\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null)\n      this.fsQuad.render(renderer)\n    } else {\n      renderer.setRenderTarget(writeBuffer)\n      if (this.clear) renderer.clear()\n      this.fsQuad.render(renderer)\n    }\n  }\n}\n\nexport { FilmPass }\n"]},"metadata":{},"sourceType":"module"}