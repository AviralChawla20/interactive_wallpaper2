{"ast":null,"code":"import { BufferGeometry, Vector3, Float32BufferAttribute } from \"three\";\nclass ParametricGeometry extends BufferGeometry {\n  constructor(func = (u, v, target) => target.set(u, v, Math.cos(u) * Math.sin(v)), slices = 8, stacks = 8) {\n    super();\n    this.type = \"ParametricGeometry\";\n    this.parameters = {\n      func,\n      slices,\n      stacks\n    };\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const EPS = 1e-5;\n    const normal = new Vector3();\n    const p0 = new Vector3(),\n      p1 = new Vector3();\n    const pu = new Vector3(),\n      pv = new Vector3();\n    const sliceCount = slices + 1;\n    for (let i = 0; i <= stacks; i++) {\n      const v = i / stacks;\n      for (let j = 0; j <= slices; j++) {\n        const u = j / slices;\n        func(u, v, p0);\n        vertices.push(p0.x, p0.y, p0.z);\n        if (u - EPS >= 0) {\n          func(u - EPS, v, p1);\n          pu.subVectors(p0, p1);\n        } else {\n          func(u + EPS, v, p1);\n          pu.subVectors(p1, p0);\n        }\n        if (v - EPS >= 0) {\n          func(u, v - EPS, p1);\n          pv.subVectors(p0, p1);\n        } else {\n          func(u, v + EPS, p1);\n          pv.subVectors(p1, p0);\n        }\n        normal.crossVectors(pu, pv).normalize();\n        normals.push(normal.x, normal.y, normal.z);\n        uvs.push(u, v);\n      }\n    }\n    for (let i = 0; i < stacks; i++) {\n      for (let j = 0; j < slices; j++) {\n        const a = i * sliceCount + j;\n        const b = i * sliceCount + j + 1;\n        const c = (i + 1) * sliceCount + j + 1;\n        const d = (i + 1) * sliceCount + j;\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n    this.setIndex(indices);\n    this.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    this.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n  }\n}\nexport { ParametricGeometry };","map":{"version":3,"sources":["../../src/geometries/ParametricGeometry.js"],"names":[],"mappings":"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","sourcesContent":["import { BufferGeometry, Float32BufferAttribute, Vector3 } from 'three'\n\n/**\n * Parametric Surfaces Geometry\n * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n */\nclass ParametricGeometry extends BufferGeometry {\n  constructor(func = (u, v, target) => target.set(u, v, Math.cos(u) * Math.sin(v)), slices = 8, stacks = 8) {\n    super()\n\n    this.type = 'ParametricGeometry'\n\n    this.parameters = {\n      func: func,\n      slices: slices,\n      stacks: stacks,\n    }\n\n    // buffers\n\n    const indices = []\n    const vertices = []\n    const normals = []\n    const uvs = []\n\n    const EPS = 0.00001\n\n    const normal = new Vector3()\n\n    const p0 = new Vector3(),\n      p1 = new Vector3()\n    const pu = new Vector3(),\n      pv = new Vector3()\n\n    // generate vertices, normals and uvs\n\n    const sliceCount = slices + 1\n\n    for (let i = 0; i <= stacks; i++) {\n      const v = i / stacks\n\n      for (let j = 0; j <= slices; j++) {\n        const u = j / slices\n\n        // vertex\n\n        func(u, v, p0)\n        vertices.push(p0.x, p0.y, p0.z)\n\n        // normal\n\n        // approximate tangent vectors via finite differences\n\n        if (u - EPS >= 0) {\n          func(u - EPS, v, p1)\n          pu.subVectors(p0, p1)\n        } else {\n          func(u + EPS, v, p1)\n          pu.subVectors(p1, p0)\n        }\n\n        if (v - EPS >= 0) {\n          func(u, v - EPS, p1)\n          pv.subVectors(p0, p1)\n        } else {\n          func(u, v + EPS, p1)\n          pv.subVectors(p1, p0)\n        }\n\n        // cross product of tangent vectors returns surface normal\n\n        normal.crossVectors(pu, pv).normalize()\n        normals.push(normal.x, normal.y, normal.z)\n\n        // uv\n\n        uvs.push(u, v)\n      }\n    }\n\n    // generate indices\n\n    for (let i = 0; i < stacks; i++) {\n      for (let j = 0; j < slices; j++) {\n        const a = i * sliceCount + j\n        const b = i * sliceCount + j + 1\n        const c = (i + 1) * sliceCount + j + 1\n        const d = (i + 1) * sliceCount + j\n\n        // faces one and two\n\n        indices.push(a, b, d)\n        indices.push(b, c, d)\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices)\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3))\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3))\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2))\n  }\n}\n\nexport { ParametricGeometry }\n"]},"metadata":{},"sourceType":"module"}