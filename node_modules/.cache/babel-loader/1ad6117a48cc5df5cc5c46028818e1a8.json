{"ast":null,"code":"const WaterRefractionShader = {\n  uniforms: {\n    color: {\n      value: null\n    },\n    time: {\n      value: 0\n    },\n    tDiffuse: {\n      value: null\n    },\n    tDudv: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader: [\"uniform mat4 textureMatrix;\", \"varying vec2 vUv;\", \"varying vec4 vUvRefraction;\", \"void main() {\", \"\tvUv = uv;\", \"\tvUvRefraction = textureMatrix * vec4( position, 1.0 );\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform vec3 color;\", \"uniform float time;\", \"uniform sampler2D tDiffuse;\", \"uniform sampler2D tDudv;\", \"varying vec2 vUv;\", \"varying vec4 vUvRefraction;\", \"float blendOverlay( float base, float blend ) {\", \"\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\", \"}\", \"vec3 blendOverlay( vec3 base, vec3 blend ) {\", \"\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ),blendOverlay( base.b, blend.b ) );\", \"}\", \"void main() {\", \" float waveStrength = 0.1;\", \" float waveSpeed = 0.03;\",\n  // simple distortion (ripple) via dudv map (see https://www.youtube.com/watch?v=6B7IF6GOu7s)\n  \"\tvec2 distortedUv = texture2D( tDudv, vec2( vUv.x + time * waveSpeed, vUv.y ) ).rg * waveStrength;\", \"\tdistortedUv = vUv.xy + vec2( distortedUv.x, distortedUv.y + time * waveSpeed );\", \"\tvec2 distortion = ( texture2D( tDudv, distortedUv ).rg * 2.0 - 1.0 ) * waveStrength;\",\n  // new uv coords\n  \" vec4 uv = vec4( vUvRefraction );\", \" uv.xy += distortion;\", \"\tvec4 base = texture2DProj( tDiffuse, uv );\", \"\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\", \"}\"].join(\"\\n\")\n};\nexport { WaterRefractionShader };","map":{"version":3,"sources":["../../src/shaders/WaterRefractionShader.ts"],"names":[],"mappings":"AAAO,MAAM,qBAAA,GAAwB;EACnC,QAAA,EAAU;IACR,KAAA,EAAO;MACL,KAAA,EAAO;IACT,CAAA;IAEA,IAAA,EAAM;MACJ,KAAA,EAAO;IACT,CAAA;IAEA,QAAA,EAAU;MACR,KAAA,EAAO;IACT,CAAA;IAEA,KAAA,EAAO;MACL,KAAA,EAAO;IACT,CAAA;IAEA,aAAA,EAAe;MACb,KAAA,EAAO;IACT;EACF,CAAA;EAEA,YAAA,EAAc,CACZ,6BAAA,EAEA,mBAAA,EACA,6BAAA,EAEA,eAAA,EAEA,YAAA,EAEA,yDAAA,EAEA,4EAAA,EAEA,GAAA,CAAA,CACA,IAAA,CAAK,IAAI,CAAA;EAEX,cAAA,EAAgB,CACd,qBAAA,EACA,qBAAA,EACA,6BAAA,EACA,0BAAA,EAEA,mBAAA,EACA,6BAAA,EAEA,iDAAA,EAEA,oGAAA,EAEA,GAAA,EAEA,8CAAA,EAEA,mHAAA,EAEA,GAAA,EAEA,eAAA,EAEA,4BAAA,EACA,0BAAA;EAAA;EAIA,oGAAA,EACA,kFAAA,EACA,uFAAA;EAAA;EAIA,mCAAA,EACA,uBAAA,EAEA,6CAAA,EAEA,+DAAA,EAEA,GAAA,CAAA,CACA,IAAA,CAAK,IAAI;AACb,CAAA","sourcesContent":["export const WaterRefractionShader = {\n  uniforms: {\n    color: {\n      value: null,\n    },\n\n    time: {\n      value: 0,\n    },\n\n    tDiffuse: {\n      value: null,\n    },\n\n    tDudv: {\n      value: null,\n    },\n\n    textureMatrix: {\n      value: null,\n    },\n  },\n\n  vertexShader: [\n    'uniform mat4 textureMatrix;',\n\n    'varying vec2 vUv;',\n    'varying vec4 vUvRefraction;',\n\n    'void main() {',\n\n    '\tvUv = uv;',\n\n    '\tvUvRefraction = textureMatrix * vec4( position, 1.0 );',\n\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    'uniform vec3 color;',\n    'uniform float time;',\n    'uniform sampler2D tDiffuse;',\n    'uniform sampler2D tDudv;',\n\n    'varying vec2 vUv;',\n    'varying vec4 vUvRefraction;',\n\n    'float blendOverlay( float base, float blend ) {',\n\n    '\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );',\n\n    '}',\n\n    'vec3 blendOverlay( vec3 base, vec3 blend ) {',\n\n    '\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ),blendOverlay( base.b, blend.b ) );',\n\n    '}',\n\n    'void main() {',\n\n    ' float waveStrength = 0.1;',\n    ' float waveSpeed = 0.03;',\n\n    // simple distortion (ripple) via dudv map (see https://www.youtube.com/watch?v=6B7IF6GOu7s)\n\n    '\tvec2 distortedUv = texture2D( tDudv, vec2( vUv.x + time * waveSpeed, vUv.y ) ).rg * waveStrength;',\n    '\tdistortedUv = vUv.xy + vec2( distortedUv.x, distortedUv.y + time * waveSpeed );',\n    '\tvec2 distortion = ( texture2D( tDudv, distortedUv ).rg * 2.0 - 1.0 ) * waveStrength;',\n\n    // new uv coords\n\n    ' vec4 uv = vec4( vUvRefraction );',\n    ' uv.xy += distortion;',\n\n    '\tvec4 base = texture2DProj( tDiffuse, uv );',\n\n    '\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );',\n\n    '}',\n  ].join('\\n'),\n}\n"]},"metadata":{},"sourceType":"module"}