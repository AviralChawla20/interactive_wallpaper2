{"ast":null,"code":"import { Vector4 } from \"three\";\nimport { calcSurfacePoint } from \"./NURBSUtils.js\";\nclass NURBSSurface {\n  constructor(degree1, degree2, knots1, knots2, controlPoints) {\n    this.degree1 = degree1;\n    this.degree2 = degree2;\n    this.knots1 = knots1;\n    this.knots2 = knots2;\n    this.controlPoints = [];\n    const len1 = knots1.length - degree1 - 1;\n    const len2 = knots2.length - degree2 - 1;\n    for (let i = 0; i < len1; ++i) {\n      this.controlPoints[i] = [];\n      for (let j = 0; j < len2; ++j) {\n        const point = controlPoints[i][j];\n        this.controlPoints[i][j] = new Vector4(point.x, point.y, point.z, point.w);\n      }\n    }\n  }\n  getPoint(t1, t2, target) {\n    const u = this.knots1[0] + t1 * (this.knots1[this.knots1.length - 1] - this.knots1[0]);\n    const v = this.knots2[0] + t2 * (this.knots2[this.knots2.length - 1] - this.knots2[0]);\n    calcSurfacePoint(this.degree1, this.degree2, this.knots1, this.knots2, this.controlPoints, u, v, target);\n  }\n}\nexport { NURBSSurface };","map":{"version":3,"sources":["../../src/curves/NURBSSurface.js"],"names":["NURBSUtils.calcSurfacePoint"],"mappings":";;AASA,MAAM,YAAA,CAAa;EACjB,WAAA,CAAY,OAAA,EAAS,OAAA,EAAS,MAAA,EAAQ,MAAA,EAA8B,aAAA,EAA8C;IAChH,IAAA,CAAK,OAAA,GAAU,OAAA;IACf,IAAA,CAAK,OAAA,GAAU,OAAA;IACf,IAAA,CAAK,MAAA,GAAS,MAAA;IACd,IAAA,CAAK,MAAA,GAAS,MAAA;IACd,IAAA,CAAK,aAAA,GAAgB,EAAE;IAEvB,MAAM,IAAA,GAAO,MAAA,CAAO,MAAA,GAAS,OAAA,GAAU,CAAA;IACvC,MAAM,IAAA,GAAO,MAAA,CAAO,MAAA,GAAS,OAAA,GAAU,CAAA;IAGvC,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,IAAA,EAAM,EAAE,CAAA,EAAG;MAC7B,IAAA,CAAK,aAAA,CAAc,CAAC,CAAA,GAAI,EAAE;MAC1B,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,IAAA,EAAM,EAAE,CAAA,EAAG;QAC7B,MAAM,KAAA,GAAQ,aAAA,CAAc,CAAC,CAAA,CAAE,CAAC,CAAA;QAChC,IAAA,CAAK,aAAA,CAAc,CAAC,CAAA,CAAE,CAAC,CAAA,GAAI,IAAI,OAAA,CAAQ,KAAA,CAAM,CAAA,EAAG,KAAA,CAAM,CAAA,EAAG,KAAA,CAAM,CAAA,EAAG,KAAA,CAAM,CAAC,CAAA;MAC1E;IACF;EACF;EAED,QAAA,CAAS,EAAA,EAAI,EAAA,EAAI,MAAA,EAAQ;IACvB,MAAM,CAAA,GAAI,IAAA,CAAK,MAAA,CAAO,CAAC,CAAA,GAAI,EAAA,IAAM,IAAA,CAAK,MAAA,CAAO,IAAA,CAAK,MAAA,CAAO,MAAA,GAAS,CAAC,CAAA,GAAI,IAAA,CAAK,MAAA,CAAO,CAAC,CAAA,CAAA;IACpF,MAAM,CAAA,GAAI,IAAA,CAAK,MAAA,CAAO,CAAC,CAAA,GAAI,EAAA,IAAM,IAAA,CAAK,MAAA,CAAO,IAAA,CAAK,MAAA,CAAO,MAAA,GAAS,CAAC,CAAA,GAAI,IAAA,CAAK,MAAA,CAAO,CAAC,CAAA,CAAA;IAEpFA,gBAAAA,CAA4B,IAAA,CAAK,OAAA,EAAS,IAAA,CAAK,OAAA,EAAS,IAAA,CAAK,MAAA,EAAQ,IAAA,CAAK,MAAA,EAAQ,IAAA,CAAK,aAAA,EAAe,CAAA,EAAG,CAAA,EAAG,MAAM,CAAA;EACnH;AACH","sourcesContent":["import { Vector4 } from 'three'\nimport * as NURBSUtils from '../curves/NURBSUtils'\n\n/**\n * NURBS surface object\n *\n * Implementation is based on (x, y [, z=0 [, w=1]]) control points with w=weight.\n **/\n\nclass NURBSSurface {\n  constructor(degree1, degree2, knots1, knots2 /* arrays of reals */, controlPoints /* array^2 of Vector(2|3|4) */) {\n    this.degree1 = degree1\n    this.degree2 = degree2\n    this.knots1 = knots1\n    this.knots2 = knots2\n    this.controlPoints = []\n\n    const len1 = knots1.length - degree1 - 1\n    const len2 = knots2.length - degree2 - 1\n\n    // ensure Vector4 for control points\n    for (let i = 0; i < len1; ++i) {\n      this.controlPoints[i] = []\n      for (let j = 0; j < len2; ++j) {\n        const point = controlPoints[i][j]\n        this.controlPoints[i][j] = new Vector4(point.x, point.y, point.z, point.w)\n      }\n    }\n  }\n\n  getPoint(t1, t2, target) {\n    const u = this.knots1[0] + t1 * (this.knots1[this.knots1.length - 1] - this.knots1[0]) // linear mapping t1->u\n    const v = this.knots2[0] + t2 * (this.knots2[this.knots2.length - 1] - this.knots2[0]) // linear mapping t2->u\n\n    NURBSUtils.calcSurfacePoint(this.degree1, this.degree2, this.knots1, this.knots2, this.controlPoints, u, v, target)\n  }\n}\n\nexport { NURBSSurface }\n"]},"metadata":{},"sourceType":"module"}