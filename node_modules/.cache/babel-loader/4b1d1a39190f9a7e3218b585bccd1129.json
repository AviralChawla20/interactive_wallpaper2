{"ast":null,"code":"import { Object3D, Box3, MathUtils, MeshLambertMaterial, TextureLoader, UVMapping } from \"three\";\nimport { MD2Loader } from \"../loaders/MD2Loader.js\";\nimport { MorphBlendMesh } from \"./MorphBlendMesh.js\";\nclass MD2CharacterComplex {\n  constructor() {\n    this.scale = 1;\n    this.animationFPS = 6;\n    this.transitionFrames = 15;\n    this.maxSpeed = 275;\n    this.maxReverseSpeed = -275;\n    this.frontAcceleration = 600;\n    this.backAcceleration = 600;\n    this.frontDecceleration = 600;\n    this.angularSpeed = 2.5;\n    this.root = new Object3D();\n    this.meshBody = null;\n    this.meshWeapon = null;\n    this.controls = null;\n    this.skinsBody = [];\n    this.skinsWeapon = [];\n    this.weapons = [];\n    this.currentSkin = void 0;\n    this.onLoadComplete = function () {};\n    this.meshes = [];\n    this.animations = {};\n    this.loadCounter = 0;\n    this.speed = 0;\n    this.bodyOrientation = 0;\n    this.walkSpeed = this.maxSpeed;\n    this.crouchSpeed = this.maxSpeed * 0.5;\n    this.activeAnimation = null;\n    this.oldAnimation = null;\n  }\n  enableShadows(enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].castShadow = enable;\n      this.meshes[i].receiveShadow = enable;\n    }\n  }\n  setVisible(enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].visible = enable;\n      this.meshes[i].visible = enable;\n    }\n  }\n  shareParts(original) {\n    this.animations = original.animations;\n    this.walkSpeed = original.walkSpeed;\n    this.crouchSpeed = original.crouchSpeed;\n    this.skinsBody = original.skinsBody;\n    this.skinsWeapon = original.skinsWeapon;\n    const mesh = this._createPart(original.meshBody.geometry, this.skinsBody[0]);\n    mesh.scale.set(this.scale, this.scale, this.scale);\n    this.root.position.y = original.root.position.y;\n    this.root.add(mesh);\n    this.meshBody = mesh;\n    this.meshes.push(mesh);\n    for (let i = 0; i < original.weapons.length; i++) {\n      const meshWeapon = this._createPart(original.weapons[i].geometry, this.skinsWeapon[i]);\n      meshWeapon.scale.set(this.scale, this.scale, this.scale);\n      meshWeapon.visible = false;\n      meshWeapon.name = original.weapons[i].name;\n      this.root.add(meshWeapon);\n      this.weapons[i] = meshWeapon;\n      this.meshWeapon = meshWeapon;\n      this.meshes.push(meshWeapon);\n    }\n  }\n  loadParts(config) {\n    const scope = this;\n    function loadTextures(baseUrl, textureUrls) {\n      const textureLoader = new TextureLoader();\n      const textures = [];\n      for (let i = 0; i < textureUrls.length; i++) {\n        textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete);\n        textures[i].mapping = UVMapping;\n        textures[i].name = textureUrls[i];\n        if (\"colorSpace\" in textures[i]) textures[i].colorSpace = \"srgb\";else textures[i].encoding = 3001;\n      }\n      return textures;\n    }\n    function checkLoadingComplete() {\n      scope.loadCounter -= 1;\n      if (scope.loadCounter === 0) scope.onLoadComplete();\n    }\n    this.animations = config.animations;\n    this.walkSpeed = config.walkSpeed;\n    this.crouchSpeed = config.crouchSpeed;\n    this.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\n    const weaponsTextures = [];\n    for (let i = 0; i < config.weapons.length; i++) weaponsTextures[i] = config.weapons[i][1];\n    this.skinsBody = loadTextures(config.baseUrl + \"skins/\", config.skins);\n    this.skinsWeapon = loadTextures(config.baseUrl + \"skins/\", weaponsTextures);\n    const loader = new MD2Loader();\n    loader.load(config.baseUrl + config.body, function (geo) {\n      const boundingBox = new Box3();\n      boundingBox.setFromBufferAttribute(geo.attributes.position);\n      scope.root.position.y = -scope.scale * boundingBox.min.y;\n      const mesh = scope._createPart(geo, scope.skinsBody[0]);\n      mesh.scale.set(scope.scale, scope.scale, scope.scale);\n      scope.root.add(mesh);\n      scope.meshBody = mesh;\n      scope.meshes.push(mesh);\n      checkLoadingComplete();\n    });\n    const generateCallback = function (index, name) {\n      return function (geo) {\n        const mesh = scope._createPart(geo, scope.skinsWeapon[index]);\n        mesh.scale.set(scope.scale, scope.scale, scope.scale);\n        mesh.visible = false;\n        mesh.name = name;\n        scope.root.add(mesh);\n        scope.weapons[index] = mesh;\n        scope.meshWeapon = mesh;\n        scope.meshes.push(mesh);\n        checkLoadingComplete();\n      };\n    };\n    for (let i = 0; i < config.weapons.length; i++) {\n      loader.load(config.baseUrl + config.weapons[i][0], generateCallback(i, config.weapons[i][0]));\n    }\n  }\n  setPlaybackRate(rate) {\n    if (this.meshBody) this.meshBody.duration = this.meshBody.baseDuration / rate;\n    if (this.meshWeapon) this.meshWeapon.duration = this.meshWeapon.baseDuration / rate;\n  }\n  setWireframe(wireframeEnabled) {\n    if (wireframeEnabled) {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialWireframe;\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialWireframe;\n    } else {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialTexture;\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialTexture;\n    }\n  }\n  setSkin(index) {\n    if (this.meshBody && this.meshBody.material.wireframe === false) {\n      this.meshBody.material.map = this.skinsBody[index];\n      this.currentSkin = index;\n    }\n  }\n  setWeapon(index) {\n    for (let i = 0; i < this.weapons.length; i++) this.weapons[i].visible = false;\n    const activeWeapon = this.weapons[index];\n    if (activeWeapon) {\n      activeWeapon.visible = true;\n      this.meshWeapon = activeWeapon;\n      if (this.activeAnimation) {\n        activeWeapon.playAnimation(this.activeAnimation);\n        this.meshWeapon.setAnimationTime(this.activeAnimation, this.meshBody.getAnimationTime(this.activeAnimation));\n      }\n    }\n  }\n  setAnimation(animationName) {\n    if (animationName === this.activeAnimation || !animationName) return;\n    if (this.meshBody) {\n      this.meshBody.setAnimationWeight(animationName, 0);\n      this.meshBody.playAnimation(animationName);\n      this.oldAnimation = this.activeAnimation;\n      this.activeAnimation = animationName;\n      this.blendCounter = this.transitionFrames;\n    }\n    if (this.meshWeapon) {\n      this.meshWeapon.setAnimationWeight(animationName, 0);\n      this.meshWeapon.playAnimation(animationName);\n    }\n  }\n  update(delta) {\n    if (this.controls) this.updateMovementModel(delta);\n    if (this.animations) {\n      this.updateBehaviors();\n      this.updateAnimations(delta);\n    }\n  }\n  updateAnimations(delta) {\n    let mix = 1;\n    if (this.blendCounter > 0) {\n      mix = (this.transitionFrames - this.blendCounter) / this.transitionFrames;\n      this.blendCounter -= 1;\n    }\n    if (this.meshBody) {\n      this.meshBody.update(delta);\n      this.meshBody.setAnimationWeight(this.activeAnimation, mix);\n      this.meshBody.setAnimationWeight(this.oldAnimation, 1 - mix);\n    }\n    if (this.meshWeapon) {\n      this.meshWeapon.update(delta);\n      this.meshWeapon.setAnimationWeight(this.activeAnimation, mix);\n      this.meshWeapon.setAnimationWeight(this.oldAnimation, 1 - mix);\n    }\n  }\n  updateBehaviors() {\n    const controls = this.controls;\n    const animations = this.animations;\n    let moveAnimation, idleAnimation;\n    if (controls.crouch) {\n      moveAnimation = animations[\"crouchMove\"];\n      idleAnimation = animations[\"crouchIdle\"];\n    } else {\n      moveAnimation = animations[\"move\"];\n      idleAnimation = animations[\"idle\"];\n    }\n    if (controls.jump) {\n      moveAnimation = animations[\"jump\"];\n      idleAnimation = animations[\"jump\"];\n    }\n    if (controls.attack) {\n      if (controls.crouch) {\n        moveAnimation = animations[\"crouchAttack\"];\n        idleAnimation = animations[\"crouchAttack\"];\n      } else {\n        moveAnimation = animations[\"attack\"];\n        idleAnimation = animations[\"attack\"];\n      }\n    }\n    if (controls.moveForward || controls.moveBackward || controls.moveLeft || controls.moveRight) {\n      if (this.activeAnimation !== moveAnimation) {\n        this.setAnimation(moveAnimation);\n      }\n    }\n    if (Math.abs(this.speed) < 0.2 * this.maxSpeed && !(controls.moveLeft || controls.moveRight || controls.moveForward || controls.moveBackward)) {\n      if (this.activeAnimation !== idleAnimation) {\n        this.setAnimation(idleAnimation);\n      }\n    }\n    if (controls.moveForward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionForward(this.activeAnimation);\n        this.meshBody.setAnimationDirectionForward(this.oldAnimation);\n      }\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionForward(this.activeAnimation);\n        this.meshWeapon.setAnimationDirectionForward(this.oldAnimation);\n      }\n    }\n    if (controls.moveBackward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionBackward(this.activeAnimation);\n        this.meshBody.setAnimationDirectionBackward(this.oldAnimation);\n      }\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionBackward(this.activeAnimation);\n        this.meshWeapon.setAnimationDirectionBackward(this.oldAnimation);\n      }\n    }\n  }\n  updateMovementModel(delta) {\n    function exponentialEaseOut(k) {\n      return k === 1 ? 1 : -Math.pow(2, -10 * k) + 1;\n    }\n    const controls = this.controls;\n    if (controls.crouch) this.maxSpeed = this.crouchSpeed;else this.maxSpeed = this.walkSpeed;\n    this.maxReverseSpeed = -this.maxSpeed;\n    if (controls.moveForward) this.speed = MathUtils.clamp(this.speed + delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    if (controls.moveBackward) this.speed = MathUtils.clamp(this.speed - delta * this.backAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    const dir = 1;\n    if (controls.moveLeft) {\n      this.bodyOrientation += delta * this.angularSpeed;\n      this.speed = MathUtils.clamp(this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    }\n    if (controls.moveRight) {\n      this.bodyOrientation -= delta * this.angularSpeed;\n      this.speed = MathUtils.clamp(this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    }\n    if (!(controls.moveForward || controls.moveBackward)) {\n      if (this.speed > 0) {\n        const k = exponentialEaseOut(this.speed / this.maxSpeed);\n        this.speed = MathUtils.clamp(this.speed - k * delta * this.frontDecceleration, 0, this.maxSpeed);\n      } else {\n        const k = exponentialEaseOut(this.speed / this.maxReverseSpeed);\n        this.speed = MathUtils.clamp(this.speed + k * delta * this.backAcceleration, this.maxReverseSpeed, 0);\n      }\n    }\n    const forwardDelta = this.speed * delta;\n    this.root.position.x += Math.sin(this.bodyOrientation) * forwardDelta;\n    this.root.position.z += Math.cos(this.bodyOrientation) * forwardDelta;\n    this.root.rotation.y = this.bodyOrientation;\n  }\n  // internal\n  _createPart(geometry, skinMap) {\n    const materialWireframe = new MeshLambertMaterial({\n      color: 16755200,\n      wireframe: true,\n      morphTargets: true,\n      morphNormals: true\n    });\n    const materialTexture = new MeshLambertMaterial({\n      color: 16777215,\n      wireframe: false,\n      map: skinMap,\n      morphTargets: true,\n      morphNormals: true\n    });\n    const mesh = new MorphBlendMesh(geometry, materialTexture);\n    mesh.rotation.y = -Math.PI / 2;\n    mesh.materialTexture = materialTexture;\n    mesh.materialWireframe = materialWireframe;\n    mesh.autoCreateAnimations(this.animationFPS);\n    return mesh;\n  }\n}\nexport { MD2CharacterComplex };","map":{"version":3,"sources":["../../src/misc/MD2CharacterComplex.js"],"names":[],"mappings":"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","sourcesContent":["import { Box3, MathUtils, MeshLambertMaterial, Object3D, TextureLoader, UVMapping } from 'three'\nimport { MD2Loader } from '../loaders/MD2Loader'\nimport { MorphBlendMesh } from '../misc/MorphBlendMesh'\n\nclass MD2CharacterComplex {\n  constructor() {\n    this.scale = 1\n\n    // animation parameters\n\n    this.animationFPS = 6\n    this.transitionFrames = 15\n\n    // movement model parameters\n\n    this.maxSpeed = 275\n    this.maxReverseSpeed = -275\n\n    this.frontAcceleration = 600\n    this.backAcceleration = 600\n\n    this.frontDecceleration = 600\n\n    this.angularSpeed = 2.5\n\n    // rig\n\n    this.root = new Object3D()\n\n    this.meshBody = null\n    this.meshWeapon = null\n\n    this.controls = null\n\n    // skins\n\n    this.skinsBody = []\n    this.skinsWeapon = []\n\n    this.weapons = []\n\n    this.currentSkin = undefined\n\n    //\n\n    this.onLoadComplete = function () {}\n\n    // internals\n\n    this.meshes = []\n    this.animations = {}\n\n    this.loadCounter = 0\n\n    // internal movement control variables\n\n    this.speed = 0\n    this.bodyOrientation = 0\n\n    this.walkSpeed = this.maxSpeed\n    this.crouchSpeed = this.maxSpeed * 0.5\n\n    // internal animation parameters\n\n    this.activeAnimation = null\n    this.oldAnimation = null\n\n    // API\n  }\n\n  enableShadows(enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].castShadow = enable\n      this.meshes[i].receiveShadow = enable\n    }\n  }\n\n  setVisible(enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].visible = enable\n      this.meshes[i].visible = enable\n    }\n  }\n\n  shareParts(original) {\n    this.animations = original.animations\n    this.walkSpeed = original.walkSpeed\n    this.crouchSpeed = original.crouchSpeed\n\n    this.skinsBody = original.skinsBody\n    this.skinsWeapon = original.skinsWeapon\n\n    // BODY\n\n    const mesh = this._createPart(original.meshBody.geometry, this.skinsBody[0])\n    mesh.scale.set(this.scale, this.scale, this.scale)\n\n    this.root.position.y = original.root.position.y\n    this.root.add(mesh)\n\n    this.meshBody = mesh\n\n    this.meshes.push(mesh)\n\n    // WEAPONS\n\n    for (let i = 0; i < original.weapons.length; i++) {\n      const meshWeapon = this._createPart(original.weapons[i].geometry, this.skinsWeapon[i])\n      meshWeapon.scale.set(this.scale, this.scale, this.scale)\n      meshWeapon.visible = false\n\n      meshWeapon.name = original.weapons[i].name\n\n      this.root.add(meshWeapon)\n\n      this.weapons[i] = meshWeapon\n      this.meshWeapon = meshWeapon\n\n      this.meshes.push(meshWeapon)\n    }\n  }\n\n  loadParts(config) {\n    const scope = this\n\n    function loadTextures(baseUrl, textureUrls) {\n      const textureLoader = new TextureLoader()\n      const textures = []\n\n      for (let i = 0; i < textureUrls.length; i++) {\n        textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete)\n        textures[i].mapping = UVMapping\n        textures[i].name = textureUrls[i]\n        if ('colorSpace' in textures[i]) textures[i].colorSpace = 'srgb'\n        else textures[i].encoding = 3001 // sRGBEncoding\n      }\n\n      return textures\n    }\n\n    function checkLoadingComplete() {\n      scope.loadCounter -= 1\n      if (scope.loadCounter === 0) scope.onLoadComplete()\n    }\n\n    this.animations = config.animations\n    this.walkSpeed = config.walkSpeed\n    this.crouchSpeed = config.crouchSpeed\n\n    this.loadCounter = config.weapons.length * 2 + config.skins.length + 1\n\n    const weaponsTextures = []\n    for (let i = 0; i < config.weapons.length; i++) weaponsTextures[i] = config.weapons[i][1]\n\n    // SKINS\n\n    this.skinsBody = loadTextures(config.baseUrl + 'skins/', config.skins)\n    this.skinsWeapon = loadTextures(config.baseUrl + 'skins/', weaponsTextures)\n\n    // BODY\n\n    const loader = new MD2Loader()\n\n    loader.load(config.baseUrl + config.body, function (geo) {\n      const boundingBox = new Box3()\n      boundingBox.setFromBufferAttribute(geo.attributes.position)\n\n      scope.root.position.y = -scope.scale * boundingBox.min.y\n\n      const mesh = scope._createPart(geo, scope.skinsBody[0])\n      mesh.scale.set(scope.scale, scope.scale, scope.scale)\n\n      scope.root.add(mesh)\n\n      scope.meshBody = mesh\n      scope.meshes.push(mesh)\n\n      checkLoadingComplete()\n    })\n\n    // WEAPONS\n\n    const generateCallback = function (index, name) {\n      return function (geo) {\n        const mesh = scope._createPart(geo, scope.skinsWeapon[index])\n        mesh.scale.set(scope.scale, scope.scale, scope.scale)\n        mesh.visible = false\n\n        mesh.name = name\n\n        scope.root.add(mesh)\n\n        scope.weapons[index] = mesh\n        scope.meshWeapon = mesh\n        scope.meshes.push(mesh)\n\n        checkLoadingComplete()\n      }\n    }\n\n    for (let i = 0; i < config.weapons.length; i++) {\n      loader.load(config.baseUrl + config.weapons[i][0], generateCallback(i, config.weapons[i][0]))\n    }\n  }\n\n  setPlaybackRate(rate) {\n    if (this.meshBody) this.meshBody.duration = this.meshBody.baseDuration / rate\n    if (this.meshWeapon) this.meshWeapon.duration = this.meshWeapon.baseDuration / rate\n  }\n\n  setWireframe(wireframeEnabled) {\n    if (wireframeEnabled) {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialWireframe\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialWireframe\n    } else {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialTexture\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialTexture\n    }\n  }\n\n  setSkin(index) {\n    if (this.meshBody && this.meshBody.material.wireframe === false) {\n      this.meshBody.material.map = this.skinsBody[index]\n      this.currentSkin = index\n    }\n  }\n\n  setWeapon(index) {\n    for (let i = 0; i < this.weapons.length; i++) this.weapons[i].visible = false\n\n    const activeWeapon = this.weapons[index]\n\n    if (activeWeapon) {\n      activeWeapon.visible = true\n      this.meshWeapon = activeWeapon\n\n      if (this.activeAnimation) {\n        activeWeapon.playAnimation(this.activeAnimation)\n        this.meshWeapon.setAnimationTime(this.activeAnimation, this.meshBody.getAnimationTime(this.activeAnimation))\n      }\n    }\n  }\n\n  setAnimation(animationName) {\n    if (animationName === this.activeAnimation || !animationName) return\n\n    if (this.meshBody) {\n      this.meshBody.setAnimationWeight(animationName, 0)\n      this.meshBody.playAnimation(animationName)\n\n      this.oldAnimation = this.activeAnimation\n      this.activeAnimation = animationName\n\n      this.blendCounter = this.transitionFrames\n    }\n\n    if (this.meshWeapon) {\n      this.meshWeapon.setAnimationWeight(animationName, 0)\n      this.meshWeapon.playAnimation(animationName)\n    }\n  }\n\n  update(delta) {\n    if (this.controls) this.updateMovementModel(delta)\n\n    if (this.animations) {\n      this.updateBehaviors()\n      this.updateAnimations(delta)\n    }\n  }\n\n  updateAnimations(delta) {\n    let mix = 1\n\n    if (this.blendCounter > 0) {\n      mix = (this.transitionFrames - this.blendCounter) / this.transitionFrames\n      this.blendCounter -= 1\n    }\n\n    if (this.meshBody) {\n      this.meshBody.update(delta)\n\n      this.meshBody.setAnimationWeight(this.activeAnimation, mix)\n      this.meshBody.setAnimationWeight(this.oldAnimation, 1 - mix)\n    }\n\n    if (this.meshWeapon) {\n      this.meshWeapon.update(delta)\n\n      this.meshWeapon.setAnimationWeight(this.activeAnimation, mix)\n      this.meshWeapon.setAnimationWeight(this.oldAnimation, 1 - mix)\n    }\n  }\n\n  updateBehaviors() {\n    const controls = this.controls\n    const animations = this.animations\n\n    let moveAnimation, idleAnimation\n\n    // crouch vs stand\n\n    if (controls.crouch) {\n      moveAnimation = animations['crouchMove']\n      idleAnimation = animations['crouchIdle']\n    } else {\n      moveAnimation = animations['move']\n      idleAnimation = animations['idle']\n    }\n\n    // actions\n\n    if (controls.jump) {\n      moveAnimation = animations['jump']\n      idleAnimation = animations['jump']\n    }\n\n    if (controls.attack) {\n      if (controls.crouch) {\n        moveAnimation = animations['crouchAttack']\n        idleAnimation = animations['crouchAttack']\n      } else {\n        moveAnimation = animations['attack']\n        idleAnimation = animations['attack']\n      }\n    }\n\n    // set animations\n\n    if (controls.moveForward || controls.moveBackward || controls.moveLeft || controls.moveRight) {\n      if (this.activeAnimation !== moveAnimation) {\n        this.setAnimation(moveAnimation)\n      }\n    }\n\n    if (\n      Math.abs(this.speed) < 0.2 * this.maxSpeed &&\n      !(controls.moveLeft || controls.moveRight || controls.moveForward || controls.moveBackward)\n    ) {\n      if (this.activeAnimation !== idleAnimation) {\n        this.setAnimation(idleAnimation)\n      }\n    }\n\n    // set animation direction\n\n    if (controls.moveForward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionForward(this.activeAnimation)\n        this.meshBody.setAnimationDirectionForward(this.oldAnimation)\n      }\n\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionForward(this.activeAnimation)\n        this.meshWeapon.setAnimationDirectionForward(this.oldAnimation)\n      }\n    }\n\n    if (controls.moveBackward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionBackward(this.activeAnimation)\n        this.meshBody.setAnimationDirectionBackward(this.oldAnimation)\n      }\n\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionBackward(this.activeAnimation)\n        this.meshWeapon.setAnimationDirectionBackward(this.oldAnimation)\n      }\n    }\n  }\n\n  updateMovementModel(delta) {\n    function exponentialEaseOut(k) {\n      return k === 1 ? 1 : -Math.pow(2, -10 * k) + 1\n    }\n\n    const controls = this.controls\n\n    // speed based on controls\n\n    if (controls.crouch) this.maxSpeed = this.crouchSpeed\n    else this.maxSpeed = this.walkSpeed\n\n    this.maxReverseSpeed = -this.maxSpeed\n\n    if (controls.moveForward)\n      this.speed = MathUtils.clamp(this.speed + delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed)\n    if (controls.moveBackward)\n      this.speed = MathUtils.clamp(this.speed - delta * this.backAcceleration, this.maxReverseSpeed, this.maxSpeed)\n\n    // orientation based on controls\n    // (don't just stand while turning)\n\n    const dir = 1\n\n    if (controls.moveLeft) {\n      this.bodyOrientation += delta * this.angularSpeed\n      this.speed = MathUtils.clamp(\n        this.speed + dir * delta * this.frontAcceleration,\n        this.maxReverseSpeed,\n        this.maxSpeed,\n      )\n    }\n\n    if (controls.moveRight) {\n      this.bodyOrientation -= delta * this.angularSpeed\n      this.speed = MathUtils.clamp(\n        this.speed + dir * delta * this.frontAcceleration,\n        this.maxReverseSpeed,\n        this.maxSpeed,\n      )\n    }\n\n    // speed decay\n\n    if (!(controls.moveForward || controls.moveBackward)) {\n      if (this.speed > 0) {\n        const k = exponentialEaseOut(this.speed / this.maxSpeed)\n        this.speed = MathUtils.clamp(this.speed - k * delta * this.frontDecceleration, 0, this.maxSpeed)\n      } else {\n        const k = exponentialEaseOut(this.speed / this.maxReverseSpeed)\n        this.speed = MathUtils.clamp(this.speed + k * delta * this.backAcceleration, this.maxReverseSpeed, 0)\n      }\n    }\n\n    // displacement\n\n    const forwardDelta = this.speed * delta\n\n    this.root.position.x += Math.sin(this.bodyOrientation) * forwardDelta\n    this.root.position.z += Math.cos(this.bodyOrientation) * forwardDelta\n\n    // steering\n\n    this.root.rotation.y = this.bodyOrientation\n  }\n\n  // internal\n\n  _createPart(geometry, skinMap) {\n    const materialWireframe = new MeshLambertMaterial({\n      color: 0xffaa00,\n      wireframe: true,\n      morphTargets: true,\n      morphNormals: true,\n    })\n    const materialTexture = new MeshLambertMaterial({\n      color: 0xffffff,\n      wireframe: false,\n      map: skinMap,\n      morphTargets: true,\n      morphNormals: true,\n    })\n\n    //\n\n    const mesh = new MorphBlendMesh(geometry, materialTexture)\n    mesh.rotation.y = -Math.PI / 2\n\n    //\n\n    mesh.materialTexture = materialTexture\n    mesh.materialWireframe = materialWireframe\n\n    //\n\n    mesh.autoCreateAnimations(this.animationFPS)\n\n    return mesh\n  }\n}\n\nexport { MD2CharacterComplex }\n"]},"metadata":{},"sourceType":"module"}