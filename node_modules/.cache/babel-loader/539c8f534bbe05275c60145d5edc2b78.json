{"ast":null,"code":"import { Matrix4, Vector3, Box3, DirectionalLight, MathUtils, ShaderChunk, Vector2 } from \"three\";\nimport { CSMFrustum } from \"./CSMFrustum.js\";\nimport { CSMShader } from \"./CSMShader.js\";\nconst _cameraToLightMatrix = new Matrix4();\nconst _lightSpaceFrustum = new CSMFrustum();\nconst _center = new Vector3();\nconst _bbox = new Box3();\nconst _uniformArray = [];\nconst _logArray = [];\nclass CSM {\n  constructor(data) {\n    data = data || {};\n    this.camera = data.camera;\n    this.parent = data.parent;\n    this.cascades = data.cascades || 3;\n    this.maxFar = data.maxFar || 1e5;\n    this.mode = data.mode || \"practical\";\n    this.shadowMapSize = data.shadowMapSize || 2048;\n    this.shadowBias = data.shadowBias || 1e-6;\n    this.lightDirection = data.lightDirection || new Vector3(1, -1, 1).normalize();\n    this.lightIntensity = data.lightIntensity || 1;\n    this.lightNear = data.lightNear || 1;\n    this.lightFar = data.lightFar || 2e3;\n    this.lightMargin = data.lightMargin || 200;\n    this.customSplitsCallback = data.customSplitsCallback;\n    this.fade = false;\n    this.mainFrustum = new CSMFrustum();\n    this.frustums = [];\n    this.breaks = [];\n    this.lights = [];\n    this.shaders = /* @__PURE__ */new Map();\n    this.createLights();\n    this.updateFrustums();\n    this.injectInclude();\n  }\n  createLights() {\n    for (let i = 0; i < this.cascades; i++) {\n      const light = new DirectionalLight(16777215, this.lightIntensity);\n      light.castShadow = true;\n      light.shadow.mapSize.width = this.shadowMapSize;\n      light.shadow.mapSize.height = this.shadowMapSize;\n      light.shadow.camera.near = this.lightNear;\n      light.shadow.camera.far = this.lightFar;\n      light.shadow.bias = this.shadowBias;\n      this.parent.add(light);\n      this.parent.add(light.target);\n      this.lights.push(light);\n    }\n  }\n  initCascades() {\n    const camera = this.camera;\n    camera.updateProjectionMatrix();\n    this.mainFrustum.setFromProjectionMatrix(camera.projectionMatrix, this.maxFar);\n    this.mainFrustum.split(this.breaks, this.frustums);\n  }\n  updateShadowBounds() {\n    const frustums = this.frustums;\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i];\n      const shadowCam = light.shadow.camera;\n      const frustum = this.frustums[i];\n      const nearVerts = frustum.vertices.near;\n      const farVerts = frustum.vertices.far;\n      const point1 = farVerts[0];\n      let point2;\n      if (point1.distanceTo(farVerts[2]) > point1.distanceTo(nearVerts[2])) {\n        point2 = farVerts[2];\n      } else {\n        point2 = nearVerts[2];\n      }\n      let squaredBBWidth = point1.distanceTo(point2);\n      if (this.fade) {\n        const camera = this.camera;\n        const far = Math.max(camera.far, this.maxFar);\n        const linearDepth = frustum.vertices.far[0].z / (far - camera.near);\n        const margin = 0.25 * Math.pow(linearDepth, 2) * (far - camera.near);\n        squaredBBWidth += margin;\n      }\n      shadowCam.left = -squaredBBWidth / 2;\n      shadowCam.right = squaredBBWidth / 2;\n      shadowCam.top = squaredBBWidth / 2;\n      shadowCam.bottom = -squaredBBWidth / 2;\n      shadowCam.updateProjectionMatrix();\n    }\n  }\n  getBreaks() {\n    const camera = this.camera;\n    const far = Math.min(camera.far, this.maxFar);\n    this.breaks.length = 0;\n    switch (this.mode) {\n      case \"uniform\":\n        uniformSplit(this.cascades, camera.near, far, this.breaks);\n        break;\n      case \"logarithmic\":\n        logarithmicSplit(this.cascades, camera.near, far, this.breaks);\n        break;\n      case \"practical\":\n        practicalSplit(this.cascades, camera.near, far, 0.5, this.breaks);\n        break;\n      case \"custom\":\n        if (this.customSplitsCallback === void 0) console.error(\"CSM: Custom split scheme callback not defined.\");\n        this.customSplitsCallback(this.cascades, camera.near, far, this.breaks);\n        break;\n    }\n    function uniformSplit(amount, near, far2, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push((near + (far2 - near) * i / amount) / far2);\n      }\n      target.push(1);\n    }\n    function logarithmicSplit(amount, near, far2, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push(near * (far2 / near) ** (i / amount) / far2);\n      }\n      target.push(1);\n    }\n    function practicalSplit(amount, near, far2, lambda, target) {\n      _uniformArray.length = 0;\n      _logArray.length = 0;\n      logarithmicSplit(amount, near, far2, _logArray);\n      uniformSplit(amount, near, far2, _uniformArray);\n      for (let i = 1; i < amount; i++) {\n        target.push(MathUtils.lerp(_uniformArray[i - 1], _logArray[i - 1], lambda));\n      }\n      target.push(1);\n    }\n  }\n  update() {\n    const camera = this.camera;\n    const frustums = this.frustums;\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i];\n      const shadowCam = light.shadow.camera;\n      const texelWidth = (shadowCam.right - shadowCam.left) / this.shadowMapSize;\n      const texelHeight = (shadowCam.top - shadowCam.bottom) / this.shadowMapSize;\n      light.shadow.camera.updateMatrixWorld(true);\n      _cameraToLightMatrix.multiplyMatrices(light.shadow.camera.matrixWorldInverse, camera.matrixWorld);\n      frustums[i].toSpace(_cameraToLightMatrix, _lightSpaceFrustum);\n      const nearVerts = _lightSpaceFrustum.vertices.near;\n      const farVerts = _lightSpaceFrustum.vertices.far;\n      _bbox.makeEmpty();\n      for (let j = 0; j < 4; j++) {\n        _bbox.expandByPoint(nearVerts[j]);\n        _bbox.expandByPoint(farVerts[j]);\n      }\n      _bbox.getCenter(_center);\n      _center.z = _bbox.max.z + this.lightMargin;\n      _center.x = Math.floor(_center.x / texelWidth) * texelWidth;\n      _center.y = Math.floor(_center.y / texelHeight) * texelHeight;\n      _center.applyMatrix4(light.shadow.camera.matrixWorld);\n      light.position.copy(_center);\n      light.target.position.copy(_center);\n      light.target.position.x += this.lightDirection.x;\n      light.target.position.y += this.lightDirection.y;\n      light.target.position.z += this.lightDirection.z;\n    }\n  }\n  injectInclude() {\n    ShaderChunk.lights_fragment_begin = CSMShader.lights_fragment_begin;\n    ShaderChunk.lights_pars_begin = CSMShader.lights_pars_begin;\n  }\n  setupMaterial(material) {\n    material.defines = material.defines || {};\n    material.defines.USE_CSM = 1;\n    material.defines.CSM_CASCADES = this.cascades;\n    if (this.fade) {\n      material.defines.CSM_FADE = \"\";\n    }\n    const breaksVec2 = [];\n    const scope = this;\n    const shaders = this.shaders;\n    material.onBeforeCompile = function (shader) {\n      const far = Math.min(scope.camera.far, scope.maxFar);\n      scope.getExtendedBreaks(breaksVec2);\n      shader.uniforms.CSM_cascades = {\n        value: breaksVec2\n      };\n      shader.uniforms.cameraNear = {\n        value: scope.camera.near\n      };\n      shader.uniforms.shadowFar = {\n        value: far\n      };\n      shaders.set(material, shader);\n    };\n    shaders.set(material, null);\n  }\n  updateUniforms() {\n    const far = Math.min(this.camera.far, this.maxFar);\n    const shaders = this.shaders;\n    shaders.forEach(function (shader, material) {\n      if (shader !== null) {\n        const uniforms = shader.uniforms;\n        this.getExtendedBreaks(uniforms.CSM_cascades.value);\n        uniforms.cameraNear.value = this.camera.near;\n        uniforms.shadowFar.value = far;\n      }\n      if (!this.fade && \"CSM_FADE\" in material.defines) {\n        delete material.defines.CSM_FADE;\n        material.needsUpdate = true;\n      } else if (this.fade && !(\"CSM_FADE\" in material.defines)) {\n        material.defines.CSM_FADE = \"\";\n        material.needsUpdate = true;\n      }\n    }, this);\n  }\n  getExtendedBreaks(target) {\n    while (target.length < this.breaks.length) {\n      target.push(new Vector2());\n    }\n    target.length = this.breaks.length;\n    for (let i = 0; i < this.cascades; i++) {\n      const amount = this.breaks[i];\n      const prev = this.breaks[i - 1] || 0;\n      target[i].x = prev;\n      target[i].y = amount;\n    }\n  }\n  updateFrustums() {\n    this.getBreaks();\n    this.initCascades();\n    this.updateShadowBounds();\n    this.updateUniforms();\n  }\n  remove() {\n    for (let i = 0; i < this.lights.length; i++) {\n      this.parent.remove(this.lights[i]);\n    }\n  }\n  dispose() {\n    const shaders = this.shaders;\n    shaders.forEach(function (shader, material) {\n      delete material.onBeforeCompile;\n      delete material.defines.USE_CSM;\n      delete material.defines.CSM_CASCADES;\n      delete material.defines.CSM_FADE;\n      if (shader !== null) {\n        delete shader.uniforms.CSM_cascades;\n        delete shader.uniforms.cameraNear;\n        delete shader.uniforms.shadowFar;\n      }\n      material.needsUpdate = true;\n    });\n    shaders.clear();\n  }\n}\nexport { CSM };","map":{"version":3,"sources":["../../src/csm/CSM.js"],"names":["far"],"mappings":"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","sourcesContent":["import { Vector2, Vector3, DirectionalLight, MathUtils, ShaderChunk, Matrix4, Box3 } from 'three'\nimport { CSMFrustum } from './CSMFrustum'\nimport { CSMShader } from './CSMShader'\n\nconst _cameraToLightMatrix = new Matrix4()\nconst _lightSpaceFrustum = new CSMFrustum()\nconst _center = new Vector3()\nconst _bbox = new Box3()\nconst _uniformArray = []\nconst _logArray = []\n\nexport class CSM {\n  constructor(data) {\n    data = data || {}\n\n    this.camera = data.camera\n    this.parent = data.parent\n    this.cascades = data.cascades || 3\n    this.maxFar = data.maxFar || 100000\n    this.mode = data.mode || 'practical'\n    this.shadowMapSize = data.shadowMapSize || 2048\n    this.shadowBias = data.shadowBias || 0.000001\n    this.lightDirection = data.lightDirection || new Vector3(1, -1, 1).normalize()\n    this.lightIntensity = data.lightIntensity || 1\n    this.lightNear = data.lightNear || 1\n    this.lightFar = data.lightFar || 2000\n    this.lightMargin = data.lightMargin || 200\n    this.customSplitsCallback = data.customSplitsCallback\n    this.fade = false\n    this.mainFrustum = new CSMFrustum()\n    this.frustums = []\n    this.breaks = []\n\n    this.lights = []\n    this.shaders = new Map()\n\n    this.createLights()\n    this.updateFrustums()\n    this.injectInclude()\n  }\n\n  createLights() {\n    for (let i = 0; i < this.cascades; i++) {\n      const light = new DirectionalLight(0xffffff, this.lightIntensity)\n      light.castShadow = true\n      light.shadow.mapSize.width = this.shadowMapSize\n      light.shadow.mapSize.height = this.shadowMapSize\n\n      light.shadow.camera.near = this.lightNear\n      light.shadow.camera.far = this.lightFar\n      light.shadow.bias = this.shadowBias\n\n      this.parent.add(light)\n      this.parent.add(light.target)\n      this.lights.push(light)\n    }\n  }\n\n  initCascades() {\n    const camera = this.camera\n    camera.updateProjectionMatrix()\n    this.mainFrustum.setFromProjectionMatrix(camera.projectionMatrix, this.maxFar)\n    this.mainFrustum.split(this.breaks, this.frustums)\n  }\n\n  updateShadowBounds() {\n    const frustums = this.frustums\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i]\n      const shadowCam = light.shadow.camera\n      const frustum = this.frustums[i]\n\n      // Get the two points that represent that furthest points on the frustum assuming\n      // that's either the diagonal across the far plane or the diagonal across the whole\n      // frustum itself.\n      const nearVerts = frustum.vertices.near\n      const farVerts = frustum.vertices.far\n      const point1 = farVerts[0]\n      let point2\n      if (point1.distanceTo(farVerts[2]) > point1.distanceTo(nearVerts[2])) {\n        point2 = farVerts[2]\n      } else {\n        point2 = nearVerts[2]\n      }\n\n      let squaredBBWidth = point1.distanceTo(point2)\n      if (this.fade) {\n        // expand the shadow extents by the fade margin if fade is enabled.\n        const camera = this.camera\n        const far = Math.max(camera.far, this.maxFar)\n        const linearDepth = frustum.vertices.far[0].z / (far - camera.near)\n        const margin = 0.25 * Math.pow(linearDepth, 2.0) * (far - camera.near)\n\n        squaredBBWidth += margin\n      }\n\n      shadowCam.left = -squaredBBWidth / 2\n      shadowCam.right = squaredBBWidth / 2\n      shadowCam.top = squaredBBWidth / 2\n      shadowCam.bottom = -squaredBBWidth / 2\n      shadowCam.updateProjectionMatrix()\n    }\n  }\n\n  getBreaks() {\n    const camera = this.camera\n    const far = Math.min(camera.far, this.maxFar)\n    this.breaks.length = 0\n\n    switch (this.mode) {\n      case 'uniform':\n        uniformSplit(this.cascades, camera.near, far, this.breaks)\n        break\n      case 'logarithmic':\n        logarithmicSplit(this.cascades, camera.near, far, this.breaks)\n        break\n      case 'practical':\n        practicalSplit(this.cascades, camera.near, far, 0.5, this.breaks)\n        break\n      case 'custom':\n        if (this.customSplitsCallback === undefined) console.error('CSM: Custom split scheme callback not defined.')\n        this.customSplitsCallback(this.cascades, camera.near, far, this.breaks)\n        break\n    }\n\n    function uniformSplit(amount, near, far, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push((near + ((far - near) * i) / amount) / far)\n      }\n\n      target.push(1)\n    }\n\n    function logarithmicSplit(amount, near, far, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push((near * (far / near) ** (i / amount)) / far)\n      }\n\n      target.push(1)\n    }\n\n    function practicalSplit(amount, near, far, lambda, target) {\n      _uniformArray.length = 0\n      _logArray.length = 0\n      logarithmicSplit(amount, near, far, _logArray)\n      uniformSplit(amount, near, far, _uniformArray)\n\n      for (let i = 1; i < amount; i++) {\n        target.push(MathUtils.lerp(_uniformArray[i - 1], _logArray[i - 1], lambda))\n      }\n\n      target.push(1)\n    }\n  }\n\n  update() {\n    const camera = this.camera\n    const frustums = this.frustums\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i]\n      const shadowCam = light.shadow.camera\n      const texelWidth = (shadowCam.right - shadowCam.left) / this.shadowMapSize\n      const texelHeight = (shadowCam.top - shadowCam.bottom) / this.shadowMapSize\n      light.shadow.camera.updateMatrixWorld(true)\n      _cameraToLightMatrix.multiplyMatrices(light.shadow.camera.matrixWorldInverse, camera.matrixWorld)\n      frustums[i].toSpace(_cameraToLightMatrix, _lightSpaceFrustum)\n\n      const nearVerts = _lightSpaceFrustum.vertices.near\n      const farVerts = _lightSpaceFrustum.vertices.far\n      _bbox.makeEmpty()\n      for (let j = 0; j < 4; j++) {\n        _bbox.expandByPoint(nearVerts[j])\n        _bbox.expandByPoint(farVerts[j])\n      }\n\n      _bbox.getCenter(_center)\n      _center.z = _bbox.max.z + this.lightMargin\n      _center.x = Math.floor(_center.x / texelWidth) * texelWidth\n      _center.y = Math.floor(_center.y / texelHeight) * texelHeight\n      _center.applyMatrix4(light.shadow.camera.matrixWorld)\n\n      light.position.copy(_center)\n      light.target.position.copy(_center)\n\n      light.target.position.x += this.lightDirection.x\n      light.target.position.y += this.lightDirection.y\n      light.target.position.z += this.lightDirection.z\n    }\n  }\n\n  injectInclude() {\n    ShaderChunk.lights_fragment_begin = CSMShader.lights_fragment_begin\n    ShaderChunk.lights_pars_begin = CSMShader.lights_pars_begin\n  }\n\n  setupMaterial(material) {\n    material.defines = material.defines || {}\n    material.defines.USE_CSM = 1\n    material.defines.CSM_CASCADES = this.cascades\n\n    if (this.fade) {\n      material.defines.CSM_FADE = ''\n    }\n\n    const breaksVec2 = []\n    const scope = this\n    const shaders = this.shaders\n\n    material.onBeforeCompile = function (shader) {\n      const far = Math.min(scope.camera.far, scope.maxFar)\n      scope.getExtendedBreaks(breaksVec2)\n\n      shader.uniforms.CSM_cascades = { value: breaksVec2 }\n      shader.uniforms.cameraNear = { value: scope.camera.near }\n      shader.uniforms.shadowFar = { value: far }\n\n      shaders.set(material, shader)\n    }\n\n    shaders.set(material, null)\n  }\n\n  updateUniforms() {\n    const far = Math.min(this.camera.far, this.maxFar)\n    const shaders = this.shaders\n\n    shaders.forEach(function (shader, material) {\n      if (shader !== null) {\n        const uniforms = shader.uniforms\n        this.getExtendedBreaks(uniforms.CSM_cascades.value)\n        uniforms.cameraNear.value = this.camera.near\n        uniforms.shadowFar.value = far\n      }\n\n      if (!this.fade && 'CSM_FADE' in material.defines) {\n        delete material.defines.CSM_FADE\n        material.needsUpdate = true\n      } else if (this.fade && !('CSM_FADE' in material.defines)) {\n        material.defines.CSM_FADE = ''\n        material.needsUpdate = true\n      }\n    }, this)\n  }\n\n  getExtendedBreaks(target) {\n    while (target.length < this.breaks.length) {\n      target.push(new Vector2())\n    }\n\n    target.length = this.breaks.length\n\n    for (let i = 0; i < this.cascades; i++) {\n      const amount = this.breaks[i]\n      const prev = this.breaks[i - 1] || 0\n      target[i].x = prev\n      target[i].y = amount\n    }\n  }\n\n  updateFrustums() {\n    this.getBreaks()\n    this.initCascades()\n    this.updateShadowBounds()\n    this.updateUniforms()\n  }\n\n  remove() {\n    for (let i = 0; i < this.lights.length; i++) {\n      this.parent.remove(this.lights[i])\n    }\n  }\n\n  dispose() {\n    const shaders = this.shaders\n    shaders.forEach(function (shader, material) {\n      delete material.onBeforeCompile\n      delete material.defines.USE_CSM\n      delete material.defines.CSM_CASCADES\n      delete material.defines.CSM_FADE\n\n      if (shader !== null) {\n        delete shader.uniforms.CSM_cascades\n        delete shader.uniforms.cameraNear\n        delete shader.uniforms.shadowFar\n      }\n\n      material.needsUpdate = true\n    })\n    shaders.clear()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}