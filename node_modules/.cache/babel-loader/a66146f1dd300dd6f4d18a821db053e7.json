{"ast":null,"code":"import { Group, BufferGeometry, BufferAttribute, LineSegments, LineBasicMaterial, Box3Helper, Box3, MeshBasicMaterial, DoubleSide, Mesh, PlaneGeometry } from \"three\";\nclass CSMHelper extends Group {\n  constructor(csm) {\n    super();\n    this.csm = csm;\n    this.displayFrustum = true;\n    this.displayPlanes = true;\n    this.displayShadowBounds = true;\n    const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n    const positions = new Float32Array(24);\n    const frustumGeometry = new BufferGeometry();\n    frustumGeometry.setIndex(new BufferAttribute(indices, 1));\n    frustumGeometry.setAttribute(\"position\", new BufferAttribute(positions, 3, false));\n    const frustumLines = new LineSegments(frustumGeometry, new LineBasicMaterial());\n    this.add(frustumLines);\n    this.frustumLines = frustumLines;\n    this.cascadeLines = [];\n    this.cascadePlanes = [];\n    this.shadowLines = [];\n  }\n  updateVisibility() {\n    const displayFrustum = this.displayFrustum;\n    const displayPlanes = this.displayPlanes;\n    const displayShadowBounds = this.displayShadowBounds;\n    const frustumLines = this.frustumLines;\n    const cascadeLines = this.cascadeLines;\n    const cascadePlanes = this.cascadePlanes;\n    const shadowLines = this.shadowLines;\n    for (let i = 0, l = cascadeLines.length; i < l; i++) {\n      const cascadeLine = cascadeLines[i];\n      const cascadePlane = cascadePlanes[i];\n      const shadowLineGroup = shadowLines[i];\n      cascadeLine.visible = displayFrustum;\n      cascadePlane.visible = displayFrustum && displayPlanes;\n      shadowLineGroup.visible = displayShadowBounds;\n    }\n    frustumLines.visible = displayFrustum;\n  }\n  update() {\n    const csm = this.csm;\n    const camera = csm.camera;\n    const cascades = csm.cascades;\n    const mainFrustum = csm.mainFrustum;\n    const frustums = csm.frustums;\n    const lights = csm.lights;\n    const frustumLines = this.frustumLines;\n    const frustumLinePositions = frustumLines.geometry.getAttribute(\"position\");\n    const cascadeLines = this.cascadeLines;\n    const cascadePlanes = this.cascadePlanes;\n    const shadowLines = this.shadowLines;\n    this.position.copy(camera.position);\n    this.quaternion.copy(camera.quaternion);\n    this.scale.copy(camera.scale);\n    this.updateMatrixWorld(true);\n    while (cascadeLines.length > cascades) {\n      this.remove(cascadeLines.pop());\n      this.remove(cascadePlanes.pop());\n      this.remove(shadowLines.pop());\n    }\n    while (cascadeLines.length < cascades) {\n      const cascadeLine = new Box3Helper(new Box3(), 16777215);\n      const planeMat = new MeshBasicMaterial({\n        transparent: true,\n        opacity: 0.1,\n        depthWrite: false,\n        side: DoubleSide\n      });\n      const cascadePlane = new Mesh(new PlaneGeometry(), planeMat);\n      const shadowLineGroup = new Group();\n      const shadowLine = new Box3Helper(new Box3(), 16776960);\n      shadowLineGroup.add(shadowLine);\n      this.add(cascadeLine);\n      this.add(cascadePlane);\n      this.add(shadowLineGroup);\n      cascadeLines.push(cascadeLine);\n      cascadePlanes.push(cascadePlane);\n      shadowLines.push(shadowLineGroup);\n    }\n    for (let i = 0; i < cascades; i++) {\n      const frustum = frustums[i];\n      const light = lights[i];\n      const shadowCam = light.shadow.camera;\n      const farVerts2 = frustum.vertices.far;\n      const cascadeLine = cascadeLines[i];\n      const cascadePlane = cascadePlanes[i];\n      const shadowLineGroup = shadowLines[i];\n      const shadowLine = shadowLineGroup.children[0];\n      cascadeLine.box.min.copy(farVerts2[2]);\n      cascadeLine.box.max.copy(farVerts2[0]);\n      cascadeLine.box.max.z += 1e-4;\n      cascadePlane.position.addVectors(farVerts2[0], farVerts2[2]);\n      cascadePlane.position.multiplyScalar(0.5);\n      cascadePlane.scale.subVectors(farVerts2[0], farVerts2[2]);\n      cascadePlane.scale.z = 1e-4;\n      this.remove(shadowLineGroup);\n      shadowLineGroup.position.copy(shadowCam.position);\n      shadowLineGroup.quaternion.copy(shadowCam.quaternion);\n      shadowLineGroup.scale.copy(shadowCam.scale);\n      shadowLineGroup.updateMatrixWorld(true);\n      this.attach(shadowLineGroup);\n      shadowLine.box.min.set(shadowCam.bottom, shadowCam.left, -shadowCam.far);\n      shadowLine.box.max.set(shadowCam.top, shadowCam.right, -shadowCam.near);\n    }\n    const nearVerts = mainFrustum.vertices.near;\n    const farVerts = mainFrustum.vertices.far;\n    frustumLinePositions.setXYZ(0, farVerts[0].x, farVerts[0].y, farVerts[0].z);\n    frustumLinePositions.setXYZ(1, farVerts[3].x, farVerts[3].y, farVerts[3].z);\n    frustumLinePositions.setXYZ(2, farVerts[2].x, farVerts[2].y, farVerts[2].z);\n    frustumLinePositions.setXYZ(3, farVerts[1].x, farVerts[1].y, farVerts[1].z);\n    frustumLinePositions.setXYZ(4, nearVerts[0].x, nearVerts[0].y, nearVerts[0].z);\n    frustumLinePositions.setXYZ(5, nearVerts[3].x, nearVerts[3].y, nearVerts[3].z);\n    frustumLinePositions.setXYZ(6, nearVerts[2].x, nearVerts[2].y, nearVerts[2].z);\n    frustumLinePositions.setXYZ(7, nearVerts[1].x, nearVerts[1].y, nearVerts[1].z);\n    frustumLinePositions.needsUpdate = true;\n  }\n}\nexport { CSMHelper };","map":{"version":3,"sources":["../../src/csm/CSMHelper.js"],"names":["farVerts"],"mappings":"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","sourcesContent":["import {\n  Group,\n  Mesh,\n  LineSegments,\n  BufferGeometry,\n  LineBasicMaterial,\n  Box3Helper,\n  Box3,\n  PlaneGeometry,\n  MeshBasicMaterial,\n  BufferAttribute,\n  DoubleSide,\n} from 'three'\n\nclass CSMHelper extends Group {\n  constructor(csm) {\n    super()\n    this.csm = csm\n    this.displayFrustum = true\n    this.displayPlanes = true\n    this.displayShadowBounds = true\n\n    const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7])\n    const positions = new Float32Array(24)\n    const frustumGeometry = new BufferGeometry()\n    frustumGeometry.setIndex(new BufferAttribute(indices, 1))\n    frustumGeometry.setAttribute('position', new BufferAttribute(positions, 3, false))\n    const frustumLines = new LineSegments(frustumGeometry, new LineBasicMaterial())\n    this.add(frustumLines)\n\n    this.frustumLines = frustumLines\n    this.cascadeLines = []\n    this.cascadePlanes = []\n    this.shadowLines = []\n  }\n\n  updateVisibility() {\n    const displayFrustum = this.displayFrustum\n    const displayPlanes = this.displayPlanes\n    const displayShadowBounds = this.displayShadowBounds\n\n    const frustumLines = this.frustumLines\n    const cascadeLines = this.cascadeLines\n    const cascadePlanes = this.cascadePlanes\n    const shadowLines = this.shadowLines\n    for (let i = 0, l = cascadeLines.length; i < l; i++) {\n      const cascadeLine = cascadeLines[i]\n      const cascadePlane = cascadePlanes[i]\n      const shadowLineGroup = shadowLines[i]\n\n      cascadeLine.visible = displayFrustum\n      cascadePlane.visible = displayFrustum && displayPlanes\n      shadowLineGroup.visible = displayShadowBounds\n    }\n\n    frustumLines.visible = displayFrustum\n  }\n\n  update() {\n    const csm = this.csm\n    const camera = csm.camera\n    const cascades = csm.cascades\n    const mainFrustum = csm.mainFrustum\n    const frustums = csm.frustums\n    const lights = csm.lights\n\n    const frustumLines = this.frustumLines\n    const frustumLinePositions = frustumLines.geometry.getAttribute('position')\n    const cascadeLines = this.cascadeLines\n    const cascadePlanes = this.cascadePlanes\n    const shadowLines = this.shadowLines\n\n    this.position.copy(camera.position)\n    this.quaternion.copy(camera.quaternion)\n    this.scale.copy(camera.scale)\n    this.updateMatrixWorld(true)\n\n    while (cascadeLines.length > cascades) {\n      this.remove(cascadeLines.pop())\n      this.remove(cascadePlanes.pop())\n      this.remove(shadowLines.pop())\n    }\n\n    while (cascadeLines.length < cascades) {\n      const cascadeLine = new Box3Helper(new Box3(), 0xffffff)\n      const planeMat = new MeshBasicMaterial({ transparent: true, opacity: 0.1, depthWrite: false, side: DoubleSide })\n      const cascadePlane = new Mesh(new PlaneGeometry(), planeMat)\n      const shadowLineGroup = new Group()\n      const shadowLine = new Box3Helper(new Box3(), 0xffff00)\n      shadowLineGroup.add(shadowLine)\n\n      this.add(cascadeLine)\n      this.add(cascadePlane)\n      this.add(shadowLineGroup)\n\n      cascadeLines.push(cascadeLine)\n      cascadePlanes.push(cascadePlane)\n      shadowLines.push(shadowLineGroup)\n    }\n\n    for (let i = 0; i < cascades; i++) {\n      const frustum = frustums[i]\n      const light = lights[i]\n      const shadowCam = light.shadow.camera\n      const farVerts = frustum.vertices.far\n\n      const cascadeLine = cascadeLines[i]\n      const cascadePlane = cascadePlanes[i]\n      const shadowLineGroup = shadowLines[i]\n      const shadowLine = shadowLineGroup.children[0]\n\n      cascadeLine.box.min.copy(farVerts[2])\n      cascadeLine.box.max.copy(farVerts[0])\n      cascadeLine.box.max.z += 1e-4\n\n      cascadePlane.position.addVectors(farVerts[0], farVerts[2])\n      cascadePlane.position.multiplyScalar(0.5)\n      cascadePlane.scale.subVectors(farVerts[0], farVerts[2])\n      cascadePlane.scale.z = 1e-4\n\n      this.remove(shadowLineGroup)\n      shadowLineGroup.position.copy(shadowCam.position)\n      shadowLineGroup.quaternion.copy(shadowCam.quaternion)\n      shadowLineGroup.scale.copy(shadowCam.scale)\n      shadowLineGroup.updateMatrixWorld(true)\n      this.attach(shadowLineGroup)\n\n      shadowLine.box.min.set(shadowCam.bottom, shadowCam.left, -shadowCam.far)\n      shadowLine.box.max.set(shadowCam.top, shadowCam.right, -shadowCam.near)\n    }\n\n    const nearVerts = mainFrustum.vertices.near\n    const farVerts = mainFrustum.vertices.far\n    frustumLinePositions.setXYZ(0, farVerts[0].x, farVerts[0].y, farVerts[0].z)\n    frustumLinePositions.setXYZ(1, farVerts[3].x, farVerts[3].y, farVerts[3].z)\n    frustumLinePositions.setXYZ(2, farVerts[2].x, farVerts[2].y, farVerts[2].z)\n    frustumLinePositions.setXYZ(3, farVerts[1].x, farVerts[1].y, farVerts[1].z)\n\n    frustumLinePositions.setXYZ(4, nearVerts[0].x, nearVerts[0].y, nearVerts[0].z)\n    frustumLinePositions.setXYZ(5, nearVerts[3].x, nearVerts[3].y, nearVerts[3].z)\n    frustumLinePositions.setXYZ(6, nearVerts[2].x, nearVerts[2].y, nearVerts[2].z)\n    frustumLinePositions.setXYZ(7, nearVerts[1].x, nearVerts[1].y, nearVerts[1].z)\n    frustumLinePositions.needsUpdate = true\n  }\n}\n\nexport { CSMHelper }\n"]},"metadata":{},"sourceType":"module"}