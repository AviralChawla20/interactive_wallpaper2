{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { WebGLRenderTarget, NearestFilter, MeshDepthMaterial, RGBADepthPacking, NoBlending, UniformsUtils, ShaderMaterial, Color } from \"three\";\nimport { BokehShader } from \"../shaders/BokehShader.js\";\nclass BokehPass extends Pass {\n  constructor(scene, camera, params) {\n    super();\n    __publicField(this, \"scene\");\n    __publicField(this, \"camera\");\n    __publicField(this, \"renderTargetDepth\");\n    __publicField(this, \"materialDepth\");\n    __publicField(this, \"materialBokeh\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"_oldClearColor\");\n    __publicField(this, \"uniforms\");\n    this.scene = scene;\n    this.camera = camera;\n    const focus = params.focus !== void 0 ? params.focus : 1;\n    const aspect = params.aspect !== void 0 ? params.aspect : camera.aspect;\n    const aperture = params.aperture !== void 0 ? params.aperture : 0.025;\n    const maxblur = params.maxblur !== void 0 ? params.maxblur : 1;\n    const width = params.width || window.innerWidth || 1;\n    const height = params.height || window.innerHeight || 1;\n    this.renderTargetDepth = new WebGLRenderTarget(width, height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    this.renderTargetDepth.texture.name = \"BokehPass.depth\";\n    this.materialDepth = new MeshDepthMaterial();\n    this.materialDepth.depthPacking = RGBADepthPacking;\n    this.materialDepth.blending = NoBlending;\n    if (BokehShader === void 0) {\n      console.error(\"BokehPass relies on BokehShader\");\n    }\n    const bokehShader = BokehShader;\n    const bokehUniforms = UniformsUtils.clone(bokehShader.uniforms);\n    bokehUniforms[\"tDepth\"].value = this.renderTargetDepth.texture;\n    bokehUniforms[\"focus\"].value = focus;\n    bokehUniforms[\"aspect\"].value = aspect;\n    bokehUniforms[\"aperture\"].value = aperture;\n    bokehUniforms[\"maxblur\"].value = maxblur;\n    bokehUniforms[\"nearClip\"].value = camera.near;\n    bokehUniforms[\"farClip\"].value = camera.far;\n    this.materialBokeh = new ShaderMaterial({\n      defines: Object.assign({}, bokehShader.defines),\n      uniforms: bokehUniforms,\n      vertexShader: bokehShader.vertexShader,\n      fragmentShader: bokehShader.fragmentShader\n    });\n    this.uniforms = bokehUniforms;\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.materialBokeh);\n    this._oldClearColor = new Color();\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    this.scene.overrideMaterial = this.materialDepth;\n    renderer.getClearColor(this._oldClearColor);\n    const oldClearAlpha = renderer.getClearAlpha();\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setClearColor(16777215);\n    renderer.setClearAlpha(1);\n    renderer.setRenderTarget(this.renderTargetDepth);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n    this.uniforms[\"tColor\"].value = readBuffer.texture;\n    this.uniforms[\"nearClip\"].value = this.camera.near;\n    this.uniforms[\"farClip\"].value = this.camera.far;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n    this.scene.overrideMaterial = null;\n    renderer.setClearColor(this._oldClearColor);\n    renderer.setClearAlpha(oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  }\n}\nexport { BokehPass };","map":{"version":3,"sources":["../../src/postprocessing/BokehPass.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Depth-of-field post-process with bokeh shader\n */\n\nimport { Pass, FullScreenQuad } from './Pass'\nimport {\n  Color,\n  MeshDepthMaterial,\n  NearestFilter,\n  NoBlending,\n  PerspectiveCamera,\n  RGBADepthPacking,\n  Scene,\n  ShaderMaterial,\n  UniformsUtils,\n  WebGLRenderer,\n  WebGLRenderTarget,\n} from 'three'\nimport { BokehShader } from '../shaders/BokehShader'\n\ntype BokehPassParams = {\n  focus?: number\n  aspect?: number\n  aperture?: number\n  maxblur?: number\n  width?: number\n  height?: number\n}\n\nclass BokehPass extends Pass {\n  public scene: Scene\n  public camera: PerspectiveCamera\n  public renderTargetDepth: WebGLRenderTarget\n  public materialDepth: MeshDepthMaterial\n  public materialBokeh: ShaderMaterial\n  public fsQuad: FullScreenQuad\n\n  private _oldClearColor: Color\n\n  public uniforms\n\n  constructor(scene: Scene, camera: PerspectiveCamera, params: BokehPassParams) {\n    super()\n    this.scene = scene\n    this.camera = camera\n    const focus = params.focus !== undefined ? params.focus : 1.0\n    const aspect = params.aspect !== undefined ? params.aspect : camera.aspect\n    const aperture = params.aperture !== undefined ? params.aperture : 0.025\n    const maxblur = params.maxblur !== undefined ? params.maxblur : 1.0 // render targets\n\n    const width = params.width || window.innerWidth || 1\n    const height = params.height || window.innerHeight || 1\n    this.renderTargetDepth = new WebGLRenderTarget(width, height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n    })\n    this.renderTargetDepth.texture.name = 'BokehPass.depth' // depth material\n\n    this.materialDepth = new MeshDepthMaterial()\n    this.materialDepth.depthPacking = RGBADepthPacking\n    this.materialDepth.blending = NoBlending // bokeh material\n\n    if (BokehShader === undefined) {\n      console.error('BokehPass relies on BokehShader')\n    }\n\n    const bokehShader = BokehShader\n    const bokehUniforms = UniformsUtils.clone(bokehShader.uniforms)\n    bokehUniforms['tDepth'].value = this.renderTargetDepth.texture\n    bokehUniforms['focus'].value = focus\n    bokehUniforms['aspect'].value = aspect\n    bokehUniforms['aperture'].value = aperture\n    bokehUniforms['maxblur'].value = maxblur\n    bokehUniforms['nearClip'].value = camera.near\n    bokehUniforms['farClip'].value = camera.far\n    this.materialBokeh = new ShaderMaterial({\n      defines: Object.assign({}, bokehShader.defines),\n      uniforms: bokehUniforms,\n      vertexShader: bokehShader.vertexShader,\n      fragmentShader: bokehShader.fragmentShader,\n    })\n    this.uniforms = bokehUniforms\n    this.needsSwap = false\n    this.fsQuad = new FullScreenQuad(this.materialBokeh)\n    this._oldClearColor = new Color()\n  }\n\n  public render(\n    renderer: WebGLRenderer,\n    writeBuffer: WebGLRenderTarget,\n    readBuffer: WebGLRenderTarget,\n    /*, deltaTime, maskActive */\n  ): void {\n    // Render depth into texture\n    this.scene.overrideMaterial = this.materialDepth\n    renderer.getClearColor(this._oldClearColor)\n    const oldClearAlpha = renderer.getClearAlpha()\n    const oldAutoClear = renderer.autoClear\n    renderer.autoClear = false\n    renderer.setClearColor(0xffffff)\n    renderer.setClearAlpha(1.0)\n    renderer.setRenderTarget(this.renderTargetDepth)\n    renderer.clear()\n    renderer.render(this.scene, this.camera) // Render bokeh composite\n\n    this.uniforms['tColor'].value = readBuffer.texture\n    this.uniforms['nearClip'].value = this.camera.near\n    this.uniforms['farClip'].value = this.camera.far\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null)\n      this.fsQuad.render(renderer)\n    } else {\n      renderer.setRenderTarget(writeBuffer)\n      renderer.clear()\n      this.fsQuad.render(renderer)\n    }\n\n    this.scene.overrideMaterial = null\n    renderer.setClearColor(this._oldClearColor)\n    renderer.setClearAlpha(oldClearAlpha)\n    renderer.autoClear = oldAutoClear\n  }\n}\n\nexport { BokehPass }\n"]},"metadata":{},"sourceType":"module"}