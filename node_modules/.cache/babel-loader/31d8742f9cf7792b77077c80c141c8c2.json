{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color, Vector2, WebGLRenderTarget, HalfFloatType, NearestFilter, DepthTexture, UnsignedShortType, MeshDepthMaterial, RGBADepthPacking, NoBlending, MeshNormalMaterial, ShaderMaterial, UniformsUtils, CustomBlending, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SAOShader } from \"../shaders/SAOShader.js\";\nimport { DepthLimitedBlurShader, BlurShaderUtils } from \"../shaders/DepthLimitedBlurShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { UnpackDepthRGBAShader } from \"../shaders/UnpackDepthRGBAShader.js\";\nclass SAOPass extends Pass {\n  constructor(scene, camera, useDepthTexture = false, useNormals = false, resolution = new Vector2(256, 256)) {\n    super();\n    this.scene = scene;\n    this.camera = camera;\n    this.clear = true;\n    this.needsSwap = false;\n    this.supportsDepthTextureExtension = useDepthTexture;\n    this.supportsNormalTexture = useNormals;\n    this.originalClearColor = new Color();\n    this._oldClearColor = new Color();\n    this.oldClearAlpha = 1;\n    this.params = {\n      output: 0,\n      saoBias: 0.5,\n      saoIntensity: 0.18,\n      saoScale: 1,\n      saoKernelRadius: 100,\n      saoMinResolution: 0,\n      saoBlur: true,\n      saoBlurRadius: 8,\n      saoBlurStdDev: 4,\n      saoBlurDepthCutoff: 0.01\n    };\n    this.resolution = new Vector2(resolution.x, resolution.y);\n    this.saoRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n      type: HalfFloatType\n    });\n    this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n    this.beautyRenderTarget = this.saoRenderTarget.clone();\n    this.normalRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.depthRenderTarget = this.normalRenderTarget.clone();\n    let depthTexture;\n    if (this.supportsDepthTextureExtension) {\n      depthTexture = new DepthTexture();\n      depthTexture.type = UnsignedShortType;\n      this.beautyRenderTarget.depthTexture = depthTexture;\n      this.beautyRenderTarget.depthBuffer = true;\n    }\n    this.depthMaterial = new MeshDepthMaterial();\n    this.depthMaterial.depthPacking = RGBADepthPacking;\n    this.depthMaterial.blending = NoBlending;\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.saoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SAOShader.defines),\n      fragmentShader: SAOShader.fragmentShader,\n      vertexShader: SAOShader.vertexShader,\n      uniforms: UniformsUtils.clone(SAOShader.uniforms)\n    });\n    this.saoMaterial.extensions.derivatives = true;\n    this.saoMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.saoMaterial.defines[\"NORMAL_TEXTURE\"] = this.supportsNormalTexture ? 1 : 0;\n    this.saoMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.saoMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.saoMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.saoMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n    this.saoMaterial.blending = NoBlending;\n    this.vBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    this.vBlurMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.vBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.vBlurMaterial.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n    this.vBlurMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.vBlurMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.vBlurMaterial.blending = NoBlending;\n    this.hBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    this.hBlurMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.hBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.hBlurMaterial.uniforms[\"tDiffuse\"].value = this.blurIntermediateRenderTarget.texture;\n    this.hBlurMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.hBlurMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.hBlurMaterial.blending = NoBlending;\n    this.materialCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.materialCopy.transparent = true;\n    this.materialCopy.depthTest = false;\n    this.materialCopy.depthWrite = false;\n    this.materialCopy.blending = CustomBlending;\n    this.materialCopy.blendSrc = DstColorFactor;\n    this.materialCopy.blendDst = ZeroFactor;\n    this.materialCopy.blendEquation = AddEquation;\n    this.materialCopy.blendSrcAlpha = DstAlphaFactor;\n    this.materialCopy.blendDstAlpha = ZeroFactor;\n    this.materialCopy.blendEquationAlpha = AddEquation;\n    this.depthCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n      vertexShader: UnpackDepthRGBAShader.vertexShader,\n      fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.fsQuad = new FullScreenQuad(null);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    if (this.renderToScreen) {\n      this.materialCopy.blending = NoBlending;\n      this.materialCopy.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n      this.materialCopy.needsUpdate = true;\n      this.renderPass(renderer, this.materialCopy, null);\n    }\n    if (this.params.output === 1) {\n      return;\n    }\n    renderer.getClearColor(this._oldClearColor);\n    this.oldClearAlpha = renderer.getClearAlpha();\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setRenderTarget(this.depthRenderTarget);\n    renderer.clear();\n    this.saoMaterial.uniforms[\"bias\"].value = this.params.saoBias;\n    this.saoMaterial.uniforms[\"intensity\"].value = this.params.saoIntensity;\n    this.saoMaterial.uniforms[\"scale\"].value = this.params.saoScale;\n    this.saoMaterial.uniforms[\"kernelRadius\"].value = this.params.saoKernelRadius;\n    this.saoMaterial.uniforms[\"minResolution\"].value = this.params.saoMinResolution;\n    this.saoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.saoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    const depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n    this.vBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n    this.hBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n    this.vBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.vBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.hBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.hBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n    if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n      BlurShaderUtils.configure(this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(0, 1));\n      BlurShaderUtils.configure(this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(1, 0));\n      this.prevStdDev = this.params.saoBlurStdDev;\n      this.prevNumSamples = this.params.saoBlurRadius;\n    }\n    renderer.setClearColor(0);\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n    if (!this.supportsDepthTextureExtension) {\n      this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0, 1);\n    }\n    if (this.supportsNormalTexture) {\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n    }\n    this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 16777215, 1);\n    if (this.params.saoBlur) {\n      this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 16777215, 1);\n      this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 16777215, 1);\n    }\n    let outputMaterial = this.materialCopy;\n    if (this.params.output === 3) {\n      if (this.supportsDepthTextureExtension) {\n        this.materialCopy.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.depthTexture;\n        this.materialCopy.needsUpdate = true;\n      } else {\n        this.depthCopy.uniforms[\"tDiffuse\"].value = this.depthRenderTarget.texture;\n        this.depthCopy.needsUpdate = true;\n        outputMaterial = this.depthCopy;\n      }\n    } else if (this.params.output === 4) {\n      this.materialCopy.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } else {\n      this.materialCopy.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    }\n    if (this.params.output === 0) {\n      outputMaterial.blending = CustomBlending;\n    } else {\n      outputMaterial.blending = NoBlending;\n    }\n    this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.beautyRenderTarget.setSize(width, height);\n    this.saoRenderTarget.setSize(width, height);\n    this.blurIntermediateRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.depthRenderTarget.setSize(width, height);\n    this.saoMaterial.uniforms[\"size\"].value.set(width, height);\n    this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n    this.saoMaterial.needsUpdate = true;\n    this.vBlurMaterial.uniforms[\"size\"].value.set(width, height);\n    this.vBlurMaterial.needsUpdate = true;\n    this.hBlurMaterial.uniforms[\"size\"].value.set(width, height);\n    this.hBlurMaterial.needsUpdate = true;\n  }\n  dispose() {\n    this.saoRenderTarget.dispose();\n    this.blurIntermediateRenderTarget.dispose();\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.depthRenderTarget.dispose();\n    this.depthMaterial.dispose();\n    this.normalMaterial.dispose();\n    this.saoMaterial.dispose();\n    this.vBlurMaterial.dispose();\n    this.hBlurMaterial.dispose();\n    this.materialCopy.dispose();\n    this.depthCopy.dispose();\n    this.fsQuad.dispose();\n  }\n}\n__publicField(SAOPass, \"OUTPUT\", {\n  Beauty: 1,\n  Default: 0,\n  SAO: 2,\n  Depth: 3,\n  Normal: 4\n});\nexport { SAOPass };","map":{"version":3,"sources":["../../src/postprocessing/SAOPass.js"],"names":[],"mappings":"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","sourcesContent":["import {\n  AddEquation,\n  Color,\n  CustomBlending,\n  DepthTexture,\n  DstAlphaFactor,\n  DstColorFactor,\n  HalfFloatType,\n  MeshDepthMaterial,\n  MeshNormalMaterial,\n  NearestFilter,\n  NoBlending,\n  RGBADepthPacking,\n  ShaderMaterial,\n  UniformsUtils,\n  UnsignedShortType,\n  Vector2,\n  WebGLRenderTarget,\n  ZeroFactor,\n} from 'three'\nimport { Pass, FullScreenQuad } from './Pass'\nimport { SAOShader } from '../shaders/SAOShader'\nimport { DepthLimitedBlurShader } from '../shaders/DepthLimitedBlurShader'\nimport { BlurShaderUtils } from '../shaders/DepthLimitedBlurShader'\nimport { CopyShader } from '../shaders/CopyShader'\nimport { UnpackDepthRGBAShader } from '../shaders/UnpackDepthRGBAShader'\n\n/**\n * SAO implementation inspired from bhouston previous SAO work\n */\nclass SAOPass extends Pass {\n  static OUTPUT = {\n    Beauty: 1,\n    Default: 0,\n    SAO: 2,\n    Depth: 3,\n    Normal: 4,\n  }\n\n  constructor(scene, camera, useDepthTexture = false, useNormals = false, resolution = new Vector2(256, 256)) {\n    super()\n\n    this.scene = scene\n    this.camera = camera\n\n    this.clear = true\n    this.needsSwap = false\n\n    this.supportsDepthTextureExtension = useDepthTexture\n    this.supportsNormalTexture = useNormals\n\n    this.originalClearColor = new Color()\n    this._oldClearColor = new Color()\n    this.oldClearAlpha = 1\n\n    this.params = {\n      output: 0,\n      saoBias: 0.5,\n      saoIntensity: 0.18,\n      saoScale: 1,\n      saoKernelRadius: 100,\n      saoMinResolution: 0,\n      saoBlur: true,\n      saoBlurRadius: 8,\n      saoBlurStdDev: 4,\n      saoBlurDepthCutoff: 0.01,\n    }\n\n    this.resolution = new Vector2(resolution.x, resolution.y)\n\n    this.saoRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, { type: HalfFloatType })\n    this.blurIntermediateRenderTarget = this.saoRenderTarget.clone()\n    this.beautyRenderTarget = this.saoRenderTarget.clone()\n\n    this.normalRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n    })\n    this.depthRenderTarget = this.normalRenderTarget.clone()\n\n    let depthTexture\n\n    if (this.supportsDepthTextureExtension) {\n      depthTexture = new DepthTexture()\n      depthTexture.type = UnsignedShortType\n\n      this.beautyRenderTarget.depthTexture = depthTexture\n      this.beautyRenderTarget.depthBuffer = true\n    }\n\n    this.depthMaterial = new MeshDepthMaterial()\n    this.depthMaterial.depthPacking = RGBADepthPacking\n    this.depthMaterial.blending = NoBlending\n\n    this.normalMaterial = new MeshNormalMaterial()\n    this.normalMaterial.blending = NoBlending\n\n    this.saoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SAOShader.defines),\n      fragmentShader: SAOShader.fragmentShader,\n      vertexShader: SAOShader.vertexShader,\n      uniforms: UniformsUtils.clone(SAOShader.uniforms),\n    })\n    this.saoMaterial.extensions.derivatives = true\n    this.saoMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1\n    this.saoMaterial.defines['NORMAL_TEXTURE'] = this.supportsNormalTexture ? 1 : 0\n    this.saoMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0\n    this.saoMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension\n      ? depthTexture\n      : this.depthRenderTarget.texture\n    this.saoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture\n    this.saoMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y)\n    this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse)\n    this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix\n    this.saoMaterial.blending = NoBlending\n\n    this.vBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader,\n    })\n    this.vBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1\n    this.vBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0\n    this.vBlurMaterial.uniforms['tDiffuse'].value = this.saoRenderTarget.texture\n    this.vBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension\n      ? depthTexture\n      : this.depthRenderTarget.texture\n    this.vBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y)\n    this.vBlurMaterial.blending = NoBlending\n\n    this.hBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader,\n    })\n    this.hBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1\n    this.hBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0\n    this.hBlurMaterial.uniforms['tDiffuse'].value = this.blurIntermediateRenderTarget.texture\n    this.hBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension\n      ? depthTexture\n      : this.depthRenderTarget.texture\n    this.hBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y)\n    this.hBlurMaterial.blending = NoBlending\n\n    this.materialCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      blending: NoBlending,\n    })\n    this.materialCopy.transparent = true\n    this.materialCopy.depthTest = false\n    this.materialCopy.depthWrite = false\n    this.materialCopy.blending = CustomBlending\n    this.materialCopy.blendSrc = DstColorFactor\n    this.materialCopy.blendDst = ZeroFactor\n    this.materialCopy.blendEquation = AddEquation\n    this.materialCopy.blendSrcAlpha = DstAlphaFactor\n    this.materialCopy.blendDstAlpha = ZeroFactor\n    this.materialCopy.blendEquationAlpha = AddEquation\n\n    this.depthCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n      vertexShader: UnpackDepthRGBAShader.vertexShader,\n      fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n      blending: NoBlending,\n    })\n\n    this.fsQuad = new FullScreenQuad(null)\n  }\n\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive*/) {\n    // Rendering readBuffer first when rendering to screen\n    if (this.renderToScreen) {\n      this.materialCopy.blending = NoBlending\n      this.materialCopy.uniforms['tDiffuse'].value = readBuffer.texture\n      this.materialCopy.needsUpdate = true\n      this.renderPass(renderer, this.materialCopy, null)\n    }\n\n    if (this.params.output === 1) {\n      return\n    }\n\n    renderer.getClearColor(this._oldClearColor)\n    this.oldClearAlpha = renderer.getClearAlpha()\n    const oldAutoClear = renderer.autoClear\n    renderer.autoClear = false\n\n    renderer.setRenderTarget(this.depthRenderTarget)\n    renderer.clear()\n\n    this.saoMaterial.uniforms['bias'].value = this.params.saoBias\n    this.saoMaterial.uniforms['intensity'].value = this.params.saoIntensity\n    this.saoMaterial.uniforms['scale'].value = this.params.saoScale\n    this.saoMaterial.uniforms['kernelRadius'].value = this.params.saoKernelRadius\n    this.saoMaterial.uniforms['minResolution'].value = this.params.saoMinResolution\n    this.saoMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.saoMaterial.uniforms['cameraFar'].value = this.camera.far\n    // this.saoMaterial.uniforms['randomSeed'].value = Math.random();\n\n    const depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near)\n    this.vBlurMaterial.uniforms['depthCutoff'].value = depthCutoff\n    this.hBlurMaterial.uniforms['depthCutoff'].value = depthCutoff\n\n    this.vBlurMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.vBlurMaterial.uniforms['cameraFar'].value = this.camera.far\n    this.hBlurMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.hBlurMaterial.uniforms['cameraFar'].value = this.camera.far\n\n    this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius)\n    if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n      BlurShaderUtils.configure(\n        this.vBlurMaterial,\n        this.params.saoBlurRadius,\n        this.params.saoBlurStdDev,\n        new Vector2(0, 1),\n      )\n      BlurShaderUtils.configure(\n        this.hBlurMaterial,\n        this.params.saoBlurRadius,\n        this.params.saoBlurStdDev,\n        new Vector2(1, 0),\n      )\n      this.prevStdDev = this.params.saoBlurStdDev\n      this.prevNumSamples = this.params.saoBlurRadius\n    }\n\n    // Rendering scene to depth texture\n    renderer.setClearColor(0x000000)\n    renderer.setRenderTarget(this.beautyRenderTarget)\n    renderer.clear()\n    renderer.render(this.scene, this.camera)\n\n    // Re-render scene if depth texture extension is not supported\n    if (!this.supportsDepthTextureExtension) {\n      // Clear rule : far clipping plane in both RGBA and Basic encoding\n      this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0x000000, 1.0)\n    }\n\n    if (this.supportsNormalTexture) {\n      // Clear rule : default normal is facing the camera\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0)\n    }\n\n    // Rendering SAO texture\n    this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 0xffffff, 1.0)\n\n    // Blurring SAO texture\n    if (this.params.saoBlur) {\n      this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 0xffffff, 1.0)\n      this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 0xffffff, 1.0)\n    }\n\n    let outputMaterial = this.materialCopy\n    // Setting up SAO rendering\n    if (this.params.output === 3) {\n      if (this.supportsDepthTextureExtension) {\n        this.materialCopy.uniforms['tDiffuse'].value = this.beautyRenderTarget.depthTexture\n        this.materialCopy.needsUpdate = true\n      } else {\n        this.depthCopy.uniforms['tDiffuse'].value = this.depthRenderTarget.texture\n        this.depthCopy.needsUpdate = true\n        outputMaterial = this.depthCopy\n      }\n    } else if (this.params.output === 4) {\n      this.materialCopy.uniforms['tDiffuse'].value = this.normalRenderTarget.texture\n      this.materialCopy.needsUpdate = true\n    } else {\n      this.materialCopy.uniforms['tDiffuse'].value = this.saoRenderTarget.texture\n      this.materialCopy.needsUpdate = true\n    }\n\n    // Blending depends on output, only want a CustomBlending when showing SAO\n    if (this.params.output === 0) {\n      outputMaterial.blending = CustomBlending\n    } else {\n      outputMaterial.blending = NoBlending\n    }\n\n    // Rendering SAOPass result on top of previous pass\n    this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer)\n\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha)\n    renderer.autoClear = oldAutoClear\n  }\n\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor)\n    const originalClearAlpha = renderer.getClearAlpha()\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n\n    // setup pass state\n    renderer.autoClear = false\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.fsQuad.material = passMaterial\n    this.fsQuad.render(renderer)\n\n    // restore original state\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor)\n    const originalClearAlpha = renderer.getClearAlpha()\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n    renderer.autoClear = false\n\n    clearColor = overrideMaterial.clearColor || clearColor\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.scene.overrideMaterial = overrideMaterial\n    renderer.render(this.scene, this.camera)\n    this.scene.overrideMaterial = null\n\n    // restore original state\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  setSize(width, height) {\n    this.beautyRenderTarget.setSize(width, height)\n    this.saoRenderTarget.setSize(width, height)\n    this.blurIntermediateRenderTarget.setSize(width, height)\n    this.normalRenderTarget.setSize(width, height)\n    this.depthRenderTarget.setSize(width, height)\n\n    this.saoMaterial.uniforms['size'].value.set(width, height)\n    this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse)\n    this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix\n    this.saoMaterial.needsUpdate = true\n\n    this.vBlurMaterial.uniforms['size'].value.set(width, height)\n    this.vBlurMaterial.needsUpdate = true\n\n    this.hBlurMaterial.uniforms['size'].value.set(width, height)\n    this.hBlurMaterial.needsUpdate = true\n  }\n\n  dispose() {\n    this.saoRenderTarget.dispose()\n    this.blurIntermediateRenderTarget.dispose()\n    this.beautyRenderTarget.dispose()\n    this.normalRenderTarget.dispose()\n    this.depthRenderTarget.dispose()\n\n    this.depthMaterial.dispose()\n    this.normalMaterial.dispose()\n    this.saoMaterial.dispose()\n    this.vBlurMaterial.dispose()\n    this.hBlurMaterial.dispose()\n    this.materialCopy.dispose()\n    this.depthCopy.dispose()\n\n    this.fsQuad.dispose()\n  }\n}\n\nexport { SAOPass }\n"]},"metadata":{},"sourceType":"module"}