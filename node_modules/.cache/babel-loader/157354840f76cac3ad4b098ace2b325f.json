{"ast":null,"code":"import { Loader, FileLoader, BufferGeometry, Vector3, Float32BufferAttribute, AnimationClip } from \"three\";\nconst _normalData = [[-0.525731, 0, 0.850651], [-0.442863, 0.238856, 0.864188], [-0.295242, 0, 0.955423], [-0.309017, 0.5, 0.809017], [-0.16246, 0.262866, 0.951056], [0, 0, 1], [0, 0.850651, 0.525731], [-0.147621, 0.716567, 0.681718], [0.147621, 0.716567, 0.681718], [0, 0.525731, 0.850651], [0.309017, 0.5, 0.809017], [0.525731, 0, 0.850651], [0.295242, 0, 0.955423], [0.442863, 0.238856, 0.864188], [0.16246, 0.262866, 0.951056], [-0.681718, 0.147621, 0.716567], [-0.809017, 0.309017, 0.5], [-0.587785, 0.425325, 0.688191], [-0.850651, 0.525731, 0], [-0.864188, 0.442863, 0.238856], [-0.716567, 0.681718, 0.147621], [-0.688191, 0.587785, 0.425325], [-0.5, 0.809017, 0.309017], [-0.238856, 0.864188, 0.442863], [-0.425325, 0.688191, 0.587785], [-0.716567, 0.681718, -0.147621], [-0.5, 0.809017, -0.309017], [-0.525731, 0.850651, 0], [0, 0.850651, -0.525731], [-0.238856, 0.864188, -0.442863], [0, 0.955423, -0.295242], [-0.262866, 0.951056, -0.16246], [0, 1, 0], [0, 0.955423, 0.295242], [-0.262866, 0.951056, 0.16246], [0.238856, 0.864188, 0.442863], [0.262866, 0.951056, 0.16246], [0.5, 0.809017, 0.309017], [0.238856, 0.864188, -0.442863], [0.262866, 0.951056, -0.16246], [0.5, 0.809017, -0.309017], [0.850651, 0.525731, 0], [0.716567, 0.681718, 0.147621], [0.716567, 0.681718, -0.147621], [0.525731, 0.850651, 0], [0.425325, 0.688191, 0.587785], [0.864188, 0.442863, 0.238856], [0.688191, 0.587785, 0.425325], [0.809017, 0.309017, 0.5], [0.681718, 0.147621, 0.716567], [0.587785, 0.425325, 0.688191], [0.955423, 0.295242, 0], [1, 0, 0], [0.951056, 0.16246, 0.262866], [0.850651, -0.525731, 0], [0.955423, -0.295242, 0], [0.864188, -0.442863, 0.238856], [0.951056, -0.16246, 0.262866], [0.809017, -0.309017, 0.5], [0.681718, -0.147621, 0.716567], [0.850651, 0, 0.525731], [0.864188, 0.442863, -0.238856], [0.809017, 0.309017, -0.5], [0.951056, 0.16246, -0.262866], [0.525731, 0, -0.850651], [0.681718, 0.147621, -0.716567], [0.681718, -0.147621, -0.716567], [0.850651, 0, -0.525731], [0.809017, -0.309017, -0.5], [0.864188, -0.442863, -0.238856], [0.951056, -0.16246, -0.262866], [0.147621, 0.716567, -0.681718], [0.309017, 0.5, -0.809017], [0.425325, 0.688191, -0.587785], [0.442863, 0.238856, -0.864188], [0.587785, 0.425325, -0.688191], [0.688191, 0.587785, -0.425325], [-0.147621, 0.716567, -0.681718], [-0.309017, 0.5, -0.809017], [0, 0.525731, -0.850651], [-0.525731, 0, -0.850651], [-0.442863, 0.238856, -0.864188], [-0.295242, 0, -0.955423], [-0.16246, 0.262866, -0.951056], [0, 0, -1], [0.295242, 0, -0.955423], [0.16246, 0.262866, -0.951056], [-0.442863, -0.238856, -0.864188], [-0.309017, -0.5, -0.809017], [-0.16246, -0.262866, -0.951056], [0, -0.850651, -0.525731], [-0.147621, -0.716567, -0.681718], [0.147621, -0.716567, -0.681718], [0, -0.525731, -0.850651], [0.309017, -0.5, -0.809017], [0.442863, -0.238856, -0.864188], [0.16246, -0.262866, -0.951056], [0.238856, -0.864188, -0.442863], [0.5, -0.809017, -0.309017], [0.425325, -0.688191, -0.587785], [0.716567, -0.681718, -0.147621], [0.688191, -0.587785, -0.425325], [0.587785, -0.425325, -0.688191], [0, -0.955423, -0.295242], [0, -1, 0], [0.262866, -0.951056, -0.16246], [0, -0.850651, 0.525731], [0, -0.955423, 0.295242], [0.238856, -0.864188, 0.442863], [0.262866, -0.951056, 0.16246], [0.5, -0.809017, 0.309017], [0.716567, -0.681718, 0.147621], [0.525731, -0.850651, 0], [-0.238856, -0.864188, -0.442863], [-0.5, -0.809017, -0.309017], [-0.262866, -0.951056, -0.16246], [-0.850651, -0.525731, 0], [-0.716567, -0.681718, -0.147621], [-0.716567, -0.681718, 0.147621], [-0.525731, -0.850651, 0], [-0.5, -0.809017, 0.309017], [-0.238856, -0.864188, 0.442863], [-0.262866, -0.951056, 0.16246], [-0.864188, -0.442863, 0.238856], [-0.809017, -0.309017, 0.5], [-0.688191, -0.587785, 0.425325], [-0.681718, -0.147621, 0.716567], [-0.442863, -0.238856, 0.864188], [-0.587785, -0.425325, 0.688191], [-0.309017, -0.5, 0.809017], [-0.147621, -0.716567, 0.681718], [-0.425325, -0.688191, 0.587785], [-0.16246, -0.262866, 0.951056], [0.442863, -0.238856, 0.864188], [0.16246, -0.262866, 0.951056], [0.309017, -0.5, 0.809017], [0.147621, -0.716567, 0.681718], [0, -0.525731, 0.850651], [0.425325, -0.688191, 0.587785], [0.587785, -0.425325, 0.688191], [0.688191, -0.587785, 0.425325], [-0.955423, 0.295242, 0], [-0.951056, 0.16246, 0.262866], [-1, 0, 0], [-0.850651, 0, 0.525731], [-0.955423, -0.295242, 0], [-0.951056, -0.16246, 0.262866], [-0.864188, 0.442863, -0.238856], [-0.951056, 0.16246, -0.262866], [-0.809017, 0.309017, -0.5], [-0.864188, -0.442863, -0.238856], [-0.951056, -0.16246, -0.262866], [-0.809017, -0.309017, -0.5], [-0.681718, 0.147621, -0.716567], [-0.681718, -0.147621, -0.716567], [-0.850651, 0, -0.525731], [-0.688191, 0.587785, -0.425325], [-0.587785, 0.425325, -0.688191], [-0.425325, 0.688191, -0.587785], [-0.425325, -0.688191, -0.587785], [-0.587785, -0.425325, -0.688191], [-0.688191, -0.587785, -0.425325]];\nclass MD2Loader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(buffer) {\n    const data = new DataView(buffer);\n    const header = {};\n    const headerNames = [\"ident\", \"version\", \"skinwidth\", \"skinheight\", \"framesize\", \"num_skins\", \"num_vertices\", \"num_st\", \"num_tris\", \"num_glcmds\", \"num_frames\", \"offset_skins\", \"offset_st\", \"offset_tris\", \"offset_frames\", \"offset_glcmds\", \"offset_end\"];\n    for (let i = 0; i < headerNames.length; i++) {\n      header[headerNames[i]] = data.getInt32(i * 4, true);\n    }\n    if (header.ident !== 844121161 || header.version !== 8) {\n      console.error(\"Not a valid MD2 file\");\n      return;\n    }\n    if (header.offset_end !== data.byteLength) {\n      console.error(\"Corrupted MD2 file\");\n      return;\n    }\n    const geometry = new BufferGeometry();\n    const uvsTemp = [];\n    let offset = header.offset_st;\n    for (let i = 0, l = header.num_st; i < l; i++) {\n      const u = data.getInt16(offset + 0, true);\n      const v = data.getInt16(offset + 2, true);\n      uvsTemp.push(u / header.skinwidth, 1 - v / header.skinheight);\n      offset += 4;\n    }\n    offset = header.offset_tris;\n    const vertexIndices = [];\n    const uvIndices = [];\n    for (let i = 0, l = header.num_tris; i < l; i++) {\n      vertexIndices.push(data.getUint16(offset + 0, true), data.getUint16(offset + 2, true), data.getUint16(offset + 4, true));\n      uvIndices.push(data.getUint16(offset + 6, true), data.getUint16(offset + 8, true), data.getUint16(offset + 10, true));\n      offset += 12;\n    }\n    const translation = new Vector3();\n    const scale = new Vector3();\n    const string = [];\n    const frames = [];\n    offset = header.offset_frames;\n    for (let i = 0, l = header.num_frames; i < l; i++) {\n      scale.set(data.getFloat32(offset + 0, true), data.getFloat32(offset + 4, true), data.getFloat32(offset + 8, true));\n      translation.set(data.getFloat32(offset + 12, true), data.getFloat32(offset + 16, true), data.getFloat32(offset + 20, true));\n      offset += 24;\n      for (let j = 0; j < 16; j++) {\n        const character = data.getUint8(offset + j, true);\n        if (character === 0) break;\n        string[j] = character;\n      }\n      const frame = {\n        name: String.fromCharCode.apply(null, string),\n        vertices: [],\n        normals: []\n      };\n      offset += 16;\n      for (let j = 0; j < header.num_vertices; j++) {\n        let x = data.getUint8(offset++, true);\n        let y = data.getUint8(offset++, true);\n        let z = data.getUint8(offset++, true);\n        const n = _normalData[data.getUint8(offset++, true)];\n        x = x * scale.x + translation.x;\n        y = y * scale.y + translation.y;\n        z = z * scale.z + translation.z;\n        frame.vertices.push(x, z, y);\n        frame.normals.push(n[0], n[2], n[1]);\n      }\n      frames.push(frame);\n    }\n    const positions = [];\n    const normals = [];\n    const uvs = [];\n    const verticesTemp = frames[0].vertices;\n    const normalsTemp = frames[0].normals;\n    for (let i = 0, l = vertexIndices.length; i < l; i++) {\n      const vertexIndex = vertexIndices[i];\n      let stride = vertexIndex * 3;\n      const x = verticesTemp[stride];\n      const y = verticesTemp[stride + 1];\n      const z = verticesTemp[stride + 2];\n      positions.push(x, y, z);\n      const nx = normalsTemp[stride];\n      const ny = normalsTemp[stride + 1];\n      const nz = normalsTemp[stride + 2];\n      normals.push(nx, ny, nz);\n      const uvIndex = uvIndices[i];\n      stride = uvIndex * 2;\n      const u = uvsTemp[stride];\n      const v = uvsTemp[stride + 1];\n      uvs.push(u, v);\n    }\n    geometry.setAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n    geometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    const morphPositions = [];\n    const morphNormals = [];\n    for (let i = 0, l = frames.length; i < l; i++) {\n      const frame = frames[i];\n      const attributeName = frame.name;\n      if (frame.vertices.length > 0) {\n        const positions2 = [];\n        for (let j = 0, jl = vertexIndices.length; j < jl; j++) {\n          const vertexIndex = vertexIndices[j];\n          const stride = vertexIndex * 3;\n          const x = frame.vertices[stride];\n          const y = frame.vertices[stride + 1];\n          const z = frame.vertices[stride + 2];\n          positions2.push(x, y, z);\n        }\n        const positionAttribute = new Float32BufferAttribute(positions2, 3);\n        positionAttribute.name = attributeName;\n        morphPositions.push(positionAttribute);\n      }\n      if (frame.normals.length > 0) {\n        const normals2 = [];\n        for (let j = 0, jl = vertexIndices.length; j < jl; j++) {\n          const vertexIndex = vertexIndices[j];\n          const stride = vertexIndex * 3;\n          const nx = frame.normals[stride];\n          const ny = frame.normals[stride + 1];\n          const nz = frame.normals[stride + 2];\n          normals2.push(nx, ny, nz);\n        }\n        const normalAttribute = new Float32BufferAttribute(normals2, 3);\n        normalAttribute.name = attributeName;\n        morphNormals.push(normalAttribute);\n      }\n    }\n    geometry.morphAttributes.position = morphPositions;\n    geometry.morphAttributes.normal = morphNormals;\n    geometry.morphTargetsRelative = false;\n    geometry.animations = AnimationClip.CreateClipsFromMorphTargetSequences(frames, 10);\n    return geometry;\n  }\n}\nexport { MD2Loader };","map":{"version":3,"sources":["../../src/loaders/MD2Loader.js"],"names":["positions","normals"],"mappings":"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","sourcesContent":["import { AnimationClip, BufferGeometry, FileLoader, Float32BufferAttribute, Loader, Vector3 } from 'three'\n\nconst _normalData = [\n  [-0.525731, 0.0, 0.850651],\n  [-0.442863, 0.238856, 0.864188],\n  [-0.295242, 0.0, 0.955423],\n  [-0.309017, 0.5, 0.809017],\n  [-0.16246, 0.262866, 0.951056],\n  [0.0, 0.0, 1.0],\n  [0.0, 0.850651, 0.525731],\n  [-0.147621, 0.716567, 0.681718],\n  [0.147621, 0.716567, 0.681718],\n  [0.0, 0.525731, 0.850651],\n  [0.309017, 0.5, 0.809017],\n  [0.525731, 0.0, 0.850651],\n  [0.295242, 0.0, 0.955423],\n  [0.442863, 0.238856, 0.864188],\n  [0.16246, 0.262866, 0.951056],\n  [-0.681718, 0.147621, 0.716567],\n  [-0.809017, 0.309017, 0.5],\n  [-0.587785, 0.425325, 0.688191],\n  [-0.850651, 0.525731, 0.0],\n  [-0.864188, 0.442863, 0.238856],\n  [-0.716567, 0.681718, 0.147621],\n  [-0.688191, 0.587785, 0.425325],\n  [-0.5, 0.809017, 0.309017],\n  [-0.238856, 0.864188, 0.442863],\n  [-0.425325, 0.688191, 0.587785],\n  [-0.716567, 0.681718, -0.147621],\n  [-0.5, 0.809017, -0.309017],\n  [-0.525731, 0.850651, 0.0],\n  [0.0, 0.850651, -0.525731],\n  [-0.238856, 0.864188, -0.442863],\n  [0.0, 0.955423, -0.295242],\n  [-0.262866, 0.951056, -0.16246],\n  [0.0, 1.0, 0.0],\n  [0.0, 0.955423, 0.295242],\n  [-0.262866, 0.951056, 0.16246],\n  [0.238856, 0.864188, 0.442863],\n  [0.262866, 0.951056, 0.16246],\n  [0.5, 0.809017, 0.309017],\n  [0.238856, 0.864188, -0.442863],\n  [0.262866, 0.951056, -0.16246],\n  [0.5, 0.809017, -0.309017],\n  [0.850651, 0.525731, 0.0],\n  [0.716567, 0.681718, 0.147621],\n  [0.716567, 0.681718, -0.147621],\n  [0.525731, 0.850651, 0.0],\n  [0.425325, 0.688191, 0.587785],\n  [0.864188, 0.442863, 0.238856],\n  [0.688191, 0.587785, 0.425325],\n  [0.809017, 0.309017, 0.5],\n  [0.681718, 0.147621, 0.716567],\n  [0.587785, 0.425325, 0.688191],\n  [0.955423, 0.295242, 0.0],\n  [1.0, 0.0, 0.0],\n  [0.951056, 0.16246, 0.262866],\n  [0.850651, -0.525731, 0.0],\n  [0.955423, -0.295242, 0.0],\n  [0.864188, -0.442863, 0.238856],\n  [0.951056, -0.16246, 0.262866],\n  [0.809017, -0.309017, 0.5],\n  [0.681718, -0.147621, 0.716567],\n  [0.850651, 0.0, 0.525731],\n  [0.864188, 0.442863, -0.238856],\n  [0.809017, 0.309017, -0.5],\n  [0.951056, 0.16246, -0.262866],\n  [0.525731, 0.0, -0.850651],\n  [0.681718, 0.147621, -0.716567],\n  [0.681718, -0.147621, -0.716567],\n  [0.850651, 0.0, -0.525731],\n  [0.809017, -0.309017, -0.5],\n  [0.864188, -0.442863, -0.238856],\n  [0.951056, -0.16246, -0.262866],\n  [0.147621, 0.716567, -0.681718],\n  [0.309017, 0.5, -0.809017],\n  [0.425325, 0.688191, -0.587785],\n  [0.442863, 0.238856, -0.864188],\n  [0.587785, 0.425325, -0.688191],\n  [0.688191, 0.587785, -0.425325],\n  [-0.147621, 0.716567, -0.681718],\n  [-0.309017, 0.5, -0.809017],\n  [0.0, 0.525731, -0.850651],\n  [-0.525731, 0.0, -0.850651],\n  [-0.442863, 0.238856, -0.864188],\n  [-0.295242, 0.0, -0.955423],\n  [-0.16246, 0.262866, -0.951056],\n  [0.0, 0.0, -1.0],\n  [0.295242, 0.0, -0.955423],\n  [0.16246, 0.262866, -0.951056],\n  [-0.442863, -0.238856, -0.864188],\n  [-0.309017, -0.5, -0.809017],\n  [-0.16246, -0.262866, -0.951056],\n  [0.0, -0.850651, -0.525731],\n  [-0.147621, -0.716567, -0.681718],\n  [0.147621, -0.716567, -0.681718],\n  [0.0, -0.525731, -0.850651],\n  [0.309017, -0.5, -0.809017],\n  [0.442863, -0.238856, -0.864188],\n  [0.16246, -0.262866, -0.951056],\n  [0.238856, -0.864188, -0.442863],\n  [0.5, -0.809017, -0.309017],\n  [0.425325, -0.688191, -0.587785],\n  [0.716567, -0.681718, -0.147621],\n  [0.688191, -0.587785, -0.425325],\n  [0.587785, -0.425325, -0.688191],\n  [0.0, -0.955423, -0.295242],\n  [0.0, -1.0, 0.0],\n  [0.262866, -0.951056, -0.16246],\n  [0.0, -0.850651, 0.525731],\n  [0.0, -0.955423, 0.295242],\n  [0.238856, -0.864188, 0.442863],\n  [0.262866, -0.951056, 0.16246],\n  [0.5, -0.809017, 0.309017],\n  [0.716567, -0.681718, 0.147621],\n  [0.525731, -0.850651, 0.0],\n  [-0.238856, -0.864188, -0.442863],\n  [-0.5, -0.809017, -0.309017],\n  [-0.262866, -0.951056, -0.16246],\n  [-0.850651, -0.525731, 0.0],\n  [-0.716567, -0.681718, -0.147621],\n  [-0.716567, -0.681718, 0.147621],\n  [-0.525731, -0.850651, 0.0],\n  [-0.5, -0.809017, 0.309017],\n  [-0.238856, -0.864188, 0.442863],\n  [-0.262866, -0.951056, 0.16246],\n  [-0.864188, -0.442863, 0.238856],\n  [-0.809017, -0.309017, 0.5],\n  [-0.688191, -0.587785, 0.425325],\n  [-0.681718, -0.147621, 0.716567],\n  [-0.442863, -0.238856, 0.864188],\n  [-0.587785, -0.425325, 0.688191],\n  [-0.309017, -0.5, 0.809017],\n  [-0.147621, -0.716567, 0.681718],\n  [-0.425325, -0.688191, 0.587785],\n  [-0.16246, -0.262866, 0.951056],\n  [0.442863, -0.238856, 0.864188],\n  [0.16246, -0.262866, 0.951056],\n  [0.309017, -0.5, 0.809017],\n  [0.147621, -0.716567, 0.681718],\n  [0.0, -0.525731, 0.850651],\n  [0.425325, -0.688191, 0.587785],\n  [0.587785, -0.425325, 0.688191],\n  [0.688191, -0.587785, 0.425325],\n  [-0.955423, 0.295242, 0.0],\n  [-0.951056, 0.16246, 0.262866],\n  [-1.0, 0.0, 0.0],\n  [-0.850651, 0.0, 0.525731],\n  [-0.955423, -0.295242, 0.0],\n  [-0.951056, -0.16246, 0.262866],\n  [-0.864188, 0.442863, -0.238856],\n  [-0.951056, 0.16246, -0.262866],\n  [-0.809017, 0.309017, -0.5],\n  [-0.864188, -0.442863, -0.238856],\n  [-0.951056, -0.16246, -0.262866],\n  [-0.809017, -0.309017, -0.5],\n  [-0.681718, 0.147621, -0.716567],\n  [-0.681718, -0.147621, -0.716567],\n  [-0.850651, 0.0, -0.525731],\n  [-0.688191, 0.587785, -0.425325],\n  [-0.587785, 0.425325, -0.688191],\n  [-0.425325, 0.688191, -0.587785],\n  [-0.425325, -0.688191, -0.587785],\n  [-0.587785, -0.425325, -0.688191],\n  [-0.688191, -0.587785, -0.425325],\n]\n\nclass MD2Loader extends Loader {\n  constructor(manager) {\n    super(manager)\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this\n\n    const loader = new FileLoader(scope.manager)\n    loader.setPath(scope.path)\n    loader.setResponseType('arraybuffer')\n    loader.setRequestHeader(scope.requestHeader)\n    loader.setWithCredentials(scope.withCredentials)\n    loader.load(\n      url,\n      function (buffer) {\n        try {\n          onLoad(scope.parse(buffer))\n        } catch (e) {\n          if (onError) {\n            onError(e)\n          } else {\n            console.error(e)\n          }\n\n          scope.manager.itemError(url)\n        }\n      },\n      onProgress,\n      onError,\n    )\n  }\n\n  parse(buffer) {\n    const data = new DataView(buffer)\n\n    // http://tfc.duke.free.fr/coding/md2-specs-en.html\n\n    const header = {}\n    const headerNames = [\n      'ident',\n      'version',\n      'skinwidth',\n      'skinheight',\n      'framesize',\n      'num_skins',\n      'num_vertices',\n      'num_st',\n      'num_tris',\n      'num_glcmds',\n      'num_frames',\n      'offset_skins',\n      'offset_st',\n      'offset_tris',\n      'offset_frames',\n      'offset_glcmds',\n      'offset_end',\n    ]\n\n    for (let i = 0; i < headerNames.length; i++) {\n      header[headerNames[i]] = data.getInt32(i * 4, true)\n    }\n\n    if (header.ident !== 844121161 || header.version !== 8) {\n      console.error('Not a valid MD2 file')\n      return\n    }\n\n    if (header.offset_end !== data.byteLength) {\n      console.error('Corrupted MD2 file')\n      return\n    }\n\n    //\n\n    const geometry = new BufferGeometry()\n\n    // uvs\n\n    const uvsTemp = []\n    let offset = header.offset_st\n\n    for (let i = 0, l = header.num_st; i < l; i++) {\n      const u = data.getInt16(offset + 0, true)\n      const v = data.getInt16(offset + 2, true)\n\n      uvsTemp.push(u / header.skinwidth, 1 - v / header.skinheight)\n\n      offset += 4\n    }\n\n    // triangles\n\n    offset = header.offset_tris\n\n    const vertexIndices = []\n    const uvIndices = []\n\n    for (let i = 0, l = header.num_tris; i < l; i++) {\n      vertexIndices.push(\n        data.getUint16(offset + 0, true),\n        data.getUint16(offset + 2, true),\n        data.getUint16(offset + 4, true),\n      )\n\n      uvIndices.push(\n        data.getUint16(offset + 6, true),\n        data.getUint16(offset + 8, true),\n        data.getUint16(offset + 10, true),\n      )\n\n      offset += 12\n    }\n\n    // frames\n\n    const translation = new Vector3()\n    const scale = new Vector3()\n    const string = []\n\n    const frames = []\n\n    offset = header.offset_frames\n\n    for (let i = 0, l = header.num_frames; i < l; i++) {\n      scale.set(data.getFloat32(offset + 0, true), data.getFloat32(offset + 4, true), data.getFloat32(offset + 8, true))\n\n      translation.set(\n        data.getFloat32(offset + 12, true),\n        data.getFloat32(offset + 16, true),\n        data.getFloat32(offset + 20, true),\n      )\n\n      offset += 24\n\n      for (let j = 0; j < 16; j++) {\n        const character = data.getUint8(offset + j, true)\n        if (character === 0) break\n\n        string[j] = character\n      }\n\n      const frame = {\n        name: String.fromCharCode.apply(null, string),\n        vertices: [],\n        normals: [],\n      }\n\n      offset += 16\n\n      for (let j = 0; j < header.num_vertices; j++) {\n        let x = data.getUint8(offset++, true)\n        let y = data.getUint8(offset++, true)\n        let z = data.getUint8(offset++, true)\n        const n = _normalData[data.getUint8(offset++, true)]\n\n        x = x * scale.x + translation.x\n        y = y * scale.y + translation.y\n        z = z * scale.z + translation.z\n\n        frame.vertices.push(x, z, y) // convert to Y-up\n        frame.normals.push(n[0], n[2], n[1]) // convert to Y-up\n      }\n\n      frames.push(frame)\n    }\n\n    // static\n\n    const positions = []\n    const normals = []\n    const uvs = []\n\n    const verticesTemp = frames[0].vertices\n    const normalsTemp = frames[0].normals\n\n    for (let i = 0, l = vertexIndices.length; i < l; i++) {\n      const vertexIndex = vertexIndices[i]\n      let stride = vertexIndex * 3\n\n      //\n\n      const x = verticesTemp[stride]\n      const y = verticesTemp[stride + 1]\n      const z = verticesTemp[stride + 2]\n\n      positions.push(x, y, z)\n\n      //\n\n      const nx = normalsTemp[stride]\n      const ny = normalsTemp[stride + 1]\n      const nz = normalsTemp[stride + 2]\n\n      normals.push(nx, ny, nz)\n\n      //\n\n      const uvIndex = uvIndices[i]\n      stride = uvIndex * 2\n\n      const u = uvsTemp[stride]\n      const v = uvsTemp[stride + 1]\n\n      uvs.push(u, v)\n    }\n\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3))\n    geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3))\n    geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2))\n\n    // animation\n\n    const morphPositions = []\n    const morphNormals = []\n\n    for (let i = 0, l = frames.length; i < l; i++) {\n      const frame = frames[i]\n      const attributeName = frame.name\n\n      if (frame.vertices.length > 0) {\n        const positions = []\n\n        for (let j = 0, jl = vertexIndices.length; j < jl; j++) {\n          const vertexIndex = vertexIndices[j]\n          const stride = vertexIndex * 3\n\n          const x = frame.vertices[stride]\n          const y = frame.vertices[stride + 1]\n          const z = frame.vertices[stride + 2]\n\n          positions.push(x, y, z)\n        }\n\n        const positionAttribute = new Float32BufferAttribute(positions, 3)\n        positionAttribute.name = attributeName\n\n        morphPositions.push(positionAttribute)\n      }\n\n      if (frame.normals.length > 0) {\n        const normals = []\n\n        for (let j = 0, jl = vertexIndices.length; j < jl; j++) {\n          const vertexIndex = vertexIndices[j]\n          const stride = vertexIndex * 3\n\n          const nx = frame.normals[stride]\n          const ny = frame.normals[stride + 1]\n          const nz = frame.normals[stride + 2]\n\n          normals.push(nx, ny, nz)\n        }\n\n        const normalAttribute = new Float32BufferAttribute(normals, 3)\n        normalAttribute.name = attributeName\n\n        morphNormals.push(normalAttribute)\n      }\n    }\n\n    geometry.morphAttributes.position = morphPositions\n    geometry.morphAttributes.normal = morphNormals\n    geometry.morphTargetsRelative = false\n\n    geometry.animations = AnimationClip.CreateClipsFromMorphTargetSequences(frames, 10)\n\n    return geometry\n  }\n}\n\nexport { MD2Loader }\n"]},"metadata":{},"sourceType":"module"}