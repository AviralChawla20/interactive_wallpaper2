{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from \"three\";\nimport { unzlibSync } from \"fflate\";\nimport { NURBSCurve } from \"../curves/NURBSCurve.js\";\nimport { decodeText } from \"../_polyfill/LoaderUtils.js\";\nimport { UV1 } from \"../_polyfill/uv1.js\";\nlet fbxTree;\nlet connections;\nlet sceneGraph;\nclass FBXLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === \"\" ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(FBXBuffer, path) {\n    if (isFbxFormatBinary(FBXBuffer)) {\n      fbxTree = new BinaryParser().parse(FBXBuffer);\n    } else {\n      const FBXText = convertArrayBufferToString(FBXBuffer);\n      if (!isFbxFormatASCII(FBXText)) {\n        throw new Error(\"THREE.FBXLoader: Unknown format.\");\n      }\n      if (getFbxVersion(FBXText) < 7e3) {\n        throw new Error(\"THREE.FBXLoader: FBX version not supported, FileVersion: \" + getFbxVersion(FBXText));\n      }\n      fbxTree = new TextParser().parse(FBXText);\n    }\n    const textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n  }\n}\nclass FBXTreeParser {\n  constructor(textureLoader, manager) {\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n  parse() {\n    connections = this.parseConnections();\n    const images = this.parseImages();\n    const textures = this.parseTextures(images);\n    const materials = this.parseMaterials(textures);\n    const deformers = this.parseDeformers();\n    const geometryMap = new GeometryParser().parse(deformers);\n    this.parseScene(deformers, geometryMap, materials);\n    return sceneGraph;\n  }\n  // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n  // and details the connection type\n  parseConnections() {\n    const connectionMap = /* @__PURE__ */new Map();\n    if (\"Connections\" in fbxTree) {\n      const rawConnections = fbxTree.Connections.connections;\n      rawConnections.forEach(function (rawConnection) {\n        const fromID = rawConnection[0];\n        const toID = rawConnection[1];\n        const relationship = rawConnection[2];\n        if (!connectionMap.has(fromID)) {\n          connectionMap.set(fromID, {\n            parents: [],\n            children: []\n          });\n        }\n        const parentRelationship = {\n          ID: toID,\n          relationship\n        };\n        connectionMap.get(fromID).parents.push(parentRelationship);\n        if (!connectionMap.has(toID)) {\n          connectionMap.set(toID, {\n            parents: [],\n            children: []\n          });\n        }\n        const childRelationship = {\n          ID: fromID,\n          relationship\n        };\n        connectionMap.get(toID).children.push(childRelationship);\n      });\n    }\n    return connectionMap;\n  }\n  // Parse FBXTree.Objects.Video for embedded image data\n  // These images are connected to textures in FBXTree.Objects.Textures\n  // via FBXTree.Connections.\n  parseImages() {\n    const images = {};\n    const blobs = {};\n    if (\"Video\" in fbxTree.Objects) {\n      const videoNodes = fbxTree.Objects.Video;\n      for (const nodeID in videoNodes) {\n        const videoNode = videoNodes[nodeID];\n        const id = parseInt(nodeID);\n        images[id] = videoNode.RelativeFilename || videoNode.Filename;\n        if (\"Content\" in videoNode) {\n          const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n          const base64Content = typeof videoNode.Content === \"string\" && videoNode.Content !== \"\";\n          if (arrayBufferContent || base64Content) {\n            const image = this.parseImage(videoNodes[nodeID]);\n            blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n          }\n        }\n      }\n    }\n    for (const id in images) {\n      const filename = images[id];\n      if (blobs[filename] !== void 0) images[id] = blobs[filename];else images[id] = images[id].split(\"\\\\\").pop();\n    }\n    return images;\n  }\n  // Parse embedded image data in FBXTree.Video.Content\n  parseImage(videoNode) {\n    const content = videoNode.Content;\n    const fileName = videoNode.RelativeFilename || videoNode.Filename;\n    const extension = fileName.slice(fileName.lastIndexOf(\".\") + 1).toLowerCase();\n    let type;\n    switch (extension) {\n      case \"bmp\":\n        type = \"image/bmp\";\n        break;\n      case \"jpg\":\n      case \"jpeg\":\n        type = \"image/jpeg\";\n        break;\n      case \"png\":\n        type = \"image/png\";\n        break;\n      case \"tif\":\n        type = \"image/tiff\";\n        break;\n      case \"tga\":\n        if (this.manager.getHandler(\".tga\") === null) {\n          console.warn(\"FBXLoader: TGA loader not found, skipping \", fileName);\n        }\n        type = \"image/tga\";\n        break;\n      default:\n        console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n        return;\n    }\n    if (typeof content === \"string\") {\n      return \"data:\" + type + \";base64,\" + content;\n    } else {\n      const array = new Uint8Array(content);\n      return window.URL.createObjectURL(new Blob([array], {\n        type\n      }));\n    }\n  }\n  // Parse nodes in FBXTree.Objects.Texture\n  // These contain details such as UV scaling, cropping, rotation etc and are connected\n  // to images in FBXTree.Objects.Video\n  parseTextures(images) {\n    const textureMap = /* @__PURE__ */new Map();\n    if (\"Texture\" in fbxTree.Objects) {\n      const textureNodes = fbxTree.Objects.Texture;\n      for (const nodeID in textureNodes) {\n        const texture = this.parseTexture(textureNodes[nodeID], images);\n        textureMap.set(parseInt(nodeID), texture);\n      }\n    }\n    return textureMap;\n  }\n  // Parse individual node in FBXTree.Objects.Texture\n  parseTexture(textureNode, images) {\n    const texture = this.loadTexture(textureNode, images);\n    texture.ID = textureNode.id;\n    texture.name = textureNode.attrName;\n    const wrapModeU = textureNode.WrapModeU;\n    const wrapModeV = textureNode.WrapModeV;\n    const valueU = wrapModeU !== void 0 ? wrapModeU.value : 0;\n    const valueV = wrapModeV !== void 0 ? wrapModeV.value : 0;\n    texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    if (\"Scaling\" in textureNode) {\n      const values = textureNode.Scaling.value;\n      texture.repeat.x = values[0];\n      texture.repeat.y = values[1];\n    }\n    return texture;\n  }\n  // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n  loadTexture(textureNode, images) {\n    let fileName;\n    const currentPath = this.textureLoader.path;\n    const children = connections.get(textureNode.id).children;\n    if (children !== void 0 && children.length > 0 && images[children[0].ID] !== void 0) {\n      fileName = images[children[0].ID];\n      if (fileName.indexOf(\"blob:\") === 0 || fileName.indexOf(\"data:\") === 0) {\n        this.textureLoader.setPath(void 0);\n      }\n    }\n    let texture;\n    const extension = textureNode.FileName.slice(-3).toLowerCase();\n    if (extension === \"tga\") {\n      const loader = this.manager.getHandler(\".tga\");\n      if (loader === null) {\n        console.warn(\"FBXLoader: TGA loader not found, creating placeholder texture for\", textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        loader.setPath(this.textureLoader.path);\n        texture = loader.load(fileName);\n      }\n    } else if (extension === \"psd\") {\n      console.warn(\"FBXLoader: PSD textures are not supported, creating placeholder texture for\", textureNode.RelativeFilename);\n      texture = new Texture();\n    } else {\n      texture = this.textureLoader.load(fileName);\n    }\n    this.textureLoader.setPath(currentPath);\n    return texture;\n  }\n  // Parse nodes in FBXTree.Objects.Material\n  parseMaterials(textureMap) {\n    const materialMap = /* @__PURE__ */new Map();\n    if (\"Material\" in fbxTree.Objects) {\n      const materialNodes = fbxTree.Objects.Material;\n      for (const nodeID in materialNodes) {\n        const material = this.parseMaterial(materialNodes[nodeID], textureMap);\n        if (material !== null) materialMap.set(parseInt(nodeID), material);\n      }\n    }\n    return materialMap;\n  }\n  // Parse single node in FBXTree.Objects.Material\n  // Materials are connected to texture maps in FBXTree.Objects.Textures\n  // FBX format currently only supports Lambert and Phong shading models\n  parseMaterial(materialNode, textureMap) {\n    const ID = materialNode.id;\n    const name = materialNode.attrName;\n    let type = materialNode.ShadingModel;\n    if (typeof type === \"object\") {\n      type = type.value;\n    }\n    if (!connections.has(ID)) return null;\n    const parameters = this.parseParameters(materialNode, textureMap, ID);\n    let material;\n    switch (type.toLowerCase()) {\n      case \"phong\":\n        material = new MeshPhongMaterial();\n        break;\n      case \"lambert\":\n        material = new MeshLambertMaterial();\n        break;\n      default:\n        console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n        material = new MeshPhongMaterial();\n        break;\n    }\n    material.setValues(parameters);\n    material.name = name;\n    return material;\n  }\n  // Parse FBX material and return parameters suitable for a three.js material\n  // Also parse the texture map and return any textures associated with the material\n  parseParameters(materialNode, textureMap, ID) {\n    const parameters = {};\n    if (materialNode.BumpFactor) {\n      parameters.bumpScale = materialNode.BumpFactor.value;\n    }\n    if (materialNode.Diffuse) {\n      parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n    } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === \"Color\" || materialNode.DiffuseColor.type === \"ColorRGB\")) {\n      parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n    }\n    if (materialNode.DisplacementFactor) {\n      parameters.displacementScale = materialNode.DisplacementFactor.value;\n    }\n    if (materialNode.Emissive) {\n      parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n    } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === \"Color\" || materialNode.EmissiveColor.type === \"ColorRGB\")) {\n      parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n    }\n    if (materialNode.EmissiveFactor) {\n      parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n    }\n    if (materialNode.Opacity) {\n      parameters.opacity = parseFloat(materialNode.Opacity.value);\n    }\n    if (parameters.opacity < 1) {\n      parameters.transparent = true;\n    }\n    if (materialNode.ReflectionFactor) {\n      parameters.reflectivity = materialNode.ReflectionFactor.value;\n    }\n    if (materialNode.Shininess) {\n      parameters.shininess = materialNode.Shininess.value;\n    }\n    if (materialNode.Specular) {\n      parameters.specular = new Color().fromArray(materialNode.Specular.value);\n    } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === \"Color\") {\n      parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n    }\n    const scope = this;\n    connections.get(ID).children.forEach(function (child) {\n      const type = child.relationship;\n      switch (type) {\n        case \"Bump\":\n          parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case \"Maya|TEX_ao_map\":\n          parameters.aoMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case \"DiffuseColor\":\n        case \"Maya|TEX_color_map\":\n          parameters.map = scope.getTexture(textureMap, child.ID);\n          if (parameters.map !== void 0) {\n            if (\"colorSpace\" in parameters.map) parameters.map.colorSpace = \"srgb\";else parameters.map.encoding = 3001;\n          }\n          break;\n        case \"DisplacementColor\":\n          parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case \"EmissiveColor\":\n          parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.emissiveMap !== void 0) {\n            if (\"colorSpace\" in parameters.emissiveMap) parameters.emissiveMap.colorSpace = \"srgb\";else parameters.emissiveMap.encoding = 3001;\n          }\n          break;\n        case \"NormalMap\":\n        case \"Maya|TEX_normal_map\":\n          parameters.normalMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case \"ReflectionColor\":\n          parameters.envMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.envMap !== void 0) {\n            parameters.envMap.mapping = EquirectangularReflectionMapping;\n            if (\"colorSpace\" in parameters.envMap) parameters.envMap.colorSpace = \"srgb\";else parameters.envMap.encoding = 3001;\n          }\n          break;\n        case \"SpecularColor\":\n          parameters.specularMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.specularMap !== void 0) {\n            if (\"colorSpace\" in parameters.specularMap) parameters.specularMap.colorSpace = \"srgb\";else parameters.specularMap.encoding = 3001;\n          }\n          break;\n        case \"TransparentColor\":\n        case \"TransparencyFactor\":\n          parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n          parameters.transparent = true;\n          break;\n        case \"AmbientColor\":\n        case \"ShininessExponent\":\n        case \"SpecularFactor\":\n        case \"VectorDisplacementColor\":\n        default:\n          console.warn(\"THREE.FBXLoader: %s map is not supported in three.js, skipping texture.\", type);\n          break;\n      }\n    });\n    return parameters;\n  }\n  // get a texture from the textureMap for use by a material.\n  getTexture(textureMap, id) {\n    if (\"LayeredTexture\" in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n      console.warn(\"THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.\");\n      id = connections.get(id).children[0].ID;\n    }\n    return textureMap.get(id);\n  }\n  // Parse nodes in FBXTree.Objects.Deformer\n  // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n  // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n  parseDeformers() {\n    const skeletons = {};\n    const morphTargets = {};\n    if (\"Deformer\" in fbxTree.Objects) {\n      const DeformerNodes = fbxTree.Objects.Deformer;\n      for (const nodeID in DeformerNodes) {\n        const deformerNode = DeformerNodes[nodeID];\n        const relationships = connections.get(parseInt(nodeID));\n        if (deformerNode.attrType === \"Skin\") {\n          const skeleton = this.parseSkeleton(relationships, DeformerNodes);\n          skeleton.ID = nodeID;\n          if (relationships.parents.length > 1) {\n            console.warn(\"THREE.FBXLoader: skeleton attached to more than one geometry is not supported.\");\n          }\n          skeleton.geometryID = relationships.parents[0].ID;\n          skeletons[nodeID] = skeleton;\n        } else if (deformerNode.attrType === \"BlendShape\") {\n          const morphTarget = {\n            id: nodeID\n          };\n          morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n          morphTarget.id = nodeID;\n          if (relationships.parents.length > 1) {\n            console.warn(\"THREE.FBXLoader: morph target attached to more than one geometry is not supported.\");\n          }\n          morphTargets[nodeID] = morphTarget;\n        }\n      }\n    }\n    return {\n      skeletons,\n      morphTargets\n    };\n  }\n  // Parse single nodes in FBXTree.Objects.Deformer\n  // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n  // Each skin node represents a skeleton and each cluster node represents a bone\n  parseSkeleton(relationships, deformerNodes) {\n    const rawBones = [];\n    relationships.children.forEach(function (child) {\n      const boneNode = deformerNodes[child.ID];\n      if (boneNode.attrType !== \"Cluster\") return;\n      const rawBone = {\n        ID: child.ID,\n        indices: [],\n        weights: [],\n        transformLink: new Matrix4().fromArray(boneNode.TransformLink.a)\n        // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n        // linkMode: boneNode.Mode,\n      };\n      if (\"Indexes\" in boneNode) {\n        rawBone.indices = boneNode.Indexes.a;\n        rawBone.weights = boneNode.Weights.a;\n      }\n      rawBones.push(rawBone);\n    });\n    return {\n      rawBones,\n      bones: []\n    };\n  }\n  // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n  parseMorphTargets(relationships, deformerNodes) {\n    const rawMorphTargets = [];\n    for (let i = 0; i < relationships.children.length; i++) {\n      const child = relationships.children[i];\n      const morphTargetNode = deformerNodes[child.ID];\n      const rawMorphTarget = {\n        name: morphTargetNode.attrName,\n        initialWeight: morphTargetNode.DeformPercent,\n        id: morphTargetNode.id,\n        fullWeights: morphTargetNode.FullWeights.a\n      };\n      if (morphTargetNode.attrType !== \"BlendShapeChannel\") return;\n      rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child2) {\n        return child2.relationship === void 0;\n      })[0].ID;\n      rawMorphTargets.push(rawMorphTarget);\n    }\n    return rawMorphTargets;\n  }\n  // create the main Group() to be returned by the loader\n  parseScene(deformers, geometryMap, materialMap) {\n    sceneGraph = new Group();\n    const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n    const modelNodes = fbxTree.Objects.Model;\n    const scope = this;\n    modelMap.forEach(function (model) {\n      const modelNode = modelNodes[model.ID];\n      scope.setLookAtProperties(model, modelNode);\n      const parentConnections = connections.get(model.ID).parents;\n      parentConnections.forEach(function (connection) {\n        const parent = modelMap.get(connection.ID);\n        if (parent !== void 0) parent.add(model);\n      });\n      if (model.parent === null) {\n        sceneGraph.add(model);\n      }\n    });\n    this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n    this.createAmbientLight();\n    sceneGraph.traverse(function (node) {\n      if (node.userData.transformData) {\n        if (node.parent) {\n          node.userData.transformData.parentMatrix = node.parent.matrix;\n          node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n        }\n        const transform = generateTransform(node.userData.transformData);\n        node.applyMatrix4(transform);\n        node.updateWorldMatrix();\n      }\n    });\n    const animations = new AnimationParser().parse();\n    if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n      sceneGraph.children[0].animations = animations;\n      sceneGraph = sceneGraph.children[0];\n    }\n    sceneGraph.animations = animations;\n  }\n  // parse nodes in FBXTree.Objects.Model\n  parseModels(skeletons, geometryMap, materialMap) {\n    const modelMap = /* @__PURE__ */new Map();\n    const modelNodes = fbxTree.Objects.Model;\n    for (const nodeID in modelNodes) {\n      const id = parseInt(nodeID);\n      const node = modelNodes[nodeID];\n      const relationships = connections.get(id);\n      let model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n      if (!model) {\n        switch (node.attrType) {\n          case \"Camera\":\n            model = this.createCamera(relationships);\n            break;\n          case \"Light\":\n            model = this.createLight(relationships);\n            break;\n          case \"Mesh\":\n            model = this.createMesh(relationships, geometryMap, materialMap);\n            break;\n          case \"NurbsCurve\":\n            model = this.createCurve(relationships, geometryMap);\n            break;\n          case \"LimbNode\":\n          case \"Root\":\n            model = new Bone();\n            break;\n          case \"Null\":\n          default:\n            model = new Group();\n            break;\n        }\n        model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : \"\";\n        model.ID = id;\n      }\n      this.getTransformData(model, node);\n      modelMap.set(id, model);\n    }\n    return modelMap;\n  }\n  buildSkeleton(relationships, skeletons, id, name) {\n    let bone = null;\n    relationships.parents.forEach(function (parent) {\n      for (const ID in skeletons) {\n        const skeleton = skeletons[ID];\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          if (rawBone.ID === parent.ID) {\n            const subBone = bone;\n            bone = new Bone();\n            bone.matrixWorld.copy(rawBone.transformLink);\n            bone.name = name ? PropertyBinding.sanitizeNodeName(name) : \"\";\n            bone.ID = id;\n            skeleton.bones[i] = bone;\n            if (subBone !== null) {\n              bone.add(subBone);\n            }\n          }\n        });\n      }\n    });\n    return bone;\n  }\n  // create a PerspectiveCamera or OrthographicCamera\n  createCamera(relationships) {\n    let model;\n    let cameraAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n      if (attr !== void 0) {\n        cameraAttribute = attr;\n      }\n    });\n    if (cameraAttribute === void 0) {\n      model = new Object3D();\n    } else {\n      let type = 0;\n      if (cameraAttribute.CameraProjectionType !== void 0 && cameraAttribute.CameraProjectionType.value === 1) {\n        type = 1;\n      }\n      let nearClippingPlane = 1;\n      if (cameraAttribute.NearPlane !== void 0) {\n        nearClippingPlane = cameraAttribute.NearPlane.value / 1e3;\n      }\n      let farClippingPlane = 1e3;\n      if (cameraAttribute.FarPlane !== void 0) {\n        farClippingPlane = cameraAttribute.FarPlane.value / 1e3;\n      }\n      let width = window.innerWidth;\n      let height = window.innerHeight;\n      if (cameraAttribute.AspectWidth !== void 0 && cameraAttribute.AspectHeight !== void 0) {\n        width = cameraAttribute.AspectWidth.value;\n        height = cameraAttribute.AspectHeight.value;\n      }\n      const aspect = width / height;\n      let fov = 45;\n      if (cameraAttribute.FieldOfView !== void 0) {\n        fov = cameraAttribute.FieldOfView.value;\n      }\n      const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n      switch (type) {\n        case 0:\n          model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n          if (focalLength !== null) model.setFocalLength(focalLength);\n          break;\n        case 1:\n          model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n          break;\n        default:\n          console.warn(\"THREE.FBXLoader: Unknown camera type \" + type + \".\");\n          model = new Object3D();\n          break;\n      }\n    }\n    return model;\n  }\n  // Create a DirectionalLight, PointLight or SpotLight\n  createLight(relationships) {\n    let model;\n    let lightAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n      if (attr !== void 0) {\n        lightAttribute = attr;\n      }\n    });\n    if (lightAttribute === void 0) {\n      model = new Object3D();\n    } else {\n      let type;\n      if (lightAttribute.LightType === void 0) {\n        type = 0;\n      } else {\n        type = lightAttribute.LightType.value;\n      }\n      let color = 16777215;\n      if (lightAttribute.Color !== void 0) {\n        color = new Color().fromArray(lightAttribute.Color.value);\n      }\n      let intensity = lightAttribute.Intensity === void 0 ? 1 : lightAttribute.Intensity.value / 100;\n      if (lightAttribute.CastLightOnObject !== void 0 && lightAttribute.CastLightOnObject.value === 0) {\n        intensity = 0;\n      }\n      let distance = 0;\n      if (lightAttribute.FarAttenuationEnd !== void 0) {\n        if (lightAttribute.EnableFarAttenuation !== void 0 && lightAttribute.EnableFarAttenuation.value === 0) {\n          distance = 0;\n        } else {\n          distance = lightAttribute.FarAttenuationEnd.value;\n        }\n      }\n      const decay = 1;\n      switch (type) {\n        case 0:\n          model = new PointLight(color, intensity, distance, decay);\n          break;\n        case 1:\n          model = new DirectionalLight(color, intensity);\n          break;\n        case 2:\n          let angle = Math.PI / 3;\n          if (lightAttribute.InnerAngle !== void 0) {\n            angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n          }\n          let penumbra = 0;\n          if (lightAttribute.OuterAngle !== void 0) {\n            penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n            penumbra = Math.max(penumbra, 1);\n          }\n          model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n          break;\n        default:\n          console.warn(\"THREE.FBXLoader: Unknown light type \" + lightAttribute.LightType.value + \", defaulting to a PointLight.\");\n          model = new PointLight(color, intensity);\n          break;\n      }\n      if (lightAttribute.CastShadows !== void 0 && lightAttribute.CastShadows.value === 1) {\n        model.castShadow = true;\n      }\n    }\n    return model;\n  }\n  createMesh(relationships, geometryMap, materialMap) {\n    let model;\n    let geometry = null;\n    let material = null;\n    const materials = [];\n    relationships.children.forEach(function (child) {\n      if (geometryMap.has(child.ID)) {\n        geometry = geometryMap.get(child.ID);\n      }\n      if (materialMap.has(child.ID)) {\n        materials.push(materialMap.get(child.ID));\n      }\n    });\n    if (materials.length > 1) {\n      material = materials;\n    } else if (materials.length > 0) {\n      material = materials[0];\n    } else {\n      material = new MeshPhongMaterial({\n        color: 13421772\n      });\n      materials.push(material);\n    }\n    if (\"color\" in geometry.attributes) {\n      materials.forEach(function (material2) {\n        material2.vertexColors = true;\n      });\n    }\n    if (geometry.FBX_Deformer) {\n      model = new SkinnedMesh(geometry, material);\n      model.normalizeSkinWeights();\n    } else {\n      model = new Mesh(geometry, material);\n    }\n    return model;\n  }\n  createCurve(relationships, geometryMap) {\n    const geometry = relationships.children.reduce(function (geo, child) {\n      if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n      return geo;\n    }, null);\n    const material = new LineBasicMaterial({\n      color: 3342591,\n      linewidth: 1\n    });\n    return new Line(geometry, material);\n  }\n  // parse the model node for transform data\n  getTransformData(model, modelNode) {\n    const transformData = {};\n    if (\"InheritType\" in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if (\"RotationOrder\" in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = \"ZYX\";\n    if (\"Lcl_Translation\" in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n    if (\"PreRotation\" in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n    if (\"Lcl_Rotation\" in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n    if (\"PostRotation\" in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n    if (\"Lcl_Scaling\" in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n    if (\"ScalingOffset\" in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n    if (\"ScalingPivot\" in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n    if (\"RotationOffset\" in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n    if (\"RotationPivot\" in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n    model.userData.transformData = transformData;\n  }\n  setLookAtProperties(model, modelNode) {\n    if (\"LookAtProperty\" in modelNode) {\n      const children = connections.get(model.ID).children;\n      children.forEach(function (child) {\n        if (child.relationship === \"LookAtProperty\") {\n          const lookAtTarget = fbxTree.Objects.Model[child.ID];\n          if (\"Lcl_Translation\" in lookAtTarget) {\n            const pos = lookAtTarget.Lcl_Translation.value;\n            if (model.target !== void 0) {\n              model.target.position.fromArray(pos);\n              sceneGraph.add(model.target);\n            } else {\n              model.lookAt(new Vector3().fromArray(pos));\n            }\n          }\n        }\n      });\n    }\n  }\n  bindSkeleton(skeletons, geometryMap, modelMap) {\n    const bindMatrices = this.parsePoseNodes();\n    for (const ID in skeletons) {\n      const skeleton = skeletons[ID];\n      const parents = connections.get(parseInt(skeleton.ID)).parents;\n      parents.forEach(function (parent) {\n        if (geometryMap.has(parent.ID)) {\n          const geoID = parent.ID;\n          const geoRelationships = connections.get(geoID);\n          geoRelationships.parents.forEach(function (geoConnParent) {\n            if (modelMap.has(geoConnParent.ID)) {\n              const model = modelMap.get(geoConnParent.ID);\n              model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n            }\n          });\n        }\n      });\n    }\n  }\n  parsePoseNodes() {\n    const bindMatrices = {};\n    if (\"Pose\" in fbxTree.Objects) {\n      const BindPoseNode = fbxTree.Objects.Pose;\n      for (const nodeID in BindPoseNode) {\n        if (BindPoseNode[nodeID].attrType === \"BindPose\" && BindPoseNode[nodeID].NbPoseNodes > 0) {\n          const poseNodes = BindPoseNode[nodeID].PoseNode;\n          if (Array.isArray(poseNodes)) {\n            poseNodes.forEach(function (poseNode) {\n              bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n            });\n          } else {\n            bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n          }\n        }\n      }\n    }\n    return bindMatrices;\n  }\n  // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n  createAmbientLight() {\n    if (\"GlobalSettings\" in fbxTree && \"AmbientColor\" in fbxTree.GlobalSettings) {\n      const ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n      const r = ambientColor[0];\n      const g = ambientColor[1];\n      const b = ambientColor[2];\n      if (r !== 0 || g !== 0 || b !== 0) {\n        const color = new Color(r, g, b);\n        sceneGraph.add(new AmbientLight(color, 1));\n      }\n    }\n  }\n}\nclass GeometryParser {\n  // Parse nodes in FBXTree.Objects.Geometry\n  parse(deformers) {\n    const geometryMap = /* @__PURE__ */new Map();\n    if (\"Geometry\" in fbxTree.Objects) {\n      const geoNodes = fbxTree.Objects.Geometry;\n      for (const nodeID in geoNodes) {\n        const relationships = connections.get(parseInt(nodeID));\n        const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n        geometryMap.set(parseInt(nodeID), geo);\n      }\n    }\n    return geometryMap;\n  }\n  // Parse single node in FBXTree.Objects.Geometry\n  parseGeometry(relationships, geoNode, deformers) {\n    switch (geoNode.attrType) {\n      case \"Mesh\":\n        return this.parseMeshGeometry(relationships, geoNode, deformers);\n      case \"NurbsCurve\":\n        return this.parseNurbsGeometry(geoNode);\n    }\n  }\n  // Parse single node mesh geometry in FBXTree.Objects.Geometry\n  parseMeshGeometry(relationships, geoNode, deformers) {\n    const skeletons = deformers.skeletons;\n    const morphTargets = [];\n    const modelNodes = relationships.parents.map(function (parent) {\n      return fbxTree.Objects.Model[parent.ID];\n    });\n    if (modelNodes.length === 0) return;\n    const skeleton = relationships.children.reduce(function (skeleton2, child) {\n      if (skeletons[child.ID] !== void 0) skeleton2 = skeletons[child.ID];\n      return skeleton2;\n    }, null);\n    relationships.children.forEach(function (child) {\n      if (deformers.morphTargets[child.ID] !== void 0) {\n        morphTargets.push(deformers.morphTargets[child.ID]);\n      }\n    });\n    const modelNode = modelNodes[0];\n    const transformData = {};\n    if (\"RotationOrder\" in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n    if (\"InheritType\" in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if (\"GeometricTranslation\" in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n    if (\"GeometricRotation\" in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n    if (\"GeometricScaling\" in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n    const transform = generateTransform(transformData);\n    return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n  }\n  // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n  genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n    const geo = new BufferGeometry();\n    if (geoNode.attrName) geo.name = geoNode.attrName;\n    const geoInfo = this.parseGeoNode(geoNode, skeleton);\n    const buffers = this.genBuffers(geoInfo);\n    const positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n    positionAttribute.applyMatrix4(preTransform);\n    geo.setAttribute(\"position\", positionAttribute);\n    if (buffers.colors.length > 0) {\n      geo.setAttribute(\"color\", new Float32BufferAttribute(buffers.colors, 3));\n    }\n    if (skeleton) {\n      geo.setAttribute(\"skinIndex\", new Uint16BufferAttribute(buffers.weightsIndices, 4));\n      geo.setAttribute(\"skinWeight\", new Float32BufferAttribute(buffers.vertexWeights, 4));\n      geo.FBX_Deformer = skeleton;\n    }\n    if (buffers.normal.length > 0) {\n      const normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n      const normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n      normalAttribute.applyNormalMatrix(normalMatrix);\n      geo.setAttribute(\"normal\", normalAttribute);\n    }\n    buffers.uvs.forEach(function (uvBuffer, i) {\n      if (UV1 === \"uv2\") i++;\n      const name = i === 0 ? \"uv\" : `uv${i}`;\n      geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n    });\n    if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n      let prevMaterialIndex = buffers.materialIndex[0];\n      let startIndex = 0;\n      buffers.materialIndex.forEach(function (currentIndex, i) {\n        if (currentIndex !== prevMaterialIndex) {\n          geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n          prevMaterialIndex = currentIndex;\n          startIndex = i;\n        }\n      });\n      if (geo.groups.length > 0) {\n        const lastGroup = geo.groups[geo.groups.length - 1];\n        const lastIndex = lastGroup.start + lastGroup.count;\n        if (lastIndex !== buffers.materialIndex.length) {\n          geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n        }\n      }\n      if (geo.groups.length === 0) {\n        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n      }\n    }\n    this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n    return geo;\n  }\n  parseGeoNode(geoNode, skeleton) {\n    const geoInfo = {};\n    geoInfo.vertexPositions = geoNode.Vertices !== void 0 ? geoNode.Vertices.a : [];\n    geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== void 0 ? geoNode.PolygonVertexIndex.a : [];\n    if (geoNode.LayerElementColor) {\n      geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n    }\n    if (geoNode.LayerElementMaterial) {\n      geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n    }\n    if (geoNode.LayerElementNormal) {\n      geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n    }\n    if (geoNode.LayerElementUV) {\n      geoInfo.uv = [];\n      let i = 0;\n      while (geoNode.LayerElementUV[i]) {\n        if (geoNode.LayerElementUV[i].UV) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n        }\n        i++;\n      }\n    }\n    geoInfo.weightTable = {};\n    if (skeleton !== null) {\n      geoInfo.skeleton = skeleton;\n      skeleton.rawBones.forEach(function (rawBone, i) {\n        rawBone.indices.forEach(function (index, j) {\n          if (geoInfo.weightTable[index] === void 0) geoInfo.weightTable[index] = [];\n          geoInfo.weightTable[index].push({\n            id: i,\n            weight: rawBone.weights[j]\n          });\n        });\n      });\n    }\n    return geoInfo;\n  }\n  genBuffers(geoInfo) {\n    const buffers = {\n      vertex: [],\n      normal: [],\n      colors: [],\n      uvs: [],\n      materialIndex: [],\n      vertexWeights: [],\n      weightsIndices: []\n    };\n    let polygonIndex = 0;\n    let faceLength = 0;\n    let displayedWeightsWarning = false;\n    let facePositionIndexes = [];\n    let faceNormals = [];\n    let faceColors = [];\n    let faceUVs = [];\n    let faceWeights = [];\n    let faceWeightIndices = [];\n    const scope = this;\n    geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n      let materialIndex;\n      let endOfFace = false;\n      if (vertexIndex < 0) {\n        vertexIndex = vertexIndex ^ -1;\n        endOfFace = true;\n      }\n      let weightIndices = [];\n      let weights = [];\n      facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n      if (geoInfo.color) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n        faceColors.push(data[0], data[1], data[2]);\n      }\n      if (geoInfo.skeleton) {\n        if (geoInfo.weightTable[vertexIndex] !== void 0) {\n          geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n            weights.push(wt.weight);\n            weightIndices.push(wt.id);\n          });\n        }\n        if (weights.length > 4) {\n          if (!displayedWeightsWarning) {\n            console.warn(\"THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.\");\n            displayedWeightsWarning = true;\n          }\n          const wIndex = [0, 0, 0, 0];\n          const Weight = [0, 0, 0, 0];\n          weights.forEach(function (weight, weightIndex) {\n            let currentWeight = weight;\n            let currentIndex = weightIndices[weightIndex];\n            Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n              if (currentWeight > comparedWeight) {\n                comparedWeightArray[comparedWeightIndex] = currentWeight;\n                currentWeight = comparedWeight;\n                const tmp = wIndex[comparedWeightIndex];\n                wIndex[comparedWeightIndex] = currentIndex;\n                currentIndex = tmp;\n              }\n            });\n          });\n          weightIndices = wIndex;\n          weights = Weight;\n        }\n        while (weights.length < 4) {\n          weights.push(0);\n          weightIndices.push(0);\n        }\n        for (let i = 0; i < 4; ++i) {\n          faceWeights.push(weights[i]);\n          faceWeightIndices.push(weightIndices[i]);\n        }\n      }\n      if (geoInfo.normal) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n        faceNormals.push(data[0], data[1], data[2]);\n      }\n      if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n        materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n      }\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, i) {\n          const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n          if (faceUVs[i] === void 0) {\n            faceUVs[i] = [];\n          }\n          faceUVs[i].push(data[0]);\n          faceUVs[i].push(data[1]);\n        });\n      }\n      faceLength++;\n      if (endOfFace) {\n        scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n        polygonIndex++;\n        faceLength = 0;\n        facePositionIndexes = [];\n        faceNormals = [];\n        faceColors = [];\n        faceUVs = [];\n        faceWeights = [];\n        faceWeightIndices = [];\n      }\n    });\n    return buffers;\n  }\n  // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n  genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n    for (let i = 2; i < faceLength; i++) {\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n      if (geoInfo.skeleton) {\n        buffers.vertexWeights.push(faceWeights[0]);\n        buffers.vertexWeights.push(faceWeights[1]);\n        buffers.vertexWeights.push(faceWeights[2]);\n        buffers.vertexWeights.push(faceWeights[3]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n        buffers.vertexWeights.push(faceWeights[i * 4]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[0]);\n        buffers.weightsIndices.push(faceWeightIndices[1]);\n        buffers.weightsIndices.push(faceWeightIndices[2]);\n        buffers.weightsIndices.push(faceWeightIndices[3]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n      }\n      if (geoInfo.color) {\n        buffers.colors.push(faceColors[0]);\n        buffers.colors.push(faceColors[1]);\n        buffers.colors.push(faceColors[2]);\n        buffers.colors.push(faceColors[(i - 1) * 3]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n        buffers.colors.push(faceColors[i * 3]);\n        buffers.colors.push(faceColors[i * 3 + 1]);\n        buffers.colors.push(faceColors[i * 3 + 2]);\n      }\n      if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n      }\n      if (geoInfo.normal) {\n        buffers.normal.push(faceNormals[0]);\n        buffers.normal.push(faceNormals[1]);\n        buffers.normal.push(faceNormals[2]);\n        buffers.normal.push(faceNormals[(i - 1) * 3]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n        buffers.normal.push(faceNormals[i * 3]);\n        buffers.normal.push(faceNormals[i * 3 + 1]);\n        buffers.normal.push(faceNormals[i * 3 + 2]);\n      }\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, j) {\n          if (buffers.uvs[j] === void 0) buffers.uvs[j] = [];\n          buffers.uvs[j].push(faceUVs[j][0]);\n          buffers.uvs[j].push(faceUVs[j][1]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n          buffers.uvs[j].push(faceUVs[j][i * 2]);\n          buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n        });\n      }\n    }\n  }\n  addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n    if (morphTargets.length === 0) return;\n    parentGeo.morphTargetsRelative = true;\n    parentGeo.morphAttributes.position = [];\n    const scope = this;\n    morphTargets.forEach(function (morphTarget) {\n      morphTarget.rawTargets.forEach(function (rawTarget) {\n        const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n        if (morphGeoNode !== void 0) {\n          scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n        }\n      });\n    });\n  }\n  // a morph geometry node is similar to a standard  node, and the node is also contained\n  // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n  // and a special attribute Index defining which vertices of the original geometry are affected\n  // Normal and position attributes only have data for the vertices that are affected by the morph\n  genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n    const vertexIndices = parentGeoNode.PolygonVertexIndex !== void 0 ? parentGeoNode.PolygonVertexIndex.a : [];\n    const morphPositionsSparse = morphGeoNode.Vertices !== void 0 ? morphGeoNode.Vertices.a : [];\n    const indices = morphGeoNode.Indexes !== void 0 ? morphGeoNode.Indexes.a : [];\n    const length = parentGeo.attributes.position.count * 3;\n    const morphPositions = new Float32Array(length);\n    for (let i = 0; i < indices.length; i++) {\n      const morphIndex = indices[i] * 3;\n      morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n      morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n      morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n    }\n    const morphGeoInfo = {\n      vertexIndices,\n      vertexPositions: morphPositions\n    };\n    const morphBuffers = this.genBuffers(morphGeoInfo);\n    const positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n    positionAttribute.name = name || morphGeoNode.attrName;\n    positionAttribute.applyMatrix4(preTransform);\n    parentGeo.morphAttributes.position.push(positionAttribute);\n  }\n  // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n  parseNormals(NormalNode) {\n    const mappingType = NormalNode.MappingInformationType;\n    const referenceType = NormalNode.ReferenceInformationType;\n    const buffer = NormalNode.Normals.a;\n    let indexBuffer = [];\n    if (referenceType === \"IndexToDirect\") {\n      if (\"NormalIndex\" in NormalNode) {\n        indexBuffer = NormalNode.NormalIndex.a;\n      } else if (\"NormalsIndex\" in NormalNode) {\n        indexBuffer = NormalNode.NormalsIndex.a;\n      }\n    }\n    return {\n      dataSize: 3,\n      buffer,\n      indices: indexBuffer,\n      mappingType,\n      referenceType\n    };\n  }\n  // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n  parseUVs(UVNode) {\n    const mappingType = UVNode.MappingInformationType;\n    const referenceType = UVNode.ReferenceInformationType;\n    const buffer = UVNode.UV.a;\n    let indexBuffer = [];\n    if (referenceType === \"IndexToDirect\") {\n      indexBuffer = UVNode.UVIndex.a;\n    }\n    return {\n      dataSize: 2,\n      buffer,\n      indices: indexBuffer,\n      mappingType,\n      referenceType\n    };\n  }\n  // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n  parseVertexColors(ColorNode) {\n    const mappingType = ColorNode.MappingInformationType;\n    const referenceType = ColorNode.ReferenceInformationType;\n    const buffer = ColorNode.Colors.a;\n    let indexBuffer = [];\n    if (referenceType === \"IndexToDirect\") {\n      indexBuffer = ColorNode.ColorIndex.a;\n    }\n    return {\n      dataSize: 4,\n      buffer,\n      indices: indexBuffer,\n      mappingType,\n      referenceType\n    };\n  }\n  // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n  parseMaterialIndices(MaterialNode) {\n    const mappingType = MaterialNode.MappingInformationType;\n    const referenceType = MaterialNode.ReferenceInformationType;\n    if (mappingType === \"NoMappingInformation\") {\n      return {\n        dataSize: 1,\n        buffer: [0],\n        indices: [0],\n        mappingType: \"AllSame\",\n        referenceType\n      };\n    }\n    const materialIndexBuffer = MaterialNode.Materials.a;\n    const materialIndices = [];\n    for (let i = 0; i < materialIndexBuffer.length; ++i) {\n      materialIndices.push(i);\n    }\n    return {\n      dataSize: 1,\n      buffer: materialIndexBuffer,\n      indices: materialIndices,\n      mappingType,\n      referenceType\n    };\n  }\n  // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n  parseNurbsGeometry(geoNode) {\n    if (NURBSCurve === void 0) {\n      console.error(\"THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.\");\n      return new BufferGeometry();\n    }\n    const order = parseInt(geoNode.Order);\n    if (isNaN(order)) {\n      console.error(\"THREE.FBXLoader: Invalid Order %s given for geometry ID: %s\", geoNode.Order, geoNode.id);\n      return new BufferGeometry();\n    }\n    const degree = order - 1;\n    const knots = geoNode.KnotVector.a;\n    const controlPoints = [];\n    const pointsValues = geoNode.Points.a;\n    for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n      controlPoints.push(new Vector4().fromArray(pointsValues, i));\n    }\n    let startKnot, endKnot;\n    if (geoNode.Form === \"Closed\") {\n      controlPoints.push(controlPoints[0]);\n    } else if (geoNode.Form === \"Periodic\") {\n      startKnot = degree;\n      endKnot = knots.length - 1 - startKnot;\n      for (let i = 0; i < degree; ++i) {\n        controlPoints.push(controlPoints[i]);\n      }\n    }\n    const curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n    const points = curve.getPoints(controlPoints.length * 12);\n    return new BufferGeometry().setFromPoints(points);\n  }\n}\nclass AnimationParser {\n  // take raw animation clips and turn them into three.js animation clips\n  parse() {\n    const animationClips = [];\n    const rawClips = this.parseClips();\n    if (rawClips !== void 0) {\n      for (const key in rawClips) {\n        const rawClip = rawClips[key];\n        const clip = this.addClip(rawClip);\n        animationClips.push(clip);\n      }\n    }\n    return animationClips;\n  }\n  parseClips() {\n    if (fbxTree.Objects.AnimationCurve === void 0) return void 0;\n    const curveNodesMap = this.parseAnimationCurveNodes();\n    this.parseAnimationCurves(curveNodesMap);\n    const layersMap = this.parseAnimationLayers(curveNodesMap);\n    const rawClips = this.parseAnimStacks(layersMap);\n    return rawClips;\n  }\n  // parse nodes in FBXTree.Objects.AnimationCurveNode\n  // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n  // and is referenced by an AnimationLayer\n  parseAnimationCurveNodes() {\n    const rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n    const curveNodesMap = /* @__PURE__ */new Map();\n    for (const nodeID in rawCurveNodes) {\n      const rawCurveNode = rawCurveNodes[nodeID];\n      if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n        const curveNode = {\n          id: rawCurveNode.id,\n          attr: rawCurveNode.attrName,\n          curves: {}\n        };\n        curveNodesMap.set(curveNode.id, curveNode);\n      }\n    }\n    return curveNodesMap;\n  }\n  // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n  // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n  // axis ( e.g. times and values of x rotation)\n  parseAnimationCurves(curveNodesMap) {\n    const rawCurves = fbxTree.Objects.AnimationCurve;\n    for (const nodeID in rawCurves) {\n      const animationCurve = {\n        id: rawCurves[nodeID].id,\n        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n        values: rawCurves[nodeID].KeyValueFloat.a\n      };\n      const relationships = connections.get(animationCurve.id);\n      if (relationships !== void 0) {\n        const animationCurveID = relationships.parents[0].ID;\n        const animationCurveRelationship = relationships.parents[0].relationship;\n        if (animationCurveRelationship.match(/X/)) {\n          curveNodesMap.get(animationCurveID).curves[\"x\"] = animationCurve;\n        } else if (animationCurveRelationship.match(/Y/)) {\n          curveNodesMap.get(animationCurveID).curves[\"y\"] = animationCurve;\n        } else if (animationCurveRelationship.match(/Z/)) {\n          curveNodesMap.get(animationCurveID).curves[\"z\"] = animationCurve;\n        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n          curveNodesMap.get(animationCurveID).curves[\"morph\"] = animationCurve;\n        }\n      }\n    }\n  }\n  // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n  // to various AnimationCurveNodes and is referenced by an AnimationStack node\n  // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n  parseAnimationLayers(curveNodesMap) {\n    const rawLayers = fbxTree.Objects.AnimationLayer;\n    const layersMap = /* @__PURE__ */new Map();\n    for (const nodeID in rawLayers) {\n      const layerCurveNodes = [];\n      const connection = connections.get(parseInt(nodeID));\n      if (connection !== void 0) {\n        const children = connection.children;\n        children.forEach(function (child, i) {\n          if (curveNodesMap.has(child.ID)) {\n            const curveNode = curveNodesMap.get(child.ID);\n            if (curveNode.curves.x !== void 0 || curveNode.curves.y !== void 0 || curveNode.curves.z !== void 0) {\n              if (layerCurveNodes[i] === void 0) {\n                const modelID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== void 0;\n                })[0].ID;\n                if (modelID !== void 0) {\n                  const rawModel = fbxTree.Objects.Model[modelID.toString()];\n                  if (rawModel === void 0) {\n                    console.warn(\"THREE.FBXLoader: Encountered a unused curve.\", child);\n                    return;\n                  }\n                  const node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : \"\",\n                    ID: rawModel.id,\n                    initialPosition: [0, 0, 0],\n                    initialRotation: [0, 0, 0],\n                    initialScale: [1, 1, 1]\n                  };\n                  sceneGraph.traverse(function (child2) {\n                    if (child2.ID === rawModel.id) {\n                      node.transform = child2.matrix;\n                      if (child2.userData.transformData) node.eulerOrder = child2.userData.transformData.eulerOrder;\n                    }\n                  });\n                  if (!node.transform) node.transform = new Matrix4();\n                  if (\"PreRotation\" in rawModel) node.preRotation = rawModel.PreRotation.value;\n                  if (\"PostRotation\" in rawModel) node.postRotation = rawModel.PostRotation.value;\n                  layerCurveNodes[i] = node;\n                }\n              }\n              if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n            } else if (curveNode.curves.morph !== void 0) {\n              if (layerCurveNodes[i] === void 0) {\n                const deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== void 0;\n                })[0].ID;\n                const morpherID = connections.get(deformerID).parents[0].ID;\n                const geoID = connections.get(morpherID).parents[0].ID;\n                const modelID = connections.get(geoID).parents[0].ID;\n                const rawModel = fbxTree.Objects.Model[modelID];\n                const node = {\n                  modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : \"\",\n                  morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                };\n                layerCurveNodes[i] = node;\n              }\n              layerCurveNodes[i][curveNode.attr] = curveNode;\n            }\n          }\n        });\n        layersMap.set(parseInt(nodeID), layerCurveNodes);\n      }\n    }\n    return layersMap;\n  }\n  // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n  // hierarchy. Each Stack node will be used to create a AnimationClip\n  parseAnimStacks(layersMap) {\n    const rawStacks = fbxTree.Objects.AnimationStack;\n    const rawClips = {};\n    for (const nodeID in rawStacks) {\n      const children = connections.get(parseInt(nodeID)).children;\n      if (children.length > 1) {\n        console.warn(\"THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.\");\n      }\n      const layer = layersMap.get(children[0].ID);\n      rawClips[nodeID] = {\n        name: rawStacks[nodeID].attrName,\n        layer\n      };\n    }\n    return rawClips;\n  }\n  addClip(rawClip) {\n    let tracks = [];\n    const scope = this;\n    rawClip.layer.forEach(function (rawTracks) {\n      tracks = tracks.concat(scope.generateTracks(rawTracks));\n    });\n    return new AnimationClip(rawClip.name, -1, tracks);\n  }\n  generateTracks(rawTracks) {\n    const tracks = [];\n    let initialPosition = new Vector3();\n    let initialRotation = new Quaternion();\n    let initialScale = new Vector3();\n    if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n    initialPosition = initialPosition.toArray();\n    initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n    initialScale = initialScale.toArray();\n    if (rawTracks.T !== void 0 && Object.keys(rawTracks.T.curves).length > 0) {\n      const positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, \"position\");\n      if (positionTrack !== void 0) tracks.push(positionTrack);\n    }\n    if (rawTracks.R !== void 0 && Object.keys(rawTracks.R.curves).length > 0) {\n      const rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n      if (rotationTrack !== void 0) tracks.push(rotationTrack);\n    }\n    if (rawTracks.S !== void 0 && Object.keys(rawTracks.S.curves).length > 0) {\n      const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, \"scale\");\n      if (scaleTrack !== void 0) tracks.push(scaleTrack);\n    }\n    if (rawTracks.DeformPercent !== void 0) {\n      const morphTrack = this.generateMorphTrack(rawTracks);\n      if (morphTrack !== void 0) tracks.push(morphTrack);\n    }\n    return tracks;\n  }\n  generateVectorTrack(modelName, curves, initialValue, type) {\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    return new VectorKeyframeTrack(modelName + \".\" + type, times, values);\n  }\n  generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n    if (curves.x !== void 0) {\n      this.interpolateRotations(curves.x);\n      curves.x.values = curves.x.values.map(MathUtils.degToRad);\n    }\n    if (curves.y !== void 0) {\n      this.interpolateRotations(curves.y);\n      curves.y.values = curves.y.values.map(MathUtils.degToRad);\n    }\n    if (curves.z !== void 0) {\n      this.interpolateRotations(curves.z);\n      curves.z.values = curves.z.values.map(MathUtils.degToRad);\n    }\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    if (preRotation !== void 0) {\n      preRotation = preRotation.map(MathUtils.degToRad);\n      preRotation.push(eulerOrder);\n      preRotation = new Euler().fromArray(preRotation);\n      preRotation = new Quaternion().setFromEuler(preRotation);\n    }\n    if (postRotation !== void 0) {\n      postRotation = postRotation.map(MathUtils.degToRad);\n      postRotation.push(eulerOrder);\n      postRotation = new Euler().fromArray(postRotation);\n      postRotation = new Quaternion().setFromEuler(postRotation).invert();\n    }\n    const quaternion = new Quaternion();\n    const euler = new Euler();\n    const quaternionValues = [];\n    for (let i = 0; i < values.length; i += 3) {\n      euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n      quaternion.setFromEuler(euler);\n      if (preRotation !== void 0) quaternion.premultiply(preRotation);\n      if (postRotation !== void 0) quaternion.multiply(postRotation);\n      quaternion.toArray(quaternionValues, i / 3 * 4);\n    }\n    return new QuaternionKeyframeTrack(modelName + \".quaternion\", times, quaternionValues);\n  }\n  generateMorphTrack(rawTracks) {\n    const curves = rawTracks.DeformPercent.curves.morph;\n    const values = curves.values.map(function (val) {\n      return val / 100;\n    });\n    const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n    return new NumberKeyframeTrack(rawTracks.modelName + \".morphTargetInfluences[\" + morphNum + \"]\", curves.times, values);\n  }\n  // For all animated objects, times are defined separately for each axis\n  // Here we'll combine the times into one sorted array without duplicates\n  getTimesForAllAxes(curves) {\n    let times = [];\n    if (curves.x !== void 0) times = times.concat(curves.x.times);\n    if (curves.y !== void 0) times = times.concat(curves.y.times);\n    if (curves.z !== void 0) times = times.concat(curves.z.times);\n    times = times.sort(function (a, b) {\n      return a - b;\n    });\n    if (times.length > 1) {\n      let targetIndex = 1;\n      let lastValue = times[0];\n      for (let i = 1; i < times.length; i++) {\n        const currentValue = times[i];\n        if (currentValue !== lastValue) {\n          times[targetIndex] = currentValue;\n          lastValue = currentValue;\n          targetIndex++;\n        }\n      }\n      times = times.slice(0, targetIndex);\n    }\n    return times;\n  }\n  getKeyframeTrackValues(times, curves, initialValue) {\n    const prevValue = initialValue;\n    const values = [];\n    let xIndex = -1;\n    let yIndex = -1;\n    let zIndex = -1;\n    times.forEach(function (time) {\n      if (curves.x) xIndex = curves.x.times.indexOf(time);\n      if (curves.y) yIndex = curves.y.times.indexOf(time);\n      if (curves.z) zIndex = curves.z.times.indexOf(time);\n      if (xIndex !== -1) {\n        const xValue = curves.x.values[xIndex];\n        values.push(xValue);\n        prevValue[0] = xValue;\n      } else {\n        values.push(prevValue[0]);\n      }\n      if (yIndex !== -1) {\n        const yValue = curves.y.values[yIndex];\n        values.push(yValue);\n        prevValue[1] = yValue;\n      } else {\n        values.push(prevValue[1]);\n      }\n      if (zIndex !== -1) {\n        const zValue = curves.z.values[zIndex];\n        values.push(zValue);\n        prevValue[2] = zValue;\n      } else {\n        values.push(prevValue[2]);\n      }\n    });\n    return values;\n  }\n  // Rotations are defined as Euler angles which can have values  of any size\n  // These will be converted to quaternions which don't support values greater than\n  // PI, so we'll interpolate large rotations\n  interpolateRotations(curve) {\n    for (let i = 1; i < curve.values.length; i++) {\n      const initialValue = curve.values[i - 1];\n      const valuesSpan = curve.values[i] - initialValue;\n      const absoluteSpan = Math.abs(valuesSpan);\n      if (absoluteSpan >= 180) {\n        const numSubIntervals = absoluteSpan / 180;\n        const step = valuesSpan / numSubIntervals;\n        let nextValue = initialValue + step;\n        const initialTime = curve.times[i - 1];\n        const timeSpan = curve.times[i] - initialTime;\n        const interval = timeSpan / numSubIntervals;\n        let nextTime = initialTime + interval;\n        const interpolatedTimes = [];\n        const interpolatedValues = [];\n        while (nextTime < curve.times[i]) {\n          interpolatedTimes.push(nextTime);\n          nextTime += interval;\n          interpolatedValues.push(nextValue);\n          nextValue += step;\n        }\n        curve.times = inject(curve.times, i, interpolatedTimes);\n        curve.values = inject(curve.values, i, interpolatedValues);\n      }\n    }\n  }\n}\nclass TextParser {\n  getPrevNode() {\n    return this.nodeStack[this.currentIndent - 2];\n  }\n  getCurrentNode() {\n    return this.nodeStack[this.currentIndent - 1];\n  }\n  getCurrentProp() {\n    return this.currentProp;\n  }\n  pushStack(node) {\n    this.nodeStack.push(node);\n    this.currentIndent += 1;\n  }\n  popStack() {\n    this.nodeStack.pop();\n    this.currentIndent -= 1;\n  }\n  setCurrentProp(val, name) {\n    this.currentProp = val;\n    this.currentPropName = name;\n  }\n  parse(text) {\n    this.currentIndent = 0;\n    this.allNodes = new FBXTree();\n    this.nodeStack = [];\n    this.currentProp = [];\n    this.currentPropName = \"\";\n    const scope = this;\n    const split = text.split(/[\\r\\n]+/);\n    split.forEach(function (line, i) {\n      const matchComment = line.match(/^[\\s\\t]*;/);\n      const matchEmpty = line.match(/^[\\s\\t]*$/);\n      if (matchComment || matchEmpty) return;\n      const matchBeginning = line.match(\"^\\\\t{\" + scope.currentIndent + \"}(\\\\w+):(.*){\", \"\");\n      const matchProperty = line.match(\"^\\\\t{\" + scope.currentIndent + \"}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)\");\n      const matchEnd = line.match(\"^\\\\t{\" + (scope.currentIndent - 1) + \"}}\");\n      if (matchBeginning) {\n        scope.parseNodeBegin(line, matchBeginning);\n      } else if (matchProperty) {\n        scope.parseNodeProperty(line, matchProperty, split[++i]);\n      } else if (matchEnd) {\n        scope.popStack();\n      } else if (line.match(/^[^\\s\\t}]/)) {\n        scope.parseNodePropertyContinued(line);\n      }\n    });\n    return this.allNodes;\n  }\n  parseNodeBegin(line, property) {\n    const nodeName = property[1].trim().replace(/^\"/, \"\").replace(/\"$/, \"\");\n    const nodeAttrs = property[2].split(\",\").map(function (attr) {\n      return attr.trim().replace(/^\"/, \"\").replace(/\"$/, \"\");\n    });\n    const node = {\n      name: nodeName\n    };\n    const attrs = this.parseNodeAttr(nodeAttrs);\n    const currentNode = this.getCurrentNode();\n    if (this.currentIndent === 0) {\n      this.allNodes.add(nodeName, node);\n    } else {\n      if (nodeName in currentNode) {\n        if (nodeName === \"PoseNode\") {\n          currentNode.PoseNode.push(node);\n        } else if (currentNode[nodeName].id !== void 0) {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n        }\n        if (attrs.id !== \"\") currentNode[nodeName][attrs.id] = node;\n      } else if (typeof attrs.id === \"number\") {\n        currentNode[nodeName] = {};\n        currentNode[nodeName][attrs.id] = node;\n      } else if (nodeName !== \"Properties70\") {\n        if (nodeName === \"PoseNode\") currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n      }\n    }\n    if (typeof attrs.id === \"number\") node.id = attrs.id;\n    if (attrs.name !== \"\") node.attrName = attrs.name;\n    if (attrs.type !== \"\") node.attrType = attrs.type;\n    this.pushStack(node);\n  }\n  parseNodeAttr(attrs) {\n    let id = attrs[0];\n    if (attrs[0] !== \"\") {\n      id = parseInt(attrs[0]);\n      if (isNaN(id)) {\n        id = attrs[0];\n      }\n    }\n    let name = \"\",\n      type = \"\";\n    if (attrs.length > 1) {\n      name = attrs[1].replace(/^(\\w+)::/, \"\");\n      type = attrs[2];\n    }\n    return {\n      id,\n      name,\n      type\n    };\n  }\n  parseNodeProperty(line, property, contentLine) {\n    let propName = property[1].replace(/^\"/, \"\").replace(/\"$/, \"\").trim();\n    let propValue = property[2].replace(/^\"/, \"\").replace(/\"$/, \"\").trim();\n    if (propName === \"Content\" && propValue === \",\") {\n      propValue = contentLine.replace(/\"/g, \"\").replace(/,$/, \"\").trim();\n    }\n    const currentNode = this.getCurrentNode();\n    const parentName = currentNode.name;\n    if (parentName === \"Properties70\") {\n      this.parseNodeSpecialProperty(line, propName, propValue);\n      return;\n    }\n    if (propName === \"C\") {\n      const connProps = propValue.split(\",\").slice(1);\n      const from = parseInt(connProps[0]);\n      const to = parseInt(connProps[1]);\n      let rest = propValue.split(\",\").slice(3);\n      rest = rest.map(function (elem) {\n        return elem.trim().replace(/^\"/, \"\");\n      });\n      propName = \"connections\";\n      propValue = [from, to];\n      append(propValue, rest);\n      if (currentNode[propName] === void 0) {\n        currentNode[propName] = [];\n      }\n    }\n    if (propName === \"Node\") currentNode.id = propValue;\n    if (propName in currentNode && Array.isArray(currentNode[propName])) {\n      currentNode[propName].push(propValue);\n    } else {\n      if (propName !== \"a\") currentNode[propName] = propValue;else currentNode.a = propValue;\n    }\n    this.setCurrentProp(currentNode, propName);\n    if (propName === \"a\" && propValue.slice(-1) !== \",\") {\n      currentNode.a = parseNumberArray(propValue);\n    }\n  }\n  parseNodePropertyContinued(line) {\n    const currentNode = this.getCurrentNode();\n    currentNode.a += line;\n    if (line.slice(-1) !== \",\") {\n      currentNode.a = parseNumberArray(currentNode.a);\n    }\n  }\n  // parse \"Property70\"\n  parseNodeSpecialProperty(line, propName, propValue) {\n    const props = propValue.split('\",').map(function (prop) {\n      return prop.trim().replace(/^\\\"/, \"\").replace(/\\s/, \"_\");\n    });\n    const innerPropName = props[0];\n    const innerPropType1 = props[1];\n    const innerPropType2 = props[2];\n    const innerPropFlag = props[3];\n    let innerPropValue = props[4];\n    switch (innerPropType1) {\n      case \"int\":\n      case \"enum\":\n      case \"bool\":\n      case \"ULongLong\":\n      case \"double\":\n      case \"Number\":\n      case \"FieldOfView\":\n        innerPropValue = parseFloat(innerPropValue);\n        break;\n      case \"Color\":\n      case \"ColorRGB\":\n      case \"Vector3D\":\n      case \"Lcl_Translation\":\n      case \"Lcl_Rotation\":\n      case \"Lcl_Scaling\":\n        innerPropValue = parseNumberArray(innerPropValue);\n        break;\n    }\n    this.getPrevNode()[innerPropName] = {\n      type: innerPropType1,\n      type2: innerPropType2,\n      flag: innerPropFlag,\n      value: innerPropValue\n    };\n    this.setCurrentProp(this.getPrevNode(), innerPropName);\n  }\n}\nclass BinaryParser {\n  parse(buffer) {\n    const reader = new BinaryReader(buffer);\n    reader.skip(23);\n    const version = reader.getUint32();\n    if (version < 6400) {\n      throw new Error(\"THREE.FBXLoader: FBX version not supported, FileVersion: \" + version);\n    }\n    const allNodes = new FBXTree();\n    while (!this.endOfContent(reader)) {\n      const node = this.parseNode(reader, version);\n      if (node !== null) allNodes.add(node.name, node);\n    }\n    return allNodes;\n  }\n  // Check if reader has reached the end of content.\n  endOfContent(reader) {\n    if (reader.size() % 16 === 0) {\n      return (reader.getOffset() + 160 + 16 & ~15) >= reader.size();\n    } else {\n      return reader.getOffset() + 160 + 16 >= reader.size();\n    }\n  }\n  // recursively parse nodes until the end of the file is reached\n  parseNode(reader, version) {\n    const node = {};\n    const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const nameLen = reader.getUint8();\n    const name = reader.getString(nameLen);\n    if (endOffset === 0) return null;\n    const propertyList = [];\n    for (let i = 0; i < numProperties; i++) {\n      propertyList.push(this.parseProperty(reader));\n    }\n    const id = propertyList.length > 0 ? propertyList[0] : \"\";\n    const attrName = propertyList.length > 1 ? propertyList[1] : \"\";\n    const attrType = propertyList.length > 2 ? propertyList[2] : \"\";\n    node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n    while (endOffset > reader.getOffset()) {\n      const subNode = this.parseNode(reader, version);\n      if (subNode !== null) this.parseSubNode(name, node, subNode);\n    }\n    node.propertyList = propertyList;\n    if (typeof id === \"number\") node.id = id;\n    if (attrName !== \"\") node.attrName = attrName;\n    if (attrType !== \"\") node.attrType = attrType;\n    if (name !== \"\") node.name = name;\n    return node;\n  }\n  parseSubNode(name, node, subNode) {\n    if (subNode.singleProperty === true) {\n      const value = subNode.propertyList[0];\n      if (Array.isArray(value)) {\n        node[subNode.name] = subNode;\n        subNode.a = value;\n      } else {\n        node[subNode.name] = value;\n      }\n    } else if (name === \"Connections\" && subNode.name === \"C\") {\n      const array = [];\n      subNode.propertyList.forEach(function (property, i) {\n        if (i !== 0) array.push(property);\n      });\n      if (node.connections === void 0) {\n        node.connections = [];\n      }\n      node.connections.push(array);\n    } else if (subNode.name === \"Properties70\") {\n      const keys = Object.keys(subNode);\n      keys.forEach(function (key) {\n        node[key] = subNode[key];\n      });\n    } else if (name === \"Properties70\" && subNode.name === \"P\") {\n      let innerPropName = subNode.propertyList[0];\n      let innerPropType1 = subNode.propertyList[1];\n      const innerPropType2 = subNode.propertyList[2];\n      const innerPropFlag = subNode.propertyList[3];\n      let innerPropValue;\n      if (innerPropName.indexOf(\"Lcl \") === 0) innerPropName = innerPropName.replace(\"Lcl \", \"Lcl_\");\n      if (innerPropType1.indexOf(\"Lcl \") === 0) innerPropType1 = innerPropType1.replace(\"Lcl \", \"Lcl_\");\n      if (innerPropType1 === \"Color\" || innerPropType1 === \"ColorRGB\" || innerPropType1 === \"Vector\" || innerPropType1 === \"Vector3D\" || innerPropType1.indexOf(\"Lcl_\") === 0) {\n        innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n      } else {\n        innerPropValue = subNode.propertyList[4];\n      }\n      node[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n    } else if (node[subNode.name] === void 0) {\n      if (typeof subNode.id === \"number\") {\n        node[subNode.name] = {};\n        node[subNode.name][subNode.id] = subNode;\n      } else {\n        node[subNode.name] = subNode;\n      }\n    } else {\n      if (subNode.name === \"PoseNode\") {\n        if (!Array.isArray(node[subNode.name])) {\n          node[subNode.name] = [node[subNode.name]];\n        }\n        node[subNode.name].push(subNode);\n      } else if (node[subNode.name][subNode.id] === void 0) {\n        node[subNode.name][subNode.id] = subNode;\n      }\n    }\n  }\n  parseProperty(reader) {\n    const type = reader.getString(1);\n    let length;\n    switch (type) {\n      case \"C\":\n        return reader.getBoolean();\n      case \"D\":\n        return reader.getFloat64();\n      case \"F\":\n        return reader.getFloat32();\n      case \"I\":\n        return reader.getInt32();\n      case \"L\":\n        return reader.getInt64();\n      case \"R\":\n        length = reader.getUint32();\n        return reader.getArrayBuffer(length);\n      case \"S\":\n        length = reader.getUint32();\n        return reader.getString(length);\n      case \"Y\":\n        return reader.getInt16();\n      case \"b\":\n      case \"c\":\n      case \"d\":\n      case \"f\":\n      case \"i\":\n      case \"l\":\n        const arrayLength = reader.getUint32();\n        const encoding = reader.getUint32();\n        const compressedLength = reader.getUint32();\n        if (encoding === 0) {\n          switch (type) {\n            case \"b\":\n            case \"c\":\n              return reader.getBooleanArray(arrayLength);\n            case \"d\":\n              return reader.getFloat64Array(arrayLength);\n            case \"f\":\n              return reader.getFloat32Array(arrayLength);\n            case \"i\":\n              return reader.getInt32Array(arrayLength);\n            case \"l\":\n              return reader.getInt64Array(arrayLength);\n          }\n        }\n        const data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength)));\n        const reader2 = new BinaryReader(data.buffer);\n        switch (type) {\n          case \"b\":\n          case \"c\":\n            return reader2.getBooleanArray(arrayLength);\n          case \"d\":\n            return reader2.getFloat64Array(arrayLength);\n          case \"f\":\n            return reader2.getFloat32Array(arrayLength);\n          case \"i\":\n            return reader2.getInt32Array(arrayLength);\n          case \"l\":\n            return reader2.getInt64Array(arrayLength);\n        }\n      default:\n        throw new Error(\"THREE.FBXLoader: Unknown property type \" + type);\n    }\n  }\n}\nclass BinaryReader {\n  constructor(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== void 0 ? littleEndian : true;\n  }\n  getOffset() {\n    return this.offset;\n  }\n  size() {\n    return this.dv.buffer.byteLength;\n  }\n  skip(length) {\n    this.offset += length;\n  }\n  // seems like true/false representation depends on exporter.\n  // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n  // then sees LSB.\n  getBoolean() {\n    return (this.getUint8() & 1) === 1;\n  }\n  getBooleanArray(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getBoolean());\n    }\n    return a;\n  }\n  getUint8() {\n    const value = this.dv.getUint8(this.offset);\n    this.offset += 1;\n    return value;\n  }\n  getInt16() {\n    const value = this.dv.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n  getInt32() {\n    const value = this.dv.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  getInt32Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt32());\n    }\n    return a;\n  }\n  getUint32() {\n    const value = this.dv.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  // JavaScript doesn't support 64-bit integer so calculate this here\n  // 1 << 32 will return 1 so using multiply operation instead here.\n  // There's a possibility that this method returns wrong value if the value\n  // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n  // TODO: safely handle 64-bit integer\n  getInt64() {\n    let low, high;\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n    if (high & 2147483648) {\n      high = ~high & 4294967295;\n      low = ~low & 4294967295;\n      if (low === 4294967295) high = high + 1 & 4294967295;\n      low = low + 1 & 4294967295;\n      return -(high * 4294967296 + low);\n    }\n    return high * 4294967296 + low;\n  }\n  getInt64Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt64());\n    }\n    return a;\n  }\n  // Note: see getInt64() comment\n  getUint64() {\n    let low, high;\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n    return high * 4294967296 + low;\n  }\n  getFloat32() {\n    const value = this.dv.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  getFloat32Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat32());\n    }\n    return a;\n  }\n  getFloat64() {\n    const value = this.dv.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n  getFloat64Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat64());\n    }\n    return a;\n  }\n  getArrayBuffer(size) {\n    const value = this.dv.buffer.slice(this.offset, this.offset + size);\n    this.offset += size;\n    return value;\n  }\n  getString(size) {\n    let a = [];\n    for (let i = 0; i < size; i++) {\n      a[i] = this.getUint8();\n    }\n    const nullByte = a.indexOf(0);\n    if (nullByte >= 0) a = a.slice(0, nullByte);\n    return decodeText(new Uint8Array(a));\n  }\n}\nclass FBXTree {\n  add(key, val) {\n    this[key] = val;\n  }\n}\nfunction isFbxFormatBinary(buffer) {\n  const CORRECT = \"Kaydara FBX Binary  \\0\";\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\nfunction isFbxFormatASCII(text) {\n  const CORRECT = [\"K\", \"a\", \"y\", \"d\", \"a\", \"r\", \"a\", \"\\\\\", \"F\", \"B\", \"X\", \"\\\\\", \"B\", \"i\", \"n\", \"a\", \"r\", \"y\", \"\\\\\", \"\\\\\"];\n  let cursor = 0;\n  function read(offset) {\n    const result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n  for (let i = 0; i < CORRECT.length; ++i) {\n    const num = read(1);\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getFbxVersion(text) {\n  const versionRegExp = /FBXVersion: (\\d+)/;\n  const match = text.match(versionRegExp);\n  if (match) {\n    const version = parseInt(match[1]);\n    return version;\n  }\n  throw new Error(\"THREE.FBXLoader: Cannot find the version number for the file given.\");\n}\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158e3;\n}\nconst dataArray = [];\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  let index;\n  switch (infoObject.mappingType) {\n    case \"ByPolygonVertex\":\n      index = polygonVertexIndex;\n      break;\n    case \"ByPolygon\":\n      index = polygonIndex;\n      break;\n    case \"ByVertice\":\n      index = vertexIndex;\n      break;\n    case \"AllSame\":\n      index = infoObject.indices[0];\n      break;\n    default:\n      console.warn(\"THREE.FBXLoader: unknown attribute mapping type \" + infoObject.mappingType);\n  }\n  if (infoObject.referenceType === \"IndexToDirect\") index = infoObject.indices[index];\n  const from = index * infoObject.dataSize;\n  const to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\nconst tempEuler = new Euler();\nconst tempVec = new Vector3();\nfunction generateTransform(transformData) {\n  const lTranslationM = new Matrix4();\n  const lPreRotationM = new Matrix4();\n  const lRotationM = new Matrix4();\n  const lPostRotationM = new Matrix4();\n  const lScalingM = new Matrix4();\n  const lScalingPivotM = new Matrix4();\n  const lScalingOffsetM = new Matrix4();\n  const lRotationOffsetM = new Matrix4();\n  const lRotationPivotM = new Matrix4();\n  const lParentGX = new Matrix4();\n  const lParentLX = new Matrix4();\n  const lGlobalT = new Matrix4();\n  const inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n  if (transformData.preRotation) {\n    const array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.rotation) {\n    const array = transformData.rotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.postRotation) {\n    const array = transformData.postRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    lPostRotationM.invert();\n  }\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale));\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot));\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n  const lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM);\n  const lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX);\n  const lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  const lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\n  const lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\n  const lLSM = lScalingM;\n  const lGlobalRS = new Matrix4();\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    const lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    const lParentLSM_inv = lParentLSM.clone().invert();\n    const lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n  const lRotationPivotM_inv = lRotationPivotM.clone().invert();\n  const lScalingPivotM_inv = lScalingPivotM.clone().invert();\n  let lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  const lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  const lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = lGlobalT.clone().multiply(lGlobalRS);\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n}\nfunction getEulerOrder(order) {\n  order = order || 0;\n  const enums = [\"ZYX\",\n  // -> XYZ extrinsic\n  \"YZX\",\n  // -> XZY extrinsic\n  \"XZY\",\n  // -> YZX extrinsic\n  \"ZXY\",\n  // -> YXZ extrinsic\n  \"YXZ\",\n  // -> ZXY extrinsic\n  \"XYZ\"\n  // -> ZYX extrinsic\n  //'SphericXYZ', // not possible to support\n  ];\n  if (order === 6) {\n    console.warn(\"THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.\");\n    return enums[0];\n  }\n  return enums[order];\n}\nfunction parseNumberArray(value) {\n  const array = value.split(\",\").map(function (val) {\n    return parseFloat(val);\n  });\n  return array;\n}\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === void 0) from = 0;\n  if (to === void 0) to = buffer.byteLength;\n  return decodeText(new Uint8Array(buffer, from, to));\n}\nfunction append(a, b) {\n  for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\nfunction slice(a, b, from, to) {\n  for (let i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n  return a;\n}\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\nexport { FBXLoader };","map":{"version":3,"sources":["../../src/loaders/FBXLoader.js"],"names":["child","material","skeleton"],"mappings":";;;;;AA8DA,IAAI,OAAA;AACJ,IAAI,WAAA;AACJ,IAAI,UAAA;AAEJ,MAAM,SAAA,SAAkB,MAAA,CAAO;EAC7B,WAAA,CAAY,OAAA,EAAS;IACnB,KAAA,CAAM,OAAO,CAAA;EACd;EAED,IAAA,CAAK,GAAA,EAAK,MAAA,EAAQ,UAAA,EAAY,OAAA,EAAS;IACrC,MAAM,KAAA,GAAQ,IAAA;IAEd,MAAM,IAAA,GAAO,KAAA,CAAM,IAAA,KAAS,EAAA,GAAK,WAAA,CAAY,cAAA,CAAe,GAAG,CAAA,GAAI,KAAA,CAAM,IAAA;IAEzE,MAAM,MAAA,GAAS,IAAI,UAAA,CAAW,IAAA,CAAK,OAAO,CAAA;IAC1C,MAAA,CAAO,OAAA,CAAQ,KAAA,CAAM,IAAI,CAAA;IACzB,MAAA,CAAO,eAAA,CAAgB,aAAa,CAAA;IACpC,MAAA,CAAO,gBAAA,CAAiB,KAAA,CAAM,aAAa,CAAA;IAC3C,MAAA,CAAO,kBAAA,CAAmB,KAAA,CAAM,eAAe,CAAA;IAE/C,MAAA,CAAO,IAAA,CACL,GAAA,EACA,UAAU,MAAA,EAAQ;MAChB,IAAI;QACF,MAAA,CAAO,KAAA,CAAM,KAAA,CAAM,MAAA,EAAQ,IAAI,CAAC,CAAA;MACjC,CAAA,CAAA,OAAQ,CAAA,EAAP;QACA,IAAI,OAAA,EAAS;UACX,OAAA,CAAQ,CAAC,CAAA;QACrB,CAAA,MAAiB;UACL,OAAA,CAAQ,KAAA,CAAM,CAAC,CAAA;QAChB;QAED,KAAA,CAAM,OAAA,CAAQ,SAAA,CAAU,GAAG,CAAA;MAC5B;IACF,CAAA,EACD,UAAA,EACA,OACD,CAAA;EACF;EAED,KAAA,CAAM,SAAA,EAAW,IAAA,EAAM;IACrB,IAAI,iBAAA,CAAkB,SAAS,CAAA,EAAG;MAChC,OAAA,GAAU,IAAI,YAAA,CAAA,CAAA,CAAe,KAAA,CAAM,SAAS,CAAA;IAClD,CAAA,MAAW;MACL,MAAM,OAAA,GAAU,0BAAA,CAA2B,SAAS,CAAA;MAEpD,IAAI,CAAC,gBAAA,CAAiB,OAAO,CAAA,EAAG;QAC9B,MAAM,IAAI,KAAA,CAAM,kCAAkC,CAAA;MACnD;MAED,IAAI,aAAA,CAAc,OAAO,CAAA,GAAI,GAAA,EAAM;QACjC,MAAM,IAAI,KAAA,CAAM,2DAAA,GAA8D,aAAA,CAAc,OAAO,CAAC,CAAA;MACrG;MAED,OAAA,GAAU,IAAI,UAAA,CAAA,CAAA,CAAa,KAAA,CAAM,OAAO,CAAA;IACzC;IAID,MAAM,aAAA,GAAgB,IAAI,aAAA,CAAc,IAAA,CAAK,OAAO,CAAA,CACjD,OAAA,CAAQ,IAAA,CAAK,YAAA,IAAgB,IAAI,CAAA,CACjC,cAAA,CAAe,IAAA,CAAK,WAAW,CAAA;IAElC,OAAO,IAAI,aAAA,CAAc,aAAA,EAAe,IAAA,CAAK,OAAO,CAAA,CAAE,KAAA,CAAM,OAAO,CAAA;EACpE;AACH;AAGA,MAAM,aAAA,CAAc;EAClB,WAAA,CAAY,aAAA,EAAe,OAAA,EAAS;IAClC,IAAA,CAAK,aAAA,GAAgB,aAAA;IACrB,IAAA,CAAK,OAAA,GAAU,OAAA;EAChB;EAED,KAAA,CAAA,EAAQ;IACN,WAAA,GAAc,IAAA,CAAK,gBAAA,CAAkB,CAAA;IAErC,MAAM,MAAA,GAAS,IAAA,CAAK,WAAA,CAAa,CAAA;IACjC,MAAM,QAAA,GAAW,IAAA,CAAK,aAAA,CAAc,MAAM,CAAA;IAC1C,MAAM,SAAA,GAAY,IAAA,CAAK,cAAA,CAAe,QAAQ,CAAA;IAC9C,MAAM,SAAA,GAAY,IAAA,CAAK,cAAA,CAAgB,CAAA;IACvC,MAAM,WAAA,GAAc,IAAI,cAAA,CAAA,CAAA,CAAiB,KAAA,CAAM,SAAS,CAAA;IAExD,IAAA,CAAK,UAAA,CAAW,SAAA,EAAW,WAAA,EAAa,SAAS,CAAA;IAEjD,OAAO,UAAA;EACR;EAAA;EAAA;EAID,gBAAA,CAAA,EAAmB;IACjB,MAAM,aAAA,GAAgB,eAAA,IAAI,GAAA,CAAK,CAAA;IAE/B,IAAI,aAAA,IAAiB,OAAA,EAAS;MAC5B,MAAM,cAAA,GAAiB,OAAA,CAAQ,WAAA,CAAY,WAAA;MAE3C,cAAA,CAAe,OAAA,CAAQ,UAAU,aAAA,EAAe;QAC9C,MAAM,MAAA,GAAS,aAAA,CAAc,CAAC,CAAA;QAC9B,MAAM,IAAA,GAAO,aAAA,CAAc,CAAC,CAAA;QAC5B,MAAM,YAAA,GAAe,aAAA,CAAc,CAAC,CAAA;QAEpC,IAAI,CAAC,aAAA,CAAc,GAAA,CAAI,MAAM,CAAA,EAAG;UAC9B,aAAA,CAAc,GAAA,CAAI,MAAA,EAAQ;YACxB,OAAA,EAAS,EAAE;YACX,QAAA,EAAU;UACtB,CAAW,CAAA;QACF;QAED,MAAM,kBAAA,GAAqB;UAAE,EAAA,EAAI,IAAA;UAAM;QAA4B,CAAA;QACnE,aAAA,CAAc,GAAA,CAAI,MAAM,CAAA,CAAE,OAAA,CAAQ,IAAA,CAAK,kBAAkB,CAAA;QAEzD,IAAI,CAAC,aAAA,CAAc,GAAA,CAAI,IAAI,CAAA,EAAG;UAC5B,aAAA,CAAc,GAAA,CAAI,IAAA,EAAM;YACtB,OAAA,EAAS,EAAE;YACX,QAAA,EAAU;UACtB,CAAW,CAAA;QACF;QAED,MAAM,iBAAA,GAAoB;UAAE,EAAA,EAAI,MAAA;UAAQ;QAA4B,CAAA;QACpE,aAAA,CAAc,GAAA,CAAI,IAAI,CAAA,CAAE,QAAA,CAAS,IAAA,CAAK,iBAAiB,CAAA;MAC/D,CAAO,CAAA;IACF;IAED,OAAO,aAAA;EACR;EAAA;EAAA;EAAA;EAKD,WAAA,CAAA,EAAc;IACZ,MAAM,MAAA,GAAS,CAAE,CAAA;IACjB,MAAM,KAAA,GAAQ,CAAE,CAAA;IAEhB,IAAI,OAAA,IAAW,OAAA,CAAQ,OAAA,EAAS;MAC9B,MAAM,UAAA,GAAa,OAAA,CAAQ,OAAA,CAAQ,KAAA;MAEnC,KAAA,MAAW,MAAA,IAAU,UAAA,EAAY;QAC/B,MAAM,SAAA,GAAY,UAAA,CAAW,MAAM,CAAA;QAEnC,MAAM,EAAA,GAAK,QAAA,CAAS,MAAM,CAAA;QAE1B,MAAA,CAAO,EAAE,CAAA,GAAI,SAAA,CAAU,gBAAA,IAAoB,SAAA,CAAU,QAAA;QAGrD,IAAI,SAAA,IAAa,SAAA,EAAW;UAC1B,MAAM,kBAAA,GAAqB,SAAA,CAAU,OAAA,YAAmB,WAAA,IAAe,SAAA,CAAU,OAAA,CAAQ,UAAA,GAAa,CAAA;UACtG,MAAM,aAAA,GAAgB,OAAO,SAAA,CAAU,OAAA,KAAY,QAAA,IAAY,SAAA,CAAU,OAAA,KAAY,EAAA;UAErF,IAAI,kBAAA,IAAsB,aAAA,EAAe;YACvC,MAAM,KAAA,GAAQ,IAAA,CAAK,UAAA,CAAW,UAAA,CAAW,MAAM,CAAC,CAAA;YAEhD,KAAA,CAAM,SAAA,CAAU,gBAAA,IAAoB,SAAA,CAAU,QAAQ,CAAA,GAAI,KAAA;UAC3D;QACF;MACF;IACF;IAED,KAAA,MAAW,EAAA,IAAM,MAAA,EAAQ;MACvB,MAAM,QAAA,GAAW,MAAA,CAAO,EAAE,CAAA;MAE1B,IAAI,KAAA,CAAM,QAAQ,CAAA,KAAM,KAAA,CAAA,EAAW,MAAA,CAAO,EAAE,CAAA,GAAI,KAAA,CAAM,QAAQ,CAAA,CAAA,KACzD,MAAA,CAAO,EAAE,CAAA,GAAI,MAAA,CAAO,EAAE,CAAA,CAAE,KAAA,CAAM,IAAI,CAAA,CAAE,GAAA,CAAK,CAAA;IAC/C;IAED,OAAO,MAAA;EACR;EAAA;EAGD,UAAA,CAAW,SAAA,EAAW;IACpB,MAAM,OAAA,GAAU,SAAA,CAAU,OAAA;IAC1B,MAAM,QAAA,GAAW,SAAA,CAAU,gBAAA,IAAoB,SAAA,CAAU,QAAA;IACzD,MAAM,SAAA,GAAY,QAAA,CAAS,KAAA,CAAM,QAAA,CAAS,WAAA,CAAY,GAAG,CAAA,GAAI,CAAC,CAAA,CAAE,WAAA,CAAa,CAAA;IAE7E,IAAI,IAAA;IAEJ,QAAQ,SAAA;MACN,KAAK,KAAA;QACH,IAAA,GAAO,WAAA;QACP;MAEF,KAAK,KAAA;MACL,KAAK,MAAA;QACH,IAAA,GAAO,YAAA;QACP;MAEF,KAAK,KAAA;QACH,IAAA,GAAO,WAAA;QACP;MAEF,KAAK,KAAA;QACH,IAAA,GAAO,YAAA;QACP;MAEF,KAAK,KAAA;QACH,IAAI,IAAA,CAAK,OAAA,CAAQ,UAAA,CAAW,MAAM,CAAA,KAAM,IAAA,EAAM;UAC5C,OAAA,CAAQ,IAAA,CAAK,4CAAA,EAA8C,QAAQ,CAAA;QACpE;QAED,IAAA,GAAO,WAAA;QACP;MAEF;QACE,OAAA,CAAQ,IAAA,CAAK,yBAAA,GAA4B,SAAA,GAAY,qBAAqB,CAAA;QAC1E;IACH;IAED,IAAI,OAAO,OAAA,KAAY,QAAA,EAAU;MAG/B,OAAO,OAAA,GAAU,IAAA,GAAO,UAAA,GAAa,OAAA;IAC3C,CAAA,MAAW;MAGL,MAAM,KAAA,GAAQ,IAAI,UAAA,CAAW,OAAO,CAAA;MACpC,OAAO,MAAA,CAAO,GAAA,CAAI,eAAA,CAAgB,IAAI,IAAA,CAAK,CAAC,KAAK,CAAA,EAAG;QAAE;MAAU,CAAE,CAAC,CAAA;IACpE;EACF;EAAA;EAAA;EAAA;EAKD,aAAA,CAAc,MAAA,EAAQ;IACpB,MAAM,UAAA,GAAa,eAAA,IAAI,GAAA,CAAK,CAAA;IAE5B,IAAI,SAAA,IAAa,OAAA,CAAQ,OAAA,EAAS;MAChC,MAAM,YAAA,GAAe,OAAA,CAAQ,OAAA,CAAQ,OAAA;MACrC,KAAA,MAAW,MAAA,IAAU,YAAA,EAAc;QACjC,MAAM,OAAA,GAAU,IAAA,CAAK,YAAA,CAAa,YAAA,CAAa,MAAM,CAAA,EAAG,MAAM,CAAA;QAC9D,UAAA,CAAW,GAAA,CAAI,QAAA,CAAS,MAAM,CAAA,EAAG,OAAO,CAAA;MACzC;IACF;IAED,OAAO,UAAA;EACR;EAAA;EAGD,YAAA,CAAa,WAAA,EAAa,MAAA,EAAQ;IAChC,MAAM,OAAA,GAAU,IAAA,CAAK,WAAA,CAAY,WAAA,EAAa,MAAM,CAAA;IAEpD,OAAA,CAAQ,EAAA,GAAK,WAAA,CAAY,EAAA;IAEzB,OAAA,CAAQ,IAAA,GAAO,WAAA,CAAY,QAAA;IAE3B,MAAM,SAAA,GAAY,WAAA,CAAY,SAAA;IAC9B,MAAM,SAAA,GAAY,WAAA,CAAY,SAAA;IAE9B,MAAM,MAAA,GAAS,SAAA,KAAc,KAAA,CAAA,GAAY,SAAA,CAAU,KAAA,GAAQ,CAAA;IAC3D,MAAM,MAAA,GAAS,SAAA,KAAc,KAAA,CAAA,GAAY,SAAA,CAAU,KAAA,GAAQ,CAAA;IAK3D,OAAA,CAAQ,KAAA,GAAQ,MAAA,KAAW,CAAA,GAAI,cAAA,GAAiB,mBAAA;IAChD,OAAA,CAAQ,KAAA,GAAQ,MAAA,KAAW,CAAA,GAAI,cAAA,GAAiB,mBAAA;IAEhD,IAAI,SAAA,IAAa,WAAA,EAAa;MAC5B,MAAM,MAAA,GAAS,WAAA,CAAY,OAAA,CAAQ,KAAA;MAEnC,OAAA,CAAQ,MAAA,CAAO,CAAA,GAAI,MAAA,CAAO,CAAC,CAAA;MAC3B,OAAA,CAAQ,MAAA,CAAO,CAAA,GAAI,MAAA,CAAO,CAAC,CAAA;IAC5B;IAED,OAAO,OAAA;EACR;EAAA;EAGD,WAAA,CAAY,WAAA,EAAa,MAAA,EAAQ;IAC/B,IAAI,QAAA;IAEJ,MAAM,WAAA,GAAc,IAAA,CAAK,aAAA,CAAc,IAAA;IAEvC,MAAM,QAAA,GAAW,WAAA,CAAY,GAAA,CAAI,WAAA,CAAY,EAAE,CAAA,CAAE,QAAA;IAEjD,IAAI,QAAA,KAAa,KAAA,CAAA,IAAa,QAAA,CAAS,MAAA,GAAS,CAAA,IAAK,MAAA,CAAO,QAAA,CAAS,CAAC,CAAA,CAAE,EAAE,CAAA,KAAM,KAAA,CAAA,EAAW;MACzF,QAAA,GAAW,MAAA,CAAO,QAAA,CAAS,CAAC,CAAA,CAAE,EAAE,CAAA;MAEhC,IAAI,QAAA,CAAS,OAAA,CAAQ,OAAO,CAAA,KAAM,CAAA,IAAK,QAAA,CAAS,OAAA,CAAQ,OAAO,CAAA,KAAM,CAAA,EAAG;QACtE,IAAA,CAAK,aAAA,CAAc,OAAA,CAAQ,KAAA,CAAS,CAAA;MACrC;IACF;IAED,IAAI,OAAA;IAEJ,MAAM,SAAA,GAAY,WAAA,CAAY,QAAA,CAAS,KAAA,CAAM,CAAA,CAAE,CAAA,CAAE,WAAA,CAAa,CAAA;IAE9D,IAAI,SAAA,KAAc,KAAA,EAAO;MACvB,MAAM,MAAA,GAAS,IAAA,CAAK,OAAA,CAAQ,UAAA,CAAW,MAAM,CAAA;MAE7C,IAAI,MAAA,KAAW,IAAA,EAAM;QACnB,OAAA,CAAQ,IAAA,CAAK,mEAAA,EAAqE,WAAA,CAAY,gBAAgB,CAAA;QAC9G,OAAA,GAAU,IAAI,OAAA,CAAS,CAAA;MAC/B,CAAA,MAAa;QACL,MAAA,CAAO,OAAA,CAAQ,IAAA,CAAK,aAAA,CAAc,IAAI,CAAA;QACtC,OAAA,GAAU,MAAA,CAAO,IAAA,CAAK,QAAQ,CAAA;MAC/B;IACP,CAAA,MAAA,IAAe,SAAA,KAAc,KAAA,EAAO;MAC9B,OAAA,CAAQ,IAAA,CACN,6EAAA,EACA,WAAA,CAAY,gBACb,CAAA;MACD,OAAA,GAAU,IAAI,OAAA,CAAS,CAAA;IAC7B,CAAA,MAAW;MACL,OAAA,GAAU,IAAA,CAAK,aAAA,CAAc,IAAA,CAAK,QAAQ,CAAA;IAC3C;IAED,IAAA,CAAK,aAAA,CAAc,OAAA,CAAQ,WAAW,CAAA;IAEtC,OAAO,OAAA;EACR;EAAA;EAGD,cAAA,CAAe,UAAA,EAAY;IACzB,MAAM,WAAA,GAAc,eAAA,IAAI,GAAA,CAAK,CAAA;IAE7B,IAAI,UAAA,IAAc,OAAA,CAAQ,OAAA,EAAS;MACjC,MAAM,aAAA,GAAgB,OAAA,CAAQ,OAAA,CAAQ,QAAA;MAEtC,KAAA,MAAW,MAAA,IAAU,aAAA,EAAe;QAClC,MAAM,QAAA,GAAW,IAAA,CAAK,aAAA,CAAc,aAAA,CAAc,MAAM,CAAA,EAAG,UAAU,CAAA;QAErE,IAAI,QAAA,KAAa,IAAA,EAAM,WAAA,CAAY,GAAA,CAAI,QAAA,CAAS,MAAM,CAAA,EAAG,QAAQ,CAAA;MAClE;IACF;IAED,OAAO,WAAA;EACR;EAAA;EAAA;EAAA;EAKD,aAAA,CAAc,YAAA,EAAc,UAAA,EAAY;IACtC,MAAM,EAAA,GAAK,YAAA,CAAa,EAAA;IACxB,MAAM,IAAA,GAAO,YAAA,CAAa,QAAA;IAC1B,IAAI,IAAA,GAAO,YAAA,CAAa,YAAA;IAGxB,IAAI,OAAO,IAAA,KAAS,QAAA,EAAU;MAC5B,IAAA,GAAO,IAAA,CAAK,KAAA;IACb;IAGD,IAAI,CAAC,WAAA,CAAY,GAAA,CAAI,EAAE,CAAA,EAAG,OAAO,IAAA;IAEjC,MAAM,UAAA,GAAa,IAAA,CAAK,eAAA,CAAgB,YAAA,EAAc,UAAA,EAAY,EAAE,CAAA;IAEpE,IAAI,QAAA;IAEJ,QAAQ,IAAA,CAAK,WAAA,CAAa,CAAA;MACxB,KAAK,OAAA;QACH,QAAA,GAAW,IAAI,iBAAA,CAAmB,CAAA;QAClC;MACF,KAAK,SAAA;QACH,QAAA,GAAW,IAAI,mBAAA,CAAqB,CAAA;QACpC;MACF;QACE,OAAA,CAAQ,IAAA,CAAK,+EAAA,EAAiF,IAAI,CAAA;QAClG,QAAA,GAAW,IAAI,iBAAA,CAAmB,CAAA;QAClC;IACH;IAED,QAAA,CAAS,SAAA,CAAU,UAAU,CAAA;IAC7B,QAAA,CAAS,IAAA,GAAO,IAAA;IAEhB,OAAO,QAAA;EACR;EAAA;EAAA;EAID,eAAA,CAAgB,YAAA,EAAc,UAAA,EAAY,EAAA,EAAI;IAC5C,MAAM,UAAA,GAAa,CAAE,CAAA;IAErB,IAAI,YAAA,CAAa,UAAA,EAAY;MAC3B,UAAA,CAAW,SAAA,GAAY,YAAA,CAAa,UAAA,CAAW,KAAA;IAChD;IAED,IAAI,YAAA,CAAa,OAAA,EAAS;MACxB,UAAA,CAAW,KAAA,GAAQ,IAAI,KAAA,CAAK,CAAA,CAAG,SAAA,CAAU,YAAA,CAAa,OAAA,CAAQ,KAAK,CAAA;IACzE,CAAA,MAAA,IACM,YAAA,CAAa,YAAA,KACZ,YAAA,CAAa,YAAA,CAAa,IAAA,KAAS,OAAA,IAAW,YAAA,CAAa,YAAA,CAAa,IAAA,KAAS,UAAA,CAAA,EAClF;MAEA,UAAA,CAAW,KAAA,GAAQ,IAAI,KAAA,CAAK,CAAA,CAAG,SAAA,CAAU,YAAA,CAAa,YAAA,CAAa,KAAK,CAAA;IACzE;IAED,IAAI,YAAA,CAAa,kBAAA,EAAoB;MACnC,UAAA,CAAW,iBAAA,GAAoB,YAAA,CAAa,kBAAA,CAAmB,KAAA;IAChE;IAED,IAAI,YAAA,CAAa,QAAA,EAAU;MACzB,UAAA,CAAW,QAAA,GAAW,IAAI,KAAA,CAAK,CAAA,CAAG,SAAA,CAAU,YAAA,CAAa,QAAA,CAAS,KAAK,CAAA;IAC7E,CAAA,MAAA,IACM,YAAA,CAAa,aAAA,KACZ,YAAA,CAAa,aAAA,CAAc,IAAA,KAAS,OAAA,IAAW,YAAA,CAAa,aAAA,CAAc,IAAA,KAAS,UAAA,CAAA,EACpF;MAEA,UAAA,CAAW,QAAA,GAAW,IAAI,KAAA,CAAK,CAAA,CAAG,SAAA,CAAU,YAAA,CAAa,aAAA,CAAc,KAAK,CAAA;IAC7E;IAED,IAAI,YAAA,CAAa,cAAA,EAAgB;MAC/B,UAAA,CAAW,iBAAA,GAAoB,UAAA,CAAW,YAAA,CAAa,cAAA,CAAe,KAAK,CAAA;IAC5E;IAED,IAAI,YAAA,CAAa,OAAA,EAAS;MACxB,UAAA,CAAW,OAAA,GAAU,UAAA,CAAW,YAAA,CAAa,OAAA,CAAQ,KAAK,CAAA;IAC3D;IAED,IAAI,UAAA,CAAW,OAAA,GAAU,CAAA,EAAK;MAC5B,UAAA,CAAW,WAAA,GAAc,IAAA;IAC1B;IAED,IAAI,YAAA,CAAa,gBAAA,EAAkB;MACjC,UAAA,CAAW,YAAA,GAAe,YAAA,CAAa,gBAAA,CAAiB,KAAA;IACzD;IAED,IAAI,YAAA,CAAa,SAAA,EAAW;MAC1B,UAAA,CAAW,SAAA,GAAY,YAAA,CAAa,SAAA,CAAU,KAAA;IAC/C;IAED,IAAI,YAAA,CAAa,QAAA,EAAU;MACzB,UAAA,CAAW,QAAA,GAAW,IAAI,KAAA,CAAK,CAAA,CAAG,SAAA,CAAU,YAAA,CAAa,QAAA,CAAS,KAAK,CAAA;IAC7E,CAAA,MAAA,IAAe,YAAA,CAAa,aAAA,IAAiB,YAAA,CAAa,aAAA,CAAc,IAAA,KAAS,OAAA,EAAS;MAEpF,UAAA,CAAW,QAAA,GAAW,IAAI,KAAA,CAAK,CAAA,CAAG,SAAA,CAAU,YAAA,CAAa,aAAA,CAAc,KAAK,CAAA;IAC7E;IAED,MAAM,KAAA,GAAQ,IAAA;IACd,WAAA,CAAY,GAAA,CAAI,EAAE,CAAA,CAAE,QAAA,CAAS,OAAA,CAAQ,UAAU,KAAA,EAAO;MACpD,MAAM,IAAA,GAAO,KAAA,CAAM,YAAA;MAEnB,QAAQ,IAAA;QACN,KAAK,MAAA;UACH,UAAA,CAAW,OAAA,GAAU,KAAA,CAAM,UAAA,CAAW,UAAA,EAAY,KAAA,CAAM,EAAE,CAAA;UAC1D;QAEF,KAAK,iBAAA;UACH,UAAA,CAAW,KAAA,GAAQ,KAAA,CAAM,UAAA,CAAW,UAAA,EAAY,KAAA,CAAM,EAAE,CAAA;UACxD;QAEF,KAAK,cAAA;QACL,KAAK,oBAAA;UACH,UAAA,CAAW,GAAA,GAAM,KAAA,CAAM,UAAA,CAAW,UAAA,EAAY,KAAA,CAAM,EAAE,CAAA;UACtD,IAAI,UAAA,CAAW,GAAA,KAAQ,KAAA,CAAA,EAAW;YAChC,IAAI,YAAA,IAAgB,UAAA,CAAW,GAAA,EAAK,UAAA,CAAW,GAAA,CAAI,UAAA,GAAa,MAAA,CAAA,KAC3D,UAAA,CAAW,GAAA,CAAI,QAAA,GAAW,IAAA;UAChC;UAED;QAEF,KAAK,mBAAA;UACH,UAAA,CAAW,eAAA,GAAkB,KAAA,CAAM,UAAA,CAAW,UAAA,EAAY,KAAA,CAAM,EAAE,CAAA;UAClE;QAEF,KAAK,eAAA;UACH,UAAA,CAAW,WAAA,GAAc,KAAA,CAAM,UAAA,CAAW,UAAA,EAAY,KAAA,CAAM,EAAE,CAAA;UAC9D,IAAI,UAAA,CAAW,WAAA,KAAgB,KAAA,CAAA,EAAW;YACxC,IAAI,YAAA,IAAgB,UAAA,CAAW,WAAA,EAAa,UAAA,CAAW,WAAA,CAAY,UAAA,GAAa,MAAA,CAAA,KAC3E,UAAA,CAAW,WAAA,CAAY,QAAA,GAAW,IAAA;UACxC;UAED;QAEF,KAAK,WAAA;QACL,KAAK,qBAAA;UACH,UAAA,CAAW,SAAA,GAAY,KAAA,CAAM,UAAA,CAAW,UAAA,EAAY,KAAA,CAAM,EAAE,CAAA;UAC5D;QAEF,KAAK,iBAAA;UACH,UAAA,CAAW,MAAA,GAAS,KAAA,CAAM,UAAA,CAAW,UAAA,EAAY,KAAA,CAAM,EAAE,CAAA;UACzD,IAAI,UAAA,CAAW,MAAA,KAAW,KAAA,CAAA,EAAW;YACnC,UAAA,CAAW,MAAA,CAAO,OAAA,GAAU,gCAAA;YAE5B,IAAI,YAAA,IAAgB,UAAA,CAAW,MAAA,EAAQ,UAAA,CAAW,MAAA,CAAO,UAAA,GAAa,MAAA,CAAA,KACjE,UAAA,CAAW,MAAA,CAAO,QAAA,GAAW,IAAA;UACnC;UAED;QAEF,KAAK,eAAA;UACH,UAAA,CAAW,WAAA,GAAc,KAAA,CAAM,UAAA,CAAW,UAAA,EAAY,KAAA,CAAM,EAAE,CAAA;UAC9D,IAAI,UAAA,CAAW,WAAA,KAAgB,KAAA,CAAA,EAAW;YACxC,IAAI,YAAA,IAAgB,UAAA,CAAW,WAAA,EAAa,UAAA,CAAW,WAAA,CAAY,UAAA,GAAa,MAAA,CAAA,KAC3E,UAAA,CAAW,WAAA,CAAY,QAAA,GAAW,IAAA;UACxC;UAED;QAEF,KAAK,kBAAA;QACL,KAAK,oBAAA;UACH,UAAA,CAAW,QAAA,GAAW,KAAA,CAAM,UAAA,CAAW,UAAA,EAAY,KAAA,CAAM,EAAE,CAAA;UAC3D,UAAA,CAAW,WAAA,GAAc,IAAA;UACzB;QAEF,KAAK,cAAA;QACL,KAAK,mBAAA;QACL,KAAK,gBAAA;QACL,KAAK,yBAAA;QACL;UACE,OAAA,CAAQ,IAAA,CAAK,yEAAA,EAA2E,IAAI,CAAA;UAC5F;MACH;IACP,CAAK,CAAA;IAED,OAAO,UAAA;EACR;EAAA;EAGD,UAAA,CAAW,UAAA,EAAY,EAAA,EAAI;IAEzB,IAAI,gBAAA,IAAoB,OAAA,CAAQ,OAAA,IAAW,EAAA,IAAM,OAAA,CAAQ,OAAA,CAAQ,cAAA,EAAgB;MAC/E,OAAA,CAAQ,IAAA,CAAK,kGAAkG,CAAA;MAC/G,EAAA,GAAK,WAAA,CAAY,GAAA,CAAI,EAAE,CAAA,CAAE,QAAA,CAAS,CAAC,CAAA,CAAE,EAAA;IACtC;IAED,OAAO,UAAA,CAAW,GAAA,CAAI,EAAE,CAAA;EACzB;EAAA;EAAA;EAAA;EAKD,cAAA,CAAA,EAAiB;IACf,MAAM,SAAA,GAAY,CAAE,CAAA;IACpB,MAAM,YAAA,GAAe,CAAE,CAAA;IAEvB,IAAI,UAAA,IAAc,OAAA,CAAQ,OAAA,EAAS;MACjC,MAAM,aAAA,GAAgB,OAAA,CAAQ,OAAA,CAAQ,QAAA;MAEtC,KAAA,MAAW,MAAA,IAAU,aAAA,EAAe;QAClC,MAAM,YAAA,GAAe,aAAA,CAAc,MAAM,CAAA;QAEzC,MAAM,aAAA,GAAgB,WAAA,CAAY,GAAA,CAAI,QAAA,CAAS,MAAM,CAAC,CAAA;QAEtD,IAAI,YAAA,CAAa,QAAA,KAAa,MAAA,EAAQ;UACpC,MAAM,QAAA,GAAW,IAAA,CAAK,aAAA,CAAc,aAAA,EAAe,aAAa,CAAA;UAChE,QAAA,CAAS,EAAA,GAAK,MAAA;UAEd,IAAI,aAAA,CAAc,OAAA,CAAQ,MAAA,GAAS,CAAA,EAAG;YACpC,OAAA,CAAQ,IAAA,CAAK,gFAAgF,CAAA;UAC9F;UACD,QAAA,CAAS,UAAA,GAAa,aAAA,CAAc,OAAA,CAAQ,CAAC,CAAA,CAAE,EAAA;UAE/C,SAAA,CAAU,MAAM,CAAA,GAAI,QAAA;QAC9B,CAAA,MAAA,IAAmB,YAAA,CAAa,QAAA,KAAa,YAAA,EAAc;UACjD,MAAM,WAAA,GAAc;YAClB,EAAA,EAAI;UACL,CAAA;UAED,WAAA,CAAY,UAAA,GAAa,IAAA,CAAK,iBAAA,CAAkB,aAAA,EAAe,aAAa,CAAA;UAC5E,WAAA,CAAY,EAAA,GAAK,MAAA;UAEjB,IAAI,aAAA,CAAc,OAAA,CAAQ,MAAA,GAAS,CAAA,EAAG;YACpC,OAAA,CAAQ,IAAA,CAAK,oFAAoF,CAAA;UAClG;UAED,YAAA,CAAa,MAAM,CAAA,GAAI,WAAA;QACxB;MACF;IACF;IAED,OAAO;MACL,SAAA;MACA;IACD,CAAA;EACF;EAAA;EAAA;EAAA;EAKD,aAAA,CAAc,aAAA,EAAe,aAAA,EAAe;IAC1C,MAAM,QAAA,GAAW,EAAE;IAEnB,aAAA,CAAc,QAAA,CAAS,OAAA,CAAQ,UAAU,KAAA,EAAO;MAC9C,MAAM,QAAA,GAAW,aAAA,CAAc,KAAA,CAAM,EAAE,CAAA;MAEvC,IAAI,QAAA,CAAS,QAAA,KAAa,SAAA,EAAW;MAErC,MAAM,OAAA,GAAU;QACd,EAAA,EAAI,KAAA,CAAM,EAAA;QACV,OAAA,EAAS,EAAE;QACX,OAAA,EAAS,EAAE;QACX,aAAA,EAAe,IAAI,OAAA,CAAS,CAAA,CAAC,SAAA,CAAU,QAAA,CAAS,aAAA,CAAc,CAAC;QAAA;QAAA;MAGhE,CAAA;MAED,IAAI,SAAA,IAAa,QAAA,EAAU;QACzB,OAAA,CAAQ,OAAA,GAAU,QAAA,CAAS,OAAA,CAAQ,CAAA;QACnC,OAAA,CAAQ,OAAA,GAAU,QAAA,CAAS,OAAA,CAAQ,CAAA;MACpC;MAED,QAAA,CAAS,IAAA,CAAK,OAAO,CAAA;IAC3B,CAAK,CAAA;IAED,OAAO;MACL,QAAA;MACA,KAAA,EAAO;IACR,CAAA;EACF;EAAA;EAGD,iBAAA,CAAkB,aAAA,EAAe,aAAA,EAAe;IAC9C,MAAM,eAAA,GAAkB,EAAE;IAE1B,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,aAAA,CAAc,QAAA,CAAS,MAAA,EAAQ,CAAA,EAAA,EAAK;MACtD,MAAM,KAAA,GAAQ,aAAA,CAAc,QAAA,CAAS,CAAC,CAAA;MAEtC,MAAM,eAAA,GAAkB,aAAA,CAAc,KAAA,CAAM,EAAE,CAAA;MAE9C,MAAM,cAAA,GAAiB;QACrB,IAAA,EAAM,eAAA,CAAgB,QAAA;QACtB,aAAA,EAAe,eAAA,CAAgB,aAAA;QAC/B,EAAA,EAAI,eAAA,CAAgB,EAAA;QACpB,WAAA,EAAa,eAAA,CAAgB,WAAA,CAAY;MAC1C,CAAA;MAED,IAAI,eAAA,CAAgB,QAAA,KAAa,mBAAA,EAAqB;MAEtD,cAAA,CAAe,KAAA,GAAQ,WAAA,CAAY,GAAA,CAAI,QAAA,CAAS,KAAA,CAAM,EAAE,CAAC,CAAA,CAAE,QAAA,CAAS,MAAA,CAAO,UAAUA,MAAAA,EAAO;QAC1F,OAAOA,MAAAA,CAAM,YAAA,KAAiB,KAAA,CAAA;MACtC,CAAO,CAAA,CAAE,CAAC,CAAA,CAAE,EAAA;MAEN,eAAA,CAAgB,IAAA,CAAK,cAAc,CAAA;IACpC;IAED,OAAO,eAAA;EACR;EAAA;EAGD,UAAA,CAAW,SAAA,EAAW,WAAA,EAAa,WAAA,EAAa;IAC9C,UAAA,GAAa,IAAI,KAAA,CAAO,CAAA;IAExB,MAAM,QAAA,GAAW,IAAA,CAAK,WAAA,CAAY,SAAA,CAAU,SAAA,EAAW,WAAA,EAAa,WAAW,CAAA;IAE/E,MAAM,UAAA,GAAa,OAAA,CAAQ,OAAA,CAAQ,KAAA;IAEnC,MAAM,KAAA,GAAQ,IAAA;IACd,QAAA,CAAS,OAAA,CAAQ,UAAU,KAAA,EAAO;MAChC,MAAM,SAAA,GAAY,UAAA,CAAW,KAAA,CAAM,EAAE,CAAA;MACrC,KAAA,CAAM,mBAAA,CAAoB,KAAA,EAAO,SAAS,CAAA;MAE1C,MAAM,iBAAA,GAAoB,WAAA,CAAY,GAAA,CAAI,KAAA,CAAM,EAAE,CAAA,CAAE,OAAA;MAEpD,iBAAA,CAAkB,OAAA,CAAQ,UAAU,UAAA,EAAY;QAC9C,MAAM,MAAA,GAAS,QAAA,CAAS,GAAA,CAAI,UAAA,CAAW,EAAE,CAAA;QACzC,IAAI,MAAA,KAAW,KAAA,CAAA,EAAW,MAAA,CAAO,GAAA,CAAI,KAAK,CAAA;MAClD,CAAO,CAAA;MAED,IAAI,KAAA,CAAM,MAAA,KAAW,IAAA,EAAM;QACzB,UAAA,CAAW,GAAA,CAAI,KAAK,CAAA;MACrB;IACP,CAAK,CAAA;IAED,IAAA,CAAK,YAAA,CAAa,SAAA,CAAU,SAAA,EAAW,WAAA,EAAa,QAAQ,CAAA;IAE5D,IAAA,CAAK,kBAAA,CAAoB,CAAA;IAEzB,UAAA,CAAW,QAAA,CAAS,UAAU,IAAA,EAAM;MAClC,IAAI,IAAA,CAAK,QAAA,CAAS,aAAA,EAAe;QAC/B,IAAI,IAAA,CAAK,MAAA,EAAQ;UACf,IAAA,CAAK,QAAA,CAAS,aAAA,CAAc,YAAA,GAAe,IAAA,CAAK,MAAA,CAAO,MAAA;UACvD,IAAA,CAAK,QAAA,CAAS,aAAA,CAAc,iBAAA,GAAoB,IAAA,CAAK,MAAA,CAAO,WAAA;QAC7D;QAED,MAAM,SAAA,GAAY,iBAAA,CAAkB,IAAA,CAAK,QAAA,CAAS,aAAa,CAAA;QAE/D,IAAA,CAAK,YAAA,CAAa,SAAS,CAAA;QAC3B,IAAA,CAAK,iBAAA,CAAmB,CAAA;MACzB;IACP,CAAK,CAAA;IAED,MAAM,UAAA,GAAa,IAAI,eAAA,CAAiB,CAAA,CAAC,KAAA,CAAO,CAAA;IAGhD,IAAI,UAAA,CAAW,QAAA,CAAS,MAAA,KAAW,CAAA,IAAK,UAAA,CAAW,QAAA,CAAS,CAAC,CAAA,CAAE,OAAA,EAAS;MACtE,UAAA,CAAW,QAAA,CAAS,CAAC,CAAA,CAAE,UAAA,GAAa,UAAA;MACpC,UAAA,GAAa,UAAA,CAAW,QAAA,CAAS,CAAC,CAAA;IACnC;IAED,UAAA,CAAW,UAAA,GAAa,UAAA;EACzB;EAAA;EAGD,WAAA,CAAY,SAAA,EAAW,WAAA,EAAa,WAAA,EAAa;IAC/C,MAAM,QAAA,GAAW,eAAA,IAAI,GAAA,CAAK,CAAA;IAC1B,MAAM,UAAA,GAAa,OAAA,CAAQ,OAAA,CAAQ,KAAA;IAEnC,KAAA,MAAW,MAAA,IAAU,UAAA,EAAY;MAC/B,MAAM,EAAA,GAAK,QAAA,CAAS,MAAM,CAAA;MAC1B,MAAM,IAAA,GAAO,UAAA,CAAW,MAAM,CAAA;MAC9B,MAAM,aAAA,GAAgB,WAAA,CAAY,GAAA,CAAI,EAAE,CAAA;MAExC,IAAI,KAAA,GAAQ,IAAA,CAAK,aAAA,CAAc,aAAA,EAAe,SAAA,EAAW,EAAA,EAAI,IAAA,CAAK,QAAQ,CAAA;MAE1E,IAAI,CAAC,KAAA,EAAO;QACV,QAAQ,IAAA,CAAK,QAAA;UACX,KAAK,QAAA;YACH,KAAA,GAAQ,IAAA,CAAK,YAAA,CAAa,aAAa,CAAA;YACvC;UACF,KAAK,OAAA;YACH,KAAA,GAAQ,IAAA,CAAK,WAAA,CAAY,aAAa,CAAA;YACtC;UACF,KAAK,MAAA;YACH,KAAA,GAAQ,IAAA,CAAK,UAAA,CAAW,aAAA,EAAe,WAAA,EAAa,WAAW,CAAA;YAC/D;UACF,KAAK,YAAA;YACH,KAAA,GAAQ,IAAA,CAAK,WAAA,CAAY,aAAA,EAAe,WAAW,CAAA;YACnD;UACF,KAAK,UAAA;UACL,KAAK,MAAA;YACH,KAAA,GAAQ,IAAI,IAAA,CAAM,CAAA;YAClB;UACF,KAAK,MAAA;UACL;YACE,KAAA,GAAQ,IAAI,KAAA,CAAO,CAAA;YACnB;QACH;QAED,KAAA,CAAM,IAAA,GAAO,IAAA,CAAK,QAAA,GAAW,eAAA,CAAgB,gBAAA,CAAiB,IAAA,CAAK,QAAQ,CAAA,GAAI,EAAA;QAE/E,KAAA,CAAM,EAAA,GAAK,EAAA;MACZ;MAED,IAAA,CAAK,gBAAA,CAAiB,KAAA,EAAO,IAAI,CAAA;MACjC,QAAA,CAAS,GAAA,CAAI,EAAA,EAAI,KAAK,CAAA;IACvB;IAED,OAAO,QAAA;EACR;EAED,aAAA,CAAc,aAAA,EAAe,SAAA,EAAW,EAAA,EAAI,IAAA,EAAM;IAChD,IAAI,IAAA,GAAO,IAAA;IAEX,aAAA,CAAc,OAAA,CAAQ,OAAA,CAAQ,UAAU,MAAA,EAAQ;MAC9C,KAAA,MAAW,EAAA,IAAM,SAAA,EAAW;QAC1B,MAAM,QAAA,GAAW,SAAA,CAAU,EAAE,CAAA;QAE7B,QAAA,CAAS,QAAA,CAAS,OAAA,CAAQ,UAAU,OAAA,EAAS,CAAA,EAAG;UAC9C,IAAI,OAAA,CAAQ,EAAA,KAAO,MAAA,CAAO,EAAA,EAAI;YAC5B,MAAM,OAAA,GAAU,IAAA;YAChB,IAAA,GAAO,IAAI,IAAA,CAAM,CAAA;YAEjB,IAAA,CAAK,WAAA,CAAY,IAAA,CAAK,OAAA,CAAQ,aAAa,CAAA;YAI3C,IAAA,CAAK,IAAA,GAAO,IAAA,GAAO,eAAA,CAAgB,gBAAA,CAAiB,IAAI,CAAA,GAAI,EAAA;YAC5D,IAAA,CAAK,EAAA,GAAK,EAAA;YAEV,QAAA,CAAS,KAAA,CAAM,CAAC,CAAA,GAAI,IAAA;YAIpB,IAAI,OAAA,KAAY,IAAA,EAAM;cACpB,IAAA,CAAK,GAAA,CAAI,OAAO,CAAA;YACjB;UACF;QACX,CAAS,CAAA;MACF;IACP,CAAK,CAAA;IAED,OAAO,IAAA;EACR;EAAA;EAGD,YAAA,CAAa,aAAA,EAAe;IAC1B,IAAI,KAAA;IACJ,IAAI,eAAA;IAEJ,aAAA,CAAc,QAAA,CAAS,OAAA,CAAQ,UAAU,KAAA,EAAO;MAC9C,MAAM,IAAA,GAAO,OAAA,CAAQ,OAAA,CAAQ,aAAA,CAAc,KAAA,CAAM,EAAE,CAAA;MAEnD,IAAI,IAAA,KAAS,KAAA,CAAA,EAAW;QACtB,eAAA,GAAkB,IAAA;MACnB;IACP,CAAK,CAAA;IAED,IAAI,eAAA,KAAoB,KAAA,CAAA,EAAW;MACjC,KAAA,GAAQ,IAAI,QAAA,CAAU,CAAA;IAC5B,CAAA,MAAW;MACL,IAAI,IAAA,GAAO,CAAA;MACX,IAAI,eAAA,CAAgB,oBAAA,KAAyB,KAAA,CAAA,IAAa,eAAA,CAAgB,oBAAA,CAAqB,KAAA,KAAU,CAAA,EAAG;QAC1G,IAAA,GAAO,CAAA;MACR;MAED,IAAI,iBAAA,GAAoB,CAAA;MACxB,IAAI,eAAA,CAAgB,SAAA,KAAc,KAAA,CAAA,EAAW;QAC3C,iBAAA,GAAoB,eAAA,CAAgB,SAAA,CAAU,KAAA,GAAQ,GAAA;MACvD;MAED,IAAI,gBAAA,GAAmB,GAAA;MACvB,IAAI,eAAA,CAAgB,QAAA,KAAa,KAAA,CAAA,EAAW;QAC1C,gBAAA,GAAmB,eAAA,CAAgB,QAAA,CAAS,KAAA,GAAQ,GAAA;MACrD;MAED,IAAI,KAAA,GAAQ,MAAA,CAAO,UAAA;MACnB,IAAI,MAAA,GAAS,MAAA,CAAO,WAAA;MAEpB,IAAI,eAAA,CAAgB,WAAA,KAAgB,KAAA,CAAA,IAAa,eAAA,CAAgB,YAAA,KAAiB,KAAA,CAAA,EAAW;QAC3F,KAAA,GAAQ,eAAA,CAAgB,WAAA,CAAY,KAAA;QACpC,MAAA,GAAS,eAAA,CAAgB,YAAA,CAAa,KAAA;MACvC;MAED,MAAM,MAAA,GAAS,KAAA,GAAQ,MAAA;MAEvB,IAAI,GAAA,GAAM,EAAA;MACV,IAAI,eAAA,CAAgB,WAAA,KAAgB,KAAA,CAAA,EAAW;QAC7C,GAAA,GAAM,eAAA,CAAgB,WAAA,CAAY,KAAA;MACnC;MAED,MAAM,WAAA,GAAc,eAAA,CAAgB,WAAA,GAAc,eAAA,CAAgB,WAAA,CAAY,KAAA,GAAQ,IAAA;MAEtF,QAAQ,IAAA;QACN,KAAK,CAAA;UACH,KAAA,GAAQ,IAAI,iBAAA,CAAkB,GAAA,EAAK,MAAA,EAAQ,iBAAA,EAAmB,gBAAgB,CAAA;UAC9E,IAAI,WAAA,KAAgB,IAAA,EAAM,KAAA,CAAM,cAAA,CAAe,WAAW,CAAA;UAC1D;QAEF,KAAK,CAAA;UACH,KAAA,GAAQ,IAAI,kBAAA,CACV,CAAC,KAAA,GAAQ,CAAA,EACT,KAAA,GAAQ,CAAA,EACR,MAAA,GAAS,CAAA,EACT,CAAC,MAAA,GAAS,CAAA,EACV,iBAAA,EACA,gBACD,CAAA;UACD;QAEF;UACE,OAAA,CAAQ,IAAA,CAAK,uCAAA,GAA0C,IAAA,GAAO,GAAG,CAAA;UACjE,KAAA,GAAQ,IAAI,QAAA,CAAU,CAAA;UACtB;MACH;IACF;IAED,OAAO,KAAA;EACR;EAAA;EAGD,WAAA,CAAY,aAAA,EAAe;IACzB,IAAI,KAAA;IACJ,IAAI,cAAA;IAEJ,aAAA,CAAc,QAAA,CAAS,OAAA,CAAQ,UAAU,KAAA,EAAO;MAC9C,MAAM,IAAA,GAAO,OAAA,CAAQ,OAAA,CAAQ,aAAA,CAAc,KAAA,CAAM,EAAE,CAAA;MAEnD,IAAI,IAAA,KAAS,KAAA,CAAA,EAAW;QACtB,cAAA,GAAiB,IAAA;MAClB;IACP,CAAK,CAAA;IAED,IAAI,cAAA,KAAmB,KAAA,CAAA,EAAW;MAChC,KAAA,GAAQ,IAAI,QAAA,CAAU,CAAA;IAC5B,CAAA,MAAW;MACL,IAAI,IAAA;MAGJ,IAAI,cAAA,CAAe,SAAA,KAAc,KAAA,CAAA,EAAW;QAC1C,IAAA,GAAO,CAAA;MACf,CAAA,MAAa;QACL,IAAA,GAAO,cAAA,CAAe,SAAA,CAAU,KAAA;MACjC;MAED,IAAI,KAAA,GAAQ,QAAA;MAEZ,IAAI,cAAA,CAAe,KAAA,KAAU,KAAA,CAAA,EAAW;QACtC,KAAA,GAAQ,IAAI,KAAA,CAAO,CAAA,CAAC,SAAA,CAAU,cAAA,CAAe,KAAA,CAAM,KAAK,CAAA;MACzD;MAED,IAAI,SAAA,GAAY,cAAA,CAAe,SAAA,KAAc,KAAA,CAAA,GAAY,CAAA,GAAI,cAAA,CAAe,SAAA,CAAU,KAAA,GAAQ,GAAA;MAG9F,IAAI,cAAA,CAAe,iBAAA,KAAsB,KAAA,CAAA,IAAa,cAAA,CAAe,iBAAA,CAAkB,KAAA,KAAU,CAAA,EAAG;QAClG,SAAA,GAAY,CAAA;MACb;MAED,IAAI,QAAA,GAAW,CAAA;MACf,IAAI,cAAA,CAAe,iBAAA,KAAsB,KAAA,CAAA,EAAW;QAClD,IAAI,cAAA,CAAe,oBAAA,KAAyB,KAAA,CAAA,IAAa,cAAA,CAAe,oBAAA,CAAqB,KAAA,KAAU,CAAA,EAAG;UACxG,QAAA,GAAW,CAAA;QACrB,CAAA,MAAe;UACL,QAAA,GAAW,cAAA,CAAe,iBAAA,CAAkB,KAAA;QAC7C;MACF;MAGD,MAAM,KAAA,GAAQ,CAAA;MAEd,QAAQ,IAAA;QACN,KAAK,CAAA;UACH,KAAA,GAAQ,IAAI,UAAA,CAAW,KAAA,EAAO,SAAA,EAAW,QAAA,EAAU,KAAK,CAAA;UACxD;QAEF,KAAK,CAAA;UACH,KAAA,GAAQ,IAAI,gBAAA,CAAiB,KAAA,EAAO,SAAS,CAAA;UAC7C;QAEF,KAAK,CAAA;UACH,IAAI,KAAA,GAAQ,IAAA,CAAK,EAAA,GAAK,CAAA;UAEtB,IAAI,cAAA,CAAe,UAAA,KAAe,KAAA,CAAA,EAAW;YAC3C,KAAA,GAAQ,SAAA,CAAU,QAAA,CAAS,cAAA,CAAe,UAAA,CAAW,KAAK,CAAA;UAC3D;UAED,IAAI,QAAA,GAAW,CAAA;UACf,IAAI,cAAA,CAAe,UAAA,KAAe,KAAA,CAAA,EAAW;YAI3C,QAAA,GAAW,SAAA,CAAU,QAAA,CAAS,cAAA,CAAe,UAAA,CAAW,KAAK,CAAA;YAC7D,QAAA,GAAW,IAAA,CAAK,GAAA,CAAI,QAAA,EAAU,CAAC,CAAA;UAChC;UAED,KAAA,GAAQ,IAAI,SAAA,CAAU,KAAA,EAAO,SAAA,EAAW,QAAA,EAAU,KAAA,EAAO,QAAA,EAAU,KAAK,CAAA;UACxE;QAEF;UACE,OAAA,CAAQ,IAAA,CACN,sCAAA,GAAyC,cAAA,CAAe,SAAA,CAAU,KAAA,GAAQ,+BAC3E,CAAA;UACD,KAAA,GAAQ,IAAI,UAAA,CAAW,KAAA,EAAO,SAAS,CAAA;UACvC;MACH;MAED,IAAI,cAAA,CAAe,WAAA,KAAgB,KAAA,CAAA,IAAa,cAAA,CAAe,WAAA,CAAY,KAAA,KAAU,CAAA,EAAG;QACtF,KAAA,CAAM,UAAA,GAAa,IAAA;MACpB;IACF;IAED,OAAO,KAAA;EACR;EAED,UAAA,CAAW,aAAA,EAAe,WAAA,EAAa,WAAA,EAAa;IAClD,IAAI,KAAA;IACJ,IAAI,QAAA,GAAW,IAAA;IACf,IAAI,QAAA,GAAW,IAAA;IACf,MAAM,SAAA,GAAY,EAAE;IAGpB,aAAA,CAAc,QAAA,CAAS,OAAA,CAAQ,UAAU,KAAA,EAAO;MAC9C,IAAI,WAAA,CAAY,GAAA,CAAI,KAAA,CAAM,EAAE,CAAA,EAAG;QAC7B,QAAA,GAAW,WAAA,CAAY,GAAA,CAAI,KAAA,CAAM,EAAE,CAAA;MACpC;MAED,IAAI,WAAA,CAAY,GAAA,CAAI,KAAA,CAAM,EAAE,CAAA,EAAG;QAC7B,SAAA,CAAU,IAAA,CAAK,WAAA,CAAY,GAAA,CAAI,KAAA,CAAM,EAAE,CAAC,CAAA;MACzC;IACP,CAAK,CAAA;IAED,IAAI,SAAA,CAAU,MAAA,GAAS,CAAA,EAAG;MACxB,QAAA,GAAW,SAAA;IACjB,CAAA,MAAA,IAAe,SAAA,CAAU,MAAA,GAAS,CAAA,EAAG;MAC/B,QAAA,GAAW,SAAA,CAAU,CAAC,CAAA;IAC5B,CAAA,MAAW;MACL,QAAA,GAAW,IAAI,iBAAA,CAAkB;QAAE,KAAA,EAAO;MAAQ,CAAE,CAAA;MACpD,SAAA,CAAU,IAAA,CAAK,QAAQ,CAAA;IACxB;IAED,IAAI,OAAA,IAAW,QAAA,CAAS,UAAA,EAAY;MAClC,SAAA,CAAU,OAAA,CAAQ,UAAUC,SAAAA,EAAU;QACpC,SAAA,CAAS,YAAA,GAAe,IAAA;MAChC,CAAO,CAAA;IACF;IAED,IAAI,QAAA,CAAS,YAAA,EAAc;MACzB,KAAA,GAAQ,IAAI,WAAA,CAAY,QAAA,EAAU,QAAQ,CAAA;MAC1C,KAAA,CAAM,oBAAA,CAAsB,CAAA;IAClC,CAAA,MAAW;MACL,KAAA,GAAQ,IAAI,IAAA,CAAK,QAAA,EAAU,QAAQ,CAAA;IACpC;IAED,OAAO,KAAA;EACR;EAED,WAAA,CAAY,aAAA,EAAe,WAAA,EAAa;IACtC,MAAM,QAAA,GAAW,aAAA,CAAc,QAAA,CAAS,MAAA,CAAO,UAAU,GAAA,EAAK,KAAA,EAAO;MACnE,IAAI,WAAA,CAAY,GAAA,CAAI,KAAA,CAAM,EAAE,CAAA,EAAG,GAAA,GAAM,WAAA,CAAY,GAAA,CAAI,KAAA,CAAM,EAAE,CAAA;MAE7D,OAAO,GAAA;IACR,CAAA,EAAE,IAAI,CAAA;IAGP,MAAM,QAAA,GAAW,IAAI,iBAAA,CAAkB;MAAE,KAAA,EAAO,OAAA;MAAU,SAAA,EAAW;IAAA,CAAG,CAAA;IACxE,OAAO,IAAI,IAAA,CAAK,QAAA,EAAU,QAAQ,CAAA;EACnC;EAAA;EAGD,gBAAA,CAAiB,KAAA,EAAO,SAAA,EAAW;IACjC,MAAM,aAAA,GAAgB,CAAE,CAAA;IAExB,IAAI,aAAA,IAAiB,SAAA,EAAW,aAAA,CAAc,WAAA,GAAc,QAAA,CAAS,SAAA,CAAU,WAAA,CAAY,KAAK,CAAA;IAEhG,IAAI,eAAA,IAAmB,SAAA,EAAW,aAAA,CAAc,UAAA,GAAa,aAAA,CAAc,SAAA,CAAU,aAAA,CAAc,KAAK,CAAA,CAAA,KACnG,aAAA,CAAc,UAAA,GAAa,KAAA;IAEhC,IAAI,iBAAA,IAAqB,SAAA,EAAW,aAAA,CAAc,WAAA,GAAc,SAAA,CAAU,eAAA,CAAgB,KAAA;IAE1F,IAAI,aAAA,IAAiB,SAAA,EAAW,aAAA,CAAc,WAAA,GAAc,SAAA,CAAU,WAAA,CAAY,KAAA;IAClF,IAAI,cAAA,IAAkB,SAAA,EAAW,aAAA,CAAc,QAAA,GAAW,SAAA,CAAU,YAAA,CAAa,KAAA;IACjF,IAAI,cAAA,IAAkB,SAAA,EAAW,aAAA,CAAc,YAAA,GAAe,SAAA,CAAU,YAAA,CAAa,KAAA;IAErF,IAAI,aAAA,IAAiB,SAAA,EAAW,aAAA,CAAc,KAAA,GAAQ,SAAA,CAAU,WAAA,CAAY,KAAA;IAE5E,IAAI,eAAA,IAAmB,SAAA,EAAW,aAAA,CAAc,aAAA,GAAgB,SAAA,CAAU,aAAA,CAAc,KAAA;IACxF,IAAI,cAAA,IAAkB,SAAA,EAAW,aAAA,CAAc,YAAA,GAAe,SAAA,CAAU,YAAA,CAAa,KAAA;IAErF,IAAI,gBAAA,IAAoB,SAAA,EAAW,aAAA,CAAc,cAAA,GAAiB,SAAA,CAAU,cAAA,CAAe,KAAA;IAC3F,IAAI,eAAA,IAAmB,SAAA,EAAW,aAAA,CAAc,aAAA,GAAgB,SAAA,CAAU,aAAA,CAAc,KAAA;IAExF,KAAA,CAAM,QAAA,CAAS,aAAA,GAAgB,aAAA;EAChC;EAED,mBAAA,CAAoB,KAAA,EAAO,SAAA,EAAW;IACpC,IAAI,gBAAA,IAAoB,SAAA,EAAW;MACjC,MAAM,QAAA,GAAW,WAAA,CAAY,GAAA,CAAI,KAAA,CAAM,EAAE,CAAA,CAAE,QAAA;MAE3C,QAAA,CAAS,OAAA,CAAQ,UAAU,KAAA,EAAO;QAChC,IAAI,KAAA,CAAM,YAAA,KAAiB,gBAAA,EAAkB;UAC3C,MAAM,YAAA,GAAe,OAAA,CAAQ,OAAA,CAAQ,KAAA,CAAM,KAAA,CAAM,EAAE,CAAA;UAEnD,IAAI,iBAAA,IAAqB,YAAA,EAAc;YACrC,MAAM,GAAA,GAAM,YAAA,CAAa,eAAA,CAAgB,KAAA;YAGzC,IAAI,KAAA,CAAM,MAAA,KAAW,KAAA,CAAA,EAAW;cAC9B,KAAA,CAAM,MAAA,CAAO,QAAA,CAAS,SAAA,CAAU,GAAG,CAAA;cACnC,UAAA,CAAW,GAAA,CAAI,KAAA,CAAM,MAAM,CAAA;YACzC,CAAA,MAAmB;cAGL,KAAA,CAAM,MAAA,CAAO,IAAI,OAAA,CAAS,CAAA,CAAC,SAAA,CAAU,GAAG,CAAC,CAAA;YAC1C;UACF;QACF;MACT,CAAO,CAAA;IACF;EACF;EAED,YAAA,CAAa,SAAA,EAAW,WAAA,EAAa,QAAA,EAAU;IAC7C,MAAM,YAAA,GAAe,IAAA,CAAK,cAAA,CAAgB,CAAA;IAE1C,KAAA,MAAW,EAAA,IAAM,SAAA,EAAW;MAC1B,MAAM,QAAA,GAAW,SAAA,CAAU,EAAE,CAAA;MAE7B,MAAM,OAAA,GAAU,WAAA,CAAY,GAAA,CAAI,QAAA,CAAS,QAAA,CAAS,EAAE,CAAC,CAAA,CAAE,OAAA;MAEvD,OAAA,CAAQ,OAAA,CAAQ,UAAU,MAAA,EAAQ;QAChC,IAAI,WAAA,CAAY,GAAA,CAAI,MAAA,CAAO,EAAE,CAAA,EAAG;UAC9B,MAAM,KAAA,GAAQ,MAAA,CAAO,EAAA;UACrB,MAAM,gBAAA,GAAmB,WAAA,CAAY,GAAA,CAAI,KAAK,CAAA;UAE9C,gBAAA,CAAiB,OAAA,CAAQ,OAAA,CAAQ,UAAU,aAAA,EAAe;YACxD,IAAI,QAAA,CAAS,GAAA,CAAI,aAAA,CAAc,EAAE,CAAA,EAAG;cAClC,MAAM,KAAA,GAAQ,QAAA,CAAS,GAAA,CAAI,aAAA,CAAc,EAAE,CAAA;cAE3C,KAAA,CAAM,IAAA,CAAK,IAAI,QAAA,CAAS,QAAA,CAAS,KAAK,CAAA,EAAG,YAAA,CAAa,aAAA,CAAc,EAAE,CAAC,CAAA;YACxE;UACb,CAAW,CAAA;QACF;MACT,CAAO,CAAA;IACF;EACF;EAED,cAAA,CAAA,EAAiB;IACf,MAAM,YAAA,GAAe,CAAE,CAAA;IAEvB,IAAI,MAAA,IAAU,OAAA,CAAQ,OAAA,EAAS;MAC7B,MAAM,YAAA,GAAe,OAAA,CAAQ,OAAA,CAAQ,IAAA;MAErC,KAAA,MAAW,MAAA,IAAU,YAAA,EAAc;QACjC,IAAI,YAAA,CAAa,MAAM,CAAA,CAAE,QAAA,KAAa,UAAA,IAAc,YAAA,CAAa,MAAM,CAAA,CAAE,WAAA,GAAc,CAAA,EAAG;UACxF,MAAM,SAAA,GAAY,YAAA,CAAa,MAAM,CAAA,CAAE,QAAA;UAEvC,IAAI,KAAA,CAAM,OAAA,CAAQ,SAAS,CAAA,EAAG;YAC5B,SAAA,CAAU,OAAA,CAAQ,UAAU,QAAA,EAAU;cACpC,YAAA,CAAa,QAAA,CAAS,IAAI,CAAA,GAAI,IAAI,OAAA,CAAS,CAAA,CAAC,SAAA,CAAU,QAAA,CAAS,MAAA,CAAO,CAAC,CAAA;YACrF,CAAa,CAAA;UACb,CAAA,MAAiB;YACL,YAAA,CAAa,SAAA,CAAU,IAAI,CAAA,GAAI,IAAI,OAAA,CAAS,CAAA,CAAC,SAAA,CAAU,SAAA,CAAU,MAAA,CAAO,CAAC,CAAA;UAC1E;QACF;MACF;IACF;IAED,OAAO,YAAA;EACR;EAAA;EAGD,kBAAA,CAAA,EAAqB;IACnB,IAAI,gBAAA,IAAoB,OAAA,IAAW,cAAA,IAAkB,OAAA,CAAQ,cAAA,EAAgB;MAC3E,MAAM,YAAA,GAAe,OAAA,CAAQ,cAAA,CAAe,YAAA,CAAa,KAAA;MACzD,MAAM,CAAA,GAAI,YAAA,CAAa,CAAC,CAAA;MACxB,MAAM,CAAA,GAAI,YAAA,CAAa,CAAC,CAAA;MACxB,MAAM,CAAA,GAAI,YAAA,CAAa,CAAC,CAAA;MAExB,IAAI,CAAA,KAAM,CAAA,IAAK,CAAA,KAAM,CAAA,IAAK,CAAA,KAAM,CAAA,EAAG;QACjC,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAM,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;QAC/B,UAAA,CAAW,GAAA,CAAI,IAAI,YAAA,CAAa,KAAA,EAAO,CAAC,CAAC,CAAA;MAC1C;IACF;EACF;AACH;AAGA,MAAM,cAAA,CAAe;EAAA;EAEnB,KAAA,CAAM,SAAA,EAAW;IACf,MAAM,WAAA,GAAc,eAAA,IAAI,GAAA,CAAK,CAAA;IAE7B,IAAI,UAAA,IAAc,OAAA,CAAQ,OAAA,EAAS;MACjC,MAAM,QAAA,GAAW,OAAA,CAAQ,OAAA,CAAQ,QAAA;MAEjC,KAAA,MAAW,MAAA,IAAU,QAAA,EAAU;QAC7B,MAAM,aAAA,GAAgB,WAAA,CAAY,GAAA,CAAI,QAAA,CAAS,MAAM,CAAC,CAAA;QACtD,MAAM,GAAA,GAAM,IAAA,CAAK,aAAA,CAAc,aAAA,EAAe,QAAA,CAAS,MAAM,CAAA,EAAG,SAAS,CAAA;QAEzE,WAAA,CAAY,GAAA,CAAI,QAAA,CAAS,MAAM,CAAA,EAAG,GAAG,CAAA;MACtC;IACF;IAED,OAAO,WAAA;EACR;EAAA;EAGD,aAAA,CAAc,aAAA,EAAe,OAAA,EAAS,SAAA,EAAW;IAC/C,QAAQ,OAAA,CAAQ,QAAA;MACd,KAAK,MAAA;QACH,OAAO,IAAA,CAAK,iBAAA,CAAkB,aAAA,EAAe,OAAA,EAAS,SAAS,CAAA;MAGjE,KAAK,YAAA;QACH,OAAO,IAAA,CAAK,kBAAA,CAAmB,OAAO,CAAA;IAEzC;EACF;EAAA;EAGD,iBAAA,CAAkB,aAAA,EAAe,OAAA,EAAS,SAAA,EAAW;IACnD,MAAM,SAAA,GAAY,SAAA,CAAU,SAAA;IAC5B,MAAM,YAAA,GAAe,EAAE;IAEvB,MAAM,UAAA,GAAa,aAAA,CAAc,OAAA,CAAQ,GAAA,CAAI,UAAU,MAAA,EAAQ;MAC7D,OAAO,OAAA,CAAQ,OAAA,CAAQ,KAAA,CAAM,MAAA,CAAO,EAAE,CAAA;IAC5C,CAAK,CAAA;IAGD,IAAI,UAAA,CAAW,MAAA,KAAW,CAAA,EAAG;IAE7B,MAAM,QAAA,GAAW,aAAA,CAAc,QAAA,CAAS,MAAA,CAAO,UAAUC,SAAAA,EAAU,KAAA,EAAO;MACxE,IAAI,SAAA,CAAU,KAAA,CAAM,EAAE,CAAA,KAAM,KAAA,CAAA,EAAW,SAAA,GAAW,SAAA,CAAU,KAAA,CAAM,EAAE,CAAA;MAEpE,OAAO,SAAA;IACR,CAAA,EAAE,IAAI,CAAA;IAEP,aAAA,CAAc,QAAA,CAAS,OAAA,CAAQ,UAAU,KAAA,EAAO;MAC9C,IAAI,SAAA,CAAU,YAAA,CAAa,KAAA,CAAM,EAAE,CAAA,KAAM,KAAA,CAAA,EAAW;QAClD,YAAA,CAAa,IAAA,CAAK,SAAA,CAAU,YAAA,CAAa,KAAA,CAAM,EAAE,CAAC,CAAA;MACnD;IACP,CAAK,CAAA;IAID,MAAM,SAAA,GAAY,UAAA,CAAW,CAAC,CAAA;IAE9B,MAAM,aAAA,GAAgB,CAAE,CAAA;IAExB,IAAI,eAAA,IAAmB,SAAA,EAAW,aAAA,CAAc,UAAA,GAAa,aAAA,CAAc,SAAA,CAAU,aAAA,CAAc,KAAK,CAAA;IACxG,IAAI,aAAA,IAAiB,SAAA,EAAW,aAAA,CAAc,WAAA,GAAc,QAAA,CAAS,SAAA,CAAU,WAAA,CAAY,KAAK,CAAA;IAEhG,IAAI,sBAAA,IAA0B,SAAA,EAAW,aAAA,CAAc,WAAA,GAAc,SAAA,CAAU,oBAAA,CAAqB,KAAA;IACpG,IAAI,mBAAA,IAAuB,SAAA,EAAW,aAAA,CAAc,QAAA,GAAW,SAAA,CAAU,iBAAA,CAAkB,KAAA;IAC3F,IAAI,kBAAA,IAAsB,SAAA,EAAW,aAAA,CAAc,KAAA,GAAQ,SAAA,CAAU,gBAAA,CAAiB,KAAA;IAEtF,MAAM,SAAA,GAAY,iBAAA,CAAkB,aAAa,CAAA;IAEjD,OAAO,IAAA,CAAK,WAAA,CAAY,OAAA,EAAS,QAAA,EAAU,YAAA,EAAc,SAAS,CAAA;EACnE;EAAA;EAGD,WAAA,CAAY,OAAA,EAAS,QAAA,EAAU,YAAA,EAAc,YAAA,EAAc;IACzD,MAAM,GAAA,GAAM,IAAI,cAAA,CAAgB,CAAA;IAChC,IAAI,OAAA,CAAQ,QAAA,EAAU,GAAA,CAAI,IAAA,GAAO,OAAA,CAAQ,QAAA;IAEzC,MAAM,OAAA,GAAU,IAAA,CAAK,YAAA,CAAa,OAAA,EAAS,QAAQ,CAAA;IACnD,MAAM,OAAA,GAAU,IAAA,CAAK,UAAA,CAAW,OAAO,CAAA;IAEvC,MAAM,iBAAA,GAAoB,IAAI,sBAAA,CAAuB,OAAA,CAAQ,MAAA,EAAQ,CAAC,CAAA;IAEtE,iBAAA,CAAkB,YAAA,CAAa,YAAY,CAAA;IAE3C,GAAA,CAAI,YAAA,CAAa,UAAA,EAAY,iBAAiB,CAAA;IAE9C,IAAI,OAAA,CAAQ,MAAA,CAAO,MAAA,GAAS,CAAA,EAAG;MAC7B,GAAA,CAAI,YAAA,CAAa,OAAA,EAAS,IAAI,sBAAA,CAAuB,OAAA,CAAQ,MAAA,EAAQ,CAAC,CAAC,CAAA;IACxE;IAED,IAAI,QAAA,EAAU;MACZ,GAAA,CAAI,YAAA,CAAa,WAAA,EAAa,IAAI,qBAAA,CAAsB,OAAA,CAAQ,cAAA,EAAgB,CAAC,CAAC,CAAA;MAElF,GAAA,CAAI,YAAA,CAAa,YAAA,EAAc,IAAI,sBAAA,CAAuB,OAAA,CAAQ,aAAA,EAAe,CAAC,CAAC,CAAA;MAGnF,GAAA,CAAI,YAAA,GAAe,QAAA;IACpB;IAED,IAAI,OAAA,CAAQ,MAAA,CAAO,MAAA,GAAS,CAAA,EAAG;MAC7B,MAAM,YAAA,GAAe,IAAI,OAAA,CAAA,CAAA,CAAU,eAAA,CAAgB,YAAY,CAAA;MAE/D,MAAM,eAAA,GAAkB,IAAI,sBAAA,CAAuB,OAAA,CAAQ,MAAA,EAAQ,CAAC,CAAA;MACpE,eAAA,CAAgB,iBAAA,CAAkB,YAAY,CAAA;MAE9C,GAAA,CAAI,YAAA,CAAa,QAAA,EAAU,eAAe,CAAA;IAC3C;IAED,OAAA,CAAQ,GAAA,CAAI,OAAA,CAAQ,UAAU,QAAA,EAAU,CAAA,EAAG;MACzC,IAAI,GAAA,KAAQ,KAAA,EAAO,CAAA,EAAA;MACnB,MAAM,IAAA,GAAO,CAAA,KAAM,CAAA,GAAI,IAAA,GAAO,KAAK,CAAA,EAAA;MAEnC,GAAA,CAAI,YAAA,CAAa,IAAA,EAAM,IAAI,sBAAA,CAAuB,OAAA,CAAQ,GAAA,CAAI,CAAC,CAAA,EAAG,CAAC,CAAC,CAAA;IAC1E,CAAK,CAAA;IAED,IAAI,OAAA,CAAQ,QAAA,IAAY,OAAA,CAAQ,QAAA,CAAS,WAAA,KAAgB,SAAA,EAAW;MAElE,IAAI,iBAAA,GAAoB,OAAA,CAAQ,aAAA,CAAc,CAAC,CAAA;MAC/C,IAAI,UAAA,GAAa,CAAA;MAEjB,OAAA,CAAQ,aAAA,CAAc,OAAA,CAAQ,UAAU,YAAA,EAAc,CAAA,EAAG;QACvD,IAAI,YAAA,KAAiB,iBAAA,EAAmB;UACtC,GAAA,CAAI,QAAA,CAAS,UAAA,EAAY,CAAA,GAAI,UAAA,EAAY,iBAAiB,CAAA;UAE1D,iBAAA,GAAoB,YAAA;UACpB,UAAA,GAAa,CAAA;QACd;MACT,CAAO,CAAA;MAGD,IAAI,GAAA,CAAI,MAAA,CAAO,MAAA,GAAS,CAAA,EAAG;QACzB,MAAM,SAAA,GAAY,GAAA,CAAI,MAAA,CAAO,GAAA,CAAI,MAAA,CAAO,MAAA,GAAS,CAAC,CAAA;QAClD,MAAM,SAAA,GAAY,SAAA,CAAU,KAAA,GAAQ,SAAA,CAAU,KAAA;QAE9C,IAAI,SAAA,KAAc,OAAA,CAAQ,aAAA,CAAc,MAAA,EAAQ;UAC9C,GAAA,CAAI,QAAA,CAAS,SAAA,EAAW,OAAA,CAAQ,aAAA,CAAc,MAAA,GAAS,SAAA,EAAW,iBAAiB,CAAA;QACpF;MACF;MAID,IAAI,GAAA,CAAI,MAAA,CAAO,MAAA,KAAW,CAAA,EAAG;QAC3B,GAAA,CAAI,QAAA,CAAS,CAAA,EAAG,OAAA,CAAQ,aAAA,CAAc,MAAA,EAAQ,OAAA,CAAQ,aAAA,CAAc,CAAC,CAAC,CAAA;MACvE;IACF;IAED,IAAA,CAAK,eAAA,CAAgB,GAAA,EAAK,OAAA,EAAS,YAAA,EAAc,YAAY,CAAA;IAE7D,OAAO,GAAA;EACR;EAED,YAAA,CAAa,OAAA,EAAS,QAAA,EAAU;IAC9B,MAAM,OAAA,GAAU,CAAE,CAAA;IAElB,OAAA,CAAQ,eAAA,GAAkB,OAAA,CAAQ,QAAA,KAAa,KAAA,CAAA,GAAY,OAAA,CAAQ,QAAA,CAAS,CAAA,GAAI,EAAE;IAClF,OAAA,CAAQ,aAAA,GAAgB,OAAA,CAAQ,kBAAA,KAAuB,KAAA,CAAA,GAAY,OAAA,CAAQ,kBAAA,CAAmB,CAAA,GAAI,EAAE;IAEpG,IAAI,OAAA,CAAQ,iBAAA,EAAmB;MAC7B,OAAA,CAAQ,KAAA,GAAQ,IAAA,CAAK,iBAAA,CAAkB,OAAA,CAAQ,iBAAA,CAAkB,CAAC,CAAC,CAAA;IACpE;IAED,IAAI,OAAA,CAAQ,oBAAA,EAAsB;MAChC,OAAA,CAAQ,QAAA,GAAW,IAAA,CAAK,oBAAA,CAAqB,OAAA,CAAQ,oBAAA,CAAqB,CAAC,CAAC,CAAA;IAC7E;IAED,IAAI,OAAA,CAAQ,kBAAA,EAAoB;MAC9B,OAAA,CAAQ,MAAA,GAAS,IAAA,CAAK,YAAA,CAAa,OAAA,CAAQ,kBAAA,CAAmB,CAAC,CAAC,CAAA;IACjE;IAED,IAAI,OAAA,CAAQ,cAAA,EAAgB;MAC1B,OAAA,CAAQ,EAAA,GAAK,EAAE;MAEf,IAAI,CAAA,GAAI,CAAA;MACR,OAAO,OAAA,CAAQ,cAAA,CAAe,CAAC,CAAA,EAAG;QAChC,IAAI,OAAA,CAAQ,cAAA,CAAe,CAAC,CAAA,CAAE,EAAA,EAAI;UAChC,OAAA,CAAQ,EAAA,CAAG,IAAA,CAAK,IAAA,CAAK,QAAA,CAAS,OAAA,CAAQ,cAAA,CAAe,CAAC,CAAC,CAAC,CAAA;QACzD;QAED,CAAA,EAAA;MACD;IACF;IAED,OAAA,CAAQ,WAAA,GAAc,CAAE,CAAA;IAExB,IAAI,QAAA,KAAa,IAAA,EAAM;MACrB,OAAA,CAAQ,QAAA,GAAW,QAAA;MAEnB,QAAA,CAAS,QAAA,CAAS,OAAA,CAAQ,UAAU,OAAA,EAAS,CAAA,EAAG;QAE9C,OAAA,CAAQ,OAAA,CAAQ,OAAA,CAAQ,UAAU,KAAA,EAAO,CAAA,EAAG;UAC1C,IAAI,OAAA,CAAQ,WAAA,CAAY,KAAK,CAAA,KAAM,KAAA,CAAA,EAAW,OAAA,CAAQ,WAAA,CAAY,KAAK,CAAA,GAAI,EAAE;UAE7E,OAAA,CAAQ,WAAA,CAAY,KAAK,CAAA,CAAE,IAAA,CAAK;YAC9B,EAAA,EAAI,CAAA;YACJ,MAAA,EAAQ,OAAA,CAAQ,OAAA,CAAQ,CAAC;UACrC,CAAW,CAAA;QACX,CAAS,CAAA;MACT,CAAO,CAAA;IACF;IAED,OAAO,OAAA;EACR;EAED,UAAA,CAAW,OAAA,EAAS;IAClB,MAAM,OAAA,GAAU;MACd,MAAA,EAAQ,EAAE;MACV,MAAA,EAAQ,EAAE;MACV,MAAA,EAAQ,EAAE;MACV,GAAA,EAAK,EAAE;MACP,aAAA,EAAe,EAAE;MACjB,aAAA,EAAe,EAAE;MACjB,cAAA,EAAgB;IACjB,CAAA;IAED,IAAI,YAAA,GAAe,CAAA;IACnB,IAAI,UAAA,GAAa,CAAA;IACjB,IAAI,uBAAA,GAA0B,KAAA;IAG9B,IAAI,mBAAA,GAAsB,EAAE;IAC5B,IAAI,WAAA,GAAc,EAAE;IACpB,IAAI,UAAA,GAAa,EAAE;IACnB,IAAI,OAAA,GAAU,EAAE;IAChB,IAAI,WAAA,GAAc,EAAE;IACpB,IAAI,iBAAA,GAAoB,EAAE;IAE1B,MAAM,KAAA,GAAQ,IAAA;IACd,OAAA,CAAQ,aAAA,CAAc,OAAA,CAAQ,UAAU,WAAA,EAAa,kBAAA,EAAoB;MACvE,IAAI,aAAA;MACJ,IAAI,SAAA,GAAY,KAAA;MAShB,IAAI,WAAA,GAAc,CAAA,EAAG;QACnB,WAAA,GAAc,WAAA,GAAc,CAAA,CAAA;QAC5B,SAAA,GAAY,IAAA;MACb;MAED,IAAI,aAAA,GAAgB,EAAE;MACtB,IAAI,OAAA,GAAU,EAAE;MAEhB,mBAAA,CAAoB,IAAA,CAAK,WAAA,GAAc,CAAA,EAAG,WAAA,GAAc,CAAA,GAAI,CAAA,EAAG,WAAA,GAAc,CAAA,GAAI,CAAC,CAAA;MAElF,IAAI,OAAA,CAAQ,KAAA,EAAO;QACjB,MAAM,IAAA,GAAO,OAAA,CAAQ,kBAAA,EAAoB,YAAA,EAAc,WAAA,EAAa,OAAA,CAAQ,KAAK,CAAA;QAEjF,UAAA,CAAW,IAAA,CAAK,IAAA,CAAK,CAAC,CAAA,EAAG,IAAA,CAAK,CAAC,CAAA,EAAG,IAAA,CAAK,CAAC,CAAC,CAAA;MAC1C;MAED,IAAI,OAAA,CAAQ,QAAA,EAAU;QACpB,IAAI,OAAA,CAAQ,WAAA,CAAY,WAAW,CAAA,KAAM,KAAA,CAAA,EAAW;UAClD,OAAA,CAAQ,WAAA,CAAY,WAAW,CAAA,CAAE,OAAA,CAAQ,UAAU,EAAA,EAAI;YACrD,OAAA,CAAQ,IAAA,CAAK,EAAA,CAAG,MAAM,CAAA;YACtB,aAAA,CAAc,IAAA,CAAK,EAAA,CAAG,EAAE,CAAA;UACpC,CAAW,CAAA;QACF;QAED,IAAI,OAAA,CAAQ,MAAA,GAAS,CAAA,EAAG;UACtB,IAAI,CAAC,uBAAA,EAAyB;YAC5B,OAAA,CAAQ,IAAA,CACN,2GACD,CAAA;YACD,uBAAA,GAA0B,IAAA;UAC3B;UAED,MAAM,MAAA,GAAS,CAAC,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;UAC1B,MAAM,MAAA,GAAS,CAAC,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;UAE1B,OAAA,CAAQ,OAAA,CAAQ,UAAU,MAAA,EAAQ,WAAA,EAAa;YAC7C,IAAI,aAAA,GAAgB,MAAA;YACpB,IAAI,YAAA,GAAe,aAAA,CAAc,WAAW,CAAA;YAE5C,MAAA,CAAO,OAAA,CAAQ,UAAU,cAAA,EAAgB,mBAAA,EAAqB,mBAAA,EAAqB;cACjF,IAAI,aAAA,GAAgB,cAAA,EAAgB;gBAClC,mBAAA,CAAoB,mBAAmB,CAAA,GAAI,aAAA;gBAC3C,aAAA,GAAgB,cAAA;gBAEhB,MAAM,GAAA,GAAM,MAAA,CAAO,mBAAmB,CAAA;gBACtC,MAAA,CAAO,mBAAmB,CAAA,GAAI,YAAA;gBAC9B,YAAA,GAAe,GAAA;cAChB;YACf,CAAa,CAAA;UACb,CAAW,CAAA;UAED,aAAA,GAAgB,MAAA;UAChB,OAAA,GAAU,MAAA;QACX;QAGD,OAAO,OAAA,CAAQ,MAAA,GAAS,CAAA,EAAG;UACzB,OAAA,CAAQ,IAAA,CAAK,CAAC,CAAA;UACd,aAAA,CAAc,IAAA,CAAK,CAAC,CAAA;QACrB;QAED,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,CAAA,EAAG,EAAE,CAAA,EAAG;UAC1B,WAAA,CAAY,IAAA,CAAK,OAAA,CAAQ,CAAC,CAAC,CAAA;UAC3B,iBAAA,CAAkB,IAAA,CAAK,aAAA,CAAc,CAAC,CAAC,CAAA;QACxC;MACF;MAED,IAAI,OAAA,CAAQ,MAAA,EAAQ;QAClB,MAAM,IAAA,GAAO,OAAA,CAAQ,kBAAA,EAAoB,YAAA,EAAc,WAAA,EAAa,OAAA,CAAQ,MAAM,CAAA;QAElF,WAAA,CAAY,IAAA,CAAK,IAAA,CAAK,CAAC,CAAA,EAAG,IAAA,CAAK,CAAC,CAAA,EAAG,IAAA,CAAK,CAAC,CAAC,CAAA;MAC3C;MAED,IAAI,OAAA,CAAQ,QAAA,IAAY,OAAA,CAAQ,QAAA,CAAS,WAAA,KAAgB,SAAA,EAAW;QAClE,aAAA,GAAgB,OAAA,CAAQ,kBAAA,EAAoB,YAAA,EAAc,WAAA,EAAa,OAAA,CAAQ,QAAQ,CAAA,CAAE,CAAC,CAAA;MAC3F;MAED,IAAI,OAAA,CAAQ,EAAA,EAAI;QACd,OAAA,CAAQ,EAAA,CAAG,OAAA,CAAQ,UAAU,EAAA,EAAI,CAAA,EAAG;UAClC,MAAM,IAAA,GAAO,OAAA,CAAQ,kBAAA,EAAoB,YAAA,EAAc,WAAA,EAAa,EAAE,CAAA;UAEtE,IAAI,OAAA,CAAQ,CAAC,CAAA,KAAM,KAAA,CAAA,EAAW;YAC5B,OAAA,CAAQ,CAAC,CAAA,GAAI,EAAE;UAChB;UAED,OAAA,CAAQ,CAAC,CAAA,CAAE,IAAA,CAAK,IAAA,CAAK,CAAC,CAAC,CAAA;UACvB,OAAA,CAAQ,CAAC,CAAA,CAAE,IAAA,CAAK,IAAA,CAAK,CAAC,CAAC,CAAA;QACjC,CAAS,CAAA;MACF;MAED,UAAA,EAAA;MAEA,IAAI,SAAA,EAAW;QACb,KAAA,CAAM,OAAA,CACJ,OAAA,EACA,OAAA,EACA,mBAAA,EACA,aAAA,EACA,WAAA,EACA,UAAA,EACA,OAAA,EACA,WAAA,EACA,iBAAA,EACA,UACD,CAAA;QAED,YAAA,EAAA;QACA,UAAA,GAAa,CAAA;QAGb,mBAAA,GAAsB,EAAE;QACxB,WAAA,GAAc,EAAE;QAChB,UAAA,GAAa,EAAE;QACf,OAAA,GAAU,EAAE;QACZ,WAAA,GAAc,EAAE;QAChB,iBAAA,GAAoB,EAAE;MACvB;IACP,CAAK,CAAA;IAED,OAAO,OAAA;EACR;EAAA;EAGD,OAAA,CACE,OAAA,EACA,OAAA,EACA,mBAAA,EACA,aAAA,EACA,WAAA,EACA,UAAA,EACA,OAAA,EACA,WAAA,EACA,iBAAA,EACA,UAAA,EACA;IACA,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,UAAA,EAAY,CAAA,EAAA,EAAK;MACnC,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,OAAA,CAAQ,eAAA,CAAgB,mBAAA,CAAoB,CAAC,CAAC,CAAC,CAAA;MACnE,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,OAAA,CAAQ,eAAA,CAAgB,mBAAA,CAAoB,CAAC,CAAC,CAAC,CAAA;MACnE,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,OAAA,CAAQ,eAAA,CAAgB,mBAAA,CAAoB,CAAC,CAAC,CAAC,CAAA;MAEnE,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,OAAA,CAAQ,eAAA,CAAgB,mBAAA,CAAA,CAAqB,CAAA,GAAI,CAAA,IAAK,CAAC,CAAC,CAAC,CAAA;MAC7E,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,OAAA,CAAQ,eAAA,CAAgB,mBAAA,CAAA,CAAqB,CAAA,GAAI,CAAA,IAAK,CAAA,GAAI,CAAC,CAAC,CAAC,CAAA;MACjF,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,OAAA,CAAQ,eAAA,CAAgB,mBAAA,CAAA,CAAqB,CAAA,GAAI,CAAA,IAAK,CAAA,GAAI,CAAC,CAAC,CAAC,CAAA;MAEjF,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,OAAA,CAAQ,eAAA,CAAgB,mBAAA,CAAoB,CAAA,GAAI,CAAC,CAAC,CAAC,CAAA;MACvE,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,OAAA,CAAQ,eAAA,CAAgB,mBAAA,CAAoB,CAAA,GAAI,CAAA,GAAI,CAAC,CAAC,CAAC,CAAA;MAC3E,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,OAAA,CAAQ,eAAA,CAAgB,mBAAA,CAAoB,CAAA,GAAI,CAAA,GAAI,CAAC,CAAC,CAAC,CAAA;MAE3E,IAAI,OAAA,CAAQ,QAAA,EAAU;QACpB,OAAA,CAAQ,aAAA,CAAc,IAAA,CAAK,WAAA,CAAY,CAAC,CAAC,CAAA;QACzC,OAAA,CAAQ,aAAA,CAAc,IAAA,CAAK,WAAA,CAAY,CAAC,CAAC,CAAA;QACzC,OAAA,CAAQ,aAAA,CAAc,IAAA,CAAK,WAAA,CAAY,CAAC,CAAC,CAAA;QACzC,OAAA,CAAQ,aAAA,CAAc,IAAA,CAAK,WAAA,CAAY,CAAC,CAAC,CAAA;QAEzC,OAAA,CAAQ,aAAA,CAAc,IAAA,CAAK,WAAA,CAAA,CAAa,CAAA,GAAI,CAAA,IAAK,CAAC,CAAC,CAAA;QACnD,OAAA,CAAQ,aAAA,CAAc,IAAA,CAAK,WAAA,CAAA,CAAa,CAAA,GAAI,CAAA,IAAK,CAAA,GAAI,CAAC,CAAC,CAAA;QACvD,OAAA,CAAQ,aAAA,CAAc,IAAA,CAAK,WAAA,CAAA,CAAa,CAAA,GAAI,CAAA,IAAK,CAAA,GAAI,CAAC,CAAC,CAAA;QACvD,OAAA,CAAQ,aAAA,CAAc,IAAA,CAAK,WAAA,CAAA,CAAa,CAAA,GAAI,CAAA,IAAK,CAAA,GAAI,CAAC,CAAC,CAAA;QAEvD,OAAA,CAAQ,aAAA,CAAc,IAAA,CAAK,WAAA,CAAY,CAAA,GAAI,CAAC,CAAC,CAAA;QAC7C,OAAA,CAAQ,aAAA,CAAc,IAAA,CAAK,WAAA,CAAY,CAAA,GAAI,CAAA,GAAI,CAAC,CAAC,CAAA;QACjD,OAAA,CAAQ,aAAA,CAAc,IAAA,CAAK,WAAA,CAAY,CAAA,GAAI,CAAA,GAAI,CAAC,CAAC,CAAA;QACjD,OAAA,CAAQ,aAAA,CAAc,IAAA,CAAK,WAAA,CAAY,CAAA,GAAI,CAAA,GAAI,CAAC,CAAC,CAAA;QAEjD,OAAA,CAAQ,cAAA,CAAe,IAAA,CAAK,iBAAA,CAAkB,CAAC,CAAC,CAAA;QAChD,OAAA,CAAQ,cAAA,CAAe,IAAA,CAAK,iBAAA,CAAkB,CAAC,CAAC,CAAA;QAChD,OAAA,CAAQ,cAAA,CAAe,IAAA,CAAK,iBAAA,CAAkB,CAAC,CAAC,CAAA;QAChD,OAAA,CAAQ,cAAA,CAAe,IAAA,CAAK,iBAAA,CAAkB,CAAC,CAAC,CAAA;QAEhD,OAAA,CAAQ,cAAA,CAAe,IAAA,CAAK,iBAAA,CAAA,CAAmB,CAAA,GAAI,CAAA,IAAK,CAAC,CAAC,CAAA;QAC1D,OAAA,CAAQ,cAAA,CAAe,IAAA,CAAK,iBAAA,CAAA,CAAmB,CAAA,GAAI,CAAA,IAAK,CAAA,GAAI,CAAC,CAAC,CAAA;QAC9D,OAAA,CAAQ,cAAA,CAAe,IAAA,CAAK,iBAAA,CAAA,CAAmB,CAAA,GAAI,CAAA,IAAK,CAAA,GAAI,CAAC,CAAC,CAAA;QAC9D,OAAA,CAAQ,cAAA,CAAe,IAAA,CAAK,iBAAA,CAAA,CAAmB,CAAA,GAAI,CAAA,IAAK,CAAA,GAAI,CAAC,CAAC,CAAA;QAE9D,OAAA,CAAQ,cAAA,CAAe,IAAA,CAAK,iBAAA,CAAkB,CAAA,GAAI,CAAC,CAAC,CAAA;QACpD,OAAA,CAAQ,cAAA,CAAe,IAAA,CAAK,iBAAA,CAAkB,CAAA,GAAI,CAAA,GAAI,CAAC,CAAC,CAAA;QACxD,OAAA,CAAQ,cAAA,CAAe,IAAA,CAAK,iBAAA,CAAkB,CAAA,GAAI,CAAA,GAAI,CAAC,CAAC,CAAA;QACxD,OAAA,CAAQ,cAAA,CAAe,IAAA,CAAK,iBAAA,CAAkB,CAAA,GAAI,CAAA,GAAI,CAAC,CAAC,CAAA;MACzD;MAED,IAAI,OAAA,CAAQ,KAAA,EAAO;QACjB,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,UAAA,CAAW,CAAC,CAAC,CAAA;QACjC,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,UAAA,CAAW,CAAC,CAAC,CAAA;QACjC,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,UAAA,CAAW,CAAC,CAAC,CAAA;QAEjC,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,UAAA,CAAA,CAAY,CAAA,GAAI,CAAA,IAAK,CAAC,CAAC,CAAA;QAC3C,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,UAAA,CAAA,CAAY,CAAA,GAAI,CAAA,IAAK,CAAA,GAAI,CAAC,CAAC,CAAA;QAC/C,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,UAAA,CAAA,CAAY,CAAA,GAAI,CAAA,IAAK,CAAA,GAAI,CAAC,CAAC,CAAA;QAE/C,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,UAAA,CAAW,CAAA,GAAI,CAAC,CAAC,CAAA;QACrC,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,UAAA,CAAW,CAAA,GAAI,CAAA,GAAI,CAAC,CAAC,CAAA;QACzC,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,UAAA,CAAW,CAAA,GAAI,CAAA,GAAI,CAAC,CAAC,CAAA;MAC1C;MAED,IAAI,OAAA,CAAQ,QAAA,IAAY,OAAA,CAAQ,QAAA,CAAS,WAAA,KAAgB,SAAA,EAAW;QAClE,OAAA,CAAQ,aAAA,CAAc,IAAA,CAAK,aAAa,CAAA;QACxC,OAAA,CAAQ,aAAA,CAAc,IAAA,CAAK,aAAa,CAAA;QACxC,OAAA,CAAQ,aAAA,CAAc,IAAA,CAAK,aAAa,CAAA;MACzC;MAED,IAAI,OAAA,CAAQ,MAAA,EAAQ;QAClB,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,WAAA,CAAY,CAAC,CAAC,CAAA;QAClC,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,WAAA,CAAY,CAAC,CAAC,CAAA;QAClC,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,WAAA,CAAY,CAAC,CAAC,CAAA;QAElC,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,WAAA,CAAA,CAAa,CAAA,GAAI,CAAA,IAAK,CAAC,CAAC,CAAA;QAC5C,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,WAAA,CAAA,CAAa,CAAA,GAAI,CAAA,IAAK,CAAA,GAAI,CAAC,CAAC,CAAA;QAChD,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,WAAA,CAAA,CAAa,CAAA,GAAI,CAAA,IAAK,CAAA,GAAI,CAAC,CAAC,CAAA;QAEhD,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,WAAA,CAAY,CAAA,GAAI,CAAC,CAAC,CAAA;QACtC,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,WAAA,CAAY,CAAA,GAAI,CAAA,GAAI,CAAC,CAAC,CAAA;QAC1C,OAAA,CAAQ,MAAA,CAAO,IAAA,CAAK,WAAA,CAAY,CAAA,GAAI,CAAA,GAAI,CAAC,CAAC,CAAA;MAC3C;MAED,IAAI,OAAA,CAAQ,EAAA,EAAI;QACd,OAAA,CAAQ,EAAA,CAAG,OAAA,CAAQ,UAAU,EAAA,EAAI,CAAA,EAAG;UAClC,IAAI,OAAA,CAAQ,GAAA,CAAI,CAAC,CAAA,KAAM,KAAA,CAAA,EAAW,OAAA,CAAQ,GAAA,CAAI,CAAC,CAAA,GAAI,EAAE;UAErD,OAAA,CAAQ,GAAA,CAAI,CAAC,CAAA,CAAE,IAAA,CAAK,OAAA,CAAQ,CAAC,CAAA,CAAE,CAAC,CAAC,CAAA;UACjC,OAAA,CAAQ,GAAA,CAAI,CAAC,CAAA,CAAE,IAAA,CAAK,OAAA,CAAQ,CAAC,CAAA,CAAE,CAAC,CAAC,CAAA;UAEjC,OAAA,CAAQ,GAAA,CAAI,CAAC,CAAA,CAAE,IAAA,CAAK,OAAA,CAAQ,CAAC,CAAA,CAAA,CAAG,CAAA,GAAI,CAAA,IAAK,CAAC,CAAC,CAAA;UAC3C,OAAA,CAAQ,GAAA,CAAI,CAAC,CAAA,CAAE,IAAA,CAAK,OAAA,CAAQ,CAAC,CAAA,CAAA,CAAG,CAAA,GAAI,CAAA,IAAK,CAAA,GAAI,CAAC,CAAC,CAAA;UAE/C,OAAA,CAAQ,GAAA,CAAI,CAAC,CAAA,CAAE,IAAA,CAAK,OAAA,CAAQ,CAAC,CAAA,CAAE,CAAA,GAAI,CAAC,CAAC,CAAA;UACrC,OAAA,CAAQ,GAAA,CAAI,CAAC,CAAA,CAAE,IAAA,CAAK,OAAA,CAAQ,CAAC,CAAA,CAAE,CAAA,GAAI,CAAA,GAAI,CAAC,CAAC,CAAA;QACnD,CAAS,CAAA;MACF;IACF;EACF;EAED,eAAA,CAAgB,SAAA,EAAW,aAAA,EAAe,YAAA,EAAc,YAAA,EAAc;IACpE,IAAI,YAAA,CAAa,MAAA,KAAW,CAAA,EAAG;IAE/B,SAAA,CAAU,oBAAA,GAAuB,IAAA;IAEjC,SAAA,CAAU,eAAA,CAAgB,QAAA,GAAW,EAAE;IAGvC,MAAM,KAAA,GAAQ,IAAA;IACd,YAAA,CAAa,OAAA,CAAQ,UAAU,WAAA,EAAa;MAC1C,WAAA,CAAY,UAAA,CAAW,OAAA,CAAQ,UAAU,SAAA,EAAW;QAClD,MAAM,YAAA,GAAe,OAAA,CAAQ,OAAA,CAAQ,QAAA,CAAS,SAAA,CAAU,KAAK,CAAA;QAE7D,IAAI,YAAA,KAAiB,KAAA,CAAA,EAAW;UAC9B,KAAA,CAAM,gBAAA,CAAiB,SAAA,EAAW,aAAA,EAAe,YAAA,EAAc,YAAA,EAAc,SAAA,CAAU,IAAI,CAAA;QAC5F;MACT,CAAO,CAAA;IACP,CAAK,CAAA;EACF;EAAA;EAAA;EAAA;EAAA;EAMD,gBAAA,CAAiB,SAAA,EAAW,aAAA,EAAe,YAAA,EAAc,YAAA,EAAc,IAAA,EAAM;IAC3E,MAAM,aAAA,GAAgB,aAAA,CAAc,kBAAA,KAAuB,KAAA,CAAA,GAAY,aAAA,CAAc,kBAAA,CAAmB,CAAA,GAAI,EAAE;IAE9G,MAAM,oBAAA,GAAuB,YAAA,CAAa,QAAA,KAAa,KAAA,CAAA,GAAY,YAAA,CAAa,QAAA,CAAS,CAAA,GAAI,EAAE;IAC/F,MAAM,OAAA,GAAU,YAAA,CAAa,OAAA,KAAY,KAAA,CAAA,GAAY,YAAA,CAAa,OAAA,CAAQ,CAAA,GAAI,EAAE;IAEhF,MAAM,MAAA,GAAS,SAAA,CAAU,UAAA,CAAW,QAAA,CAAS,KAAA,GAAQ,CAAA;IACrD,MAAM,cAAA,GAAiB,IAAI,YAAA,CAAa,MAAM,CAAA;IAE9C,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,OAAA,CAAQ,MAAA,EAAQ,CAAA,EAAA,EAAK;MACvC,MAAM,UAAA,GAAa,OAAA,CAAQ,CAAC,CAAA,GAAI,CAAA;MAEhC,cAAA,CAAe,UAAU,CAAA,GAAI,oBAAA,CAAqB,CAAA,GAAI,CAAC,CAAA;MACvD,cAAA,CAAe,UAAA,GAAa,CAAC,CAAA,GAAI,oBAAA,CAAqB,CAAA,GAAI,CAAA,GAAI,CAAC,CAAA;MAC/D,cAAA,CAAe,UAAA,GAAa,CAAC,CAAA,GAAI,oBAAA,CAAqB,CAAA,GAAI,CAAA,GAAI,CAAC,CAAA;IAChE;IAGD,MAAM,YAAA,GAAe;MACnB,aAAA;MACA,eAAA,EAAiB;IAClB,CAAA;IAED,MAAM,YAAA,GAAe,IAAA,CAAK,UAAA,CAAW,YAAY,CAAA;IAEjD,MAAM,iBAAA,GAAoB,IAAI,sBAAA,CAAuB,YAAA,CAAa,MAAA,EAAQ,CAAC,CAAA;IAC3E,iBAAA,CAAkB,IAAA,GAAO,IAAA,IAAQ,YAAA,CAAa,QAAA;IAE9C,iBAAA,CAAkB,YAAA,CAAa,YAAY,CAAA;IAE3C,SAAA,CAAU,eAAA,CAAgB,QAAA,CAAS,IAAA,CAAK,iBAAiB,CAAA;EAC1D;EAAA;EAGD,YAAA,CAAa,UAAA,EAAY;IACvB,MAAM,WAAA,GAAc,UAAA,CAAW,sBAAA;IAC/B,MAAM,aAAA,GAAgB,UAAA,CAAW,wBAAA;IACjC,MAAM,MAAA,GAAS,UAAA,CAAW,OAAA,CAAQ,CAAA;IAClC,IAAI,WAAA,GAAc,EAAE;IACpB,IAAI,aAAA,KAAkB,eAAA,EAAiB;MACrC,IAAI,aAAA,IAAiB,UAAA,EAAY;QAC/B,WAAA,GAAc,UAAA,CAAW,WAAA,CAAY,CAAA;MAC7C,CAAA,MAAA,IAAiB,cAAA,IAAkB,UAAA,EAAY;QACvC,WAAA,GAAc,UAAA,CAAW,YAAA,CAAa,CAAA;MACvC;IACF;IAED,OAAO;MACL,QAAA,EAAU,CAAA;MACV,MAAA;MACA,OAAA,EAAS,WAAA;MACT,WAAA;MACA;IACD,CAAA;EACF;EAAA;EAGD,QAAA,CAAS,MAAA,EAAQ;IACf,MAAM,WAAA,GAAc,MAAA,CAAO,sBAAA;IAC3B,MAAM,aAAA,GAAgB,MAAA,CAAO,wBAAA;IAC7B,MAAM,MAAA,GAAS,MAAA,CAAO,EAAA,CAAG,CAAA;IACzB,IAAI,WAAA,GAAc,EAAE;IACpB,IAAI,aAAA,KAAkB,eAAA,EAAiB;MACrC,WAAA,GAAc,MAAA,CAAO,OAAA,CAAQ,CAAA;IAC9B;IAED,OAAO;MACL,QAAA,EAAU,CAAA;MACV,MAAA;MACA,OAAA,EAAS,WAAA;MACT,WAAA;MACA;IACD,CAAA;EACF;EAAA;EAGD,iBAAA,CAAkB,SAAA,EAAW;IAC3B,MAAM,WAAA,GAAc,SAAA,CAAU,sBAAA;IAC9B,MAAM,aAAA,GAAgB,SAAA,CAAU,wBAAA;IAChC,MAAM,MAAA,GAAS,SAAA,CAAU,MAAA,CAAO,CAAA;IAChC,IAAI,WAAA,GAAc,EAAE;IACpB,IAAI,aAAA,KAAkB,eAAA,EAAiB;MACrC,WAAA,GAAc,SAAA,CAAU,UAAA,CAAW,CAAA;IACpC;IAED,OAAO;MACL,QAAA,EAAU,CAAA;MACV,MAAA;MACA,OAAA,EAAS,WAAA;MACT,WAAA;MACA;IACD,CAAA;EACF;EAAA;EAGD,oBAAA,CAAqB,YAAA,EAAc;IACjC,MAAM,WAAA,GAAc,YAAA,CAAa,sBAAA;IACjC,MAAM,aAAA,GAAgB,YAAA,CAAa,wBAAA;IAEnC,IAAI,WAAA,KAAgB,sBAAA,EAAwB;MAC1C,OAAO;QACL,QAAA,EAAU,CAAA;QACV,MAAA,EAAQ,CAAC,CAAC,CAAA;QACV,OAAA,EAAS,CAAC,CAAC,CAAA;QACX,WAAA,EAAa,SAAA;QACb;MACD,CAAA;IACF;IAED,MAAM,mBAAA,GAAsB,YAAA,CAAa,SAAA,CAAU,CAAA;IAKnD,MAAM,eAAA,GAAkB,EAAE;IAE1B,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,mBAAA,CAAoB,MAAA,EAAQ,EAAE,CAAA,EAAG;MACnD,eAAA,CAAgB,IAAA,CAAK,CAAC,CAAA;IACvB;IAED,OAAO;MACL,QAAA,EAAU,CAAA;MACV,MAAA,EAAQ,mBAAA;MACR,OAAA,EAAS,eAAA;MACT,WAAA;MACA;IACD,CAAA;EACF;EAAA;EAGD,kBAAA,CAAmB,OAAA,EAAS;IAC1B,IAAI,UAAA,KAAe,KAAA,CAAA,EAAW;MAC5B,OAAA,CAAQ,KAAA,CACN,4HACD,CAAA;MACD,OAAO,IAAI,cAAA,CAAgB,CAAA;IAC5B;IAED,MAAM,KAAA,GAAQ,QAAA,CAAS,OAAA,CAAQ,KAAK,CAAA;IAEpC,IAAI,KAAA,CAAM,KAAK,CAAA,EAAG;MAChB,OAAA,CAAQ,KAAA,CAAM,6DAAA,EAA+D,OAAA,CAAQ,KAAA,EAAO,OAAA,CAAQ,EAAE,CAAA;MACtG,OAAO,IAAI,cAAA,CAAgB,CAAA;IAC5B;IAED,MAAM,MAAA,GAAS,KAAA,GAAQ,CAAA;IAEvB,MAAM,KAAA,GAAQ,OAAA,CAAQ,UAAA,CAAW,CAAA;IACjC,MAAM,aAAA,GAAgB,EAAE;IACxB,MAAM,YAAA,GAAe,OAAA,CAAQ,MAAA,CAAO,CAAA;IAEpC,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,YAAA,CAAa,MAAA,EAAQ,CAAA,GAAI,CAAA,EAAG,CAAA,IAAK,CAAA,EAAG;MACtD,aAAA,CAAc,IAAA,CAAK,IAAI,OAAA,CAAO,CAAA,CAAG,SAAA,CAAU,YAAA,EAAc,CAAC,CAAC,CAAA;IAC5D;IAED,IAAI,SAAA,EAAW,OAAA;IAEf,IAAI,OAAA,CAAQ,IAAA,KAAS,QAAA,EAAU;MAC7B,aAAA,CAAc,IAAA,CAAK,aAAA,CAAc,CAAC,CAAC,CAAA;IACzC,CAAA,MAAA,IAAe,OAAA,CAAQ,IAAA,KAAS,UAAA,EAAY;MACtC,SAAA,GAAY,MAAA;MACZ,OAAA,GAAU,KAAA,CAAM,MAAA,GAAS,CAAA,GAAI,SAAA;MAE7B,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,MAAA,EAAQ,EAAE,CAAA,EAAG;QAC/B,aAAA,CAAc,IAAA,CAAK,aAAA,CAAc,CAAC,CAAC,CAAA;MACpC;IACF;IAED,MAAM,KAAA,GAAQ,IAAI,UAAA,CAAW,MAAA,EAAQ,KAAA,EAAO,aAAA,EAAe,SAAA,EAAW,OAAO,CAAA;IAC7E,MAAM,MAAA,GAAS,KAAA,CAAM,SAAA,CAAU,aAAA,CAAc,MAAA,GAAS,EAAE,CAAA;IAExD,OAAO,IAAI,cAAA,CAAc,CAAA,CAAG,aAAA,CAAc,MAAM,CAAA;EACjD;AACH;AAGA,MAAM,eAAA,CAAgB;EAAA;EAEpB,KAAA,CAAA,EAAQ;IACN,MAAM,cAAA,GAAiB,EAAE;IAEzB,MAAM,QAAA,GAAW,IAAA,CAAK,UAAA,CAAY,CAAA;IAElC,IAAI,QAAA,KAAa,KAAA,CAAA,EAAW;MAC1B,KAAA,MAAW,GAAA,IAAO,QAAA,EAAU;QAC1B,MAAM,OAAA,GAAU,QAAA,CAAS,GAAG,CAAA;QAE5B,MAAM,IAAA,GAAO,IAAA,CAAK,OAAA,CAAQ,OAAO,CAAA;QAEjC,cAAA,CAAe,IAAA,CAAK,IAAI,CAAA;MACzB;IACF;IAED,OAAO,cAAA;EACR;EAED,UAAA,CAAA,EAAa;IAGX,IAAI,OAAA,CAAQ,OAAA,CAAQ,cAAA,KAAmB,KAAA,CAAA,EAAW,OAAO,KAAA,CAAA;IAEzD,MAAM,aAAA,GAAgB,IAAA,CAAK,wBAAA,CAA0B,CAAA;IAErD,IAAA,CAAK,oBAAA,CAAqB,aAAa,CAAA;IAEvC,MAAM,SAAA,GAAY,IAAA,CAAK,oBAAA,CAAqB,aAAa,CAAA;IACzD,MAAM,QAAA,GAAW,IAAA,CAAK,eAAA,CAAgB,SAAS,CAAA;IAE/C,OAAO,QAAA;EACR;EAAA;EAAA;EAAA;EAKD,wBAAA,CAAA,EAA2B;IACzB,MAAM,aAAA,GAAgB,OAAA,CAAQ,OAAA,CAAQ,kBAAA;IAEtC,MAAM,aAAA,GAAgB,eAAA,IAAI,GAAA,CAAK,CAAA;IAE/B,KAAA,MAAW,MAAA,IAAU,aAAA,EAAe;MAClC,MAAM,YAAA,GAAe,aAAA,CAAc,MAAM,CAAA;MAEzC,IAAI,YAAA,CAAa,QAAA,CAAS,KAAA,CAAM,qBAAqB,CAAA,KAAM,IAAA,EAAM;QAC/D,MAAM,SAAA,GAAY;UAChB,EAAA,EAAI,YAAA,CAAa,EAAA;UACjB,IAAA,EAAM,YAAA,CAAa,QAAA;UACnB,MAAA,EAAQ,CAAE;QACX,CAAA;QAED,aAAA,CAAc,GAAA,CAAI,SAAA,CAAU,EAAA,EAAI,SAAS,CAAA;MAC1C;IACF;IAED,OAAO,aAAA;EACR;EAAA;EAAA;EAAA;EAKD,oBAAA,CAAqB,aAAA,EAAe;IAClC,MAAM,SAAA,GAAY,OAAA,CAAQ,OAAA,CAAQ,cAAA;IASlC,KAAA,MAAW,MAAA,IAAU,SAAA,EAAW;MAC9B,MAAM,cAAA,GAAiB;QACrB,EAAA,EAAI,SAAA,CAAU,MAAM,CAAA,CAAE,EAAA;QACtB,KAAA,EAAO,SAAA,CAAU,MAAM,CAAA,CAAE,OAAA,CAAQ,CAAA,CAAE,GAAA,CAAI,uBAAuB,CAAA;QAC9D,MAAA,EAAQ,SAAA,CAAU,MAAM,CAAA,CAAE,aAAA,CAAc;MACzC,CAAA;MAED,MAAM,aAAA,GAAgB,WAAA,CAAY,GAAA,CAAI,cAAA,CAAe,EAAE,CAAA;MAEvD,IAAI,aAAA,KAAkB,KAAA,CAAA,EAAW;QAC/B,MAAM,gBAAA,GAAmB,aAAA,CAAc,OAAA,CAAQ,CAAC,CAAA,CAAE,EAAA;QAClD,MAAM,0BAAA,GAA6B,aAAA,CAAc,OAAA,CAAQ,CAAC,CAAA,CAAE,YAAA;QAE5D,IAAI,0BAAA,CAA2B,KAAA,CAAM,GAAG,CAAA,EAAG;UACzC,aAAA,CAAc,GAAA,CAAI,gBAAgB,CAAA,CAAE,MAAA,CAAO,GAAG,CAAA,GAAI,cAAA;QACnD,CAAA,MAAA,IAAU,0BAAA,CAA2B,KAAA,CAAM,GAAG,CAAA,EAAG;UAChD,aAAA,CAAc,GAAA,CAAI,gBAAgB,CAAA,CAAE,MAAA,CAAO,GAAG,CAAA,GAAI,cAAA;QACnD,CAAA,MAAA,IAAU,0BAAA,CAA2B,KAAA,CAAM,GAAG,CAAA,EAAG;UAChD,aAAA,CAAc,GAAA,CAAI,gBAAgB,CAAA,CAAE,MAAA,CAAO,GAAG,CAAA,GAAI,cAAA;QAC5D,CAAA,MAAA,IAAmB,0BAAA,CAA2B,KAAA,CAAM,iBAAiB,CAAA,IAAK,aAAA,CAAc,GAAA,CAAI,gBAAgB,CAAA,EAAG;UACrG,aAAA,CAAc,GAAA,CAAI,gBAAgB,CAAA,CAAE,MAAA,CAAO,OAAO,CAAA,GAAI,cAAA;QACvD;MACF;IACF;EACF;EAAA;EAAA;EAAA;EAKD,oBAAA,CAAqB,aAAA,EAAe;IAClC,MAAM,SAAA,GAAY,OAAA,CAAQ,OAAA,CAAQ,cAAA;IAElC,MAAM,SAAA,GAAY,eAAA,IAAI,GAAA,CAAK,CAAA;IAE3B,KAAA,MAAW,MAAA,IAAU,SAAA,EAAW;MAC9B,MAAM,eAAA,GAAkB,EAAE;MAE1B,MAAM,UAAA,GAAa,WAAA,CAAY,GAAA,CAAI,QAAA,CAAS,MAAM,CAAC,CAAA;MAEnD,IAAI,UAAA,KAAe,KAAA,CAAA,EAAW;QAE5B,MAAM,QAAA,GAAW,UAAA,CAAW,QAAA;QAE5B,QAAA,CAAS,OAAA,CAAQ,UAAU,KAAA,EAAO,CAAA,EAAG;UACnC,IAAI,aAAA,CAAc,GAAA,CAAI,KAAA,CAAM,EAAE,CAAA,EAAG;YAC/B,MAAM,SAAA,GAAY,aAAA,CAAc,GAAA,CAAI,KAAA,CAAM,EAAE,CAAA;YAG5C,IACE,SAAA,CAAU,MAAA,CAAO,CAAA,KAAM,KAAA,CAAA,IACvB,SAAA,CAAU,MAAA,CAAO,CAAA,KAAM,KAAA,CAAA,IACvB,SAAA,CAAU,MAAA,CAAO,CAAA,KAAM,KAAA,CAAA,EACvB;cACA,IAAI,eAAA,CAAgB,CAAC,CAAA,KAAM,KAAA,CAAA,EAAW;gBACpC,MAAM,OAAA,GAAU,WAAA,CAAY,GAAA,CAAI,KAAA,CAAM,EAAE,CAAA,CAAE,OAAA,CAAQ,MAAA,CAAO,UAAU,MAAA,EAAQ;kBACzE,OAAO,MAAA,CAAO,YAAA,KAAiB,KAAA,CAAA;gBACjD,CAAiB,CAAA,CAAE,CAAC,CAAA,CAAE,EAAA;gBAEN,IAAI,OAAA,KAAY,KAAA,CAAA,EAAW;kBACzB,MAAM,QAAA,GAAW,OAAA,CAAQ,OAAA,CAAQ,KAAA,CAAM,OAAA,CAAQ,QAAA,CAAA,CAAU,CAAA;kBAEzD,IAAI,QAAA,KAAa,KAAA,CAAA,EAAW;oBAC1B,OAAA,CAAQ,IAAA,CAAK,8CAAA,EAAgD,KAAK,CAAA;oBAClE;kBACD;kBAED,MAAM,IAAA,GAAO;oBACX,SAAA,EAAW,QAAA,CAAS,QAAA,GAAW,eAAA,CAAgB,gBAAA,CAAiB,QAAA,CAAS,QAAQ,CAAA,GAAI,EAAA;oBACrF,EAAA,EAAI,QAAA,CAAS,EAAA;oBACb,eAAA,EAAiB,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;oBACzB,eAAA,EAAiB,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;oBACzB,YAAA,EAAc,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC;kBACvB,CAAA;kBAED,UAAA,CAAW,QAAA,CAAS,UAAUF,MAAAA,EAAO;oBACnC,IAAIA,MAAAA,CAAM,EAAA,KAAO,QAAA,CAAS,EAAA,EAAI;sBAC5B,IAAA,CAAK,SAAA,GAAYA,MAAAA,CAAM,MAAA;sBAEvB,IAAIA,MAAAA,CAAM,QAAA,CAAS,aAAA,EAAe,IAAA,CAAK,UAAA,GAAaA,MAAAA,CAAM,QAAA,CAAS,aAAA,CAAc,UAAA;oBAClF;kBACrB,CAAmB,CAAA;kBAED,IAAI,CAAC,IAAA,CAAK,SAAA,EAAW,IAAA,CAAK,SAAA,GAAY,IAAI,OAAA,CAAS,CAAA;kBAInD,IAAI,aAAA,IAAiB,QAAA,EAAU,IAAA,CAAK,WAAA,GAAc,QAAA,CAAS,WAAA,CAAY,KAAA;kBACvE,IAAI,cAAA,IAAkB,QAAA,EAAU,IAAA,CAAK,YAAA,GAAe,QAAA,CAAS,YAAA,CAAa,KAAA;kBAE1E,eAAA,CAAgB,CAAC,CAAA,GAAI,IAAA;gBACtB;cACF;cAED,IAAI,eAAA,CAAgB,CAAC,CAAA,EAAG,eAAA,CAAgB,CAAC,CAAA,CAAE,SAAA,CAAU,IAAI,CAAA,GAAI,SAAA;YAC9D,CAAA,MAAA,IAAU,SAAA,CAAU,MAAA,CAAO,KAAA,KAAU,KAAA,CAAA,EAAW;cAC/C,IAAI,eAAA,CAAgB,CAAC,CAAA,KAAM,KAAA,CAAA,EAAW;gBACpC,MAAM,UAAA,GAAa,WAAA,CAAY,GAAA,CAAI,KAAA,CAAM,EAAE,CAAA,CAAE,OAAA,CAAQ,MAAA,CAAO,UAAU,MAAA,EAAQ;kBAC5E,OAAO,MAAA,CAAO,YAAA,KAAiB,KAAA,CAAA;gBACjD,CAAiB,CAAA,CAAE,CAAC,CAAA,CAAE,EAAA;gBAEN,MAAM,SAAA,GAAY,WAAA,CAAY,GAAA,CAAI,UAAU,CAAA,CAAE,OAAA,CAAQ,CAAC,CAAA,CAAE,EAAA;gBACzD,MAAM,KAAA,GAAQ,WAAA,CAAY,GAAA,CAAI,SAAS,CAAA,CAAE,OAAA,CAAQ,CAAC,CAAA,CAAE,EAAA;gBAGpD,MAAM,OAAA,GAAU,WAAA,CAAY,GAAA,CAAI,KAAK,CAAA,CAAE,OAAA,CAAQ,CAAC,CAAA,CAAE,EAAA;gBAElD,MAAM,QAAA,GAAW,OAAA,CAAQ,OAAA,CAAQ,KAAA,CAAM,OAAO,CAAA;gBAE9C,MAAM,IAAA,GAAO;kBACX,SAAA,EAAW,QAAA,CAAS,QAAA,GAAW,eAAA,CAAgB,gBAAA,CAAiB,QAAA,CAAS,QAAQ,CAAA,GAAI,EAAA;kBACrF,SAAA,EAAW,OAAA,CAAQ,OAAA,CAAQ,QAAA,CAAS,UAAU,CAAA,CAAE;gBACjD,CAAA;gBAED,eAAA,CAAgB,CAAC,CAAA,GAAI,IAAA;cACtB;cAED,eAAA,CAAgB,CAAC,CAAA,CAAE,SAAA,CAAU,IAAI,CAAA,GAAI,SAAA;YACtC;UACF;QACX,CAAS,CAAA;QAED,SAAA,CAAU,GAAA,CAAI,QAAA,CAAS,MAAM,CAAA,EAAG,eAAe,CAAA;MAChD;IACF;IAED,OAAO,SAAA;EACR;EAAA;EAAA;EAID,eAAA,CAAgB,SAAA,EAAW;IACzB,MAAM,SAAA,GAAY,OAAA,CAAQ,OAAA,CAAQ,cAAA;IAGlC,MAAM,QAAA,GAAW,CAAE,CAAA;IAEnB,KAAA,MAAW,MAAA,IAAU,SAAA,EAAW;MAC9B,MAAM,QAAA,GAAW,WAAA,CAAY,GAAA,CAAI,QAAA,CAAS,MAAM,CAAC,CAAA,CAAE,QAAA;MAEnD,IAAI,QAAA,CAAS,MAAA,GAAS,CAAA,EAAG;QAGvB,OAAA,CAAQ,IAAA,CACN,oIACD,CAAA;MACF;MAED,MAAM,KAAA,GAAQ,SAAA,CAAU,GAAA,CAAI,QAAA,CAAS,CAAC,CAAA,CAAE,EAAE,CAAA;MAE1C,QAAA,CAAS,MAAM,CAAA,GAAI;QACjB,IAAA,EAAM,SAAA,CAAU,MAAM,CAAA,CAAE,QAAA;QACxB;MACD,CAAA;IACF;IAED,OAAO,QAAA;EACR;EAED,OAAA,CAAQ,OAAA,EAAS;IACf,IAAI,MAAA,GAAS,EAAE;IAEf,MAAM,KAAA,GAAQ,IAAA;IACd,OAAA,CAAQ,KAAA,CAAM,OAAA,CAAQ,UAAU,SAAA,EAAW;MACzC,MAAA,GAAS,MAAA,CAAO,MAAA,CAAO,KAAA,CAAM,cAAA,CAAe,SAAS,CAAC,CAAA;IAC5D,CAAK,CAAA;IAED,OAAO,IAAI,aAAA,CAAc,OAAA,CAAQ,IAAA,EAAM,CAAA,CAAA,EAAI,MAAM,CAAA;EAClD;EAED,cAAA,CAAe,SAAA,EAAW;IACxB,MAAM,MAAA,GAAS,EAAE;IAEjB,IAAI,eAAA,GAAkB,IAAI,OAAA,CAAS,CAAA;IACnC,IAAI,eAAA,GAAkB,IAAI,UAAA,CAAY,CAAA;IACtC,IAAI,YAAA,GAAe,IAAI,OAAA,CAAS,CAAA;IAEhC,IAAI,SAAA,CAAU,SAAA,EAAW,SAAA,CAAU,SAAA,CAAU,SAAA,CAAU,eAAA,EAAiB,eAAA,EAAiB,YAAY,CAAA;IAErG,eAAA,GAAkB,eAAA,CAAgB,OAAA,CAAS,CAAA;IAC3C,eAAA,GAAkB,IAAI,KAAA,CAAK,CAAA,CAAG,iBAAA,CAAkB,eAAA,EAAiB,SAAA,CAAU,UAAU,CAAA,CAAE,OAAA,CAAS,CAAA;IAChG,YAAA,GAAe,YAAA,CAAa,OAAA,CAAS,CAAA;IAErC,IAAI,SAAA,CAAU,CAAA,KAAM,KAAA,CAAA,IAAa,MAAA,CAAO,IAAA,CAAK,SAAA,CAAU,CAAA,CAAE,MAAM,CAAA,CAAE,MAAA,GAAS,CAAA,EAAG;MAC3E,MAAM,aAAA,GAAgB,IAAA,CAAK,mBAAA,CACzB,SAAA,CAAU,SAAA,EACV,SAAA,CAAU,CAAA,CAAE,MAAA,EACZ,eAAA,EACA,UACD,CAAA;MACD,IAAI,aAAA,KAAkB,KAAA,CAAA,EAAW,MAAA,CAAO,IAAA,CAAK,aAAa,CAAA;IAC3D;IAED,IAAI,SAAA,CAAU,CAAA,KAAM,KAAA,CAAA,IAAa,MAAA,CAAO,IAAA,CAAK,SAAA,CAAU,CAAA,CAAE,MAAM,CAAA,CAAE,MAAA,GAAS,CAAA,EAAG;MAC3E,MAAM,aAAA,GAAgB,IAAA,CAAK,qBAAA,CACzB,SAAA,CAAU,SAAA,EACV,SAAA,CAAU,CAAA,CAAE,MAAA,EACZ,eAAA,EACA,SAAA,CAAU,WAAA,EACV,SAAA,CAAU,YAAA,EACV,SAAA,CAAU,UACX,CAAA;MACD,IAAI,aAAA,KAAkB,KAAA,CAAA,EAAW,MAAA,CAAO,IAAA,CAAK,aAAa,CAAA;IAC3D;IAED,IAAI,SAAA,CAAU,CAAA,KAAM,KAAA,CAAA,IAAa,MAAA,CAAO,IAAA,CAAK,SAAA,CAAU,CAAA,CAAE,MAAM,CAAA,CAAE,MAAA,GAAS,CAAA,EAAG;MAC3E,MAAM,UAAA,GAAa,IAAA,CAAK,mBAAA,CAAoB,SAAA,CAAU,SAAA,EAAW,SAAA,CAAU,CAAA,CAAE,MAAA,EAAQ,YAAA,EAAc,OAAO,CAAA;MAC1G,IAAI,UAAA,KAAe,KAAA,CAAA,EAAW,MAAA,CAAO,IAAA,CAAK,UAAU,CAAA;IACrD;IAED,IAAI,SAAA,CAAU,aAAA,KAAkB,KAAA,CAAA,EAAW;MACzC,MAAM,UAAA,GAAa,IAAA,CAAK,kBAAA,CAAmB,SAAS,CAAA;MACpD,IAAI,UAAA,KAAe,KAAA,CAAA,EAAW,MAAA,CAAO,IAAA,CAAK,UAAU,CAAA;IACrD;IAED,OAAO,MAAA;EACR;EAED,mBAAA,CAAoB,SAAA,EAAW,MAAA,EAAQ,YAAA,EAAc,IAAA,EAAM;IACzD,MAAM,KAAA,GAAQ,IAAA,CAAK,kBAAA,CAAmB,MAAM,CAAA;IAC5C,MAAM,MAAA,GAAS,IAAA,CAAK,sBAAA,CAAuB,KAAA,EAAO,MAAA,EAAQ,YAAY,CAAA;IAEtE,OAAO,IAAI,mBAAA,CAAoB,SAAA,GAAY,GAAA,GAAM,IAAA,EAAM,KAAA,EAAO,MAAM,CAAA;EACrE;EAED,qBAAA,CAAsB,SAAA,EAAW,MAAA,EAAQ,YAAA,EAAc,WAAA,EAAa,YAAA,EAAc,UAAA,EAAY;IAC5F,IAAI,MAAA,CAAO,CAAA,KAAM,KAAA,CAAA,EAAW;MAC1B,IAAA,CAAK,oBAAA,CAAqB,MAAA,CAAO,CAAC,CAAA;MAClC,MAAA,CAAO,CAAA,CAAE,MAAA,GAAS,MAAA,CAAO,CAAA,CAAE,MAAA,CAAO,GAAA,CAAI,SAAA,CAAU,QAAQ,CAAA;IACzD;IAED,IAAI,MAAA,CAAO,CAAA,KAAM,KAAA,CAAA,EAAW;MAC1B,IAAA,CAAK,oBAAA,CAAqB,MAAA,CAAO,CAAC,CAAA;MAClC,MAAA,CAAO,CAAA,CAAE,MAAA,GAAS,MAAA,CAAO,CAAA,CAAE,MAAA,CAAO,GAAA,CAAI,SAAA,CAAU,QAAQ,CAAA;IACzD;IAED,IAAI,MAAA,CAAO,CAAA,KAAM,KAAA,CAAA,EAAW;MAC1B,IAAA,CAAK,oBAAA,CAAqB,MAAA,CAAO,CAAC,CAAA;MAClC,MAAA,CAAO,CAAA,CAAE,MAAA,GAAS,MAAA,CAAO,CAAA,CAAE,MAAA,CAAO,GAAA,CAAI,SAAA,CAAU,QAAQ,CAAA;IACzD;IAED,MAAM,KAAA,GAAQ,IAAA,CAAK,kBAAA,CAAmB,MAAM,CAAA;IAC5C,MAAM,MAAA,GAAS,IAAA,CAAK,sBAAA,CAAuB,KAAA,EAAO,MAAA,EAAQ,YAAY,CAAA;IAEtE,IAAI,WAAA,KAAgB,KAAA,CAAA,EAAW;MAC7B,WAAA,GAAc,WAAA,CAAY,GAAA,CAAI,SAAA,CAAU,QAAQ,CAAA;MAChD,WAAA,CAAY,IAAA,CAAK,UAAU,CAAA;MAE3B,WAAA,GAAc,IAAI,KAAA,CAAA,CAAA,CAAQ,SAAA,CAAU,WAAW,CAAA;MAC/C,WAAA,GAAc,IAAI,UAAA,CAAA,CAAA,CAAa,YAAA,CAAa,WAAW,CAAA;IACxD;IAED,IAAI,YAAA,KAAiB,KAAA,CAAA,EAAW;MAC9B,YAAA,GAAe,YAAA,CAAa,GAAA,CAAI,SAAA,CAAU,QAAQ,CAAA;MAClD,YAAA,CAAa,IAAA,CAAK,UAAU,CAAA;MAE5B,YAAA,GAAe,IAAI,KAAA,CAAA,CAAA,CAAQ,SAAA,CAAU,YAAY,CAAA;MACjD,YAAA,GAAe,IAAI,UAAA,CAAY,CAAA,CAAC,YAAA,CAAa,YAAY,CAAA,CAAE,MAAA,CAAQ,CAAA;IACpE;IAED,MAAM,UAAA,GAAa,IAAI,UAAA,CAAY,CAAA;IACnC,MAAM,KAAA,GAAQ,IAAI,KAAA,CAAO,CAAA;IAEzB,MAAM,gBAAA,GAAmB,EAAE;IAE3B,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,MAAA,CAAO,MAAA,EAAQ,CAAA,IAAK,CAAA,EAAG;MACzC,KAAA,CAAM,GAAA,CAAI,MAAA,CAAO,CAAC,CAAA,EAAG,MAAA,CAAO,CAAA,GAAI,CAAC,CAAA,EAAG,MAAA,CAAO,CAAA,GAAI,CAAC,CAAA,EAAG,UAAU,CAAA;MAE7D,UAAA,CAAW,YAAA,CAAa,KAAK,CAAA;MAE7B,IAAI,WAAA,KAAgB,KAAA,CAAA,EAAW,UAAA,CAAW,WAAA,CAAY,WAAW,CAAA;MACjE,IAAI,YAAA,KAAiB,KAAA,CAAA,EAAW,UAAA,CAAW,QAAA,CAAS,YAAY,CAAA;MAEhE,UAAA,CAAW,OAAA,CAAQ,gBAAA,EAAmB,CAAA,GAAI,CAAA,GAAK,CAAC,CAAA;IACjD;IAED,OAAO,IAAI,uBAAA,CAAwB,SAAA,GAAY,aAAA,EAAe,KAAA,EAAO,gBAAgB,CAAA;EACtF;EAED,kBAAA,CAAmB,SAAA,EAAW;IAC5B,MAAM,MAAA,GAAS,SAAA,CAAU,aAAA,CAAc,MAAA,CAAO,KAAA;IAC9C,MAAM,MAAA,GAAS,MAAA,CAAO,MAAA,CAAO,GAAA,CAAI,UAAU,GAAA,EAAK;MAC9C,OAAO,GAAA,GAAM,GAAA;IACnB,CAAK,CAAA;IAED,MAAM,QAAA,GAAW,UAAA,CAAW,eAAA,CAAgB,SAAA,CAAU,SAAS,CAAA,CAAE,qBAAA,CAAsB,SAAA,CAAU,SAAS,CAAA;IAE1G,OAAO,IAAI,mBAAA,CACT,SAAA,CAAU,SAAA,GAAY,yBAAA,GAA4B,QAAA,GAAW,GAAA,EAC7D,MAAA,CAAO,KAAA,EACP,MACD,CAAA;EACF;EAAA;EAAA;EAID,kBAAA,CAAmB,MAAA,EAAQ;IACzB,IAAI,KAAA,GAAQ,EAAE;IAGd,IAAI,MAAA,CAAO,CAAA,KAAM,KAAA,CAAA,EAAW,KAAA,GAAQ,KAAA,CAAM,MAAA,CAAO,MAAA,CAAO,CAAA,CAAE,KAAK,CAAA;IAC/D,IAAI,MAAA,CAAO,CAAA,KAAM,KAAA,CAAA,EAAW,KAAA,GAAQ,KAAA,CAAM,MAAA,CAAO,MAAA,CAAO,CAAA,CAAE,KAAK,CAAA;IAC/D,IAAI,MAAA,CAAO,CAAA,KAAM,KAAA,CAAA,EAAW,KAAA,GAAQ,KAAA,CAAM,MAAA,CAAO,MAAA,CAAO,CAAA,CAAE,KAAK,CAAA;IAG/D,KAAA,GAAQ,KAAA,CAAM,IAAA,CAAK,UAAU,CAAA,EAAG,CAAA,EAAG;MACjC,OAAO,CAAA,GAAI,CAAA;IACjB,CAAK,CAAA;IAGD,IAAI,KAAA,CAAM,MAAA,GAAS,CAAA,EAAG;MACpB,IAAI,WAAA,GAAc,CAAA;MAClB,IAAI,SAAA,GAAY,KAAA,CAAM,CAAC,CAAA;MACvB,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,KAAA,CAAM,MAAA,EAAQ,CAAA,EAAA,EAAK;QACrC,MAAM,YAAA,GAAe,KAAA,CAAM,CAAC,CAAA;QAC5B,IAAI,YAAA,KAAiB,SAAA,EAAW;UAC9B,KAAA,CAAM,WAAW,CAAA,GAAI,YAAA;UACrB,SAAA,GAAY,YAAA;UACZ,WAAA,EAAA;QACD;MACF;MAED,KAAA,GAAQ,KAAA,CAAM,KAAA,CAAM,CAAA,EAAG,WAAW,CAAA;IACnC;IAED,OAAO,KAAA;EACR;EAED,sBAAA,CAAuB,KAAA,EAAO,MAAA,EAAQ,YAAA,EAAc;IAClD,MAAM,SAAA,GAAY,YAAA;IAElB,MAAM,MAAA,GAAS,EAAE;IAEjB,IAAI,MAAA,GAAS,CAAA,CAAA;IACb,IAAI,MAAA,GAAS,CAAA,CAAA;IACb,IAAI,MAAA,GAAS,CAAA,CAAA;IAEb,KAAA,CAAM,OAAA,CAAQ,UAAU,IAAA,EAAM;MAC5B,IAAI,MAAA,CAAO,CAAA,EAAG,MAAA,GAAS,MAAA,CAAO,CAAA,CAAE,KAAA,CAAM,OAAA,CAAQ,IAAI,CAAA;MAClD,IAAI,MAAA,CAAO,CAAA,EAAG,MAAA,GAAS,MAAA,CAAO,CAAA,CAAE,KAAA,CAAM,OAAA,CAAQ,IAAI,CAAA;MAClD,IAAI,MAAA,CAAO,CAAA,EAAG,MAAA,GAAS,MAAA,CAAO,CAAA,CAAE,KAAA,CAAM,OAAA,CAAQ,IAAI,CAAA;MAGlD,IAAI,MAAA,KAAW,CAAA,CAAA,EAAI;QACjB,MAAM,MAAA,GAAS,MAAA,CAAO,CAAA,CAAE,MAAA,CAAO,MAAM,CAAA;QACrC,MAAA,CAAO,IAAA,CAAK,MAAM,CAAA;QAClB,SAAA,CAAU,CAAC,CAAA,GAAI,MAAA;MACvB,CAAA,MAAa;QAEL,MAAA,CAAO,IAAA,CAAK,SAAA,CAAU,CAAC,CAAC,CAAA;MACzB;MAED,IAAI,MAAA,KAAW,CAAA,CAAA,EAAI;QACjB,MAAM,MAAA,GAAS,MAAA,CAAO,CAAA,CAAE,MAAA,CAAO,MAAM,CAAA;QACrC,MAAA,CAAO,IAAA,CAAK,MAAM,CAAA;QAClB,SAAA,CAAU,CAAC,CAAA,GAAI,MAAA;MACvB,CAAA,MAAa;QACL,MAAA,CAAO,IAAA,CAAK,SAAA,CAAU,CAAC,CAAC,CAAA;MACzB;MAED,IAAI,MAAA,KAAW,CAAA,CAAA,EAAI;QACjB,MAAM,MAAA,GAAS,MAAA,CAAO,CAAA,CAAE,MAAA,CAAO,MAAM,CAAA;QACrC,MAAA,CAAO,IAAA,CAAK,MAAM,CAAA;QAClB,SAAA,CAAU,CAAC,CAAA,GAAI,MAAA;MACvB,CAAA,MAAa;QACL,MAAA,CAAO,IAAA,CAAK,SAAA,CAAU,CAAC,CAAC,CAAA;MACzB;IACP,CAAK,CAAA;IAED,OAAO,MAAA;EACR;EAAA;EAAA;EAAA;EAKD,oBAAA,CAAqB,KAAA,EAAO;IAC1B,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,KAAA,CAAM,MAAA,CAAO,MAAA,EAAQ,CAAA,EAAA,EAAK;MAC5C,MAAM,YAAA,GAAe,KAAA,CAAM,MAAA,CAAO,CAAA,GAAI,CAAC,CAAA;MACvC,MAAM,UAAA,GAAa,KAAA,CAAM,MAAA,CAAO,CAAC,CAAA,GAAI,YAAA;MAErC,MAAM,YAAA,GAAe,IAAA,CAAK,GAAA,CAAI,UAAU,CAAA;MAExC,IAAI,YAAA,IAAgB,GAAA,EAAK;QACvB,MAAM,eAAA,GAAkB,YAAA,GAAe,GAAA;QAEvC,MAAM,IAAA,GAAO,UAAA,GAAa,eAAA;QAC1B,IAAI,SAAA,GAAY,YAAA,GAAe,IAAA;QAE/B,MAAM,WAAA,GAAc,KAAA,CAAM,KAAA,CAAM,CAAA,GAAI,CAAC,CAAA;QACrC,MAAM,QAAA,GAAW,KAAA,CAAM,KAAA,CAAM,CAAC,CAAA,GAAI,WAAA;QAClC,MAAM,QAAA,GAAW,QAAA,GAAW,eAAA;QAC5B,IAAI,QAAA,GAAW,WAAA,GAAc,QAAA;QAE7B,MAAM,iBAAA,GAAoB,EAAE;QAC5B,MAAM,kBAAA,GAAqB,EAAE;QAE7B,OAAO,QAAA,GAAW,KAAA,CAAM,KAAA,CAAM,CAAC,CAAA,EAAG;UAChC,iBAAA,CAAkB,IAAA,CAAK,QAAQ,CAAA;UAC/B,QAAA,IAAY,QAAA;UAEZ,kBAAA,CAAmB,IAAA,CAAK,SAAS,CAAA;UACjC,SAAA,IAAa,IAAA;QACd;QAED,KAAA,CAAM,KAAA,GAAQ,MAAA,CAAO,KAAA,CAAM,KAAA,EAAO,CAAA,EAAG,iBAAiB,CAAA;QACtD,KAAA,CAAM,MAAA,GAAS,MAAA,CAAO,KAAA,CAAM,MAAA,EAAQ,CAAA,EAAG,kBAAkB,CAAA;MAC1D;IACF;EACF;AACH;AAGA,MAAM,UAAA,CAAW;EACf,WAAA,CAAA,EAAc;IACZ,OAAO,IAAA,CAAK,SAAA,CAAU,IAAA,CAAK,aAAA,GAAgB,CAAC,CAAA;EAC7C;EAED,cAAA,CAAA,EAAiB;IACf,OAAO,IAAA,CAAK,SAAA,CAAU,IAAA,CAAK,aAAA,GAAgB,CAAC,CAAA;EAC7C;EAED,cAAA,CAAA,EAAiB;IACf,OAAO,IAAA,CAAK,WAAA;EACb;EAED,SAAA,CAAU,IAAA,EAAM;IACd,IAAA,CAAK,SAAA,CAAU,IAAA,CAAK,IAAI,CAAA;IACxB,IAAA,CAAK,aAAA,IAAiB,CAAA;EACvB;EAED,QAAA,CAAA,EAAW;IACT,IAAA,CAAK,SAAA,CAAU,GAAA,CAAK,CAAA;IACpB,IAAA,CAAK,aAAA,IAAiB,CAAA;EACvB;EAED,cAAA,CAAe,GAAA,EAAK,IAAA,EAAM;IACxB,IAAA,CAAK,WAAA,GAAc,GAAA;IACnB,IAAA,CAAK,eAAA,GAAkB,IAAA;EACxB;EAED,KAAA,CAAM,IAAA,EAAM;IACV,IAAA,CAAK,aAAA,GAAgB,CAAA;IAErB,IAAA,CAAK,QAAA,GAAW,IAAI,OAAA,CAAS,CAAA;IAC7B,IAAA,CAAK,SAAA,GAAY,EAAE;IACnB,IAAA,CAAK,WAAA,GAAc,EAAE;IACrB,IAAA,CAAK,eAAA,GAAkB,EAAA;IAEvB,MAAM,KAAA,GAAQ,IAAA;IAEd,MAAM,KAAA,GAAQ,IAAA,CAAK,KAAA,CAAM,SAAS,CAAA;IAElC,KAAA,CAAM,OAAA,CAAQ,UAAU,IAAA,EAAM,CAAA,EAAG;MAC/B,MAAM,YAAA,GAAe,IAAA,CAAK,KAAA,CAAM,WAAW,CAAA;MAC3C,MAAM,UAAA,GAAa,IAAA,CAAK,KAAA,CAAM,WAAW,CAAA;MAEzC,IAAI,YAAA,IAAgB,UAAA,EAAY;MAEhC,MAAM,cAAA,GAAiB,IAAA,CAAK,KAAA,CAAM,OAAA,GAAU,KAAA,CAAM,aAAA,GAAgB,eAAA,EAAiB,EAAE,CAAA;MACrF,MAAM,aAAA,GAAgB,IAAA,CAAK,KAAA,CAAM,OAAA,GAAU,KAAA,CAAM,aAAA,GAAgB,4BAA4B,CAAA;MAC7F,MAAM,QAAA,GAAW,IAAA,CAAK,KAAA,CAAM,OAAA,IAAW,KAAA,CAAM,aAAA,GAAgB,CAAA,CAAA,GAAK,IAAI,CAAA;MAEtE,IAAI,cAAA,EAAgB;QAClB,KAAA,CAAM,cAAA,CAAe,IAAA,EAAM,cAAc,CAAA;MAC1C,CAAA,MAAA,IAAU,aAAA,EAAe;QACxB,KAAA,CAAM,iBAAA,CAAkB,IAAA,EAAM,aAAA,EAAe,KAAA,CAAM,EAAE,CAAC,CAAC,CAAA;MACxD,CAAA,MAAA,IAAU,QAAA,EAAU;QACnB,KAAA,CAAM,QAAA,CAAU,CAAA;MACjB,CAAA,MAAA,IAAU,IAAA,CAAK,KAAA,CAAM,WAAW,CAAA,EAAG;QAGlC,KAAA,CAAM,0BAAA,CAA2B,IAAI,CAAA;MACtC;IACP,CAAK,CAAA;IAED,OAAO,IAAA,CAAK,QAAA;EACb;EAED,cAAA,CAAe,IAAA,EAAM,QAAA,EAAU;IAC7B,MAAM,QAAA,GAAW,QAAA,CAAS,CAAC,CAAA,CAAE,IAAA,CAAM,CAAA,CAAC,OAAA,CAAQ,IAAA,EAAM,EAAE,CAAA,CAAE,OAAA,CAAQ,IAAA,EAAM,EAAE,CAAA;IAEtE,MAAM,SAAA,GAAY,QAAA,CAAS,CAAC,CAAA,CAAE,KAAA,CAAM,GAAG,CAAA,CAAE,GAAA,CAAI,UAAU,IAAA,EAAM;MAC3D,OAAO,IAAA,CAAK,IAAA,CAAM,CAAA,CAAC,OAAA,CAAQ,IAAA,EAAM,EAAE,CAAA,CAAE,OAAA,CAAQ,IAAA,EAAM,EAAE,CAAA;IAC3D,CAAK,CAAA;IAED,MAAM,IAAA,GAAO;MAAE,IAAA,EAAM;IAAU,CAAA;IAC/B,MAAM,KAAA,GAAQ,IAAA,CAAK,aAAA,CAAc,SAAS,CAAA;IAE1C,MAAM,WAAA,GAAc,IAAA,CAAK,cAAA,CAAgB,CAAA;IAGzC,IAAI,IAAA,CAAK,aAAA,KAAkB,CAAA,EAAG;MAC5B,IAAA,CAAK,QAAA,CAAS,GAAA,CAAI,QAAA,EAAU,IAAI,CAAA;IACtC,CAAA,MAAW;MAIL,IAAI,QAAA,IAAY,WAAA,EAAa;QAE3B,IAAI,QAAA,KAAa,UAAA,EAAY;UAC3B,WAAA,CAAY,QAAA,CAAS,IAAA,CAAK,IAAI,CAAA;QAC/B,CAAA,MAAA,IAAU,WAAA,CAAY,QAAQ,CAAA,CAAE,EAAA,KAAO,KAAA,CAAA,EAAW;UACjD,WAAA,CAAY,QAAQ,CAAA,GAAI,CAAE,CAAA;UAC1B,WAAA,CAAY,QAAQ,CAAA,CAAE,WAAA,CAAY,QAAQ,CAAA,CAAE,EAAE,CAAA,GAAI,WAAA,CAAY,QAAQ,CAAA;QACvE;QAED,IAAI,KAAA,CAAM,EAAA,KAAO,EAAA,EAAI,WAAA,CAAY,QAAQ,CAAA,CAAE,KAAA,CAAM,EAAE,CAAA,GAAI,IAAA;MACxD,CAAA,MAAA,IAAU,OAAO,KAAA,CAAM,EAAA,KAAO,QAAA,EAAU;QACvC,WAAA,CAAY,QAAQ,CAAA,GAAI,CAAE,CAAA;QAC1B,WAAA,CAAY,QAAQ,CAAA,CAAE,KAAA,CAAM,EAAE,CAAA,GAAI,IAAA;MAC1C,CAAA,MAAA,IAAiB,QAAA,KAAa,cAAA,EAAgB;QACtC,IAAI,QAAA,KAAa,UAAA,EAAY,WAAA,CAAY,QAAQ,CAAA,GAAI,CAAC,IAAI,CAAA,CAAA,KACrD,WAAA,CAAY,QAAQ,CAAA,GAAI,IAAA;MAC9B;IACF;IAED,IAAI,OAAO,KAAA,CAAM,EAAA,KAAO,QAAA,EAAU,IAAA,CAAK,EAAA,GAAK,KAAA,CAAM,EAAA;IAClD,IAAI,KAAA,CAAM,IAAA,KAAS,EAAA,EAAI,IAAA,CAAK,QAAA,GAAW,KAAA,CAAM,IAAA;IAC7C,IAAI,KAAA,CAAM,IAAA,KAAS,EAAA,EAAI,IAAA,CAAK,QAAA,GAAW,KAAA,CAAM,IAAA;IAE7C,IAAA,CAAK,SAAA,CAAU,IAAI,CAAA;EACpB;EAED,aAAA,CAAc,KAAA,EAAO;IACnB,IAAI,EAAA,GAAK,KAAA,CAAM,CAAC,CAAA;IAEhB,IAAI,KAAA,CAAM,CAAC,CAAA,KAAM,EAAA,EAAI;MACnB,EAAA,GAAK,QAAA,CAAS,KAAA,CAAM,CAAC,CAAC,CAAA;MAEtB,IAAI,KAAA,CAAM,EAAE,CAAA,EAAG;QACb,EAAA,GAAK,KAAA,CAAM,CAAC,CAAA;MACb;IACF;IAED,IAAI,IAAA,GAAO,EAAA;MACT,IAAA,GAAO,EAAA;IAET,IAAI,KAAA,CAAM,MAAA,GAAS,CAAA,EAAG;MACpB,IAAA,GAAO,KAAA,CAAM,CAAC,CAAA,CAAE,OAAA,CAAQ,UAAA,EAAY,EAAE,CAAA;MACtC,IAAA,GAAO,KAAA,CAAM,CAAC,CAAA;IACf;IAED,OAAO;MAAE,EAAA;MAAQ,IAAA;MAAY;IAAY,CAAA;EAC1C;EAED,iBAAA,CAAkB,IAAA,EAAM,QAAA,EAAU,WAAA,EAAa;IAC7C,IAAI,QAAA,GAAW,QAAA,CAAS,CAAC,CAAA,CAAE,OAAA,CAAQ,IAAA,EAAM,EAAE,CAAA,CAAE,OAAA,CAAQ,IAAA,EAAM,EAAE,CAAA,CAAE,IAAA,CAAM,CAAA;IACrE,IAAI,SAAA,GAAY,QAAA,CAAS,CAAC,CAAA,CAAE,OAAA,CAAQ,IAAA,EAAM,EAAE,CAAA,CAAE,OAAA,CAAQ,IAAA,EAAM,EAAE,CAAA,CAAE,IAAA,CAAM,CAAA;IAKtE,IAAI,QAAA,KAAa,SAAA,IAAa,SAAA,KAAc,GAAA,EAAK;MAC/C,SAAA,GAAY,WAAA,CAAY,OAAA,CAAQ,IAAA,EAAM,EAAE,CAAA,CAAE,OAAA,CAAQ,IAAA,EAAM,EAAE,CAAA,CAAE,IAAA,CAAM,CAAA;IACnE;IAED,MAAM,WAAA,GAAc,IAAA,CAAK,cAAA,CAAgB,CAAA;IACzC,MAAM,UAAA,GAAa,WAAA,CAAY,IAAA;IAE/B,IAAI,UAAA,KAAe,cAAA,EAAgB;MACjC,IAAA,CAAK,wBAAA,CAAyB,IAAA,EAAM,QAAA,EAAU,SAAS,CAAA;MACvD;IACD;IAGD,IAAI,QAAA,KAAa,GAAA,EAAK;MACpB,MAAM,SAAA,GAAY,SAAA,CAAU,KAAA,CAAM,GAAG,CAAA,CAAE,KAAA,CAAM,CAAC,CAAA;MAC9C,MAAM,IAAA,GAAO,QAAA,CAAS,SAAA,CAAU,CAAC,CAAC,CAAA;MAClC,MAAM,EAAA,GAAK,QAAA,CAAS,SAAA,CAAU,CAAC,CAAC,CAAA;MAEhC,IAAI,IAAA,GAAO,SAAA,CAAU,KAAA,CAAM,GAAG,CAAA,CAAE,KAAA,CAAM,CAAC,CAAA;MAEvC,IAAA,GAAO,IAAA,CAAK,GAAA,CAAI,UAAU,IAAA,EAAM;QAC9B,OAAO,IAAA,CAAK,IAAA,CAAI,CAAA,CAAG,OAAA,CAAQ,IAAA,EAAM,EAAE,CAAA;MAC3C,CAAO,CAAA;MAED,QAAA,GAAW,aAAA;MACX,SAAA,GAAY,CAAC,IAAA,EAAM,EAAE,CAAA;MACrB,MAAA,CAAO,SAAA,EAAW,IAAI,CAAA;MAEtB,IAAI,WAAA,CAAY,QAAQ,CAAA,KAAM,KAAA,CAAA,EAAW;QACvC,WAAA,CAAY,QAAQ,CAAA,GAAI,EAAE;MAC3B;IACF;IAGD,IAAI,QAAA,KAAa,MAAA,EAAQ,WAAA,CAAY,EAAA,GAAK,SAAA;IAG1C,IAAI,QAAA,IAAY,WAAA,IAAe,KAAA,CAAM,OAAA,CAAQ,WAAA,CAAY,QAAQ,CAAC,CAAA,EAAG;MACnE,WAAA,CAAY,QAAQ,CAAA,CAAE,IAAA,CAAK,SAAS,CAAA;IAC1C,CAAA,MAAW;MACL,IAAI,QAAA,KAAa,GAAA,EAAK,WAAA,CAAY,QAAQ,CAAA,GAAI,SAAA,CAAA,KACzC,WAAA,CAAY,CAAA,GAAI,SAAA;IACtB;IAED,IAAA,CAAK,cAAA,CAAe,WAAA,EAAa,QAAQ,CAAA;IAGzC,IAAI,QAAA,KAAa,GAAA,IAAO,SAAA,CAAU,KAAA,CAAM,CAAA,CAAE,CAAA,KAAM,GAAA,EAAK;MACnD,WAAA,CAAY,CAAA,GAAI,gBAAA,CAAiB,SAAS,CAAA;IAC3C;EACF;EAED,0BAAA,CAA2B,IAAA,EAAM;IAC/B,MAAM,WAAA,GAAc,IAAA,CAAK,cAAA,CAAgB,CAAA;IAEzC,WAAA,CAAY,CAAA,IAAK,IAAA;IAIjB,IAAI,IAAA,CAAK,KAAA,CAAM,CAAA,CAAE,CAAA,KAAM,GAAA,EAAK;MAC1B,WAAA,CAAY,CAAA,GAAI,gBAAA,CAAiB,WAAA,CAAY,CAAC,CAAA;IAC/C;EACF;EAAA;EAGD,wBAAA,CAAyB,IAAA,EAAM,QAAA,EAAU,SAAA,EAAW;IAKlD,MAAM,KAAA,GAAQ,SAAA,CAAU,KAAA,CAAM,IAAI,CAAA,CAAE,GAAA,CAAI,UAAU,IAAA,EAAM;MACtD,OAAO,IAAA,CAAK,IAAA,CAAM,CAAA,CAAC,OAAA,CAAQ,KAAA,EAAO,EAAE,CAAA,CAAE,OAAA,CAAQ,IAAA,EAAM,GAAG,CAAA;IAC7D,CAAK,CAAA;IAED,MAAM,aAAA,GAAgB,KAAA,CAAM,CAAC,CAAA;IAC7B,MAAM,cAAA,GAAiB,KAAA,CAAM,CAAC,CAAA;IAC9B,MAAM,cAAA,GAAiB,KAAA,CAAM,CAAC,CAAA;IAC9B,MAAM,aAAA,GAAgB,KAAA,CAAM,CAAC,CAAA;IAC7B,IAAI,cAAA,GAAiB,KAAA,CAAM,CAAC,CAAA;IAG5B,QAAQ,cAAA;MACN,KAAK,KAAA;MACL,KAAK,MAAA;MACL,KAAK,MAAA;MACL,KAAK,WAAA;MACL,KAAK,QAAA;MACL,KAAK,QAAA;MACL,KAAK,aAAA;QACH,cAAA,GAAiB,UAAA,CAAW,cAAc,CAAA;QAC1C;MAEF,KAAK,OAAA;MACL,KAAK,UAAA;MACL,KAAK,UAAA;MACL,KAAK,iBAAA;MACL,KAAK,cAAA;MACL,KAAK,aAAA;QACH,cAAA,GAAiB,gBAAA,CAAiB,cAAc,CAAA;QAChD;IACH;IAGD,IAAA,CAAK,WAAA,CAAA,CAAA,CAAc,aAAa,CAAA,GAAI;MAClC,IAAA,EAAM,cAAA;MACN,KAAA,EAAO,cAAA;MACP,IAAA,EAAM,aAAA;MACN,KAAA,EAAO;IACR,CAAA;IAED,IAAA,CAAK,cAAA,CAAe,IAAA,CAAK,WAAA,CAAW,CAAA,EAAI,aAAa,CAAA;EACtD;AACH;AAGA,MAAM,YAAA,CAAa;EACjB,KAAA,CAAM,MAAA,EAAQ;IACZ,MAAM,MAAA,GAAS,IAAI,YAAA,CAAa,MAAM,CAAA;IACtC,MAAA,CAAO,IAAA,CAAK,EAAE,CAAA;IAEd,MAAM,OAAA,GAAU,MAAA,CAAO,SAAA,CAAW,CAAA;IAElC,IAAI,OAAA,GAAU,IAAA,EAAM;MAClB,MAAM,IAAI,KAAA,CAAM,2DAAA,GAA8D,OAAO,CAAA;IACtF;IAED,MAAM,QAAA,GAAW,IAAI,OAAA,CAAS,CAAA;IAE9B,OAAO,CAAC,IAAA,CAAK,YAAA,CAAa,MAAM,CAAA,EAAG;MACjC,MAAM,IAAA,GAAO,IAAA,CAAK,SAAA,CAAU,MAAA,EAAQ,OAAO,CAAA;MAC3C,IAAI,IAAA,KAAS,IAAA,EAAM,QAAA,CAAS,GAAA,CAAI,IAAA,CAAK,IAAA,EAAM,IAAI,CAAA;IAChD;IAED,OAAO,QAAA;EACR;EAAA;EAGD,YAAA,CAAa,MAAA,EAAQ;IASnB,IAAI,MAAA,CAAO,IAAA,CAAA,CAAA,GAAS,EAAA,KAAO,CAAA,EAAG;MAC5B,OAAA,CAAS,MAAA,CAAO,SAAA,CAAA,CAAA,GAAc,GAAA,GAAM,EAAA,GAAM,CAAC,EAAA,KAAQ,MAAA,CAAO,IAAA,CAAM,CAAA;IACtE,CAAA,MAAW;MACL,OAAO,MAAA,CAAO,SAAA,CAAW,CAAA,GAAG,GAAA,GAAM,EAAA,IAAM,MAAA,CAAO,IAAA,CAAM,CAAA;IACtD;EACF;EAAA;EAGD,SAAA,CAAU,MAAA,EAAQ,OAAA,EAAS;IACzB,MAAM,IAAA,GAAO,CAAE,CAAA;IAGf,MAAM,SAAA,GAAY,OAAA,IAAW,IAAA,GAAO,MAAA,CAAO,SAAA,CAAW,CAAA,GAAG,MAAA,CAAO,SAAA,CAAW,CAAA;IAC3E,MAAM,aAAA,GAAgB,OAAA,IAAW,IAAA,GAAO,MAAA,CAAO,SAAA,CAAW,CAAA,GAAG,MAAA,CAAO,SAAA,CAAW,CAAA;IAE/E,OAAA,IAAW,IAAA,GAAO,MAAA,CAAO,SAAA,CAAS,CAAA,GAAK,MAAA,CAAO,SAAA,CAAW,CAAA;IAEzD,MAAM,OAAA,GAAU,MAAA,CAAO,QAAA,CAAU,CAAA;IACjC,MAAM,IAAA,GAAO,MAAA,CAAO,SAAA,CAAU,OAAO,CAAA;IAGrC,IAAI,SAAA,KAAc,CAAA,EAAG,OAAO,IAAA;IAE5B,MAAM,YAAA,GAAe,EAAE;IAEvB,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,aAAA,EAAe,CAAA,EAAA,EAAK;MACtC,YAAA,CAAa,IAAA,CAAK,IAAA,CAAK,aAAA,CAAc,MAAM,CAAC,CAAA;IAC7C;IAGD,MAAM,EAAA,GAAK,YAAA,CAAa,MAAA,GAAS,CAAA,GAAI,YAAA,CAAa,CAAC,CAAA,GAAI,EAAA;IACvD,MAAM,QAAA,GAAW,YAAA,CAAa,MAAA,GAAS,CAAA,GAAI,YAAA,CAAa,CAAC,CAAA,GAAI,EAAA;IAC7D,MAAM,QAAA,GAAW,YAAA,CAAa,MAAA,GAAS,CAAA,GAAI,YAAA,CAAa,CAAC,CAAA,GAAI,EAAA;IAI7D,IAAA,CAAK,cAAA,GAAiB,aAAA,KAAkB,CAAA,IAAK,MAAA,CAAO,SAAA,CAAW,CAAA,KAAK,SAAA,GAAY,IAAA,GAAO,KAAA;IAEvF,OAAO,SAAA,GAAY,MAAA,CAAO,SAAA,CAAA,CAAA,EAAa;MACrC,MAAM,OAAA,GAAU,IAAA,CAAK,SAAA,CAAU,MAAA,EAAQ,OAAO,CAAA;MAE9C,IAAI,OAAA,KAAY,IAAA,EAAM,IAAA,CAAK,YAAA,CAAa,IAAA,EAAM,IAAA,EAAM,OAAO,CAAA;IAC5D;IAED,IAAA,CAAK,YAAA,GAAe,YAAA;IAEpB,IAAI,OAAO,EAAA,KAAO,QAAA,EAAU,IAAA,CAAK,EAAA,GAAK,EAAA;IACtC,IAAI,QAAA,KAAa,EAAA,EAAI,IAAA,CAAK,QAAA,GAAW,QAAA;IACrC,IAAI,QAAA,KAAa,EAAA,EAAI,IAAA,CAAK,QAAA,GAAW,QAAA;IACrC,IAAI,IAAA,KAAS,EAAA,EAAI,IAAA,CAAK,IAAA,GAAO,IAAA;IAE7B,OAAO,IAAA;EACR;EAED,YAAA,CAAa,IAAA,EAAM,IAAA,EAAM,OAAA,EAAS;IAEhC,IAAI,OAAA,CAAQ,cAAA,KAAmB,IAAA,EAAM;MACnC,MAAM,KAAA,GAAQ,OAAA,CAAQ,YAAA,CAAa,CAAC,CAAA;MAEpC,IAAI,KAAA,CAAM,OAAA,CAAQ,KAAK,CAAA,EAAG;QACxB,IAAA,CAAK,OAAA,CAAQ,IAAI,CAAA,GAAI,OAAA;QAErB,OAAA,CAAQ,CAAA,GAAI,KAAA;MACpB,CAAA,MAAa;QACL,IAAA,CAAK,OAAA,CAAQ,IAAI,CAAA,GAAI,KAAA;MACtB;IACF,CAAA,MAAA,IAAU,IAAA,KAAS,aAAA,IAAiB,OAAA,CAAQ,IAAA,KAAS,GAAA,EAAK;MACzD,MAAM,KAAA,GAAQ,EAAE;MAEhB,OAAA,CAAQ,YAAA,CAAa,OAAA,CAAQ,UAAU,QAAA,EAAU,CAAA,EAAG;QAElD,IAAI,CAAA,KAAM,CAAA,EAAG,KAAA,CAAM,IAAA,CAAK,QAAQ,CAAA;MACxC,CAAO,CAAA;MAED,IAAI,IAAA,CAAK,WAAA,KAAgB,KAAA,CAAA,EAAW;QAClC,IAAA,CAAK,WAAA,GAAc,EAAE;MACtB;MAED,IAAA,CAAK,WAAA,CAAY,IAAA,CAAK,KAAK,CAAA;IACjC,CAAA,MAAA,IAAe,OAAA,CAAQ,IAAA,KAAS,cAAA,EAAgB;MAC1C,MAAM,IAAA,GAAO,MAAA,CAAO,IAAA,CAAK,OAAO,CAAA;MAEhC,IAAA,CAAK,OAAA,CAAQ,UAAU,GAAA,EAAK;QAC1B,IAAA,CAAK,GAAG,CAAA,GAAI,OAAA,CAAQ,GAAG,CAAA;MAC/B,CAAO,CAAA;IACF,CAAA,MAAA,IAAU,IAAA,KAAS,cAAA,IAAkB,OAAA,CAAQ,IAAA,KAAS,GAAA,EAAK;MAC1D,IAAI,aAAA,GAAgB,OAAA,CAAQ,YAAA,CAAa,CAAC,CAAA;MAC1C,IAAI,cAAA,GAAiB,OAAA,CAAQ,YAAA,CAAa,CAAC,CAAA;MAC3C,MAAM,cAAA,GAAiB,OAAA,CAAQ,YAAA,CAAa,CAAC,CAAA;MAC7C,MAAM,aAAA,GAAgB,OAAA,CAAQ,YAAA,CAAa,CAAC,CAAA;MAC5C,IAAI,cAAA;MAEJ,IAAI,aAAA,CAAc,OAAA,CAAQ,MAAM,CAAA,KAAM,CAAA,EAAG,aAAA,GAAgB,aAAA,CAAc,OAAA,CAAQ,MAAA,EAAQ,MAAM,CAAA;MAC7F,IAAI,cAAA,CAAe,OAAA,CAAQ,MAAM,CAAA,KAAM,CAAA,EAAG,cAAA,GAAiB,cAAA,CAAe,OAAA,CAAQ,MAAA,EAAQ,MAAM,CAAA;MAEhG,IACE,cAAA,KAAmB,OAAA,IACnB,cAAA,KAAmB,UAAA,IACnB,cAAA,KAAmB,QAAA,IACnB,cAAA,KAAmB,UAAA,IACnB,cAAA,CAAe,OAAA,CAAQ,MAAM,CAAA,KAAM,CAAA,EACnC;QACA,cAAA,GAAiB,CAAC,OAAA,CAAQ,YAAA,CAAa,CAAC,CAAA,EAAG,OAAA,CAAQ,YAAA,CAAa,CAAC,CAAA,EAAG,OAAA,CAAQ,YAAA,CAAa,CAAC,CAAC,CAAA;MACnG,CAAA,MAAa;QACL,cAAA,GAAiB,OAAA,CAAQ,YAAA,CAAa,CAAC,CAAA;MACxC;MAGD,IAAA,CAAK,aAAa,CAAA,GAAI;QACpB,IAAA,EAAM,cAAA;QACN,KAAA,EAAO,cAAA;QACP,IAAA,EAAM,aAAA;QACN,KAAA,EAAO;MACR,CAAA;IACF,CAAA,MAAA,IAAU,IAAA,CAAK,OAAA,CAAQ,IAAI,CAAA,KAAM,KAAA,CAAA,EAAW;MAC3C,IAAI,OAAO,OAAA,CAAQ,EAAA,KAAO,QAAA,EAAU;QAClC,IAAA,CAAK,OAAA,CAAQ,IAAI,CAAA,GAAI,CAAE,CAAA;QACvB,IAAA,CAAK,OAAA,CAAQ,IAAI,CAAA,CAAE,OAAA,CAAQ,EAAE,CAAA,GAAI,OAAA;MACzC,CAAA,MAAa;QACL,IAAA,CAAK,OAAA,CAAQ,IAAI,CAAA,GAAI,OAAA;MACtB;IACP,CAAA,MAAW;MACL,IAAI,OAAA,CAAQ,IAAA,KAAS,UAAA,EAAY;QAC/B,IAAI,CAAC,KAAA,CAAM,OAAA,CAAQ,IAAA,CAAK,OAAA,CAAQ,IAAI,CAAC,CAAA,EAAG;UACtC,IAAA,CAAK,OAAA,CAAQ,IAAI,CAAA,GAAI,CAAC,IAAA,CAAK,OAAA,CAAQ,IAAI,CAAC,CAAA;QACzC;QAED,IAAA,CAAK,OAAA,CAAQ,IAAI,CAAA,CAAE,IAAA,CAAK,OAAO,CAAA;MACvC,CAAA,MAAA,IAAiB,IAAA,CAAK,OAAA,CAAQ,IAAI,CAAA,CAAE,OAAA,CAAQ,EAAE,CAAA,KAAM,KAAA,CAAA,EAAW;QACvD,IAAA,CAAK,OAAA,CAAQ,IAAI,CAAA,CAAE,OAAA,CAAQ,EAAE,CAAA,GAAI,OAAA;MAClC;IACF;EACF;EAED,aAAA,CAAc,MAAA,EAAQ;IACpB,MAAM,IAAA,GAAO,MAAA,CAAO,SAAA,CAAU,CAAC,CAAA;IAC/B,IAAI,MAAA;IAEJ,QAAQ,IAAA;MACN,KAAK,GAAA;QACH,OAAO,MAAA,CAAO,UAAA,CAAY,CAAA;MAE5B,KAAK,GAAA;QACH,OAAO,MAAA,CAAO,UAAA,CAAY,CAAA;MAE5B,KAAK,GAAA;QACH,OAAO,MAAA,CAAO,UAAA,CAAY,CAAA;MAE5B,KAAK,GAAA;QACH,OAAO,MAAA,CAAO,QAAA,CAAU,CAAA;MAE1B,KAAK,GAAA;QACH,OAAO,MAAA,CAAO,QAAA,CAAU,CAAA;MAE1B,KAAK,GAAA;QACH,MAAA,GAAS,MAAA,CAAO,SAAA,CAAW,CAAA;QAC3B,OAAO,MAAA,CAAO,cAAA,CAAe,MAAM,CAAA;MAErC,KAAK,GAAA;QACH,MAAA,GAAS,MAAA,CAAO,SAAA,CAAW,CAAA;QAC3B,OAAO,MAAA,CAAO,SAAA,CAAU,MAAM,CAAA;MAEhC,KAAK,GAAA;QACH,OAAO,MAAA,CAAO,QAAA,CAAU,CAAA;MAE1B,KAAK,GAAA;MACL,KAAK,GAAA;MACL,KAAK,GAAA;MACL,KAAK,GAAA;MACL,KAAK,GAAA;MACL,KAAK,GAAA;QACH,MAAM,WAAA,GAAc,MAAA,CAAO,SAAA,CAAW,CAAA;QACtC,MAAM,QAAA,GAAW,MAAA,CAAO,SAAA,CAAW,CAAA;QACnC,MAAM,gBAAA,GAAmB,MAAA,CAAO,SAAA,CAAW,CAAA;QAE3C,IAAI,QAAA,KAAa,CAAA,EAAG;UAClB,QAAQ,IAAA;YACN,KAAK,GAAA;YACL,KAAK,GAAA;cACH,OAAO,MAAA,CAAO,eAAA,CAAgB,WAAW,CAAA;YAE3C,KAAK,GAAA;cACH,OAAO,MAAA,CAAO,eAAA,CAAgB,WAAW,CAAA;YAE3C,KAAK,GAAA;cACH,OAAO,MAAA,CAAO,eAAA,CAAgB,WAAW,CAAA;YAE3C,KAAK,GAAA;cACH,OAAO,MAAA,CAAO,aAAA,CAAc,WAAW,CAAA;YAEzC,KAAK,GAAA;cACH,OAAO,MAAA,CAAO,aAAA,CAAc,WAAW,CAAA;UAC1C;QACF;QAED,MAAM,IAAA,GAAO,UAAA,CAAW,IAAI,UAAA,CAAW,MAAA,CAAO,cAAA,CAAe,gBAAgB,CAAC,CAAC,CAAA;QAC/E,MAAM,OAAA,GAAU,IAAI,YAAA,CAAa,IAAA,CAAK,MAAM,CAAA;QAE5C,QAAQ,IAAA;UACN,KAAK,GAAA;UACL,KAAK,GAAA;YACH,OAAO,OAAA,CAAQ,eAAA,CAAgB,WAAW,CAAA;UAE5C,KAAK,GAAA;YACH,OAAO,OAAA,CAAQ,eAAA,CAAgB,WAAW,CAAA;UAE5C,KAAK,GAAA;YACH,OAAO,OAAA,CAAQ,eAAA,CAAgB,WAAW,CAAA;UAE5C,KAAK,GAAA;YACH,OAAO,OAAA,CAAQ,aAAA,CAAc,WAAW,CAAA;UAE1C,KAAK,GAAA;YACH,OAAO,OAAA,CAAQ,aAAA,CAAc,WAAW,CAAA;QAC3C;MAEH;QACE,MAAM,IAAI,KAAA,CAAM,yCAAA,GAA4C,IAAI,CAAA;IACnE;EACF;AACH;AAEA,MAAM,YAAA,CAAa;EACjB,WAAA,CAAY,MAAA,EAAQ,YAAA,EAAc;IAChC,IAAA,CAAK,EAAA,GAAK,IAAI,QAAA,CAAS,MAAM,CAAA;IAC7B,IAAA,CAAK,MAAA,GAAS,CAAA;IACd,IAAA,CAAK,YAAA,GAAe,YAAA,KAAiB,KAAA,CAAA,GAAY,YAAA,GAAe,IAAA;EACjE;EAED,SAAA,CAAA,EAAY;IACV,OAAO,IAAA,CAAK,MAAA;EACb;EAED,IAAA,CAAA,EAAO;IACL,OAAO,IAAA,CAAK,EAAA,CAAG,MAAA,CAAO,UAAA;EACvB;EAED,IAAA,CAAK,MAAA,EAAQ;IACX,IAAA,CAAK,MAAA,IAAU,MAAA;EAChB;EAAA;EAAA;EAAA;EAKD,UAAA,CAAA,EAAa;IACX,OAAA,CAAQ,IAAA,CAAK,QAAA,CAAU,CAAA,GAAG,CAAA,MAAO,CAAA;EAClC;EAED,eAAA,CAAgB,IAAA,EAAM;IACpB,MAAM,CAAA,GAAI,EAAE;IAEZ,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,IAAA,EAAM,CAAA,EAAA,EAAK;MAC7B,CAAA,CAAE,IAAA,CAAK,IAAA,CAAK,UAAA,CAAA,CAAY,CAAA;IACzB;IAED,OAAO,CAAA;EACR;EAED,QAAA,CAAA,EAAW;IACT,MAAM,KAAA,GAAQ,IAAA,CAAK,EAAA,CAAG,QAAA,CAAS,IAAA,CAAK,MAAM,CAAA;IAC1C,IAAA,CAAK,MAAA,IAAU,CAAA;IACf,OAAO,KAAA;EACR;EAED,QAAA,CAAA,EAAW;IACT,MAAM,KAAA,GAAQ,IAAA,CAAK,EAAA,CAAG,QAAA,CAAS,IAAA,CAAK,MAAA,EAAQ,IAAA,CAAK,YAAY,CAAA;IAC7D,IAAA,CAAK,MAAA,IAAU,CAAA;IACf,OAAO,KAAA;EACR;EAED,QAAA,CAAA,EAAW;IACT,MAAM,KAAA,GAAQ,IAAA,CAAK,EAAA,CAAG,QAAA,CAAS,IAAA,CAAK,MAAA,EAAQ,IAAA,CAAK,YAAY,CAAA;IAC7D,IAAA,CAAK,MAAA,IAAU,CAAA;IACf,OAAO,KAAA;EACR;EAED,aAAA,CAAc,IAAA,EAAM;IAClB,MAAM,CAAA,GAAI,EAAE;IAEZ,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,IAAA,EAAM,CAAA,EAAA,EAAK;MAC7B,CAAA,CAAE,IAAA,CAAK,IAAA,CAAK,QAAA,CAAA,CAAU,CAAA;IACvB;IAED,OAAO,CAAA;EACR;EAED,SAAA,CAAA,EAAY;IACV,MAAM,KAAA,GAAQ,IAAA,CAAK,EAAA,CAAG,SAAA,CAAU,IAAA,CAAK,MAAA,EAAQ,IAAA,CAAK,YAAY,CAAA;IAC9D,IAAA,CAAK,MAAA,IAAU,CAAA;IACf,OAAO,KAAA;EACR;EAAA;EAAA;EAAA;EAAA;EAAA;EAOD,QAAA,CAAA,EAAW;IACT,IAAI,GAAA,EAAK,IAAA;IAET,IAAI,IAAA,CAAK,YAAA,EAAc;MACrB,GAAA,GAAM,IAAA,CAAK,SAAA,CAAW,CAAA;MACtB,IAAA,GAAO,IAAA,CAAK,SAAA,CAAW,CAAA;IAC7B,CAAA,MAAW;MACL,IAAA,GAAO,IAAA,CAAK,SAAA,CAAW,CAAA;MACvB,GAAA,GAAM,IAAA,CAAK,SAAA,CAAW,CAAA;IACvB;IAGD,IAAI,IAAA,GAAO,UAAA,EAAY;MACrB,IAAA,GAAO,CAAC,IAAA,GAAO,UAAA;MACf,GAAA,GAAM,CAAC,GAAA,GAAM,UAAA;MAEb,IAAI,GAAA,KAAQ,UAAA,EAAY,IAAA,GAAQ,IAAA,GAAO,CAAA,GAAK,UAAA;MAE5C,GAAA,GAAO,GAAA,GAAM,CAAA,GAAK,UAAA;MAElB,OAAO,EAAE,IAAA,GAAO,UAAA,GAAc,GAAA,CAAA;IAC/B;IAED,OAAO,IAAA,GAAO,UAAA,GAAc,GAAA;EAC7B;EAED,aAAA,CAAc,IAAA,EAAM;IAClB,MAAM,CAAA,GAAI,EAAE;IAEZ,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,IAAA,EAAM,CAAA,EAAA,EAAK;MAC7B,CAAA,CAAE,IAAA,CAAK,IAAA,CAAK,QAAA,CAAA,CAAU,CAAA;IACvB;IAED,OAAO,CAAA;EACR;EAAA;EAGD,SAAA,CAAA,EAAY;IACV,IAAI,GAAA,EAAK,IAAA;IAET,IAAI,IAAA,CAAK,YAAA,EAAc;MACrB,GAAA,GAAM,IAAA,CAAK,SAAA,CAAW,CAAA;MACtB,IAAA,GAAO,IAAA,CAAK,SAAA,CAAW,CAAA;IAC7B,CAAA,MAAW;MACL,IAAA,GAAO,IAAA,CAAK,SAAA,CAAW,CAAA;MACvB,GAAA,GAAM,IAAA,CAAK,SAAA,CAAW,CAAA;IACvB;IAED,OAAO,IAAA,GAAO,UAAA,GAAc,GAAA;EAC7B;EAED,UAAA,CAAA,EAAa;IACX,MAAM,KAAA,GAAQ,IAAA,CAAK,EAAA,CAAG,UAAA,CAAW,IAAA,CAAK,MAAA,EAAQ,IAAA,CAAK,YAAY,CAAA;IAC/D,IAAA,CAAK,MAAA,IAAU,CAAA;IACf,OAAO,KAAA;EACR;EAED,eAAA,CAAgB,IAAA,EAAM;IACpB,MAAM,CAAA,GAAI,EAAE;IAEZ,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,IAAA,EAAM,CAAA,EAAA,EAAK;MAC7B,CAAA,CAAE,IAAA,CAAK,IAAA,CAAK,UAAA,CAAA,CAAY,CAAA;IACzB;IAED,OAAO,CAAA;EACR;EAED,UAAA,CAAA,EAAa;IACX,MAAM,KAAA,GAAQ,IAAA,CAAK,EAAA,CAAG,UAAA,CAAW,IAAA,CAAK,MAAA,EAAQ,IAAA,CAAK,YAAY,CAAA;IAC/D,IAAA,CAAK,MAAA,IAAU,CAAA;IACf,OAAO,KAAA;EACR;EAED,eAAA,CAAgB,IAAA,EAAM;IACpB,MAAM,CAAA,GAAI,EAAE;IAEZ,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,IAAA,EAAM,CAAA,EAAA,EAAK;MAC7B,CAAA,CAAE,IAAA,CAAK,IAAA,CAAK,UAAA,CAAA,CAAY,CAAA;IACzB;IAED,OAAO,CAAA;EACR;EAED,cAAA,CAAe,IAAA,EAAM;IACnB,MAAM,KAAA,GAAQ,IAAA,CAAK,EAAA,CAAG,MAAA,CAAO,KAAA,CAAM,IAAA,CAAK,MAAA,EAAQ,IAAA,CAAK,MAAA,GAAS,IAAI,CAAA;IAClE,IAAA,CAAK,MAAA,IAAU,IAAA;IACf,OAAO,KAAA;EACR;EAED,SAAA,CAAU,IAAA,EAAM;IAEd,IAAI,CAAA,GAAI,EAAE;IAEV,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,IAAA,EAAM,CAAA,EAAA,EAAK;MAC7B,CAAA,CAAE,CAAC,CAAA,GAAI,IAAA,CAAK,QAAA,CAAU,CAAA;IACvB;IAED,MAAM,QAAA,GAAW,CAAA,CAAE,OAAA,CAAQ,CAAC,CAAA;IAC5B,IAAI,QAAA,IAAY,CAAA,EAAG,CAAA,GAAI,CAAA,CAAE,KAAA,CAAM,CAAA,EAAG,QAAQ,CAAA;IAE1C,OAAO,UAAA,CAAW,IAAI,UAAA,CAAW,CAAC,CAAC,CAAA;EACpC;AACH;AAIA,MAAM,OAAA,CAAQ;EACZ,GAAA,CAAI,GAAA,EAAK,GAAA,EAAK;IACZ,IAAA,CAAK,GAAG,CAAA,GAAI,GAAA;EACb;AACH;AAIA,SAAS,iBAAA,CAAkB,MAAA,EAAQ;EACjC,MAAM,OAAA,GAAU,wBAAA;EAEhB,OAAO,MAAA,CAAO,UAAA,IAAc,OAAA,CAAQ,MAAA,IAAU,OAAA,KAAY,0BAAA,CAA2B,MAAA,EAAQ,CAAA,EAAG,OAAA,CAAQ,MAAM,CAAA;AAChH;AAEA,SAAS,gBAAA,CAAiB,IAAA,EAAM;EAC9B,MAAM,OAAA,GAAU,CACd,GAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,EACA,IAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,EACA,IAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,EACA,IAAA,EACA,IAAA,CACD;EAED,IAAI,MAAA,GAAS,CAAA;EAEb,SAAS,IAAA,CAAK,MAAA,EAAQ;IACpB,MAAM,MAAA,GAAS,IAAA,CAAK,MAAA,GAAS,CAAC,CAAA;IAC9B,IAAA,GAAO,IAAA,CAAK,KAAA,CAAM,MAAA,GAAS,MAAM,CAAA;IACjC,MAAA,EAAA;IACA,OAAO,MAAA;EACR;EAED,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,OAAA,CAAQ,MAAA,EAAQ,EAAE,CAAA,EAAG;IACvC,MAAM,GAAA,GAAM,IAAA,CAAK,CAAC,CAAA;IAClB,IAAI,GAAA,KAAQ,OAAA,CAAQ,CAAC,CAAA,EAAG;MACtB,OAAO,KAAA;IACR;EACF;EAED,OAAO,IAAA;AACT;AAEA,SAAS,aAAA,CAAc,IAAA,EAAM;EAC3B,MAAM,aAAA,GAAgB,mBAAA;EACtB,MAAM,KAAA,GAAQ,IAAA,CAAK,KAAA,CAAM,aAAa,CAAA;EAEtC,IAAI,KAAA,EAAO;IACT,MAAM,OAAA,GAAU,QAAA,CAAS,KAAA,CAAM,CAAC,CAAC,CAAA;IACjC,OAAO,OAAA;EACR;EAED,MAAM,IAAI,KAAA,CAAM,qEAAqE,CAAA;AACvF;AAGA,SAAS,uBAAA,CAAwB,IAAA,EAAM;EACrC,OAAO,IAAA,GAAO,UAAA;AAChB;AAEA,MAAM,SAAA,GAAY,EAAE;AAGpB,SAAS,OAAA,CAAQ,kBAAA,EAAoB,YAAA,EAAc,WAAA,EAAa,UAAA,EAAY;EAC1E,IAAI,KAAA;EAEJ,QAAQ,UAAA,CAAW,WAAA;IACjB,KAAK,iBAAA;MACH,KAAA,GAAQ,kBAAA;MACR;IACF,KAAK,WAAA;MACH,KAAA,GAAQ,YAAA;MACR;IACF,KAAK,WAAA;MACH,KAAA,GAAQ,WAAA;MACR;IACF,KAAK,SAAA;MACH,KAAA,GAAQ,UAAA,CAAW,OAAA,CAAQ,CAAC,CAAA;MAC5B;IACF;MACE,OAAA,CAAQ,IAAA,CAAK,kDAAA,GAAqD,UAAA,CAAW,WAAW,CAAA;EAC3F;EAED,IAAI,UAAA,CAAW,aAAA,KAAkB,eAAA,EAAiB,KAAA,GAAQ,UAAA,CAAW,OAAA,CAAQ,KAAK,CAAA;EAElF,MAAM,IAAA,GAAO,KAAA,GAAQ,UAAA,CAAW,QAAA;EAChC,MAAM,EAAA,GAAK,IAAA,GAAO,UAAA,CAAW,QAAA;EAE7B,OAAO,KAAA,CAAM,SAAA,EAAW,UAAA,CAAW,MAAA,EAAQ,IAAA,EAAM,EAAE,CAAA;AACrD;AAEA,MAAM,SAAA,GAAY,IAAI,KAAA,CAAO,CAAA;AAC7B,MAAM,OAAA,GAAU,IAAI,OAAA,CAAS,CAAA;AAK7B,SAAS,iBAAA,CAAkB,aAAA,EAAe;EACxC,MAAM,aAAA,GAAgB,IAAI,OAAA,CAAS,CAAA;EACnC,MAAM,aAAA,GAAgB,IAAI,OAAA,CAAS,CAAA;EACnC,MAAM,UAAA,GAAa,IAAI,OAAA,CAAS,CAAA;EAChC,MAAM,cAAA,GAAiB,IAAI,OAAA,CAAS,CAAA;EAEpC,MAAM,SAAA,GAAY,IAAI,OAAA,CAAS,CAAA;EAC/B,MAAM,cAAA,GAAiB,IAAI,OAAA,CAAS,CAAA;EACpC,MAAM,eAAA,GAAkB,IAAI,OAAA,CAAS,CAAA;EACrC,MAAM,gBAAA,GAAmB,IAAI,OAAA,CAAS,CAAA;EACtC,MAAM,eAAA,GAAkB,IAAI,OAAA,CAAS,CAAA;EAErC,MAAM,SAAA,GAAY,IAAI,OAAA,CAAS,CAAA;EAC/B,MAAM,SAAA,GAAY,IAAI,OAAA,CAAS,CAAA;EAC/B,MAAM,QAAA,GAAW,IAAI,OAAA,CAAS,CAAA;EAE9B,MAAM,WAAA,GAAc,aAAA,CAAc,WAAA,GAAc,aAAA,CAAc,WAAA,GAAc,CAAA;EAE5E,IAAI,aAAA,CAAc,WAAA,EAAa,aAAA,CAAc,WAAA,CAAY,OAAA,CAAQ,SAAA,CAAU,aAAA,CAAc,WAAW,CAAC,CAAA;EAErG,IAAI,aAAA,CAAc,WAAA,EAAa;IAC7B,MAAM,KAAA,GAAQ,aAAA,CAAc,WAAA,CAAY,GAAA,CAAI,SAAA,CAAU,QAAQ,CAAA;IAC9D,KAAA,CAAM,IAAA,CAAK,aAAA,CAAc,UAAU,CAAA;IACnC,aAAA,CAAc,qBAAA,CAAsB,SAAA,CAAU,SAAA,CAAU,KAAK,CAAC,CAAA;EAC/D;EAED,IAAI,aAAA,CAAc,QAAA,EAAU;IAC1B,MAAM,KAAA,GAAQ,aAAA,CAAc,QAAA,CAAS,GAAA,CAAI,SAAA,CAAU,QAAQ,CAAA;IAC3D,KAAA,CAAM,IAAA,CAAK,aAAA,CAAc,UAAU,CAAA;IACnC,UAAA,CAAW,qBAAA,CAAsB,SAAA,CAAU,SAAA,CAAU,KAAK,CAAC,CAAA;EAC5D;EAED,IAAI,aAAA,CAAc,YAAA,EAAc;IAC9B,MAAM,KAAA,GAAQ,aAAA,CAAc,YAAA,CAAa,GAAA,CAAI,SAAA,CAAU,QAAQ,CAAA;IAC/D,KAAA,CAAM,IAAA,CAAK,aAAA,CAAc,UAAU,CAAA;IACnC,cAAA,CAAe,qBAAA,CAAsB,SAAA,CAAU,SAAA,CAAU,KAAK,CAAC,CAAA;IAC/D,cAAA,CAAe,MAAA,CAAQ,CAAA;EACxB;EAED,IAAI,aAAA,CAAc,KAAA,EAAO,SAAA,CAAU,KAAA,CAAM,OAAA,CAAQ,SAAA,CAAU,aAAA,CAAc,KAAK,CAAC,CAAA;EAG/E,IAAI,aAAA,CAAc,aAAA,EAAe,eAAA,CAAgB,WAAA,CAAY,OAAA,CAAQ,SAAA,CAAU,aAAA,CAAc,aAAa,CAAC,CAAA;EAC3G,IAAI,aAAA,CAAc,YAAA,EAAc,cAAA,CAAe,WAAA,CAAY,OAAA,CAAQ,SAAA,CAAU,aAAA,CAAc,YAAY,CAAC,CAAA;EACxG,IAAI,aAAA,CAAc,cAAA,EAAgB,gBAAA,CAAiB,WAAA,CAAY,OAAA,CAAQ,SAAA,CAAU,aAAA,CAAc,cAAc,CAAC,CAAA;EAC9G,IAAI,aAAA,CAAc,aAAA,EAAe,eAAA,CAAgB,WAAA,CAAY,OAAA,CAAQ,SAAA,CAAU,aAAA,CAAc,aAAa,CAAC,CAAA;EAG3G,IAAI,aAAA,CAAc,iBAAA,EAAmB;IACnC,SAAA,CAAU,IAAA,CAAK,aAAA,CAAc,YAAY,CAAA;IACzC,SAAA,CAAU,IAAA,CAAK,aAAA,CAAc,iBAAiB,CAAA;EAC/C;EAED,MAAM,IAAA,GAAO,aAAA,CAAc,KAAA,CAAO,CAAA,CAAC,QAAA,CAAS,UAAU,CAAA,CAAE,QAAA,CAAS,cAAc,CAAA;EAE/E,MAAM,UAAA,GAAa,IAAI,OAAA,CAAS,CAAA;EAChC,UAAA,CAAW,eAAA,CAAgB,SAAS,CAAA;EAGpC,MAAM,SAAA,GAAY,IAAI,OAAA,CAAS,CAAA;EAC/B,SAAA,CAAU,YAAA,CAAa,SAAS,CAAA;EAEhC,MAAM,WAAA,GAAc,SAAA,CAAU,KAAA,CAAK,CAAA,CAAG,MAAA,CAAQ,CAAA,CAAC,QAAA,CAAS,SAAS,CAAA;EACjE,MAAM,UAAA,GAAa,UAAA,CAAW,KAAA,CAAK,CAAA,CAAG,MAAA,CAAQ,CAAA,CAAC,QAAA,CAAS,WAAW,CAAA;EACnE,MAAM,IAAA,GAAO,SAAA;EAEb,MAAM,SAAA,GAAY,IAAI,OAAA,CAAS,CAAA;EAE/B,IAAI,WAAA,KAAgB,CAAA,EAAG;IACrB,SAAA,CAAU,IAAA,CAAK,UAAU,CAAA,CAAE,QAAA,CAAS,IAAI,CAAA,CAAE,QAAA,CAAS,UAAU,CAAA,CAAE,QAAA,CAAS,IAAI,CAAA;EAChF,CAAA,MAAA,IAAa,WAAA,KAAgB,CAAA,EAAG;IAC5B,SAAA,CAAU,IAAA,CAAK,UAAU,CAAA,CAAE,QAAA,CAAS,UAAU,CAAA,CAAE,QAAA,CAAS,IAAI,CAAA,CAAE,QAAA,CAAS,IAAI,CAAA;EAChF,CAAA,MAAS;IACL,MAAM,UAAA,GAAa,IAAI,OAAA,CAAA,CAAA,CAAU,KAAA,CAAM,IAAI,OAAA,CAAS,CAAA,CAAC,kBAAA,CAAmB,SAAS,CAAC,CAAA;IAClF,MAAM,cAAA,GAAiB,UAAA,CAAW,KAAA,CAAK,CAAA,CAAG,MAAA,CAAQ,CAAA;IAClD,MAAM,kBAAA,GAAqB,UAAA,CAAW,KAAA,CAAK,CAAA,CAAG,QAAA,CAAS,cAAc,CAAA;IAErE,SAAA,CAAU,IAAA,CAAK,UAAU,CAAA,CAAE,QAAA,CAAS,IAAI,CAAA,CAAE,QAAA,CAAS,kBAAkB,CAAA,CAAE,QAAA,CAAS,IAAI,CAAA;EACrF;EAED,MAAM,mBAAA,GAAsB,eAAA,CAAgB,KAAA,CAAK,CAAA,CAAG,MAAA,CAAQ,CAAA;EAC5D,MAAM,kBAAA,GAAqB,cAAA,CAAe,KAAA,CAAK,CAAA,CAAG,MAAA,CAAQ,CAAA;EAE1D,IAAI,UAAA,GAAa,aAAA,CACd,KAAA,CAAO,CAAA,CACP,QAAA,CAAS,gBAAgB,CAAA,CACzB,QAAA,CAAS,eAAe,CAAA,CACxB,QAAA,CAAS,aAAa,CAAA,CACtB,QAAA,CAAS,UAAU,CAAA,CACnB,QAAA,CAAS,cAAc,CAAA,CACvB,QAAA,CAAS,mBAAmB,CAAA,CAC5B,QAAA,CAAS,eAAe,CAAA,CACxB,QAAA,CAAS,cAAc,CAAA,CACvB,QAAA,CAAS,SAAS,CAAA,CAClB,QAAA,CAAS,kBAAkB,CAAA;EAE9B,MAAM,gCAAA,GAAmC,IAAI,OAAA,CAAA,CAAA,CAAU,YAAA,CAAa,UAAU,CAAA;EAE9E,MAAM,kBAAA,GAAqB,SAAA,CAAU,KAAA,CAAK,CAAA,CAAG,QAAA,CAAS,gCAAgC,CAAA;EACtF,QAAA,CAAS,YAAA,CAAa,kBAAkB,CAAA;EAExC,UAAA,GAAa,QAAA,CAAS,KAAA,CAAA,CAAA,CAAQ,QAAA,CAAS,SAAS,CAAA;EAGhD,UAAA,CAAW,WAAA,CAAY,SAAA,CAAU,MAAA,CAAA,CAAQ,CAAA;EAEzC,OAAO,UAAA;AACT;AAIA,SAAS,aAAA,CAAc,KAAA,EAAO;EAC5B,KAAA,GAAQ,KAAA,IAAS,CAAA;EAEjB,MAAM,KAAA,GAAQ,CACZ,KAAA;EAAA;EACA,KAAA;EAAA;EACA,KAAA;EAAA;EACA,KAAA;EAAA;EACA,KAAA;EAAA;EACA;EAAA;EAAA;EAAA,CAED;EAED,IAAI,KAAA,KAAU,CAAA,EAAG;IACf,OAAA,CAAQ,IAAA,CAAK,qGAAqG,CAAA;IAClH,OAAO,KAAA,CAAM,CAAC,CAAA;EACf;EAED,OAAO,KAAA,CAAM,KAAK,CAAA;AACpB;AAIA,SAAS,gBAAA,CAAiB,KAAA,EAAO;EAC/B,MAAM,KAAA,GAAQ,KAAA,CAAM,KAAA,CAAM,GAAG,CAAA,CAAE,GAAA,CAAI,UAAU,GAAA,EAAK;IAChD,OAAO,UAAA,CAAW,GAAG,CAAA;EACzB,CAAG,CAAA;EAED,OAAO,KAAA;AACT;AAEA,SAAS,0BAAA,CAA2B,MAAA,EAAQ,IAAA,EAAM,EAAA,EAAI;EACpD,IAAI,IAAA,KAAS,KAAA,CAAA,EAAW,IAAA,GAAO,CAAA;EAC/B,IAAI,EAAA,KAAO,KAAA,CAAA,EAAW,EAAA,GAAK,MAAA,CAAO,UAAA;EAElC,OAAO,UAAA,CAAW,IAAI,UAAA,CAAW,MAAA,EAAQ,IAAA,EAAM,EAAE,CAAC,CAAA;AACpD;AAEA,SAAS,MAAA,CAAO,CAAA,EAAG,CAAA,EAAG;EACpB,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,CAAA,CAAE,MAAA,EAAQ,CAAA,GAAI,CAAA,CAAE,MAAA,EAAQ,CAAA,GAAI,CAAA,EAAG,CAAA,EAAA,EAAK,CAAA,EAAA,EAAK;IAC3D,CAAA,CAAE,CAAC,CAAA,GAAI,CAAA,CAAE,CAAC,CAAA;EACX;AACH;AAEA,SAAS,KAAA,CAAM,CAAA,EAAG,CAAA,EAAG,IAAA,EAAM,EAAA,EAAI;EAC7B,KAAA,IAAS,CAAA,GAAI,IAAA,EAAM,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,EAAA,EAAI,CAAA,EAAA,EAAK,CAAA,EAAA,EAAK;IAC1C,CAAA,CAAE,CAAC,CAAA,GAAI,CAAA,CAAE,CAAC,CAAA;EACX;EAED,OAAO,CAAA;AACT;AAGA,SAAS,MAAA,CAAO,EAAA,EAAI,KAAA,EAAO,EAAA,EAAI;EAC7B,OAAO,EAAA,CAAG,KAAA,CAAM,CAAA,EAAG,KAAK,CAAA,CAAE,MAAA,CAAO,EAAE,CAAA,CAAE,MAAA,CAAO,EAAA,CAAG,KAAA,CAAM,KAAK,CAAC,CAAA;AAC7D","sourcesContent":["import {\n  AmbientLight,\n  AnimationClip,\n  Bone,\n  BufferGeometry,\n  ClampToEdgeWrapping,\n  Color,\n  DirectionalLight,\n  EquirectangularReflectionMapping,\n  Euler,\n  FileLoader,\n  Float32BufferAttribute,\n  Group,\n  Line,\n  LineBasicMaterial,\n  Loader,\n  LoaderUtils,\n  MathUtils,\n  Matrix3,\n  Matrix4,\n  Mesh,\n  MeshLambertMaterial,\n  MeshPhongMaterial,\n  NumberKeyframeTrack,\n  Object3D,\n  OrthographicCamera,\n  PerspectiveCamera,\n  PointLight,\n  PropertyBinding,\n  Quaternion,\n  QuaternionKeyframeTrack,\n  RepeatWrapping,\n  Skeleton,\n  SkinnedMesh,\n  SpotLight,\n  Texture,\n  TextureLoader,\n  Uint16BufferAttribute,\n  Vector3,\n  Vector4,\n  VectorKeyframeTrack,\n} from 'three'\nimport { unzlibSync } from 'fflate'\nimport { NURBSCurve } from '../curves/NURBSCurve'\nimport { decodeText } from '../_polyfill/LoaderUtils'\nimport { UV1 } from '../_polyfill/uv1'\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * Binary format specification:\n *\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nlet fbxTree\nlet connections\nlet sceneGraph\n\nclass FBXLoader extends Loader {\n  constructor(manager) {\n    super(manager)\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this\n\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path\n\n    const loader = new FileLoader(this.manager)\n    loader.setPath(scope.path)\n    loader.setResponseType('arraybuffer')\n    loader.setRequestHeader(scope.requestHeader)\n    loader.setWithCredentials(scope.withCredentials)\n\n    loader.load(\n      url,\n      function (buffer) {\n        try {\n          onLoad(scope.parse(buffer, path))\n        } catch (e) {\n          if (onError) {\n            onError(e)\n          } else {\n            console.error(e)\n          }\n\n          scope.manager.itemError(url)\n        }\n      },\n      onProgress,\n      onError,\n    )\n  }\n\n  parse(FBXBuffer, path) {\n    if (isFbxFormatBinary(FBXBuffer)) {\n      fbxTree = new BinaryParser().parse(FBXBuffer)\n    } else {\n      const FBXText = convertArrayBufferToString(FBXBuffer)\n\n      if (!isFbxFormatASCII(FBXText)) {\n        throw new Error('THREE.FBXLoader: Unknown format.')\n      }\n\n      if (getFbxVersion(FBXText) < 7000) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText))\n      }\n\n      fbxTree = new TextParser().parse(FBXText)\n    }\n\n    // console.log( fbxTree );\n\n    const textureLoader = new TextureLoader(this.manager)\n      .setPath(this.resourcePath || path)\n      .setCrossOrigin(this.crossOrigin)\n\n    return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree)\n  }\n}\n\n// Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\nclass FBXTreeParser {\n  constructor(textureLoader, manager) {\n    this.textureLoader = textureLoader\n    this.manager = manager\n  }\n\n  parse() {\n    connections = this.parseConnections()\n\n    const images = this.parseImages()\n    const textures = this.parseTextures(images)\n    const materials = this.parseMaterials(textures)\n    const deformers = this.parseDeformers()\n    const geometryMap = new GeometryParser().parse(deformers)\n\n    this.parseScene(deformers, geometryMap, materials)\n\n    return sceneGraph\n  }\n\n  // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n  // and details the connection type\n  parseConnections() {\n    const connectionMap = new Map()\n\n    if ('Connections' in fbxTree) {\n      const rawConnections = fbxTree.Connections.connections\n\n      rawConnections.forEach(function (rawConnection) {\n        const fromID = rawConnection[0]\n        const toID = rawConnection[1]\n        const relationship = rawConnection[2]\n\n        if (!connectionMap.has(fromID)) {\n          connectionMap.set(fromID, {\n            parents: [],\n            children: [],\n          })\n        }\n\n        const parentRelationship = { ID: toID, relationship: relationship }\n        connectionMap.get(fromID).parents.push(parentRelationship)\n\n        if (!connectionMap.has(toID)) {\n          connectionMap.set(toID, {\n            parents: [],\n            children: [],\n          })\n        }\n\n        const childRelationship = { ID: fromID, relationship: relationship }\n        connectionMap.get(toID).children.push(childRelationship)\n      })\n    }\n\n    return connectionMap\n  }\n\n  // Parse FBXTree.Objects.Video for embedded image data\n  // These images are connected to textures in FBXTree.Objects.Textures\n  // via FBXTree.Connections.\n  parseImages() {\n    const images = {}\n    const blobs = {}\n\n    if ('Video' in fbxTree.Objects) {\n      const videoNodes = fbxTree.Objects.Video\n\n      for (const nodeID in videoNodes) {\n        const videoNode = videoNodes[nodeID]\n\n        const id = parseInt(nodeID)\n\n        images[id] = videoNode.RelativeFilename || videoNode.Filename\n\n        // raw image data is in videoNode.Content\n        if ('Content' in videoNode) {\n          const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0\n          const base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== ''\n\n          if (arrayBufferContent || base64Content) {\n            const image = this.parseImage(videoNodes[nodeID])\n\n            blobs[videoNode.RelativeFilename || videoNode.Filename] = image\n          }\n        }\n      }\n    }\n\n    for (const id in images) {\n      const filename = images[id]\n\n      if (blobs[filename] !== undefined) images[id] = blobs[filename]\n      else images[id] = images[id].split('\\\\').pop()\n    }\n\n    return images\n  }\n\n  // Parse embedded image data in FBXTree.Video.Content\n  parseImage(videoNode) {\n    const content = videoNode.Content\n    const fileName = videoNode.RelativeFilename || videoNode.Filename\n    const extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase()\n\n    let type\n\n    switch (extension) {\n      case 'bmp':\n        type = 'image/bmp'\n        break\n\n      case 'jpg':\n      case 'jpeg':\n        type = 'image/jpeg'\n        break\n\n      case 'png':\n        type = 'image/png'\n        break\n\n      case 'tif':\n        type = 'image/tiff'\n        break\n\n      case 'tga':\n        if (this.manager.getHandler('.tga') === null) {\n          console.warn('FBXLoader: TGA loader not found, skipping ', fileName)\n        }\n\n        type = 'image/tga'\n        break\n\n      default:\n        console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.')\n        return\n    }\n\n    if (typeof content === 'string') {\n      // ASCII format\n\n      return 'data:' + type + ';base64,' + content\n    } else {\n      // Binary Format\n\n      const array = new Uint8Array(content)\n      return window.URL.createObjectURL(new Blob([array], { type: type }))\n    }\n  }\n\n  // Parse nodes in FBXTree.Objects.Texture\n  // These contain details such as UV scaling, cropping, rotation etc and are connected\n  // to images in FBXTree.Objects.Video\n  parseTextures(images) {\n    const textureMap = new Map()\n\n    if ('Texture' in fbxTree.Objects) {\n      const textureNodes = fbxTree.Objects.Texture\n      for (const nodeID in textureNodes) {\n        const texture = this.parseTexture(textureNodes[nodeID], images)\n        textureMap.set(parseInt(nodeID), texture)\n      }\n    }\n\n    return textureMap\n  }\n\n  // Parse individual node in FBXTree.Objects.Texture\n  parseTexture(textureNode, images) {\n    const texture = this.loadTexture(textureNode, images)\n\n    texture.ID = textureNode.id\n\n    texture.name = textureNode.attrName\n\n    const wrapModeU = textureNode.WrapModeU\n    const wrapModeV = textureNode.WrapModeV\n\n    const valueU = wrapModeU !== undefined ? wrapModeU.value : 0\n    const valueV = wrapModeV !== undefined ? wrapModeV.value : 0\n\n    // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n    // 0: repeat(default), 1: clamp\n\n    texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping\n    texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping\n\n    if ('Scaling' in textureNode) {\n      const values = textureNode.Scaling.value\n\n      texture.repeat.x = values[0]\n      texture.repeat.y = values[1]\n    }\n\n    return texture\n  }\n\n  // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n  loadTexture(textureNode, images) {\n    let fileName\n\n    const currentPath = this.textureLoader.path\n\n    const children = connections.get(textureNode.id).children\n\n    if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n      fileName = images[children[0].ID]\n\n      if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n        this.textureLoader.setPath(undefined)\n      }\n    }\n\n    let texture\n\n    const extension = textureNode.FileName.slice(-3).toLowerCase()\n\n    if (extension === 'tga') {\n      const loader = this.manager.getHandler('.tga')\n\n      if (loader === null) {\n        console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename)\n        texture = new Texture()\n      } else {\n        loader.setPath(this.textureLoader.path)\n        texture = loader.load(fileName)\n      }\n    } else if (extension === 'psd') {\n      console.warn(\n        'FBXLoader: PSD textures are not supported, creating placeholder texture for',\n        textureNode.RelativeFilename,\n      )\n      texture = new Texture()\n    } else {\n      texture = this.textureLoader.load(fileName)\n    }\n\n    this.textureLoader.setPath(currentPath)\n\n    return texture\n  }\n\n  // Parse nodes in FBXTree.Objects.Material\n  parseMaterials(textureMap) {\n    const materialMap = new Map()\n\n    if ('Material' in fbxTree.Objects) {\n      const materialNodes = fbxTree.Objects.Material\n\n      for (const nodeID in materialNodes) {\n        const material = this.parseMaterial(materialNodes[nodeID], textureMap)\n\n        if (material !== null) materialMap.set(parseInt(nodeID), material)\n      }\n    }\n\n    return materialMap\n  }\n\n  // Parse single node in FBXTree.Objects.Material\n  // Materials are connected to texture maps in FBXTree.Objects.Textures\n  // FBX format currently only supports Lambert and Phong shading models\n  parseMaterial(materialNode, textureMap) {\n    const ID = materialNode.id\n    const name = materialNode.attrName\n    let type = materialNode.ShadingModel\n\n    // Case where FBX wraps shading model in property object.\n    if (typeof type === 'object') {\n      type = type.value\n    }\n\n    // Ignore unused materials which don't have any connections.\n    if (!connections.has(ID)) return null\n\n    const parameters = this.parseParameters(materialNode, textureMap, ID)\n\n    let material\n\n    switch (type.toLowerCase()) {\n      case 'phong':\n        material = new MeshPhongMaterial()\n        break\n      case 'lambert':\n        material = new MeshLambertMaterial()\n        break\n      default:\n        console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type)\n        material = new MeshPhongMaterial()\n        break\n    }\n\n    material.setValues(parameters)\n    material.name = name\n\n    return material\n  }\n\n  // Parse FBX material and return parameters suitable for a three.js material\n  // Also parse the texture map and return any textures associated with the material\n  parseParameters(materialNode, textureMap, ID) {\n    const parameters = {}\n\n    if (materialNode.BumpFactor) {\n      parameters.bumpScale = materialNode.BumpFactor.value\n    }\n\n    if (materialNode.Diffuse) {\n      parameters.color = new Color().fromArray(materialNode.Diffuse.value)\n    } else if (\n      materialNode.DiffuseColor &&\n      (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')\n    ) {\n      // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n      parameters.color = new Color().fromArray(materialNode.DiffuseColor.value)\n    }\n\n    if (materialNode.DisplacementFactor) {\n      parameters.displacementScale = materialNode.DisplacementFactor.value\n    }\n\n    if (materialNode.Emissive) {\n      parameters.emissive = new Color().fromArray(materialNode.Emissive.value)\n    } else if (\n      materialNode.EmissiveColor &&\n      (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')\n    ) {\n      // The blender exporter exports emissive color here instead of in materialNode.Emissive\n      parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value)\n    }\n\n    if (materialNode.EmissiveFactor) {\n      parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value)\n    }\n\n    if (materialNode.Opacity) {\n      parameters.opacity = parseFloat(materialNode.Opacity.value)\n    }\n\n    if (parameters.opacity < 1.0) {\n      parameters.transparent = true\n    }\n\n    if (materialNode.ReflectionFactor) {\n      parameters.reflectivity = materialNode.ReflectionFactor.value\n    }\n\n    if (materialNode.Shininess) {\n      parameters.shininess = materialNode.Shininess.value\n    }\n\n    if (materialNode.Specular) {\n      parameters.specular = new Color().fromArray(materialNode.Specular.value)\n    } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n      // The blender exporter exports specular color here instead of in materialNode.Specular\n      parameters.specular = new Color().fromArray(materialNode.SpecularColor.value)\n    }\n\n    const scope = this\n    connections.get(ID).children.forEach(function (child) {\n      const type = child.relationship\n\n      switch (type) {\n        case 'Bump':\n          parameters.bumpMap = scope.getTexture(textureMap, child.ID)\n          break\n\n        case 'Maya|TEX_ao_map':\n          parameters.aoMap = scope.getTexture(textureMap, child.ID)\n          break\n\n        case 'DiffuseColor':\n        case 'Maya|TEX_color_map':\n          parameters.map = scope.getTexture(textureMap, child.ID)\n          if (parameters.map !== undefined) {\n            if ('colorSpace' in parameters.map) parameters.map.colorSpace = 'srgb'\n            else parameters.map.encoding = 3001 // sRGBEncoding\n          }\n\n          break\n\n        case 'DisplacementColor':\n          parameters.displacementMap = scope.getTexture(textureMap, child.ID)\n          break\n\n        case 'EmissiveColor':\n          parameters.emissiveMap = scope.getTexture(textureMap, child.ID)\n          if (parameters.emissiveMap !== undefined) {\n            if ('colorSpace' in parameters.emissiveMap) parameters.emissiveMap.colorSpace = 'srgb'\n            else parameters.emissiveMap.encoding = 3001 // sRGBEncoding\n          }\n\n          break\n\n        case 'NormalMap':\n        case 'Maya|TEX_normal_map':\n          parameters.normalMap = scope.getTexture(textureMap, child.ID)\n          break\n\n        case 'ReflectionColor':\n          parameters.envMap = scope.getTexture(textureMap, child.ID)\n          if (parameters.envMap !== undefined) {\n            parameters.envMap.mapping = EquirectangularReflectionMapping\n\n            if ('colorSpace' in parameters.envMap) parameters.envMap.colorSpace = 'srgb'\n            else parameters.envMap.encoding = 3001 // sRGBEncoding\n          }\n\n          break\n\n        case 'SpecularColor':\n          parameters.specularMap = scope.getTexture(textureMap, child.ID)\n          if (parameters.specularMap !== undefined) {\n            if ('colorSpace' in parameters.specularMap) parameters.specularMap.colorSpace = 'srgb'\n            else parameters.specularMap.encoding = 3001 // sRGBEncoding\n          }\n\n          break\n\n        case 'TransparentColor':\n        case 'TransparencyFactor':\n          parameters.alphaMap = scope.getTexture(textureMap, child.ID)\n          parameters.transparent = true\n          break\n\n        case 'AmbientColor':\n        case 'ShininessExponent': // AKA glossiness map\n        case 'SpecularFactor': // AKA specularLevel\n        case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n        default:\n          console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type)\n          break\n      }\n    })\n\n    return parameters\n  }\n\n  // get a texture from the textureMap for use by a material.\n  getTexture(textureMap, id) {\n    // if the texture is a layered texture, just use the first layer and issue a warning\n    if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n      console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.')\n      id = connections.get(id).children[0].ID\n    }\n\n    return textureMap.get(id)\n  }\n\n  // Parse nodes in FBXTree.Objects.Deformer\n  // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n  // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n  parseDeformers() {\n    const skeletons = {}\n    const morphTargets = {}\n\n    if ('Deformer' in fbxTree.Objects) {\n      const DeformerNodes = fbxTree.Objects.Deformer\n\n      for (const nodeID in DeformerNodes) {\n        const deformerNode = DeformerNodes[nodeID]\n\n        const relationships = connections.get(parseInt(nodeID))\n\n        if (deformerNode.attrType === 'Skin') {\n          const skeleton = this.parseSkeleton(relationships, DeformerNodes)\n          skeleton.ID = nodeID\n\n          if (relationships.parents.length > 1) {\n            console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.')\n          }\n          skeleton.geometryID = relationships.parents[0].ID\n\n          skeletons[nodeID] = skeleton\n        } else if (deformerNode.attrType === 'BlendShape') {\n          const morphTarget = {\n            id: nodeID,\n          }\n\n          morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes)\n          morphTarget.id = nodeID\n\n          if (relationships.parents.length > 1) {\n            console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.')\n          }\n\n          morphTargets[nodeID] = morphTarget\n        }\n      }\n    }\n\n    return {\n      skeletons: skeletons,\n      morphTargets: morphTargets,\n    }\n  }\n\n  // Parse single nodes in FBXTree.Objects.Deformer\n  // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n  // Each skin node represents a skeleton and each cluster node represents a bone\n  parseSkeleton(relationships, deformerNodes) {\n    const rawBones = []\n\n    relationships.children.forEach(function (child) {\n      const boneNode = deformerNodes[child.ID]\n\n      if (boneNode.attrType !== 'Cluster') return\n\n      const rawBone = {\n        ID: child.ID,\n        indices: [],\n        weights: [],\n        transformLink: new Matrix4().fromArray(boneNode.TransformLink.a),\n        // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n        // linkMode: boneNode.Mode,\n      }\n\n      if ('Indexes' in boneNode) {\n        rawBone.indices = boneNode.Indexes.a\n        rawBone.weights = boneNode.Weights.a\n      }\n\n      rawBones.push(rawBone)\n    })\n\n    return {\n      rawBones: rawBones,\n      bones: [],\n    }\n  }\n\n  // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n  parseMorphTargets(relationships, deformerNodes) {\n    const rawMorphTargets = []\n\n    for (let i = 0; i < relationships.children.length; i++) {\n      const child = relationships.children[i]\n\n      const morphTargetNode = deformerNodes[child.ID]\n\n      const rawMorphTarget = {\n        name: morphTargetNode.attrName,\n        initialWeight: morphTargetNode.DeformPercent,\n        id: morphTargetNode.id,\n        fullWeights: morphTargetNode.FullWeights.a,\n      }\n\n      if (morphTargetNode.attrType !== 'BlendShapeChannel') return\n\n      rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n        return child.relationship === undefined\n      })[0].ID\n\n      rawMorphTargets.push(rawMorphTarget)\n    }\n\n    return rawMorphTargets\n  }\n\n  // create the main Group() to be returned by the loader\n  parseScene(deformers, geometryMap, materialMap) {\n    sceneGraph = new Group()\n\n    const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap)\n\n    const modelNodes = fbxTree.Objects.Model\n\n    const scope = this\n    modelMap.forEach(function (model) {\n      const modelNode = modelNodes[model.ID]\n      scope.setLookAtProperties(model, modelNode)\n\n      const parentConnections = connections.get(model.ID).parents\n\n      parentConnections.forEach(function (connection) {\n        const parent = modelMap.get(connection.ID)\n        if (parent !== undefined) parent.add(model)\n      })\n\n      if (model.parent === null) {\n        sceneGraph.add(model)\n      }\n    })\n\n    this.bindSkeleton(deformers.skeletons, geometryMap, modelMap)\n\n    this.createAmbientLight()\n\n    sceneGraph.traverse(function (node) {\n      if (node.userData.transformData) {\n        if (node.parent) {\n          node.userData.transformData.parentMatrix = node.parent.matrix\n          node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld\n        }\n\n        const transform = generateTransform(node.userData.transformData)\n\n        node.applyMatrix4(transform)\n        node.updateWorldMatrix()\n      }\n    })\n\n    const animations = new AnimationParser().parse()\n\n    // if all the models where already combined in a single group, just return that\n    if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n      sceneGraph.children[0].animations = animations\n      sceneGraph = sceneGraph.children[0]\n    }\n\n    sceneGraph.animations = animations\n  }\n\n  // parse nodes in FBXTree.Objects.Model\n  parseModels(skeletons, geometryMap, materialMap) {\n    const modelMap = new Map()\n    const modelNodes = fbxTree.Objects.Model\n\n    for (const nodeID in modelNodes) {\n      const id = parseInt(nodeID)\n      const node = modelNodes[nodeID]\n      const relationships = connections.get(id)\n\n      let model = this.buildSkeleton(relationships, skeletons, id, node.attrName)\n\n      if (!model) {\n        switch (node.attrType) {\n          case 'Camera':\n            model = this.createCamera(relationships)\n            break\n          case 'Light':\n            model = this.createLight(relationships)\n            break\n          case 'Mesh':\n            model = this.createMesh(relationships, geometryMap, materialMap)\n            break\n          case 'NurbsCurve':\n            model = this.createCurve(relationships, geometryMap)\n            break\n          case 'LimbNode':\n          case 'Root':\n            model = new Bone()\n            break\n          case 'Null':\n          default:\n            model = new Group()\n            break\n        }\n\n        model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : ''\n\n        model.ID = id\n      }\n\n      this.getTransformData(model, node)\n      modelMap.set(id, model)\n    }\n\n    return modelMap\n  }\n\n  buildSkeleton(relationships, skeletons, id, name) {\n    let bone = null\n\n    relationships.parents.forEach(function (parent) {\n      for (const ID in skeletons) {\n        const skeleton = skeletons[ID]\n\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          if (rawBone.ID === parent.ID) {\n            const subBone = bone\n            bone = new Bone()\n\n            bone.matrixWorld.copy(rawBone.transformLink)\n\n            // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n            bone.name = name ? PropertyBinding.sanitizeNodeName(name) : ''\n            bone.ID = id\n\n            skeleton.bones[i] = bone\n\n            // In cases where a bone is shared between multiple meshes\n            // duplicate the bone here and and it as a child of the first bone\n            if (subBone !== null) {\n              bone.add(subBone)\n            }\n          }\n        })\n      }\n    })\n\n    return bone\n  }\n\n  // create a PerspectiveCamera or OrthographicCamera\n  createCamera(relationships) {\n    let model\n    let cameraAttribute\n\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID]\n\n      if (attr !== undefined) {\n        cameraAttribute = attr\n      }\n    })\n\n    if (cameraAttribute === undefined) {\n      model = new Object3D()\n    } else {\n      let type = 0\n      if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n        type = 1\n      }\n\n      let nearClippingPlane = 1\n      if (cameraAttribute.NearPlane !== undefined) {\n        nearClippingPlane = cameraAttribute.NearPlane.value / 1000\n      }\n\n      let farClippingPlane = 1000\n      if (cameraAttribute.FarPlane !== undefined) {\n        farClippingPlane = cameraAttribute.FarPlane.value / 1000\n      }\n\n      let width = window.innerWidth\n      let height = window.innerHeight\n\n      if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n        width = cameraAttribute.AspectWidth.value\n        height = cameraAttribute.AspectHeight.value\n      }\n\n      const aspect = width / height\n\n      let fov = 45\n      if (cameraAttribute.FieldOfView !== undefined) {\n        fov = cameraAttribute.FieldOfView.value\n      }\n\n      const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null\n\n      switch (type) {\n        case 0: // Perspective\n          model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane)\n          if (focalLength !== null) model.setFocalLength(focalLength)\n          break\n\n        case 1: // Orthographic\n          model = new OrthographicCamera(\n            -width / 2,\n            width / 2,\n            height / 2,\n            -height / 2,\n            nearClippingPlane,\n            farClippingPlane,\n          )\n          break\n\n        default:\n          console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.')\n          model = new Object3D()\n          break\n      }\n    }\n\n    return model\n  }\n\n  // Create a DirectionalLight, PointLight or SpotLight\n  createLight(relationships) {\n    let model\n    let lightAttribute\n\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID]\n\n      if (attr !== undefined) {\n        lightAttribute = attr\n      }\n    })\n\n    if (lightAttribute === undefined) {\n      model = new Object3D()\n    } else {\n      let type\n\n      // LightType can be undefined for Point lights\n      if (lightAttribute.LightType === undefined) {\n        type = 0\n      } else {\n        type = lightAttribute.LightType.value\n      }\n\n      let color = 0xffffff\n\n      if (lightAttribute.Color !== undefined) {\n        color = new Color().fromArray(lightAttribute.Color.value)\n      }\n\n      let intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100\n\n      // light disabled\n      if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n        intensity = 0\n      }\n\n      let distance = 0\n      if (lightAttribute.FarAttenuationEnd !== undefined) {\n        if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n          distance = 0\n        } else {\n          distance = lightAttribute.FarAttenuationEnd.value\n        }\n      }\n\n      // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n      const decay = 1\n\n      switch (type) {\n        case 0: // Point\n          model = new PointLight(color, intensity, distance, decay)\n          break\n\n        case 1: // Directional\n          model = new DirectionalLight(color, intensity)\n          break\n\n        case 2: // Spot\n          let angle = Math.PI / 3\n\n          if (lightAttribute.InnerAngle !== undefined) {\n            angle = MathUtils.degToRad(lightAttribute.InnerAngle.value)\n          }\n\n          let penumbra = 0\n          if (lightAttribute.OuterAngle !== undefined) {\n            // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n            // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n            // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n            penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value)\n            penumbra = Math.max(penumbra, 1)\n          }\n\n          model = new SpotLight(color, intensity, distance, angle, penumbra, decay)\n          break\n\n        default:\n          console.warn(\n            'THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.',\n          )\n          model = new PointLight(color, intensity)\n          break\n      }\n\n      if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n        model.castShadow = true\n      }\n    }\n\n    return model\n  }\n\n  createMesh(relationships, geometryMap, materialMap) {\n    let model\n    let geometry = null\n    let material = null\n    const materials = []\n\n    // get geometry and materials(s) from connections\n    relationships.children.forEach(function (child) {\n      if (geometryMap.has(child.ID)) {\n        geometry = geometryMap.get(child.ID)\n      }\n\n      if (materialMap.has(child.ID)) {\n        materials.push(materialMap.get(child.ID))\n      }\n    })\n\n    if (materials.length > 1) {\n      material = materials\n    } else if (materials.length > 0) {\n      material = materials[0]\n    } else {\n      material = new MeshPhongMaterial({ color: 0xcccccc })\n      materials.push(material)\n    }\n\n    if ('color' in geometry.attributes) {\n      materials.forEach(function (material) {\n        material.vertexColors = true\n      })\n    }\n\n    if (geometry.FBX_Deformer) {\n      model = new SkinnedMesh(geometry, material)\n      model.normalizeSkinWeights()\n    } else {\n      model = new Mesh(geometry, material)\n    }\n\n    return model\n  }\n\n  createCurve(relationships, geometryMap) {\n    const geometry = relationships.children.reduce(function (geo, child) {\n      if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID)\n\n      return geo\n    }, null)\n\n    // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n    const material = new LineBasicMaterial({ color: 0x3300ff, linewidth: 1 })\n    return new Line(geometry, material)\n  }\n\n  // parse the model node for transform data\n  getTransformData(model, modelNode) {\n    const transformData = {}\n\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value)\n\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value)\n    else transformData.eulerOrder = 'ZYX'\n\n    if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value\n\n    if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value\n    if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value\n    if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value\n\n    if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value\n\n    if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value\n    if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value\n\n    if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value\n    if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value\n\n    model.userData.transformData = transformData\n  }\n\n  setLookAtProperties(model, modelNode) {\n    if ('LookAtProperty' in modelNode) {\n      const children = connections.get(model.ID).children\n\n      children.forEach(function (child) {\n        if (child.relationship === 'LookAtProperty') {\n          const lookAtTarget = fbxTree.Objects.Model[child.ID]\n\n          if ('Lcl_Translation' in lookAtTarget) {\n            const pos = lookAtTarget.Lcl_Translation.value\n\n            // DirectionalLight, SpotLight\n            if (model.target !== undefined) {\n              model.target.position.fromArray(pos)\n              sceneGraph.add(model.target)\n            } else {\n              // Cameras and other Object3Ds\n\n              model.lookAt(new Vector3().fromArray(pos))\n            }\n          }\n        }\n      })\n    }\n  }\n\n  bindSkeleton(skeletons, geometryMap, modelMap) {\n    const bindMatrices = this.parsePoseNodes()\n\n    for (const ID in skeletons) {\n      const skeleton = skeletons[ID]\n\n      const parents = connections.get(parseInt(skeleton.ID)).parents\n\n      parents.forEach(function (parent) {\n        if (geometryMap.has(parent.ID)) {\n          const geoID = parent.ID\n          const geoRelationships = connections.get(geoID)\n\n          geoRelationships.parents.forEach(function (geoConnParent) {\n            if (modelMap.has(geoConnParent.ID)) {\n              const model = modelMap.get(geoConnParent.ID)\n\n              model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID])\n            }\n          })\n        }\n      })\n    }\n  }\n\n  parsePoseNodes() {\n    const bindMatrices = {}\n\n    if ('Pose' in fbxTree.Objects) {\n      const BindPoseNode = fbxTree.Objects.Pose\n\n      for (const nodeID in BindPoseNode) {\n        if (BindPoseNode[nodeID].attrType === 'BindPose' && BindPoseNode[nodeID].NbPoseNodes > 0) {\n          const poseNodes = BindPoseNode[nodeID].PoseNode\n\n          if (Array.isArray(poseNodes)) {\n            poseNodes.forEach(function (poseNode) {\n              bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a)\n            })\n          } else {\n            bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a)\n          }\n        }\n      }\n    }\n\n    return bindMatrices\n  }\n\n  // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n  createAmbientLight() {\n    if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n      const ambientColor = fbxTree.GlobalSettings.AmbientColor.value\n      const r = ambientColor[0]\n      const g = ambientColor[1]\n      const b = ambientColor[2]\n\n      if (r !== 0 || g !== 0 || b !== 0) {\n        const color = new Color(r, g, b)\n        sceneGraph.add(new AmbientLight(color, 1))\n      }\n    }\n  }\n}\n\n// parse Geometry data from FBXTree and return map of BufferGeometries\nclass GeometryParser {\n  // Parse nodes in FBXTree.Objects.Geometry\n  parse(deformers) {\n    const geometryMap = new Map()\n\n    if ('Geometry' in fbxTree.Objects) {\n      const geoNodes = fbxTree.Objects.Geometry\n\n      for (const nodeID in geoNodes) {\n        const relationships = connections.get(parseInt(nodeID))\n        const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers)\n\n        geometryMap.set(parseInt(nodeID), geo)\n      }\n    }\n\n    return geometryMap\n  }\n\n  // Parse single node in FBXTree.Objects.Geometry\n  parseGeometry(relationships, geoNode, deformers) {\n    switch (geoNode.attrType) {\n      case 'Mesh':\n        return this.parseMeshGeometry(relationships, geoNode, deformers)\n        break\n\n      case 'NurbsCurve':\n        return this.parseNurbsGeometry(geoNode)\n        break\n    }\n  }\n\n  // Parse single node mesh geometry in FBXTree.Objects.Geometry\n  parseMeshGeometry(relationships, geoNode, deformers) {\n    const skeletons = deformers.skeletons\n    const morphTargets = []\n\n    const modelNodes = relationships.parents.map(function (parent) {\n      return fbxTree.Objects.Model[parent.ID]\n    })\n\n    // don't create geometry if it is not associated with any models\n    if (modelNodes.length === 0) return\n\n    const skeleton = relationships.children.reduce(function (skeleton, child) {\n      if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID]\n\n      return skeleton\n    }, null)\n\n    relationships.children.forEach(function (child) {\n      if (deformers.morphTargets[child.ID] !== undefined) {\n        morphTargets.push(deformers.morphTargets[child.ID])\n      }\n    })\n\n    // Assume one model and get the preRotation from that\n    // if there is more than one model associated with the geometry this may cause problems\n    const modelNode = modelNodes[0]\n\n    const transformData = {}\n\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value)\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value)\n\n    if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value\n    if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value\n    if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value\n\n    const transform = generateTransform(transformData)\n\n    return this.genGeometry(geoNode, skeleton, morphTargets, transform)\n  }\n\n  // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n  genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n    const geo = new BufferGeometry()\n    if (geoNode.attrName) geo.name = geoNode.attrName\n\n    const geoInfo = this.parseGeoNode(geoNode, skeleton)\n    const buffers = this.genBuffers(geoInfo)\n\n    const positionAttribute = new Float32BufferAttribute(buffers.vertex, 3)\n\n    positionAttribute.applyMatrix4(preTransform)\n\n    geo.setAttribute('position', positionAttribute)\n\n    if (buffers.colors.length > 0) {\n      geo.setAttribute('color', new Float32BufferAttribute(buffers.colors, 3))\n    }\n\n    if (skeleton) {\n      geo.setAttribute('skinIndex', new Uint16BufferAttribute(buffers.weightsIndices, 4))\n\n      geo.setAttribute('skinWeight', new Float32BufferAttribute(buffers.vertexWeights, 4))\n\n      // used later to bind the skeleton to the model\n      geo.FBX_Deformer = skeleton\n    }\n\n    if (buffers.normal.length > 0) {\n      const normalMatrix = new Matrix3().getNormalMatrix(preTransform)\n\n      const normalAttribute = new Float32BufferAttribute(buffers.normal, 3)\n      normalAttribute.applyNormalMatrix(normalMatrix)\n\n      geo.setAttribute('normal', normalAttribute)\n    }\n\n    buffers.uvs.forEach(function (uvBuffer, i) {\n      if (UV1 === 'uv2') i++;\n      const name = i === 0 ? 'uv' : `uv${i}`;\n\n      geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2))\n    })\n\n    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n      // Convert the material indices of each vertex into rendering groups on the geometry.\n      let prevMaterialIndex = buffers.materialIndex[0]\n      let startIndex = 0\n\n      buffers.materialIndex.forEach(function (currentIndex, i) {\n        if (currentIndex !== prevMaterialIndex) {\n          geo.addGroup(startIndex, i - startIndex, prevMaterialIndex)\n\n          prevMaterialIndex = currentIndex\n          startIndex = i\n        }\n      })\n\n      // the loop above doesn't add the last group, do that here.\n      if (geo.groups.length > 0) {\n        const lastGroup = geo.groups[geo.groups.length - 1]\n        const lastIndex = lastGroup.start + lastGroup.count\n\n        if (lastIndex !== buffers.materialIndex.length) {\n          geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex)\n        }\n      }\n\n      // case where there are multiple materials but the whole geometry is only\n      // using one of them\n      if (geo.groups.length === 0) {\n        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0])\n      }\n    }\n\n    this.addMorphTargets(geo, geoNode, morphTargets, preTransform)\n\n    return geo\n  }\n\n  parseGeoNode(geoNode, skeleton) {\n    const geoInfo = {}\n\n    geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : []\n    geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : []\n\n    if (geoNode.LayerElementColor) {\n      geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0])\n    }\n\n    if (geoNode.LayerElementMaterial) {\n      geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0])\n    }\n\n    if (geoNode.LayerElementNormal) {\n      geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0])\n    }\n\n    if (geoNode.LayerElementUV) {\n      geoInfo.uv = []\n\n      let i = 0\n      while (geoNode.LayerElementUV[i]) {\n        if (geoNode.LayerElementUV[i].UV) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]))\n        }\n\n        i++\n      }\n    }\n\n    geoInfo.weightTable = {}\n\n    if (skeleton !== null) {\n      geoInfo.skeleton = skeleton\n\n      skeleton.rawBones.forEach(function (rawBone, i) {\n        // loop over the bone's vertex indices and weights\n        rawBone.indices.forEach(function (index, j) {\n          if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = []\n\n          geoInfo.weightTable[index].push({\n            id: i,\n            weight: rawBone.weights[j],\n          })\n        })\n      })\n    }\n\n    return geoInfo\n  }\n\n  genBuffers(geoInfo) {\n    const buffers = {\n      vertex: [],\n      normal: [],\n      colors: [],\n      uvs: [],\n      materialIndex: [],\n      vertexWeights: [],\n      weightsIndices: [],\n    }\n\n    let polygonIndex = 0\n    let faceLength = 0\n    let displayedWeightsWarning = false\n\n    // these will hold data for a single face\n    let facePositionIndexes = []\n    let faceNormals = []\n    let faceColors = []\n    let faceUVs = []\n    let faceWeights = []\n    let faceWeightIndices = []\n\n    const scope = this\n    geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n      let materialIndex\n      let endOfFace = false\n\n      // Face index and vertex index arrays are combined in a single array\n      // A cube with quad faces looks like this:\n      // PolygonVertexIndex: *24 {\n      //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n      //  }\n      // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n      // to find index of last vertex bit shift the index: ^ - 1\n      if (vertexIndex < 0) {\n        vertexIndex = vertexIndex ^ -1 // equivalent to ( x * -1 ) - 1\n        endOfFace = true\n      }\n\n      let weightIndices = []\n      let weights = []\n\n      facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2)\n\n      if (geoInfo.color) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color)\n\n        faceColors.push(data[0], data[1], data[2])\n      }\n\n      if (geoInfo.skeleton) {\n        if (geoInfo.weightTable[vertexIndex] !== undefined) {\n          geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n            weights.push(wt.weight)\n            weightIndices.push(wt.id)\n          })\n        }\n\n        if (weights.length > 4) {\n          if (!displayedWeightsWarning) {\n            console.warn(\n              'THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.',\n            )\n            displayedWeightsWarning = true\n          }\n\n          const wIndex = [0, 0, 0, 0]\n          const Weight = [0, 0, 0, 0]\n\n          weights.forEach(function (weight, weightIndex) {\n            let currentWeight = weight\n            let currentIndex = weightIndices[weightIndex]\n\n            Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n              if (currentWeight > comparedWeight) {\n                comparedWeightArray[comparedWeightIndex] = currentWeight\n                currentWeight = comparedWeight\n\n                const tmp = wIndex[comparedWeightIndex]\n                wIndex[comparedWeightIndex] = currentIndex\n                currentIndex = tmp\n              }\n            })\n          })\n\n          weightIndices = wIndex\n          weights = Weight\n        }\n\n        // if the weight array is shorter than 4 pad with 0s\n        while (weights.length < 4) {\n          weights.push(0)\n          weightIndices.push(0)\n        }\n\n        for (let i = 0; i < 4; ++i) {\n          faceWeights.push(weights[i])\n          faceWeightIndices.push(weightIndices[i])\n        }\n      }\n\n      if (geoInfo.normal) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal)\n\n        faceNormals.push(data[0], data[1], data[2])\n      }\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0]\n      }\n\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, i) {\n          const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv)\n\n          if (faceUVs[i] === undefined) {\n            faceUVs[i] = []\n          }\n\n          faceUVs[i].push(data[0])\n          faceUVs[i].push(data[1])\n        })\n      }\n\n      faceLength++\n\n      if (endOfFace) {\n        scope.genFace(\n          buffers,\n          geoInfo,\n          facePositionIndexes,\n          materialIndex,\n          faceNormals,\n          faceColors,\n          faceUVs,\n          faceWeights,\n          faceWeightIndices,\n          faceLength,\n        )\n\n        polygonIndex++\n        faceLength = 0\n\n        // reset arrays for the next face\n        facePositionIndexes = []\n        faceNormals = []\n        faceColors = []\n        faceUVs = []\n        faceWeights = []\n        faceWeightIndices = []\n      }\n    })\n\n    return buffers\n  }\n\n  // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n  genFace(\n    buffers,\n    geoInfo,\n    facePositionIndexes,\n    materialIndex,\n    faceNormals,\n    faceColors,\n    faceUVs,\n    faceWeights,\n    faceWeightIndices,\n    faceLength,\n  ) {\n    for (let i = 2; i < faceLength; i++) {\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]])\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]])\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]])\n\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]])\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]])\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]])\n\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]])\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]])\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]])\n\n      if (geoInfo.skeleton) {\n        buffers.vertexWeights.push(faceWeights[0])\n        buffers.vertexWeights.push(faceWeights[1])\n        buffers.vertexWeights.push(faceWeights[2])\n        buffers.vertexWeights.push(faceWeights[3])\n\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4])\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1])\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2])\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3])\n\n        buffers.vertexWeights.push(faceWeights[i * 4])\n        buffers.vertexWeights.push(faceWeights[i * 4 + 1])\n        buffers.vertexWeights.push(faceWeights[i * 4 + 2])\n        buffers.vertexWeights.push(faceWeights[i * 4 + 3])\n\n        buffers.weightsIndices.push(faceWeightIndices[0])\n        buffers.weightsIndices.push(faceWeightIndices[1])\n        buffers.weightsIndices.push(faceWeightIndices[2])\n        buffers.weightsIndices.push(faceWeightIndices[3])\n\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4])\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1])\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2])\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3])\n\n        buffers.weightsIndices.push(faceWeightIndices[i * 4])\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1])\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2])\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3])\n      }\n\n      if (geoInfo.color) {\n        buffers.colors.push(faceColors[0])\n        buffers.colors.push(faceColors[1])\n        buffers.colors.push(faceColors[2])\n\n        buffers.colors.push(faceColors[(i - 1) * 3])\n        buffers.colors.push(faceColors[(i - 1) * 3 + 1])\n        buffers.colors.push(faceColors[(i - 1) * 3 + 2])\n\n        buffers.colors.push(faceColors[i * 3])\n        buffers.colors.push(faceColors[i * 3 + 1])\n        buffers.colors.push(faceColors[i * 3 + 2])\n      }\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        buffers.materialIndex.push(materialIndex)\n        buffers.materialIndex.push(materialIndex)\n        buffers.materialIndex.push(materialIndex)\n      }\n\n      if (geoInfo.normal) {\n        buffers.normal.push(faceNormals[0])\n        buffers.normal.push(faceNormals[1])\n        buffers.normal.push(faceNormals[2])\n\n        buffers.normal.push(faceNormals[(i - 1) * 3])\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 1])\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 2])\n\n        buffers.normal.push(faceNormals[i * 3])\n        buffers.normal.push(faceNormals[i * 3 + 1])\n        buffers.normal.push(faceNormals[i * 3 + 2])\n      }\n\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, j) {\n          if (buffers.uvs[j] === undefined) buffers.uvs[j] = []\n\n          buffers.uvs[j].push(faceUVs[j][0])\n          buffers.uvs[j].push(faceUVs[j][1])\n\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2])\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1])\n\n          buffers.uvs[j].push(faceUVs[j][i * 2])\n          buffers.uvs[j].push(faceUVs[j][i * 2 + 1])\n        })\n      }\n    }\n  }\n\n  addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n    if (morphTargets.length === 0) return\n\n    parentGeo.morphTargetsRelative = true\n\n    parentGeo.morphAttributes.position = []\n    // parentGeo.morphAttributes.normal = []; // not implemented\n\n    const scope = this\n    morphTargets.forEach(function (morphTarget) {\n      morphTarget.rawTargets.forEach(function (rawTarget) {\n        const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID]\n\n        if (morphGeoNode !== undefined) {\n          scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name)\n        }\n      })\n    })\n  }\n\n  // a morph geometry node is similar to a standard  node, and the node is also contained\n  // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n  // and a special attribute Index defining which vertices of the original geometry are affected\n  // Normal and position attributes only have data for the vertices that are affected by the morph\n  genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n    const vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : []\n\n    const morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : []\n    const indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : []\n\n    const length = parentGeo.attributes.position.count * 3\n    const morphPositions = new Float32Array(length)\n\n    for (let i = 0; i < indices.length; i++) {\n      const morphIndex = indices[i] * 3\n\n      morphPositions[morphIndex] = morphPositionsSparse[i * 3]\n      morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1]\n      morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2]\n    }\n\n    // TODO: add morph normal support\n    const morphGeoInfo = {\n      vertexIndices: vertexIndices,\n      vertexPositions: morphPositions,\n    }\n\n    const morphBuffers = this.genBuffers(morphGeoInfo)\n\n    const positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3)\n    positionAttribute.name = name || morphGeoNode.attrName\n\n    positionAttribute.applyMatrix4(preTransform)\n\n    parentGeo.morphAttributes.position.push(positionAttribute)\n  }\n\n  // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n  parseNormals(NormalNode) {\n    const mappingType = NormalNode.MappingInformationType\n    const referenceType = NormalNode.ReferenceInformationType\n    const buffer = NormalNode.Normals.a\n    let indexBuffer = []\n    if (referenceType === 'IndexToDirect') {\n      if ('NormalIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalIndex.a\n      } else if ('NormalsIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalsIndex.a\n      }\n    }\n\n    return {\n      dataSize: 3,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType,\n    }\n  }\n\n  // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n  parseUVs(UVNode) {\n    const mappingType = UVNode.MappingInformationType\n    const referenceType = UVNode.ReferenceInformationType\n    const buffer = UVNode.UV.a\n    let indexBuffer = []\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = UVNode.UVIndex.a\n    }\n\n    return {\n      dataSize: 2,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType,\n    }\n  }\n\n  // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n  parseVertexColors(ColorNode) {\n    const mappingType = ColorNode.MappingInformationType\n    const referenceType = ColorNode.ReferenceInformationType\n    const buffer = ColorNode.Colors.a\n    let indexBuffer = []\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = ColorNode.ColorIndex.a\n    }\n\n    return {\n      dataSize: 4,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType,\n    }\n  }\n\n  // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n  parseMaterialIndices(MaterialNode) {\n    const mappingType = MaterialNode.MappingInformationType\n    const referenceType = MaterialNode.ReferenceInformationType\n\n    if (mappingType === 'NoMappingInformation') {\n      return {\n        dataSize: 1,\n        buffer: [0],\n        indices: [0],\n        mappingType: 'AllSame',\n        referenceType: referenceType,\n      }\n    }\n\n    const materialIndexBuffer = MaterialNode.Materials.a\n\n    // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n    // we expect.So we create an intermediate buffer that points to the index in the buffer,\n    // for conforming with the other functions we've written for other data.\n    const materialIndices = []\n\n    for (let i = 0; i < materialIndexBuffer.length; ++i) {\n      materialIndices.push(i)\n    }\n\n    return {\n      dataSize: 1,\n      buffer: materialIndexBuffer,\n      indices: materialIndices,\n      mappingType: mappingType,\n      referenceType: referenceType,\n    }\n  }\n\n  // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n  parseNurbsGeometry(geoNode) {\n    if (NURBSCurve === undefined) {\n      console.error(\n        'THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.',\n      )\n      return new BufferGeometry()\n    }\n\n    const order = parseInt(geoNode.Order)\n\n    if (isNaN(order)) {\n      console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id)\n      return new BufferGeometry()\n    }\n\n    const degree = order - 1\n\n    const knots = geoNode.KnotVector.a\n    const controlPoints = []\n    const pointsValues = geoNode.Points.a\n\n    for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n      controlPoints.push(new Vector4().fromArray(pointsValues, i))\n    }\n\n    let startKnot, endKnot\n\n    if (geoNode.Form === 'Closed') {\n      controlPoints.push(controlPoints[0])\n    } else if (geoNode.Form === 'Periodic') {\n      startKnot = degree\n      endKnot = knots.length - 1 - startKnot\n\n      for (let i = 0; i < degree; ++i) {\n        controlPoints.push(controlPoints[i])\n      }\n    }\n\n    const curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot)\n    const points = curve.getPoints(controlPoints.length * 12)\n\n    return new BufferGeometry().setFromPoints(points)\n  }\n}\n\n// parse animation data from FBXTree\nclass AnimationParser {\n  // take raw animation clips and turn them into three.js animation clips\n  parse() {\n    const animationClips = []\n\n    const rawClips = this.parseClips()\n\n    if (rawClips !== undefined) {\n      for (const key in rawClips) {\n        const rawClip = rawClips[key]\n\n        const clip = this.addClip(rawClip)\n\n        animationClips.push(clip)\n      }\n    }\n\n    return animationClips\n  }\n\n  parseClips() {\n    // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n    // if this is undefined we can safely assume there are no animations\n    if (fbxTree.Objects.AnimationCurve === undefined) return undefined\n\n    const curveNodesMap = this.parseAnimationCurveNodes()\n\n    this.parseAnimationCurves(curveNodesMap)\n\n    const layersMap = this.parseAnimationLayers(curveNodesMap)\n    const rawClips = this.parseAnimStacks(layersMap)\n\n    return rawClips\n  }\n\n  // parse nodes in FBXTree.Objects.AnimationCurveNode\n  // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n  // and is referenced by an AnimationLayer\n  parseAnimationCurveNodes() {\n    const rawCurveNodes = fbxTree.Objects.AnimationCurveNode\n\n    const curveNodesMap = new Map()\n\n    for (const nodeID in rawCurveNodes) {\n      const rawCurveNode = rawCurveNodes[nodeID]\n\n      if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n        const curveNode = {\n          id: rawCurveNode.id,\n          attr: rawCurveNode.attrName,\n          curves: {},\n        }\n\n        curveNodesMap.set(curveNode.id, curveNode)\n      }\n    }\n\n    return curveNodesMap\n  }\n\n  // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n  // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n  // axis ( e.g. times and values of x rotation)\n  parseAnimationCurves(curveNodesMap) {\n    const rawCurves = fbxTree.Objects.AnimationCurve\n\n    // TODO: Many values are identical up to roundoff error, but won't be optimised\n    // e.g. position times: [0, 0.4, 0. 8]\n    // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n    // clearly, this should be optimised to\n    // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n    // this shows up in nearly every FBX file, and generally time array is length > 100\n\n    for (const nodeID in rawCurves) {\n      const animationCurve = {\n        id: rawCurves[nodeID].id,\n        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n        values: rawCurves[nodeID].KeyValueFloat.a,\n      }\n\n      const relationships = connections.get(animationCurve.id)\n\n      if (relationships !== undefined) {\n        const animationCurveID = relationships.parents[0].ID\n        const animationCurveRelationship = relationships.parents[0].relationship\n\n        if (animationCurveRelationship.match(/X/)) {\n          curveNodesMap.get(animationCurveID).curves['x'] = animationCurve\n        } else if (animationCurveRelationship.match(/Y/)) {\n          curveNodesMap.get(animationCurveID).curves['y'] = animationCurve\n        } else if (animationCurveRelationship.match(/Z/)) {\n          curveNodesMap.get(animationCurveID).curves['z'] = animationCurve\n        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n          curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve\n        }\n      }\n    }\n  }\n\n  // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n  // to various AnimationCurveNodes and is referenced by an AnimationStack node\n  // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n  parseAnimationLayers(curveNodesMap) {\n    const rawLayers = fbxTree.Objects.AnimationLayer\n\n    const layersMap = new Map()\n\n    for (const nodeID in rawLayers) {\n      const layerCurveNodes = []\n\n      const connection = connections.get(parseInt(nodeID))\n\n      if (connection !== undefined) {\n        // all the animationCurveNodes used in the layer\n        const children = connection.children\n\n        children.forEach(function (child, i) {\n          if (curveNodesMap.has(child.ID)) {\n            const curveNode = curveNodesMap.get(child.ID)\n\n            // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n            if (\n              curveNode.curves.x !== undefined ||\n              curveNode.curves.y !== undefined ||\n              curveNode.curves.z !== undefined\n            ) {\n              if (layerCurveNodes[i] === undefined) {\n                const modelID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined\n                })[0].ID\n\n                if (modelID !== undefined) {\n                  const rawModel = fbxTree.Objects.Model[modelID.toString()]\n\n                  if (rawModel === undefined) {\n                    console.warn('THREE.FBXLoader: Encountered a unused curve.', child)\n                    return\n                  }\n\n                  const node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                    ID: rawModel.id,\n                    initialPosition: [0, 0, 0],\n                    initialRotation: [0, 0, 0],\n                    initialScale: [1, 1, 1],\n                  }\n\n                  sceneGraph.traverse(function (child) {\n                    if (child.ID === rawModel.id) {\n                      node.transform = child.matrix\n\n                      if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder\n                    }\n                  })\n\n                  if (!node.transform) node.transform = new Matrix4()\n\n                  // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                  // animation value as well\n                  if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value\n                  if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value\n\n                  layerCurveNodes[i] = node\n                }\n              }\n\n              if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode\n            } else if (curveNode.curves.morph !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined\n                })[0].ID\n\n                const morpherID = connections.get(deformerID).parents[0].ID\n                const geoID = connections.get(morpherID).parents[0].ID\n\n                // assuming geometry is not used in more than one model\n                const modelID = connections.get(geoID).parents[0].ID\n\n                const rawModel = fbxTree.Objects.Model[modelID]\n\n                const node = {\n                  modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                  morphName: fbxTree.Objects.Deformer[deformerID].attrName,\n                }\n\n                layerCurveNodes[i] = node\n              }\n\n              layerCurveNodes[i][curveNode.attr] = curveNode\n            }\n          }\n        })\n\n        layersMap.set(parseInt(nodeID), layerCurveNodes)\n      }\n    }\n\n    return layersMap\n  }\n\n  // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n  // hierarchy. Each Stack node will be used to create a AnimationClip\n  parseAnimStacks(layersMap) {\n    const rawStacks = fbxTree.Objects.AnimationStack\n\n    // connect the stacks (clips) up to the layers\n    const rawClips = {}\n\n    for (const nodeID in rawStacks) {\n      const children = connections.get(parseInt(nodeID)).children\n\n      if (children.length > 1) {\n        // it seems like stacks will always be associated with a single layer. But just in case there are files\n        // where there are multiple layers per stack, we'll display a warning\n        console.warn(\n          'THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.',\n        )\n      }\n\n      const layer = layersMap.get(children[0].ID)\n\n      rawClips[nodeID] = {\n        name: rawStacks[nodeID].attrName,\n        layer: layer,\n      }\n    }\n\n    return rawClips\n  }\n\n  addClip(rawClip) {\n    let tracks = []\n\n    const scope = this\n    rawClip.layer.forEach(function (rawTracks) {\n      tracks = tracks.concat(scope.generateTracks(rawTracks))\n    })\n\n    return new AnimationClip(rawClip.name, -1, tracks)\n  }\n\n  generateTracks(rawTracks) {\n    const tracks = []\n\n    let initialPosition = new Vector3()\n    let initialRotation = new Quaternion()\n    let initialScale = new Vector3()\n\n    if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale)\n\n    initialPosition = initialPosition.toArray()\n    initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray()\n    initialScale = initialScale.toArray()\n\n    if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n      const positionTrack = this.generateVectorTrack(\n        rawTracks.modelName,\n        rawTracks.T.curves,\n        initialPosition,\n        'position',\n      )\n      if (positionTrack !== undefined) tracks.push(positionTrack)\n    }\n\n    if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n      const rotationTrack = this.generateRotationTrack(\n        rawTracks.modelName,\n        rawTracks.R.curves,\n        initialRotation,\n        rawTracks.preRotation,\n        rawTracks.postRotation,\n        rawTracks.eulerOrder,\n      )\n      if (rotationTrack !== undefined) tracks.push(rotationTrack)\n    }\n\n    if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n      const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale')\n      if (scaleTrack !== undefined) tracks.push(scaleTrack)\n    }\n\n    if (rawTracks.DeformPercent !== undefined) {\n      const morphTrack = this.generateMorphTrack(rawTracks)\n      if (morphTrack !== undefined) tracks.push(morphTrack)\n    }\n\n    return tracks\n  }\n\n  generateVectorTrack(modelName, curves, initialValue, type) {\n    const times = this.getTimesForAllAxes(curves)\n    const values = this.getKeyframeTrackValues(times, curves, initialValue)\n\n    return new VectorKeyframeTrack(modelName + '.' + type, times, values)\n  }\n\n  generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n    if (curves.x !== undefined) {\n      this.interpolateRotations(curves.x)\n      curves.x.values = curves.x.values.map(MathUtils.degToRad)\n    }\n\n    if (curves.y !== undefined) {\n      this.interpolateRotations(curves.y)\n      curves.y.values = curves.y.values.map(MathUtils.degToRad)\n    }\n\n    if (curves.z !== undefined) {\n      this.interpolateRotations(curves.z)\n      curves.z.values = curves.z.values.map(MathUtils.degToRad)\n    }\n\n    const times = this.getTimesForAllAxes(curves)\n    const values = this.getKeyframeTrackValues(times, curves, initialValue)\n\n    if (preRotation !== undefined) {\n      preRotation = preRotation.map(MathUtils.degToRad)\n      preRotation.push(eulerOrder)\n\n      preRotation = new Euler().fromArray(preRotation)\n      preRotation = new Quaternion().setFromEuler(preRotation)\n    }\n\n    if (postRotation !== undefined) {\n      postRotation = postRotation.map(MathUtils.degToRad)\n      postRotation.push(eulerOrder)\n\n      postRotation = new Euler().fromArray(postRotation)\n      postRotation = new Quaternion().setFromEuler(postRotation).invert()\n    }\n\n    const quaternion = new Quaternion()\n    const euler = new Euler()\n\n    const quaternionValues = []\n\n    for (let i = 0; i < values.length; i += 3) {\n      euler.set(values[i], values[i + 1], values[i + 2], eulerOrder)\n\n      quaternion.setFromEuler(euler)\n\n      if (preRotation !== undefined) quaternion.premultiply(preRotation)\n      if (postRotation !== undefined) quaternion.multiply(postRotation)\n\n      quaternion.toArray(quaternionValues, (i / 3) * 4)\n    }\n\n    return new QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues)\n  }\n\n  generateMorphTrack(rawTracks) {\n    const curves = rawTracks.DeformPercent.curves.morph\n    const values = curves.values.map(function (val) {\n      return val / 100\n    })\n\n    const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName]\n\n    return new NumberKeyframeTrack(\n      rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']',\n      curves.times,\n      values,\n    )\n  }\n\n  // For all animated objects, times are defined separately for each axis\n  // Here we'll combine the times into one sorted array without duplicates\n  getTimesForAllAxes(curves) {\n    let times = []\n\n    // first join together the times for each axis, if defined\n    if (curves.x !== undefined) times = times.concat(curves.x.times)\n    if (curves.y !== undefined) times = times.concat(curves.y.times)\n    if (curves.z !== undefined) times = times.concat(curves.z.times)\n\n    // then sort them\n    times = times.sort(function (a, b) {\n      return a - b\n    })\n\n    // and remove duplicates\n    if (times.length > 1) {\n      let targetIndex = 1\n      let lastValue = times[0]\n      for (let i = 1; i < times.length; i++) {\n        const currentValue = times[i]\n        if (currentValue !== lastValue) {\n          times[targetIndex] = currentValue\n          lastValue = currentValue\n          targetIndex++\n        }\n      }\n\n      times = times.slice(0, targetIndex)\n    }\n\n    return times\n  }\n\n  getKeyframeTrackValues(times, curves, initialValue) {\n    const prevValue = initialValue\n\n    const values = []\n\n    let xIndex = -1\n    let yIndex = -1\n    let zIndex = -1\n\n    times.forEach(function (time) {\n      if (curves.x) xIndex = curves.x.times.indexOf(time)\n      if (curves.y) yIndex = curves.y.times.indexOf(time)\n      if (curves.z) zIndex = curves.z.times.indexOf(time)\n\n      // if there is an x value defined for this frame, use that\n      if (xIndex !== -1) {\n        const xValue = curves.x.values[xIndex]\n        values.push(xValue)\n        prevValue[0] = xValue\n      } else {\n        // otherwise use the x value from the previous frame\n        values.push(prevValue[0])\n      }\n\n      if (yIndex !== -1) {\n        const yValue = curves.y.values[yIndex]\n        values.push(yValue)\n        prevValue[1] = yValue\n      } else {\n        values.push(prevValue[1])\n      }\n\n      if (zIndex !== -1) {\n        const zValue = curves.z.values[zIndex]\n        values.push(zValue)\n        prevValue[2] = zValue\n      } else {\n        values.push(prevValue[2])\n      }\n    })\n\n    return values\n  }\n\n  // Rotations are defined as Euler angles which can have values  of any size\n  // These will be converted to quaternions which don't support values greater than\n  // PI, so we'll interpolate large rotations\n  interpolateRotations(curve) {\n    for (let i = 1; i < curve.values.length; i++) {\n      const initialValue = curve.values[i - 1]\n      const valuesSpan = curve.values[i] - initialValue\n\n      const absoluteSpan = Math.abs(valuesSpan)\n\n      if (absoluteSpan >= 180) {\n        const numSubIntervals = absoluteSpan / 180\n\n        const step = valuesSpan / numSubIntervals\n        let nextValue = initialValue + step\n\n        const initialTime = curve.times[i - 1]\n        const timeSpan = curve.times[i] - initialTime\n        const interval = timeSpan / numSubIntervals\n        let nextTime = initialTime + interval\n\n        const interpolatedTimes = []\n        const interpolatedValues = []\n\n        while (nextTime < curve.times[i]) {\n          interpolatedTimes.push(nextTime)\n          nextTime += interval\n\n          interpolatedValues.push(nextValue)\n          nextValue += step\n        }\n\n        curve.times = inject(curve.times, i, interpolatedTimes)\n        curve.values = inject(curve.values, i, interpolatedValues)\n      }\n    }\n  }\n}\n\n// parse an FBX file in ASCII format\nclass TextParser {\n  getPrevNode() {\n    return this.nodeStack[this.currentIndent - 2]\n  }\n\n  getCurrentNode() {\n    return this.nodeStack[this.currentIndent - 1]\n  }\n\n  getCurrentProp() {\n    return this.currentProp\n  }\n\n  pushStack(node) {\n    this.nodeStack.push(node)\n    this.currentIndent += 1\n  }\n\n  popStack() {\n    this.nodeStack.pop()\n    this.currentIndent -= 1\n  }\n\n  setCurrentProp(val, name) {\n    this.currentProp = val\n    this.currentPropName = name\n  }\n\n  parse(text) {\n    this.currentIndent = 0\n\n    this.allNodes = new FBXTree()\n    this.nodeStack = []\n    this.currentProp = []\n    this.currentPropName = ''\n\n    const scope = this\n\n    const split = text.split(/[\\r\\n]+/)\n\n    split.forEach(function (line, i) {\n      const matchComment = line.match(/^[\\s\\t]*;/)\n      const matchEmpty = line.match(/^[\\s\\t]*$/)\n\n      if (matchComment || matchEmpty) return\n\n      const matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '')\n      const matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)')\n      const matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}')\n\n      if (matchBeginning) {\n        scope.parseNodeBegin(line, matchBeginning)\n      } else if (matchProperty) {\n        scope.parseNodeProperty(line, matchProperty, split[++i])\n      } else if (matchEnd) {\n        scope.popStack()\n      } else if (line.match(/^[^\\s\\t}]/)) {\n        // large arrays are split over multiple lines terminated with a ',' character\n        // if this is encountered the line needs to be joined to the previous line\n        scope.parseNodePropertyContinued(line)\n      }\n    })\n\n    return this.allNodes\n  }\n\n  parseNodeBegin(line, property) {\n    const nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '')\n\n    const nodeAttrs = property[2].split(',').map(function (attr) {\n      return attr.trim().replace(/^\"/, '').replace(/\"$/, '')\n    })\n\n    const node = { name: nodeName }\n    const attrs = this.parseNodeAttr(nodeAttrs)\n\n    const currentNode = this.getCurrentNode()\n\n    // a top node\n    if (this.currentIndent === 0) {\n      this.allNodes.add(nodeName, node)\n    } else {\n      // a subnode\n\n      // if the subnode already exists, append it\n      if (nodeName in currentNode) {\n        // special case Pose needs PoseNodes as an array\n        if (nodeName === 'PoseNode') {\n          currentNode.PoseNode.push(node)\n        } else if (currentNode[nodeName].id !== undefined) {\n          currentNode[nodeName] = {}\n          currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName]\n        }\n\n        if (attrs.id !== '') currentNode[nodeName][attrs.id] = node\n      } else if (typeof attrs.id === 'number') {\n        currentNode[nodeName] = {}\n        currentNode[nodeName][attrs.id] = node\n      } else if (nodeName !== 'Properties70') {\n        if (nodeName === 'PoseNode') currentNode[nodeName] = [node]\n        else currentNode[nodeName] = node\n      }\n    }\n\n    if (typeof attrs.id === 'number') node.id = attrs.id\n    if (attrs.name !== '') node.attrName = attrs.name\n    if (attrs.type !== '') node.attrType = attrs.type\n\n    this.pushStack(node)\n  }\n\n  parseNodeAttr(attrs) {\n    let id = attrs[0]\n\n    if (attrs[0] !== '') {\n      id = parseInt(attrs[0])\n\n      if (isNaN(id)) {\n        id = attrs[0]\n      }\n    }\n\n    let name = '',\n      type = ''\n\n    if (attrs.length > 1) {\n      name = attrs[1].replace(/^(\\w+)::/, '')\n      type = attrs[2]\n    }\n\n    return { id: id, name: name, type: type }\n  }\n\n  parseNodeProperty(line, property, contentLine) {\n    let propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim()\n    let propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim()\n\n    // for special case: base64 image data follows \"Content: ,\" line\n    //\tContent: ,\n    //\t \"/9j/4RDaRXhpZgAATU0A...\"\n    if (propName === 'Content' && propValue === ',') {\n      propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim()\n    }\n\n    const currentNode = this.getCurrentNode()\n    const parentName = currentNode.name\n\n    if (parentName === 'Properties70') {\n      this.parseNodeSpecialProperty(line, propName, propValue)\n      return\n    }\n\n    // Connections\n    if (propName === 'C') {\n      const connProps = propValue.split(',').slice(1)\n      const from = parseInt(connProps[0])\n      const to = parseInt(connProps[1])\n\n      let rest = propValue.split(',').slice(3)\n\n      rest = rest.map(function (elem) {\n        return elem.trim().replace(/^\"/, '')\n      })\n\n      propName = 'connections'\n      propValue = [from, to]\n      append(propValue, rest)\n\n      if (currentNode[propName] === undefined) {\n        currentNode[propName] = []\n      }\n    }\n\n    // Node\n    if (propName === 'Node') currentNode.id = propValue\n\n    // connections\n    if (propName in currentNode && Array.isArray(currentNode[propName])) {\n      currentNode[propName].push(propValue)\n    } else {\n      if (propName !== 'a') currentNode[propName] = propValue\n      else currentNode.a = propValue\n    }\n\n    this.setCurrentProp(currentNode, propName)\n\n    // convert string to array, unless it ends in ',' in which case more will be added to it\n    if (propName === 'a' && propValue.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(propValue)\n    }\n  }\n\n  parseNodePropertyContinued(line) {\n    const currentNode = this.getCurrentNode()\n\n    currentNode.a += line\n\n    // if the line doesn't end in ',' we have reached the end of the property value\n    // so convert the string to an array\n    if (line.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(currentNode.a)\n    }\n  }\n\n  // parse \"Property70\"\n  parseNodeSpecialProperty(line, propName, propValue) {\n    // split this\n    // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n    // into array like below\n    // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n    const props = propValue.split('\",').map(function (prop) {\n      return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_')\n    })\n\n    const innerPropName = props[0]\n    const innerPropType1 = props[1]\n    const innerPropType2 = props[2]\n    const innerPropFlag = props[3]\n    let innerPropValue = props[4]\n\n    // cast values where needed, otherwise leave as strings\n    switch (innerPropType1) {\n      case 'int':\n      case 'enum':\n      case 'bool':\n      case 'ULongLong':\n      case 'double':\n      case 'Number':\n      case 'FieldOfView':\n        innerPropValue = parseFloat(innerPropValue)\n        break\n\n      case 'Color':\n      case 'ColorRGB':\n      case 'Vector3D':\n      case 'Lcl_Translation':\n      case 'Lcl_Rotation':\n      case 'Lcl_Scaling':\n        innerPropValue = parseNumberArray(innerPropValue)\n        break\n    }\n\n    // CAUTION: these props must append to parent's parent\n    this.getPrevNode()[innerPropName] = {\n      type: innerPropType1,\n      type2: innerPropType2,\n      flag: innerPropFlag,\n      value: innerPropValue,\n    }\n\n    this.setCurrentProp(this.getPrevNode(), innerPropName)\n  }\n}\n\n// Parse an FBX file in Binary format\nclass BinaryParser {\n  parse(buffer) {\n    const reader = new BinaryReader(buffer)\n    reader.skip(23) // skip magic 23 bytes\n\n    const version = reader.getUint32()\n\n    if (version < 6400) {\n      throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version)\n    }\n\n    const allNodes = new FBXTree()\n\n    while (!this.endOfContent(reader)) {\n      const node = this.parseNode(reader, version)\n      if (node !== null) allNodes.add(node.name, node)\n    }\n\n    return allNodes\n  }\n\n  // Check if reader has reached the end of content.\n  endOfContent(reader) {\n    // footer size: 160bytes + 16-byte alignment padding\n    // - 16bytes: magic\n    // - padding til 16-byte alignment (at least 1byte?)\n    //\t(seems like some exporters embed fixed 15 or 16bytes?)\n    // - 4bytes: magic\n    // - 4bytes: version\n    // - 120bytes: zero\n    // - 16bytes: magic\n    if (reader.size() % 16 === 0) {\n      return ((reader.getOffset() + 160 + 16) & ~0xf) >= reader.size()\n    } else {\n      return reader.getOffset() + 160 + 16 >= reader.size()\n    }\n  }\n\n  // recursively parse nodes until the end of the file is reached\n  parseNode(reader, version) {\n    const node = {}\n\n    // The first three data sizes depends on version.\n    const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32()\n    const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32()\n\n    version >= 7500 ? reader.getUint64() : reader.getUint32() // the returned propertyListLen is not used\n\n    const nameLen = reader.getUint8()\n    const name = reader.getString(nameLen)\n\n    // Regards this node as NULL-record if endOffset is zero\n    if (endOffset === 0) return null\n\n    const propertyList = []\n\n    for (let i = 0; i < numProperties; i++) {\n      propertyList.push(this.parseProperty(reader))\n    }\n\n    // Regards the first three elements in propertyList as id, attrName, and attrType\n    const id = propertyList.length > 0 ? propertyList[0] : ''\n    const attrName = propertyList.length > 1 ? propertyList[1] : ''\n    const attrType = propertyList.length > 2 ? propertyList[2] : ''\n\n    // check if this node represents just a single property\n    // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n    node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false\n\n    while (endOffset > reader.getOffset()) {\n      const subNode = this.parseNode(reader, version)\n\n      if (subNode !== null) this.parseSubNode(name, node, subNode)\n    }\n\n    node.propertyList = propertyList // raw property list used by parent\n\n    if (typeof id === 'number') node.id = id\n    if (attrName !== '') node.attrName = attrName\n    if (attrType !== '') node.attrType = attrType\n    if (name !== '') node.name = name\n\n    return node\n  }\n\n  parseSubNode(name, node, subNode) {\n    // special case: child node is single property\n    if (subNode.singleProperty === true) {\n      const value = subNode.propertyList[0]\n\n      if (Array.isArray(value)) {\n        node[subNode.name] = subNode\n\n        subNode.a = value\n      } else {\n        node[subNode.name] = value\n      }\n    } else if (name === 'Connections' && subNode.name === 'C') {\n      const array = []\n\n      subNode.propertyList.forEach(function (property, i) {\n        // first Connection is FBX type (OO, OP, etc.). We'll discard these\n        if (i !== 0) array.push(property)\n      })\n\n      if (node.connections === undefined) {\n        node.connections = []\n      }\n\n      node.connections.push(array)\n    } else if (subNode.name === 'Properties70') {\n      const keys = Object.keys(subNode)\n\n      keys.forEach(function (key) {\n        node[key] = subNode[key]\n      })\n    } else if (name === 'Properties70' && subNode.name === 'P') {\n      let innerPropName = subNode.propertyList[0]\n      let innerPropType1 = subNode.propertyList[1]\n      const innerPropType2 = subNode.propertyList[2]\n      const innerPropFlag = subNode.propertyList[3]\n      let innerPropValue\n\n      if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_')\n      if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_')\n\n      if (\n        innerPropType1 === 'Color' ||\n        innerPropType1 === 'ColorRGB' ||\n        innerPropType1 === 'Vector' ||\n        innerPropType1 === 'Vector3D' ||\n        innerPropType1.indexOf('Lcl_') === 0\n      ) {\n        innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]]\n      } else {\n        innerPropValue = subNode.propertyList[4]\n      }\n\n      // this will be copied to parent, see above\n      node[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue,\n      }\n    } else if (node[subNode.name] === undefined) {\n      if (typeof subNode.id === 'number') {\n        node[subNode.name] = {}\n        node[subNode.name][subNode.id] = subNode\n      } else {\n        node[subNode.name] = subNode\n      }\n    } else {\n      if (subNode.name === 'PoseNode') {\n        if (!Array.isArray(node[subNode.name])) {\n          node[subNode.name] = [node[subNode.name]]\n        }\n\n        node[subNode.name].push(subNode)\n      } else if (node[subNode.name][subNode.id] === undefined) {\n        node[subNode.name][subNode.id] = subNode\n      }\n    }\n  }\n\n  parseProperty(reader) {\n    const type = reader.getString(1)\n    let length\n\n    switch (type) {\n      case 'C':\n        return reader.getBoolean()\n\n      case 'D':\n        return reader.getFloat64()\n\n      case 'F':\n        return reader.getFloat32()\n\n      case 'I':\n        return reader.getInt32()\n\n      case 'L':\n        return reader.getInt64()\n\n      case 'R':\n        length = reader.getUint32()\n        return reader.getArrayBuffer(length)\n\n      case 'S':\n        length = reader.getUint32()\n        return reader.getString(length)\n\n      case 'Y':\n        return reader.getInt16()\n\n      case 'b':\n      case 'c':\n      case 'd':\n      case 'f':\n      case 'i':\n      case 'l':\n        const arrayLength = reader.getUint32()\n        const encoding = reader.getUint32() // 0: non-compressed, 1: compressed\n        const compressedLength = reader.getUint32()\n\n        if (encoding === 0) {\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader.getBooleanArray(arrayLength)\n\n            case 'd':\n              return reader.getFloat64Array(arrayLength)\n\n            case 'f':\n              return reader.getFloat32Array(arrayLength)\n\n            case 'i':\n              return reader.getInt32Array(arrayLength)\n\n            case 'l':\n              return reader.getInt64Array(arrayLength)\n          }\n        }\n\n        const data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength)))\n        const reader2 = new BinaryReader(data.buffer)\n\n        switch (type) {\n          case 'b':\n          case 'c':\n            return reader2.getBooleanArray(arrayLength)\n\n          case 'd':\n            return reader2.getFloat64Array(arrayLength)\n\n          case 'f':\n            return reader2.getFloat32Array(arrayLength)\n\n          case 'i':\n            return reader2.getInt32Array(arrayLength)\n\n          case 'l':\n            return reader2.getInt64Array(arrayLength)\n        }\n\n      default:\n        throw new Error('THREE.FBXLoader: Unknown property type ' + type)\n    }\n  }\n}\n\nclass BinaryReader {\n  constructor(buffer, littleEndian) {\n    this.dv = new DataView(buffer)\n    this.offset = 0\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true\n  }\n\n  getOffset() {\n    return this.offset\n  }\n\n  size() {\n    return this.dv.buffer.byteLength\n  }\n\n  skip(length) {\n    this.offset += length\n  }\n\n  // seems like true/false representation depends on exporter.\n  // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n  // then sees LSB.\n  getBoolean() {\n    return (this.getUint8() & 1) === 1\n  }\n\n  getBooleanArray(size) {\n    const a = []\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getBoolean())\n    }\n\n    return a\n  }\n\n  getUint8() {\n    const value = this.dv.getUint8(this.offset)\n    this.offset += 1\n    return value\n  }\n\n  getInt16() {\n    const value = this.dv.getInt16(this.offset, this.littleEndian)\n    this.offset += 2\n    return value\n  }\n\n  getInt32() {\n    const value = this.dv.getInt32(this.offset, this.littleEndian)\n    this.offset += 4\n    return value\n  }\n\n  getInt32Array(size) {\n    const a = []\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt32())\n    }\n\n    return a\n  }\n\n  getUint32() {\n    const value = this.dv.getUint32(this.offset, this.littleEndian)\n    this.offset += 4\n    return value\n  }\n\n  // JavaScript doesn't support 64-bit integer so calculate this here\n  // 1 << 32 will return 1 so using multiply operation instead here.\n  // There's a possibility that this method returns wrong value if the value\n  // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n  // TODO: safely handle 64-bit integer\n  getInt64() {\n    let low, high\n\n    if (this.littleEndian) {\n      low = this.getUint32()\n      high = this.getUint32()\n    } else {\n      high = this.getUint32()\n      low = this.getUint32()\n    }\n\n    // calculate negative value\n    if (high & 0x80000000) {\n      high = ~high & 0xffffffff\n      low = ~low & 0xffffffff\n\n      if (low === 0xffffffff) high = (high + 1) & 0xffffffff\n\n      low = (low + 1) & 0xffffffff\n\n      return -(high * 0x100000000 + low)\n    }\n\n    return high * 0x100000000 + low\n  }\n\n  getInt64Array(size) {\n    const a = []\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt64())\n    }\n\n    return a\n  }\n\n  // Note: see getInt64() comment\n  getUint64() {\n    let low, high\n\n    if (this.littleEndian) {\n      low = this.getUint32()\n      high = this.getUint32()\n    } else {\n      high = this.getUint32()\n      low = this.getUint32()\n    }\n\n    return high * 0x100000000 + low\n  }\n\n  getFloat32() {\n    const value = this.dv.getFloat32(this.offset, this.littleEndian)\n    this.offset += 4\n    return value\n  }\n\n  getFloat32Array(size) {\n    const a = []\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat32())\n    }\n\n    return a\n  }\n\n  getFloat64() {\n    const value = this.dv.getFloat64(this.offset, this.littleEndian)\n    this.offset += 8\n    return value\n  }\n\n  getFloat64Array(size) {\n    const a = []\n\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat64())\n    }\n\n    return a\n  }\n\n  getArrayBuffer(size) {\n    const value = this.dv.buffer.slice(this.offset, this.offset + size)\n    this.offset += size\n    return value\n  }\n\n  getString(size) {\n    // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n    let a = []\n\n    for (let i = 0; i < size; i++) {\n      a[i] = this.getUint8()\n    }\n\n    const nullByte = a.indexOf(0)\n    if (nullByte >= 0) a = a.slice(0, nullByte)\n\n    return decodeText(new Uint8Array(a))\n  }\n}\n\n// FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\nclass FBXTree {\n  add(key, val) {\n    this[key] = val\n  }\n}\n\n// ************** UTILITY FUNCTIONS **************\n\nfunction isFbxFormatBinary(buffer) {\n  const CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0'\n\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length)\n}\n\nfunction isFbxFormatASCII(text) {\n  const CORRECT = [\n    'K',\n    'a',\n    'y',\n    'd',\n    'a',\n    'r',\n    'a',\n    '\\\\',\n    'F',\n    'B',\n    'X',\n    '\\\\',\n    'B',\n    'i',\n    'n',\n    'a',\n    'r',\n    'y',\n    '\\\\',\n    '\\\\',\n  ]\n\n  let cursor = 0\n\n  function read(offset) {\n    const result = text[offset - 1]\n    text = text.slice(cursor + offset)\n    cursor++\n    return result\n  }\n\n  for (let i = 0; i < CORRECT.length; ++i) {\n    const num = read(1)\n    if (num === CORRECT[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction getFbxVersion(text) {\n  const versionRegExp = /FBXVersion: (\\d+)/\n  const match = text.match(versionRegExp)\n\n  if (match) {\n    const version = parseInt(match[1])\n    return version\n  }\n\n  throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.')\n}\n\n// Converts FBX ticks into real time seconds.\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158000\n}\n\nconst dataArray = []\n\n// extracts the data from the correct position in the FBX array based on indexing type\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  let index\n\n  switch (infoObject.mappingType) {\n    case 'ByPolygonVertex':\n      index = polygonVertexIndex\n      break\n    case 'ByPolygon':\n      index = polygonIndex\n      break\n    case 'ByVertice':\n      index = vertexIndex\n      break\n    case 'AllSame':\n      index = infoObject.indices[0]\n      break\n    default:\n      console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType)\n  }\n\n  if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index]\n\n  const from = index * infoObject.dataSize\n  const to = from + infoObject.dataSize\n\n  return slice(dataArray, infoObject.buffer, from, to)\n}\n\nconst tempEuler = new Euler()\nconst tempVec = new Vector3()\n\n// generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\nfunction generateTransform(transformData) {\n  const lTranslationM = new Matrix4()\n  const lPreRotationM = new Matrix4()\n  const lRotationM = new Matrix4()\n  const lPostRotationM = new Matrix4()\n\n  const lScalingM = new Matrix4()\n  const lScalingPivotM = new Matrix4()\n  const lScalingOffsetM = new Matrix4()\n  const lRotationOffsetM = new Matrix4()\n  const lRotationPivotM = new Matrix4()\n\n  const lParentGX = new Matrix4()\n  const lParentLX = new Matrix4()\n  const lGlobalT = new Matrix4()\n\n  const inheritType = transformData.inheritType ? transformData.inheritType : 0\n\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation))\n\n  if (transformData.preRotation) {\n    const array = transformData.preRotation.map(MathUtils.degToRad)\n    array.push(transformData.eulerOrder)\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array))\n  }\n\n  if (transformData.rotation) {\n    const array = transformData.rotation.map(MathUtils.degToRad)\n    array.push(transformData.eulerOrder)\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(array))\n  }\n\n  if (transformData.postRotation) {\n    const array = transformData.postRotation.map(MathUtils.degToRad)\n    array.push(transformData.eulerOrder)\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array))\n    lPostRotationM.invert()\n  }\n\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale))\n\n  // Pivots and offsets\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset))\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot))\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset))\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot))\n\n  // parent transform\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix)\n    lParentGX.copy(transformData.parentMatrixWorld)\n  }\n\n  const lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM)\n  // Global Rotation\n  const lParentGRM = new Matrix4()\n  lParentGRM.extractRotation(lParentGX)\n\n  // Global Shear*Scaling\n  const lParentTM = new Matrix4()\n  lParentTM.copyPosition(lParentGX)\n\n  const lParentGRSM = lParentTM.clone().invert().multiply(lParentGX)\n  const lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM)\n  const lLSM = lScalingM\n\n  const lGlobalRS = new Matrix4()\n\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM)\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM)\n  } else {\n    const lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX))\n    const lParentLSM_inv = lParentLSM.clone().invert()\n    const lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv)\n\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM)\n  }\n\n  const lRotationPivotM_inv = lRotationPivotM.clone().invert()\n  const lScalingPivotM_inv = lScalingPivotM.clone().invert()\n  // Calculate the local transform matrix\n  let lTransform = lTranslationM\n    .clone()\n    .multiply(lRotationOffsetM)\n    .multiply(lRotationPivotM)\n    .multiply(lPreRotationM)\n    .multiply(lRotationM)\n    .multiply(lPostRotationM)\n    .multiply(lRotationPivotM_inv)\n    .multiply(lScalingOffsetM)\n    .multiply(lScalingPivotM)\n    .multiply(lScalingM)\n    .multiply(lScalingPivotM_inv)\n\n  const lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform)\n\n  const lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo)\n  lGlobalT.copyPosition(lGlobalTranslation)\n\n  lTransform = lGlobalT.clone().multiply(lGlobalRS)\n\n  // from global to local\n  lTransform.premultiply(lParentGX.invert())\n\n  return lTransform\n}\n\n// Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\nfunction getEulerOrder(order) {\n  order = order || 0\n\n  const enums = [\n    'ZYX', // -> XYZ extrinsic\n    'YZX', // -> XZY extrinsic\n    'XZY', // -> YZX extrinsic\n    'ZXY', // -> YXZ extrinsic\n    'YXZ', // -> ZXY extrinsic\n    'XYZ', // -> ZYX extrinsic\n    //'SphericXYZ', // not possible to support\n  ]\n\n  if (order === 6) {\n    console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.')\n    return enums[0]\n  }\n\n  return enums[order]\n}\n\n// Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\nfunction parseNumberArray(value) {\n  const array = value.split(',').map(function (val) {\n    return parseFloat(val)\n  })\n\n  return array\n}\n\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === undefined) from = 0\n  if (to === undefined) to = buffer.byteLength\n\n  return decodeText(new Uint8Array(buffer, from, to))\n}\n\nfunction append(a, b) {\n  for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i]\n  }\n}\n\nfunction slice(a, b, from, to) {\n  for (let i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i]\n  }\n\n  return a\n}\n\n// inject array a2 into array a1 at index\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index))\n}\n\nexport { FBXLoader }\n"]},"metadata":{},"sourceType":"module"}