{"ast":null,"code":"import { BufferGeometry, Float32BufferAttribute } from \"three\";\nclass BoxLineGeometry extends BufferGeometry {\n  constructor(width, height, depth, widthSegments, heightSegments, depthSegments) {\n    super();\n    width = width || 1;\n    height = height || 1;\n    depth = depth || 1;\n    widthSegments = Math.floor(widthSegments) || 1;\n    heightSegments = Math.floor(heightSegments) || 1;\n    depthSegments = Math.floor(depthSegments) || 1;\n    const widthHalf = width / 2;\n    const heightHalf = height / 2;\n    const depthHalf = depth / 2;\n    const segmentWidth = width / widthSegments;\n    const segmentHeight = height / heightSegments;\n    const segmentDepth = depth / depthSegments;\n    const vertices = [];\n    let x = -widthHalf,\n      y = -heightHalf,\n      z = -depthHalf;\n    for (let i = 0; i <= widthSegments; i++) {\n      vertices.push(x, -heightHalf, -depthHalf, x, heightHalf, -depthHalf);\n      vertices.push(x, heightHalf, -depthHalf, x, heightHalf, depthHalf);\n      vertices.push(x, heightHalf, depthHalf, x, -heightHalf, depthHalf);\n      vertices.push(x, -heightHalf, depthHalf, x, -heightHalf, -depthHalf);\n      x += segmentWidth;\n    }\n    for (let i = 0; i <= heightSegments; i++) {\n      vertices.push(-widthHalf, y, -depthHalf, widthHalf, y, -depthHalf);\n      vertices.push(widthHalf, y, -depthHalf, widthHalf, y, depthHalf);\n      vertices.push(widthHalf, y, depthHalf, -widthHalf, y, depthHalf);\n      vertices.push(-widthHalf, y, depthHalf, -widthHalf, y, -depthHalf);\n      y += segmentHeight;\n    }\n    for (let i = 0; i <= depthSegments; i++) {\n      vertices.push(-widthHalf, -heightHalf, z, -widthHalf, heightHalf, z);\n      vertices.push(-widthHalf, heightHalf, z, widthHalf, heightHalf, z);\n      vertices.push(widthHalf, heightHalf, z, widthHalf, -heightHalf, z);\n      vertices.push(widthHalf, -heightHalf, z, -widthHalf, -heightHalf, z);\n      z += segmentDepth;\n    }\n    this.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n  }\n}\nexport { BoxLineGeometry };","map":{"version":3,"sources":["../../src/geometries/BoxLineGeometry.js"],"names":[],"mappings":"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","sourcesContent":["import { BufferGeometry, Float32BufferAttribute } from 'three'\n\nclass BoxLineGeometry extends BufferGeometry {\n  constructor(width, height, depth, widthSegments, heightSegments, depthSegments) {\n    super()\n\n    width = width || 1\n    height = height || 1\n    depth = depth || 1\n\n    widthSegments = Math.floor(widthSegments) || 1\n    heightSegments = Math.floor(heightSegments) || 1\n    depthSegments = Math.floor(depthSegments) || 1\n\n    const widthHalf = width / 2\n    const heightHalf = height / 2\n    const depthHalf = depth / 2\n\n    const segmentWidth = width / widthSegments\n    const segmentHeight = height / heightSegments\n    const segmentDepth = depth / depthSegments\n\n    const vertices = []\n\n    let x = -widthHalf,\n      y = -heightHalf,\n      z = -depthHalf\n\n    for (let i = 0; i <= widthSegments; i++) {\n      vertices.push(x, -heightHalf, -depthHalf, x, heightHalf, -depthHalf)\n      vertices.push(x, heightHalf, -depthHalf, x, heightHalf, depthHalf)\n      vertices.push(x, heightHalf, depthHalf, x, -heightHalf, depthHalf)\n      vertices.push(x, -heightHalf, depthHalf, x, -heightHalf, -depthHalf)\n\n      x += segmentWidth\n    }\n\n    for (let i = 0; i <= heightSegments; i++) {\n      vertices.push(-widthHalf, y, -depthHalf, widthHalf, y, -depthHalf)\n      vertices.push(widthHalf, y, -depthHalf, widthHalf, y, depthHalf)\n      vertices.push(widthHalf, y, depthHalf, -widthHalf, y, depthHalf)\n      vertices.push(-widthHalf, y, depthHalf, -widthHalf, y, -depthHalf)\n\n      y += segmentHeight\n    }\n\n    for (let i = 0; i <= depthSegments; i++) {\n      vertices.push(-widthHalf, -heightHalf, z, -widthHalf, heightHalf, z)\n      vertices.push(-widthHalf, heightHalf, z, widthHalf, heightHalf, z)\n      vertices.push(widthHalf, heightHalf, z, widthHalf, -heightHalf, z)\n      vertices.push(widthHalf, -heightHalf, z, -widthHalf, -heightHalf, z)\n\n      z += segmentDepth\n    }\n\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3))\n  }\n}\n\nexport { BoxLineGeometry }\n"]},"metadata":{},"sourceType":"module"}