{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { UniformsUtils, WebGLRenderTarget, LinearFilter, NearestFilter, RGBAFormat, ShaderMaterial, MeshBasicMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { AfterimageShader } from \"../shaders/AfterimageShader.js\";\nclass AfterimagePass extends Pass {\n  constructor(damp = 0.96, shader = AfterimageShader) {\n    super();\n    __publicField(this, \"shader\");\n    __publicField(this, \"uniforms\");\n    __publicField(this, \"textureComp\");\n    __publicField(this, \"textureOld\");\n    __publicField(this, \"shaderMaterial\");\n    __publicField(this, \"compFsQuad\");\n    __publicField(this, \"copyFsQuad\");\n    this.shader = shader;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.uniforms[\"damp\"].value = damp;\n    this.textureComp = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat\n    });\n    this.textureOld = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat\n    });\n    this.shaderMaterial = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: this.shader.vertexShader,\n      fragmentShader: this.shader.fragmentShader\n    });\n    this.compFsQuad = new FullScreenQuad(this.shaderMaterial);\n    let material = new MeshBasicMaterial();\n    this.copyFsQuad = new FullScreenQuad(material);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    this.uniforms[\"tOld\"].value = this.textureOld.texture;\n    this.uniforms[\"tNew\"].value = readBuffer.texture;\n    renderer.setRenderTarget(this.textureComp);\n    this.compFsQuad.render(renderer);\n    this.copyFsQuad.material.map = this.textureComp.texture;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.copyFsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.copyFsQuad.render(renderer);\n    }\n    let temp = this.textureOld;\n    this.textureOld = this.textureComp;\n    this.textureComp = temp;\n  }\n  setSize(width, height) {\n    this.textureComp.setSize(width, height);\n    this.textureOld.setSize(width, height);\n  }\n}\nexport { AfterimagePass };","map":{"version":3,"sources":["../../src/postprocessing/AfterimagePass.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  LinearFilter,\n  MeshBasicMaterial,\n  NearestFilter,\n  RGBAFormat,\n  WebGLRenderer,\n  ShaderMaterial,\n  UniformsUtils,\n  WebGLRenderTarget,\n} from 'three'\nimport { Pass, FullScreenQuad } from './Pass'\nimport { AfterimageShader } from '../shaders/AfterimageShader'\n\nclass AfterimagePass extends Pass {\n  public shader\n  public uniforms\n  public textureComp: WebGLRenderTarget\n  public textureOld: WebGLRenderTarget\n  public shaderMaterial: ShaderMaterial\n  public compFsQuad: FullScreenQuad<ShaderMaterial>\n  public copyFsQuad: FullScreenQuad<MeshBasicMaterial>\n\n  constructor(damp = 0.96, shader = AfterimageShader) {\n    super()\n\n    this.shader = shader\n    this.uniforms = UniformsUtils.clone(shader.uniforms)\n    this.uniforms['damp'].value = damp\n\n    this.textureComp = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat,\n    })\n\n    this.textureOld = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat,\n    })\n\n    this.shaderMaterial = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: this.shader.vertexShader,\n      fragmentShader: this.shader.fragmentShader,\n    })\n\n    this.compFsQuad = new FullScreenQuad(this.shaderMaterial)\n\n    let material = new MeshBasicMaterial()\n    this.copyFsQuad = new FullScreenQuad(material)\n  }\n\n  public render(renderer: WebGLRenderer, writeBuffer: WebGLRenderTarget, readBuffer: WebGLRenderTarget): void {\n    this.uniforms['tOld'].value = this.textureOld.texture\n    this.uniforms['tNew'].value = readBuffer.texture\n\n    renderer.setRenderTarget(this.textureComp)\n    this.compFsQuad.render(renderer)\n\n    this.copyFsQuad.material.map = this.textureComp.texture\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null)\n      this.copyFsQuad.render(renderer)\n    } else {\n      renderer.setRenderTarget(writeBuffer)\n\n      if (this.clear) renderer.clear()\n\n      this.copyFsQuad.render(renderer)\n    }\n\n    // Swap buffers.\n    let temp = this.textureOld\n    this.textureOld = this.textureComp\n    this.textureComp = temp\n    // Now textureOld contains the latest image, ready for the next frame.\n  }\n\n  public setSize(width: number, height: number): void {\n    this.textureComp.setSize(width, height)\n    this.textureOld.setSize(width, height)\n  }\n}\n\nexport { AfterimagePass }\n"]},"metadata":{},"sourceType":"module"}