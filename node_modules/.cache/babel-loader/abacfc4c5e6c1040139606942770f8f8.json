{"ast":null,"code":"const FresnelShader = {\n  uniforms: {\n    mRefractionRatio: {\n      value: 1.02\n    },\n    mFresnelBias: {\n      value: 0.1\n    },\n    mFresnelPower: {\n      value: 2\n    },\n    mFresnelScale: {\n      value: 1\n    },\n    tCube: {\n      value: null\n    }\n  },\n  vertexShader: [\"uniform float mRefractionRatio;\", \"uniform float mFresnelBias;\", \"uniform float mFresnelScale;\", \"uniform float mFresnelPower;\", \"varying vec3 vReflect;\", \"varying vec3 vRefract[3];\", \"varying float vReflectionFactor;\", \"void main() {\", \"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\", \"\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\", \"\tvec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\", \"\tvec3 I = worldPosition.xyz - cameraPosition;\", \"\tvReflect = reflect( I, worldNormal );\", \"\tvRefract[0] = refract( normalize( I ), worldNormal, mRefractionRatio );\", \"\tvRefract[1] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.99 );\", \"\tvRefract[2] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.98 );\", \"\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), mFresnelPower );\", \"\tgl_Position = projectionMatrix * mvPosition;\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform samplerCube tCube;\", \"varying vec3 vReflect;\", \"varying vec3 vRefract[3];\", \"varying float vReflectionFactor;\", \"void main() {\", \"\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\", \"\tvec4 refractedColor = vec4( 1.0 );\", \"\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\", \"\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\", \"\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\", \"\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\", \"}\"].join(\"\\n\")\n};\nexport { FresnelShader };","map":{"version":3,"sources":["../../src/shaders/FresnelShader.ts"],"names":[],"mappings":"AAIO,MAAM,aAAA,GAAgB;EAC3B,QAAA,EAAU;IACR,gBAAA,EAAkB;MAAE,KAAA,EAAO;IAAK,CAAA;IAChC,YAAA,EAAc;MAAE,KAAA,EAAO;IAAI,CAAA;IAC3B,aAAA,EAAe;MAAE,KAAA,EAAO;IAAI,CAAA;IAC5B,aAAA,EAAe;MAAE,KAAA,EAAO;IAAI,CAAA;IAC5B,KAAA,EAAO;MAAE,KAAA,EAAO;IAAK;EACvB,CAAA;EAEA,YAAA,EAAc,CACZ,iCAAA,EACA,6BAAA,EACA,8BAAA,EACA,8BAAA,EAEA,wBAAA,EACA,2BAAA,EACA,kCAAA,EAEA,eAAA,EAEA,6DAAA,EACA,4DAAA,EAEA,+GAAA,EAEA,+CAAA,EAEA,wCAAA,EACA,0EAAA,EACA,iFAAA,EACA,iFAAA,EACA,qHAAA,EAEA,+CAAA,EAEA,GAAA,CAAA,CACA,IAAA,CAAK,IAAI,CAAA;EAEX,cAAA,EAAgB,CACd,4BAAA,EAEA,wBAAA,EACA,2BAAA,EACA,kCAAA,EAEA,eAAA,EAEA,gFAAA,EACA,qCAAA,EAEA,qFAAA,EACA,qFAAA,EACA,qFAAA,EAEA,8FAAA,EAEA,GAAA,CAAA,CACA,IAAA,CAAK,IAAI;AACb,CAAA","sourcesContent":["/**\n * Based on Nvidia Cg tutorial\n */\n\nexport const FresnelShader = {\n  uniforms: {\n    mRefractionRatio: { value: 1.02 },\n    mFresnelBias: { value: 0.1 },\n    mFresnelPower: { value: 2.0 },\n    mFresnelScale: { value: 1.0 },\n    tCube: { value: null },\n  },\n\n  vertexShader: [\n    'uniform float mRefractionRatio;',\n    'uniform float mFresnelBias;',\n    'uniform float mFresnelScale;',\n    'uniform float mFresnelPower;',\n\n    'varying vec3 vReflect;',\n    'varying vec3 vRefract[3];',\n    'varying float vReflectionFactor;',\n\n    'void main() {',\n\n    '\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n    '\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\n\n    '\tvec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );',\n\n    '\tvec3 I = worldPosition.xyz - cameraPosition;',\n\n    '\tvReflect = reflect( I, worldNormal );',\n    '\tvRefract[0] = refract( normalize( I ), worldNormal, mRefractionRatio );',\n    '\tvRefract[1] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.99 );',\n    '\tvRefract[2] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.98 );',\n    '\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), mFresnelPower );',\n\n    '\tgl_Position = projectionMatrix * mvPosition;',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    'uniform samplerCube tCube;',\n\n    'varying vec3 vReflect;',\n    'varying vec3 vRefract[3];',\n    'varying float vReflectionFactor;',\n\n    'void main() {',\n\n    '\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );',\n    '\tvec4 refractedColor = vec4( 1.0 );',\n\n    '\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;',\n    '\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;',\n    '\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;',\n\n    '\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );',\n\n    '}',\n  ].join('\\n'),\n}\n"]},"metadata":{},"sourceType":"module"}