{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Object3D, Sphere, Box3 } from \"three\";\nimport { XRHandMeshModel } from \"./XRHandMeshModel.js\";\nconst TOUCH_RADIUS = 0.01;\nconst POINTING_JOINT = \"index-finger-tip\";\nclass OculusHandModel extends Object3D {\n  constructor(controller, leftModelPath, rightModelPath) {\n    super();\n    __publicField(this, \"controller\");\n    __publicField(this, \"motionController\");\n    __publicField(this, \"envMap\");\n    __publicField(this, \"mesh\");\n    __publicField(this, \"xrInputSource\");\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    this.xrInputSource = null;\n    controller.addEventListener(\"connected\", event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.hand && !this.motionController) {\n        this.xrInputSource = xrInputSource;\n        this.motionController = new XRHandMeshModel(this, controller, void 0, xrInputSource.handedness, xrInputSource.handedness === \"left\" ? leftModelPath : rightModelPath);\n      }\n    });\n    controller.addEventListener(\"disconnected\", () => {\n      this.dispose();\n    });\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n  getPointerPosition() {\n    const indexFingerTip = this.controller.joints[POINTING_JOINT];\n    if (indexFingerTip) {\n      return indexFingerTip.position;\n    } else {\n      return null;\n    }\n  }\n  intersectBoxObject(boxObject) {\n    const pointerPosition = this.getPointerPosition();\n    if (pointerPosition) {\n      const indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n      const box = new Box3().setFromObject(boxObject);\n      return indexSphere.intersectsBox(box);\n    } else {\n      return false;\n    }\n  }\n  checkButton(button) {\n    if (this.intersectBoxObject(button)) {\n      button.onPress();\n    } else {\n      button.onClear();\n    }\n    if (button.isPressed()) {\n      button.whilePressed();\n    }\n  }\n  dispose() {\n    this.clear();\n    this.motionController = null;\n  }\n}\nexport { OculusHandModel };","map":{"version":3,"sources":["../../src/webxr/OculusHandModel.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAGA,MAAM,YAAA,GAAe,IAAA;AACrB,MAAM,cAAA,GAAiB,kBAAA;AASvB,MAAM,eAAA,SAAwB,QAAA,CAAS;EAOrC,WAAA,CAAY,UAAA,EAAsB,aAAA,EAAwB,cAAA,EAAyB;IAC3E,KAAA,CAAA,CAAA;IAPR,aAAA,CAAA,IAAA,EAAA,YAAA,CAAA;IACA,aAAA,CAAA,IAAA,EAAA,kBAAA,CAAA;IACA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;IACA,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA;IACA,aAAA,CAAA,IAAA,EAAA,eAAA,CAAA;IAKE,IAAA,CAAK,UAAA,GAAa,UAAA;IAClB,IAAA,CAAK,gBAAA,GAAmB,IAAA;IACxB,IAAA,CAAK,MAAA,GAAS,IAAA;IAEd,IAAA,CAAK,IAAA,GAAO,IAAA;IACZ,IAAA,CAAK,aAAA,GAAgB,IAAA;IAEV,UAAA,CAAA,gBAAA,CAAiB,WAAA,EAAc,KAAA,IAAU;MAClD,MAAM,aAAA,GAAiB,KAAA,CAAc,IAAA;MAErC,IAAI,aAAA,CAAc,IAAA,IAAQ,CAAC,IAAA,CAAK,gBAAA,EAAkB;QAChD,IAAA,CAAK,aAAA,GAAgB,aAAA;QAErB,IAAA,CAAK,gBAAA,GAAmB,IAAI,eAAA,CAC1B,IAAA,EACA,UAAA,EACA,KAAA,CAAA,EACA,aAAA,CAAc,UAAA,EACd,aAAA,CAAc,UAAA,KAAe,MAAA,GAAS,aAAA,GAAgB,cAAA,CAAA;MAE1D;IAAA,CACD,CAAA;IAEU,UAAA,CAAA,gBAAA,CAAiB,cAAA,EAAgB,MAAM;MAChD,IAAA,CAAK,OAAA,CAAQ,CAAA;IAAA,CACd,CAAA;EACH;EAEA,iBAAA,CAAkB,KAAA,EAAuB;IACvC,KAAA,CAAM,iBAAA,CAAkB,KAAK,CAAA;IAE7B,IAAI,IAAA,CAAK,gBAAA,EAAkB;MACzB,IAAA,CAAK,gBAAA,CAAiB,UAAA,CAAA,CAAA;IACxB;EACF;EAEA,kBAAA,CAAA,EAAqC;IAEnC,MAAM,cAAA,GAAiB,IAAA,CAAK,UAAA,CAAW,MAAA,CAAO,cAAc,CAAA;IAC5D,IAAI,cAAA,EAAgB;MAClB,OAAO,cAAA,CAAe,QAAA;IAAA,CAAA,MACjB;MACE,OAAA,IAAA;IACT;EACF;EAEA,kBAAA,CAAmB,SAAA,EAA8B;IACzC,MAAA,eAAA,GAAkB,IAAA,CAAK,kBAAA,CAAA,CAAA;IAC7B,IAAI,eAAA,EAAiB;MACnB,MAAM,WAAA,GAAc,IAAI,MAAA,CAAO,eAAA,EAAiB,YAAY,CAAA;MAC5D,MAAM,GAAA,GAAM,IAAI,IAAA,CAAK,CAAA,CAAE,aAAA,CAAc,SAAS,CAAA;MACvC,OAAA,WAAA,CAAY,aAAA,CAAc,GAAG,CAAA;IAAA,CAAA,MAC/B;MACE,OAAA,KAAA;IACT;EACF;EAEA,WAAA,CAAY,MAAA,EAAwB;IAC9B,IAAA,IAAA,CAAK,kBAAA,CAAmB,MAAM,CAAA,EAAG;MACnC,MAAA,CAAO,OAAA,CAAQ,CAAA;IAAA,CAAA,MACV;MACL,MAAA,CAAO,OAAA,CAAQ,CAAA;IACjB;IAEI,IAAA,MAAA,CAAO,SAAA,CAAA,CAAA,EAAa;MACtB,MAAA,CAAO,YAAA,CAAa,CAAA;IACtB;EACF;EAEA,OAAA,CAAA,EAAgB;IACd,IAAA,CAAK,KAAA,CAAM,CAAA;IACX,IAAA,CAAK,gBAAA,GAAmB,IAAA;EAC1B;AACF","sourcesContent":["import { Object3D, Sphere, Box3, Mesh, Texture, Vector3 } from 'three'\nimport { XRHandMeshModel } from './XRHandMeshModel'\n\nconst TOUCH_RADIUS = 0.01\nconst POINTING_JOINT = 'index-finger-tip'\n\nexport interface XRButton extends Object3D {\n  onPress(): void\n  onClear(): void\n  isPressed(): boolean\n  whilePressed(): void\n}\n\nclass OculusHandModel extends Object3D {\n  controller: Object3D\n  motionController: XRHandMeshModel | null\n  envMap: Texture | null\n  mesh: Mesh | null\n  xrInputSource: XRInputSource | null\n\n  constructor(controller: Object3D, leftModelPath?: string, rightModelPath?: string) {\n    super()\n\n    this.controller = controller\n    this.motionController = null\n    this.envMap = null\n\n    this.mesh = null\n    this.xrInputSource = null\n\n    controller.addEventListener('connected', (event) => {\n      const xrInputSource = (event as any).data\n\n      if (xrInputSource.hand && !this.motionController) {\n        this.xrInputSource = xrInputSource\n\n        this.motionController = new XRHandMeshModel(\n          this,\n          controller,\n          undefined,\n          xrInputSource.handedness,\n          xrInputSource.handedness === 'left' ? leftModelPath : rightModelPath,\n        )\n      }\n    })\n\n    controller.addEventListener('disconnected', () => {\n      this.dispose()\n    })\n  }\n\n  updateMatrixWorld(force?: boolean): void {\n    super.updateMatrixWorld(force)\n\n    if (this.motionController) {\n      this.motionController.updateMesh()\n    }\n  }\n\n  getPointerPosition(): Vector3 | null {\n    // @ts-ignore XRController needs to extend Group\n    const indexFingerTip = this.controller.joints[POINTING_JOINT]\n    if (indexFingerTip) {\n      return indexFingerTip.position\n    } else {\n      return null\n    }\n  }\n\n  intersectBoxObject(boxObject: Object3D): boolean {\n    const pointerPosition = this.getPointerPosition()\n    if (pointerPosition) {\n      const indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS)\n      const box = new Box3().setFromObject(boxObject)\n      return indexSphere.intersectsBox(box)\n    } else {\n      return false\n    }\n  }\n\n  checkButton(button: XRButton): void {\n    if (this.intersectBoxObject(button)) {\n      button.onPress()\n    } else {\n      button.onClear()\n    }\n\n    if (button.isPressed()) {\n      button.whilePressed()\n    }\n  }\n\n  dispose(): void {\n    this.clear()\n    this.motionController = null\n  }\n}\n\nexport { OculusHandModel }\n"]},"metadata":{},"sourceType":"module"}