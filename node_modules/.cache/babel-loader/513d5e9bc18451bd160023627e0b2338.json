{"ast":null,"code":"import { ShaderPass } from \"./ShaderPass.js\";\nconst LUTShader = {\n  defines: {\n    USE_3DTEXTURE: 1\n  },\n  uniforms: {\n    lut3d: {\n      value: null\n    },\n    lut: {\n      value: null\n    },\n    lutSize: {\n      value: 0\n    },\n    tDiffuse: {\n      value: null\n    },\n    intensity: {\n      value: 1\n    }\n  },\n  vertexShader: (/* glsl */\n  `\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}\n\n\t`),\n  fragmentShader: (/* glsl */\n  `\n\n\t\tuniform float lutSize;\n\t\t#if USE_3DTEXTURE\n\t\tprecision highp sampler3D;\n\t\tuniform sampler3D lut3d;\n\t\t#else\n\t\tuniform sampler2D lut;\n\n\t\tvec3 lutLookup( sampler2D tex, float size, vec3 rgb ) {\n\n\t\t\tfloat sliceHeight = 1.0 / size;\n\t\t\tfloat yPixelHeight = 1.0 / ( size * size );\n\n\t\t\t// Get the slices on either side of the sample\n\t\t\tfloat slice = rgb.b * size;\n\t\t\tfloat interp = fract( slice );\n\t\t\tfloat slice0 = slice - interp;\n\t\t\tfloat centeredInterp = interp - 0.5;\n\n\t\t\tfloat slice1 = slice0 + sign( centeredInterp );\n\n\t\t\t// Pull y sample in by half a pixel in each direction to avoid color\n\t\t\t// bleeding from adjacent slices.\n\t\t\tfloat greenOffset = clamp( rgb.g * sliceHeight, yPixelHeight * 0.5, sliceHeight - yPixelHeight * 0.5 );\n\n\t\t\tvec2 uv0 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice0 * sliceHeight + greenOffset\n\t\t\t);\n\t\t\tvec2 uv1 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice1 * sliceHeight + greenOffset\n\t\t\t);\n\n\t\t\tvec3 sample0 = texture2D( tex, uv0 ).rgb;\n\t\t\tvec3 sample1 = texture2D( tex, uv1 ).rgb;\n\n\t\t\treturn mix( sample0, sample1, abs( centeredInterp ) );\n\n\t\t}\n\t\t#endif\n\n\t\tvarying vec2 vUv;\n\t\tuniform float intensity;\n\t\tuniform sampler2D tDiffuse;\n\t\tvoid main() {\n\n\t\t\tvec4 val = texture2D( tDiffuse, vUv );\n\t\t\tvec4 lutVal;\n\n\t\t\t// pull the sample in by half a pixel so the sample begins\n\t\t\t// at the center of the edge pixels.\n\t\t\tfloat pixelWidth = 1.0 / lutSize;\n\t\t\tfloat halfPixelWidth = 0.5 / lutSize;\n\t\t\tvec3 uvw = vec3( halfPixelWidth ) + val.rgb * ( 1.0 - pixelWidth );\n\n\t\t\t#if USE_3DTEXTURE\n\n\t\t\tlutVal = vec4( texture( lut3d, uvw ).rgb, val.a );\n\n\t\t\t#else\n\n\t\t\tlutVal = vec4( lutLookup( lut, lutSize, uvw ), val.a );\n\n\t\t\t#endif\n\n\t\t\tgl_FragColor = vec4( mix( val, lutVal, intensity ) );\n\n\t\t}\n\n\t`)\n};\nclass LUTPass extends ShaderPass {\n  set lut(v) {\n    const material = this.material;\n    if (v !== this.lut) {\n      material.uniforms.lut3d.value = null;\n      material.uniforms.lut.value = null;\n      if (v) {\n        const is3dTextureDefine = v.isData3DTexture ? 1 : 0;\n        if (is3dTextureDefine !== material.defines.USE_3DTEXTURE) {\n          material.defines.USE_3DTEXTURE = is3dTextureDefine;\n          material.needsUpdate = true;\n        }\n        material.uniforms.lutSize.value = v.image.width;\n        if (v.isData3DTexture) {\n          material.uniforms.lut3d.value = v;\n        } else {\n          material.uniforms.lut.value = v;\n        }\n      }\n    }\n  }\n  get lut() {\n    return this.material.uniforms.lut.value || this.material.uniforms.lut3d.value;\n  }\n  set intensity(v) {\n    this.material.uniforms.intensity.value = v;\n  }\n  get intensity() {\n    return this.material.uniforms.intensity.value;\n  }\n  constructor(options = {}) {\n    super(LUTShader);\n    this.lut = options.lut || null;\n    this.intensity = \"intensity\" in options ? options.intensity : 1;\n  }\n}\nexport { LUTPass };","map":{"version":3,"sources":["../../src/postprocessing/LUTPass.js"],"names":[],"mappings":";AAEA,MAAM,SAAA,GAAY;EAChB,OAAA,EAAS;IACP,aAAA,EAAe;EAChB,CAAA;EAED,QAAA,EAAU;IACR,KAAA,EAAO;MAAE,KAAA,EAAO;IAAM,CAAA;IAEtB,GAAA,EAAK;MAAE,KAAA,EAAO;IAAM,CAAA;IACpB,OAAA,EAAS;MAAE,KAAA,EAAO;IAAG,CAAA;IAErB,QAAA,EAAU;MAAE,KAAA,EAAO;IAAM,CAAA;IACzB,SAAA,EAAW;MAAE,KAAA,EAAO;IAAK;EAC1B,CAAA;EAED,YAAA,GAAA;EAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA,CAAA;EAazB,cAAA,GAAA;EAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA;AAwE7B,CAAA;AAEA,MAAM,OAAA,SAAgB,UAAA,CAAW;EAC/B,IAAI,GAAA,CAAI,CAAA,EAAG;IACT,MAAM,QAAA,GAAW,IAAA,CAAK,QAAA;IACtB,IAAI,CAAA,KAAM,IAAA,CAAK,GAAA,EAAK;MAClB,QAAA,CAAS,QAAA,CAAS,KAAA,CAAM,KAAA,GAAQ,IAAA;MAChC,QAAA,CAAS,QAAA,CAAS,GAAA,CAAI,KAAA,GAAQ,IAAA;MAE9B,IAAI,CAAA,EAAG;QACL,MAAM,iBAAA,GAAoB,CAAA,CAAE,eAAA,GAAkB,CAAA,GAAI,CAAA;QAClD,IAAI,iBAAA,KAAsB,QAAA,CAAS,OAAA,CAAQ,aAAA,EAAe;UACxD,QAAA,CAAS,OAAA,CAAQ,aAAA,GAAgB,iBAAA;UACjC,QAAA,CAAS,WAAA,GAAc,IAAA;QACxB;QAED,QAAA,CAAS,QAAA,CAAS,OAAA,CAAQ,KAAA,GAAQ,CAAA,CAAE,KAAA,CAAM,KAAA;QAC1C,IAAI,CAAA,CAAE,eAAA,EAAiB;UACrB,QAAA,CAAS,QAAA,CAAS,KAAA,CAAM,KAAA,GAAQ,CAAA;QAC1C,CAAA,MAAe;UACL,QAAA,CAAS,QAAA,CAAS,GAAA,CAAI,KAAA,GAAQ,CAAA;QAC/B;MACF;IACF;EACF;EAED,IAAI,GAAA,CAAA,EAAM;IACR,OAAO,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,GAAA,CAAI,KAAA,IAAS,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,KAAA,CAAM,KAAA;EACzE;EAED,IAAI,SAAA,CAAU,CAAA,EAAG;IACf,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,SAAA,CAAU,KAAA,GAAQ,CAAA;EAC1C;EAED,IAAI,SAAA,CAAA,EAAY;IACd,OAAO,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,SAAA,CAAU,KAAA;EACzC;EAED,WAAA,CAAY,OAAA,GAAU,CAAA,CAAA,EAAI;IACxB,KAAA,CAAM,SAAS,CAAA;IACf,IAAA,CAAK,GAAA,GAAM,OAAA,CAAQ,GAAA,IAAO,IAAA;IAC1B,IAAA,CAAK,SAAA,GAAY,WAAA,IAAe,OAAA,GAAU,OAAA,CAAQ,SAAA,GAAY,CAAA;EAC/D;AACH","sourcesContent":["import { ShaderPass } from './ShaderPass'\n\nconst LUTShader = {\n  defines: {\n    USE_3DTEXTURE: 1,\n  },\n\n  uniforms: {\n    lut3d: { value: null },\n\n    lut: { value: null },\n    lutSize: { value: 0 },\n\n    tDiffuse: { value: null },\n    intensity: { value: 1.0 },\n  },\n\n  vertexShader: /* glsl */ `\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}\n\n\t`,\n\n  fragmentShader: /* glsl */ `\n\n\t\tuniform float lutSize;\n\t\t#if USE_3DTEXTURE\n\t\tprecision highp sampler3D;\n\t\tuniform sampler3D lut3d;\n\t\t#else\n\t\tuniform sampler2D lut;\n\n\t\tvec3 lutLookup( sampler2D tex, float size, vec3 rgb ) {\n\n\t\t\tfloat sliceHeight = 1.0 / size;\n\t\t\tfloat yPixelHeight = 1.0 / ( size * size );\n\n\t\t\t// Get the slices on either side of the sample\n\t\t\tfloat slice = rgb.b * size;\n\t\t\tfloat interp = fract( slice );\n\t\t\tfloat slice0 = slice - interp;\n\t\t\tfloat centeredInterp = interp - 0.5;\n\n\t\t\tfloat slice1 = slice0 + sign( centeredInterp );\n\n\t\t\t// Pull y sample in by half a pixel in each direction to avoid color\n\t\t\t// bleeding from adjacent slices.\n\t\t\tfloat greenOffset = clamp( rgb.g * sliceHeight, yPixelHeight * 0.5, sliceHeight - yPixelHeight * 0.5 );\n\n\t\t\tvec2 uv0 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice0 * sliceHeight + greenOffset\n\t\t\t);\n\t\t\tvec2 uv1 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice1 * sliceHeight + greenOffset\n\t\t\t);\n\n\t\t\tvec3 sample0 = texture2D( tex, uv0 ).rgb;\n\t\t\tvec3 sample1 = texture2D( tex, uv1 ).rgb;\n\n\t\t\treturn mix( sample0, sample1, abs( centeredInterp ) );\n\n\t\t}\n\t\t#endif\n\n\t\tvarying vec2 vUv;\n\t\tuniform float intensity;\n\t\tuniform sampler2D tDiffuse;\n\t\tvoid main() {\n\n\t\t\tvec4 val = texture2D( tDiffuse, vUv );\n\t\t\tvec4 lutVal;\n\n\t\t\t// pull the sample in by half a pixel so the sample begins\n\t\t\t// at the center of the edge pixels.\n\t\t\tfloat pixelWidth = 1.0 / lutSize;\n\t\t\tfloat halfPixelWidth = 0.5 / lutSize;\n\t\t\tvec3 uvw = vec3( halfPixelWidth ) + val.rgb * ( 1.0 - pixelWidth );\n\n\t\t\t#if USE_3DTEXTURE\n\n\t\t\tlutVal = vec4( texture( lut3d, uvw ).rgb, val.a );\n\n\t\t\t#else\n\n\t\t\tlutVal = vec4( lutLookup( lut, lutSize, uvw ), val.a );\n\n\t\t\t#endif\n\n\t\t\tgl_FragColor = vec4( mix( val, lutVal, intensity ) );\n\n\t\t}\n\n\t`,\n}\n\nclass LUTPass extends ShaderPass {\n  set lut(v) {\n    const material = this.material\n    if (v !== this.lut) {\n      material.uniforms.lut3d.value = null\n      material.uniforms.lut.value = null\n\n      if (v) {\n        const is3dTextureDefine = v.isData3DTexture ? 1 : 0\n        if (is3dTextureDefine !== material.defines.USE_3DTEXTURE) {\n          material.defines.USE_3DTEXTURE = is3dTextureDefine\n          material.needsUpdate = true\n        }\n\n        material.uniforms.lutSize.value = v.image.width\n        if (v.isData3DTexture) {\n          material.uniforms.lut3d.value = v\n        } else {\n          material.uniforms.lut.value = v\n        }\n      }\n    }\n  }\n\n  get lut() {\n    return this.material.uniforms.lut.value || this.material.uniforms.lut3d.value\n  }\n\n  set intensity(v) {\n    this.material.uniforms.intensity.value = v\n  }\n\n  get intensity() {\n    return this.material.uniforms.intensity.value\n  }\n\n  constructor(options = {}) {\n    super(LUTShader)\n    this.lut = options.lut || null\n    this.intensity = 'intensity' in options ? options.intensity : 1\n  }\n}\n\nexport { LUTPass }\n"]},"metadata":{},"sourceType":"module"}