{"ast":null,"code":"import { Line, BufferGeometry, Float32BufferAttribute, LineBasicMaterial, Mesh, MeshBasicMaterial, BackSide } from \"three\";\nclass RectAreaLightHelper extends Line {\n  constructor(light, color) {\n    const positions = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0];\n    const geometry = new BufferGeometry();\n    geometry.setAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n    geometry.computeBoundingSphere();\n    const material = new LineBasicMaterial({\n      fog: false\n    });\n    super(geometry, material);\n    this.light = light;\n    this.color = color;\n    this.type = \"RectAreaLightHelper\";\n    const positions2 = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0];\n    const geometry2 = new BufferGeometry();\n    geometry2.setAttribute(\"position\", new Float32BufferAttribute(positions2, 3));\n    geometry2.computeBoundingSphere();\n    this.add(new Mesh(geometry2, new MeshBasicMaterial({\n      side: BackSide,\n      fog: false\n    })));\n  }\n  updateMatrixWorld() {\n    this.scale.set(0.5 * this.light.width, 0.5 * this.light.height, 1);\n    if (this.color !== void 0) {\n      this.material.color.set(this.color);\n      this.children[0].material.color.set(this.color);\n    } else {\n      this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);\n      const c = this.material.color;\n      const max = Math.max(c.r, c.g, c.b);\n      if (max > 1) c.multiplyScalar(1 / max);\n      this.children[0].material.color.copy(this.material.color);\n    }\n    this.matrixWorld.extractRotation(this.light.matrixWorld).scale(this.scale).copyPosition(this.light.matrixWorld);\n    this.children[0].matrixWorld.copy(this.matrixWorld);\n  }\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n    this.children[0].geometry.dispose();\n    this.children[0].material.dispose();\n  }\n}\nexport { RectAreaLightHelper };","map":{"version":3,"sources":["../../src/helpers/RectAreaLightHelper.js"],"names":[],"mappings":"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","sourcesContent":["import {\n  BackSide,\n  BufferGeometry,\n  Float32BufferAttribute,\n  Line,\n  LineBasicMaterial,\n  Mesh,\n  MeshBasicMaterial,\n} from 'three'\n\n/**\n *  This helper must be added as a child of the light\n */\n\nclass RectAreaLightHelper extends Line {\n  constructor(light, color) {\n    const positions = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0]\n\n    const geometry = new BufferGeometry()\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3))\n    geometry.computeBoundingSphere()\n\n    const material = new LineBasicMaterial({ fog: false })\n\n    super(geometry, material)\n\n    this.light = light\n    this.color = color // optional hardwired color for the helper\n    this.type = 'RectAreaLightHelper'\n\n    //\n\n    const positions2 = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0]\n\n    const geometry2 = new BufferGeometry()\n    geometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3))\n    geometry2.computeBoundingSphere()\n\n    this.add(new Mesh(geometry2, new MeshBasicMaterial({ side: BackSide, fog: false })))\n  }\n\n  updateMatrixWorld() {\n    this.scale.set(0.5 * this.light.width, 0.5 * this.light.height, 1)\n\n    if (this.color !== undefined) {\n      this.material.color.set(this.color)\n      this.children[0].material.color.set(this.color)\n    } else {\n      this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)\n\n      // prevent hue shift\n      const c = this.material.color\n      const max = Math.max(c.r, c.g, c.b)\n      if (max > 1) c.multiplyScalar(1 / max)\n\n      this.children[0].material.color.copy(this.material.color)\n    }\n\n    // ignore world scale on light\n    this.matrixWorld.extractRotation(this.light.matrixWorld).scale(this.scale).copyPosition(this.light.matrixWorld)\n\n    this.children[0].matrixWorld.copy(this.matrixWorld)\n  }\n\n  dispose() {\n    this.geometry.dispose()\n    this.material.dispose()\n    this.children[0].geometry.dispose()\n    this.children[0].material.dispose()\n  }\n}\n\nexport { RectAreaLightHelper }\n"]},"metadata":{},"sourceType":"module"}