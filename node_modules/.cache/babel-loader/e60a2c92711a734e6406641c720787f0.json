{"ast":null,"code":"import { Vector2, Group, Raycaster, Matrix4 } from \"three\";\nconst _pointer = new Vector2();\nconst _event = {\n  type: \"\",\n  data: _pointer\n};\nclass InteractiveGroup extends Group {\n  constructor(renderer, camera) {\n    super();\n    const scope = this;\n    const raycaster = new Raycaster();\n    const tempMatrix = new Matrix4();\n    const element = renderer.domElement;\n    function onPointerEvent(event) {\n      event.stopPropagation();\n      _pointer.x = event.clientX / element.clientWidth * 2 - 1;\n      _pointer.y = -(event.clientY / element.clientHeight) * 2 + 1;\n      raycaster.setFromCamera(_pointer, camera);\n      const intersects = raycaster.intersectObjects(scope.children, false);\n      if (intersects.length > 0) {\n        const intersection = intersects[0];\n        const object = intersection.object;\n        const uv = intersection.uv;\n        _event.type = event.type;\n        _event.data.set(uv.x, 1 - uv.y);\n        object.dispatchEvent(_event);\n      }\n    }\n    element.addEventListener(\"pointerdown\", onPointerEvent);\n    element.addEventListener(\"pointerup\", onPointerEvent);\n    element.addEventListener(\"pointermove\", onPointerEvent);\n    element.addEventListener(\"mousedown\", onPointerEvent);\n    element.addEventListener(\"mouseup\", onPointerEvent);\n    element.addEventListener(\"mousemove\", onPointerEvent);\n    element.addEventListener(\"click\", onPointerEvent);\n    const events = {\n      move: \"mousemove\",\n      select: \"click\",\n      selectstart: \"mousedown\",\n      selectend: \"mouseup\"\n    };\n    function onXRControllerEvent(event) {\n      const controller = event.target;\n      tempMatrix.identity().extractRotation(controller.matrixWorld);\n      raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld);\n      raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);\n      const intersections = raycaster.intersectObjects(scope.children, false);\n      if (intersections.length > 0) {\n        const intersection = intersections[0];\n        const object = intersection.object;\n        const uv = intersection.uv;\n        _event.type = events[event.type];\n        _event.data.set(uv.x, 1 - uv.y);\n        object.dispatchEvent(_event);\n      }\n    }\n    const controller1 = renderer.xr.getController(0);\n    controller1.addEventListener(\"move\", onXRControllerEvent);\n    controller1.addEventListener(\"select\", onXRControllerEvent);\n    controller1.addEventListener(\"selectstart\", onXRControllerEvent);\n    controller1.addEventListener(\"selectend\", onXRControllerEvent);\n    const controller2 = renderer.xr.getController(1);\n    controller2.addEventListener(\"move\", onXRControllerEvent);\n    controller2.addEventListener(\"select\", onXRControllerEvent);\n    controller2.addEventListener(\"selectstart\", onXRControllerEvent);\n    controller2.addEventListener(\"selectend\", onXRControllerEvent);\n  }\n}\nexport { InteractiveGroup };","map":{"version":3,"sources":["../../src/interactive/InteractiveGroup.js"],"names":[],"mappings":"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","sourcesContent":["import { Group, Matrix4, Raycaster, Vector2 } from 'three'\n\nconst _pointer = new Vector2()\nconst _event = { type: '', data: _pointer }\n\nclass InteractiveGroup extends Group {\n  constructor(renderer, camera) {\n    super()\n\n    const scope = this\n\n    const raycaster = new Raycaster()\n    const tempMatrix = new Matrix4()\n\n    // Pointer Events\n\n    const element = renderer.domElement\n\n    function onPointerEvent(event) {\n      event.stopPropagation()\n\n      _pointer.x = (event.clientX / element.clientWidth) * 2 - 1\n      _pointer.y = -(event.clientY / element.clientHeight) * 2 + 1\n\n      raycaster.setFromCamera(_pointer, camera)\n\n      const intersects = raycaster.intersectObjects(scope.children, false)\n\n      if (intersects.length > 0) {\n        const intersection = intersects[0]\n\n        const object = intersection.object\n        const uv = intersection.uv\n\n        _event.type = event.type\n        _event.data.set(uv.x, 1 - uv.y)\n\n        object.dispatchEvent(_event)\n      }\n    }\n\n    element.addEventListener('pointerdown', onPointerEvent)\n    element.addEventListener('pointerup', onPointerEvent)\n    element.addEventListener('pointermove', onPointerEvent)\n    element.addEventListener('mousedown', onPointerEvent)\n    element.addEventListener('mouseup', onPointerEvent)\n    element.addEventListener('mousemove', onPointerEvent)\n    element.addEventListener('click', onPointerEvent)\n\n    // WebXR Controller Events\n    // TODO: Dispatch pointerevents too\n\n    const events = {\n      move: 'mousemove',\n      select: 'click',\n      selectstart: 'mousedown',\n      selectend: 'mouseup',\n    }\n\n    function onXRControllerEvent(event) {\n      const controller = event.target\n\n      tempMatrix.identity().extractRotation(controller.matrixWorld)\n\n      raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld)\n      raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix)\n\n      const intersections = raycaster.intersectObjects(scope.children, false)\n\n      if (intersections.length > 0) {\n        const intersection = intersections[0]\n\n        const object = intersection.object\n        const uv = intersection.uv\n\n        _event.type = events[event.type]\n        _event.data.set(uv.x, 1 - uv.y)\n\n        object.dispatchEvent(_event)\n      }\n    }\n\n    const controller1 = renderer.xr.getController(0)\n    controller1.addEventListener('move', onXRControllerEvent)\n    controller1.addEventListener('select', onXRControllerEvent)\n    controller1.addEventListener('selectstart', onXRControllerEvent)\n    controller1.addEventListener('selectend', onXRControllerEvent)\n\n    const controller2 = renderer.xr.getController(1)\n    controller2.addEventListener('move', onXRControllerEvent)\n    controller2.addEventListener('select', onXRControllerEvent)\n    controller2.addEventListener('selectstart', onXRControllerEvent)\n    controller2.addEventListener('selectend', onXRControllerEvent)\n  }\n}\n\nexport { InteractiveGroup }\n"]},"metadata":{},"sourceType":"module"}