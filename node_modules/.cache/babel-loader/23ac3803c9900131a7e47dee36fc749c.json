{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from \"../shaders/SSAOShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nconst _SSAOPass = class extends Pass {\n  constructor(scene, camera, width, height) {\n    super();\n    this.width = width !== void 0 ? width : 512;\n    this.height = height !== void 0 ? height : 512;\n    this.clear = true;\n    this.camera = camera;\n    this.scene = scene;\n    this.kernelRadius = 8;\n    this.kernelSize = 32;\n    this.kernel = [];\n    this.noiseTexture = null;\n    this.output = 0;\n    this.minDistance = 5e-3;\n    this.maxDistance = 0.1;\n    this._visibilityCache = /* @__PURE__ */new Map();\n    this.generateSampleKernel();\n    this.generateRandomKernelRotations();\n    const depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture\n    });\n    this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.blurRenderTarget = this.ssaoRenderTarget.clone();\n    if (SSAOShader === void 0) {\n      console.error(\"THREE.SSAOPass: The pass relies on SSAOShader.\");\n    }\n    this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssaoMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n    this.ssaoMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.ssaoMaterial.uniforms[\"tDepth\"].value = this.normalRenderTarget.depthTexture;\n    this.ssaoMaterial.uniforms[\"tNoise\"].value = this.noiseTexture;\n    this.ssaoMaterial.uniforms[\"kernel\"].value = this.kernel;\n    this.ssaoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.ssaoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.ssaoMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n    this.blurMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms[\"tDepth\"].value = this.normalRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.depthRenderMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n  dispose() {\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n  render(renderer, writeBuffer) {\n    if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat;\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n    this.restoreVisibility();\n    this.ssaoMaterial.uniforms[\"kernelRadius\"].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms[\"minDistance\"].value = this.minDistance;\n    this.ssaoMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget);\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n    switch (this.output) {\n      case _SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn(\"THREE.SSAOPass: Unknown output type.\");\n    }\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n  }\n  generateSampleKernel() {\n    const kernelSize = this.kernelSize;\n    const kernel = this.kernel;\n    for (let i = 0; i < kernelSize; i++) {\n      const sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      let scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  }\n  generateRandomKernelRotations() {\n    const width = 4,\n      height = 4;\n    if (SimplexNoise === void 0) {\n      console.error(\"THREE.SSAOPass: The pass relies on SimplexNoise.\");\n    }\n    const simplex = new SimplexNoise();\n    const size = width * height;\n    const data = new Float32Array(size);\n    for (let i = 0; i < size; i++) {\n      const x = Math.random() * 2 - 1;\n      const y = Math.random() * 2 - 1;\n      const z = 0;\n      data[i] = simplex.noise3d(x, y, z);\n    }\n    this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n    this.noiseTexture.needsUpdate = true;\n  }\n  overrideVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  }\n  restoreVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      const visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n};\nlet SSAOPass = _SSAOPass;\n__publicField(SSAOPass, \"OUTPUT\", {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n});\nexport { SSAOPass };","map":{"version":3,"sources":["../../src/postprocessing/SSAOPass.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AA8BA,MAAM,SAAA,GAAN,cAAuB,IAAA,CAAK;EAU1B,WAAA,CAAY,KAAA,EAAO,MAAA,EAAQ,KAAA,EAAO,MAAA,EAAQ;IACxC,KAAA,CAAO,CAAA;IAEP,IAAA,CAAK,KAAA,GAAQ,KAAA,KAAU,KAAA,CAAA,GAAY,KAAA,GAAQ,GAAA;IAC3C,IAAA,CAAK,MAAA,GAAS,MAAA,KAAW,KAAA,CAAA,GAAY,MAAA,GAAS,GAAA;IAE9C,IAAA,CAAK,KAAA,GAAQ,IAAA;IAEb,IAAA,CAAK,MAAA,GAAS,MAAA;IACd,IAAA,CAAK,KAAA,GAAQ,KAAA;IAEb,IAAA,CAAK,YAAA,GAAe,CAAA;IACpB,IAAA,CAAK,UAAA,GAAa,EAAA;IAClB,IAAA,CAAK,MAAA,GAAS,EAAE;IAChB,IAAA,CAAK,YAAA,GAAe,IAAA;IACpB,IAAA,CAAK,MAAA,GAAS,CAAA;IAEd,IAAA,CAAK,WAAA,GAAc,IAAA;IACnB,IAAA,CAAK,WAAA,GAAc,GAAA;IAEnB,IAAA,CAAK,gBAAA,GAAmB,eAAA,IAAI,GAAA,CAAK,CAAA;IAIjC,IAAA,CAAK,oBAAA,CAAsB,CAAA;IAC3B,IAAA,CAAK,6BAAA,CAA+B,CAAA;IAIpC,MAAM,YAAA,GAAe,IAAI,YAAA,CAAc,CAAA;IACvC,YAAA,CAAa,MAAA,GAAS,kBAAA;IACtB,YAAA,CAAa,IAAA,GAAO,kBAAA;IAEpB,IAAA,CAAK,kBAAA,GAAqB,IAAI,iBAAA,CAAkB,IAAA,CAAK,KAAA,EAAO,IAAA,CAAK,MAAM,CAAA;IAIvE,IAAA,CAAK,kBAAA,GAAqB,IAAI,iBAAA,CAAkB,IAAA,CAAK,KAAA,EAAO,IAAA,CAAK,MAAA,EAAQ;MACvE,SAAA,EAAW,aAAA;MACX,SAAA,EAAW,aAAA;MACX;IACN,CAAK,CAAA;IAID,IAAA,CAAK,gBAAA,GAAmB,IAAI,iBAAA,CAAkB,IAAA,CAAK,KAAA,EAAO,IAAA,CAAK,MAAM,CAAA;IAErE,IAAA,CAAK,gBAAA,GAAmB,IAAA,CAAK,gBAAA,CAAiB,KAAA,CAAO,CAAA;IAIrD,IAAI,UAAA,KAAe,KAAA,CAAA,EAAW;MAC5B,OAAA,CAAQ,KAAA,CAAM,gDAAgD,CAAA;IAC/D;IAED,IAAA,CAAK,YAAA,GAAe,IAAI,cAAA,CAAe;MACrC,OAAA,EAAS,MAAA,CAAO,MAAA,CAAO,CAAA,CAAA,EAAI,UAAA,CAAW,OAAO,CAAA;MAC7C,QAAA,EAAU,aAAA,CAAc,KAAA,CAAM,UAAA,CAAW,QAAQ,CAAA;MACjD,YAAA,EAAc,UAAA,CAAW,YAAA;MACzB,cAAA,EAAgB,UAAA,CAAW,cAAA;MAC3B,QAAA,EAAU;IAChB,CAAK,CAAA;IAED,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,UAAU,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,kBAAA,CAAmB,OAAA;IACvE,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,SAAS,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,kBAAA,CAAmB,OAAA;IACtE,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,QAAQ,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,kBAAA,CAAmB,YAAA;IACrE,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,QAAQ,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,YAAA;IAClD,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,QAAQ,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,MAAA;IAClD,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,YAAY,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,MAAA,CAAO,IAAA;IAC7D,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,WAAW,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,MAAA,CAAO,GAAA;IAC5D,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,YAAY,CAAA,CAAE,KAAA,CAAM,GAAA,CAAI,IAAA,CAAK,KAAA,EAAO,IAAA,CAAK,MAAM,CAAA;IAC1E,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,wBAAwB,CAAA,CAAE,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,MAAA,CAAO,gBAAgB,CAAA;IAC5F,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,+BAA+B,CAAA,CAAE,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,MAAA,CAAO,uBAAuB,CAAA;IAI1G,IAAA,CAAK,cAAA,GAAiB,IAAI,kBAAA,CAAoB,CAAA;IAC9C,IAAA,CAAK,cAAA,CAAe,QAAA,GAAW,UAAA;IAI/B,IAAA,CAAK,YAAA,GAAe,IAAI,cAAA,CAAe;MACrC,OAAA,EAAS,MAAA,CAAO,MAAA,CAAO,CAAA,CAAA,EAAI,cAAA,CAAe,OAAO,CAAA;MACjD,QAAA,EAAU,aAAA,CAAc,KAAA,CAAM,cAAA,CAAe,QAAQ,CAAA;MACrD,YAAA,EAAc,cAAA,CAAe,YAAA;MAC7B,cAAA,EAAgB,cAAA,CAAe;IACrC,CAAK,CAAA;IACD,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,UAAU,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,gBAAA,CAAiB,OAAA;IACrE,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,YAAY,CAAA,CAAE,KAAA,CAAM,GAAA,CAAI,IAAA,CAAK,KAAA,EAAO,IAAA,CAAK,MAAM,CAAA;IAI1E,IAAA,CAAK,mBAAA,GAAsB,IAAI,cAAA,CAAe;MAC5C,OAAA,EAAS,MAAA,CAAO,MAAA,CAAO,CAAA,CAAA,EAAI,eAAA,CAAgB,OAAO,CAAA;MAClD,QAAA,EAAU,aAAA,CAAc,KAAA,CAAM,eAAA,CAAgB,QAAQ,CAAA;MACtD,YAAA,EAAc,eAAA,CAAgB,YAAA;MAC9B,cAAA,EAAgB,eAAA,CAAgB,cAAA;MAChC,QAAA,EAAU;IAChB,CAAK,CAAA;IACD,IAAA,CAAK,mBAAA,CAAoB,QAAA,CAAS,QAAQ,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,kBAAA,CAAmB,YAAA;IAC5E,IAAA,CAAK,mBAAA,CAAoB,QAAA,CAAS,YAAY,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,MAAA,CAAO,IAAA;IACpE,IAAA,CAAK,mBAAA,CAAoB,QAAA,CAAS,WAAW,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,MAAA,CAAO,GAAA;IAInE,IAAA,CAAK,YAAA,GAAe,IAAI,cAAA,CAAe;MACrC,QAAA,EAAU,aAAA,CAAc,KAAA,CAAM,UAAA,CAAW,QAAQ,CAAA;MACjD,YAAA,EAAc,UAAA,CAAW,YAAA;MACzB,cAAA,EAAgB,UAAA,CAAW,cAAA;MAC3B,WAAA,EAAa,IAAA;MACb,SAAA,EAAW,KAAA;MACX,UAAA,EAAY,KAAA;MACZ,QAAA,EAAU,cAAA;MACV,QAAA,EAAU,UAAA;MACV,aAAA,EAAe,WAAA;MACf,aAAA,EAAe,cAAA;MACf,aAAA,EAAe,UAAA;MACf,kBAAA,EAAoB;IAC1B,CAAK,CAAA;IAED,IAAA,CAAK,MAAA,GAAS,IAAI,cAAA,CAAe,IAAI,CAAA;IAErC,IAAA,CAAK,kBAAA,GAAqB,IAAI,KAAA,CAAO,CAAA;EACtC;EAED,OAAA,CAAA,EAAU;IAGR,IAAA,CAAK,kBAAA,CAAmB,OAAA,CAAS,CAAA;IACjC,IAAA,CAAK,kBAAA,CAAmB,OAAA,CAAS,CAAA;IACjC,IAAA,CAAK,gBAAA,CAAiB,OAAA,CAAS,CAAA;IAC/B,IAAA,CAAK,gBAAA,CAAiB,OAAA,CAAS,CAAA;IAI/B,IAAA,CAAK,cAAA,CAAe,OAAA,CAAS,CAAA;IAC7B,IAAA,CAAK,YAAA,CAAa,OAAA,CAAS,CAAA;IAC3B,IAAA,CAAK,YAAA,CAAa,OAAA,CAAS,CAAA;IAC3B,IAAA,CAAK,mBAAA,CAAoB,OAAA,CAAS,CAAA;IAIlC,IAAA,CAAK,MAAA,CAAO,OAAA,CAAS,CAAA;EACtB;EAED,MAAA,CAAO,QAAA,EAAU,WAAA,EAAsD;IACrE,IAAI,QAAA,CAAS,YAAA,CAAa,QAAA,KAAa,KAAA,EAAO,IAAA,CAAK,YAAA,CAAa,MAAA,GAAS,eAAA;IAIzE,QAAA,CAAS,eAAA,CAAgB,IAAA,CAAK,kBAAkB,CAAA;IAChD,QAAA,CAAS,KAAA,CAAO,CAAA;IAChB,QAAA,CAAS,MAAA,CAAO,IAAA,CAAK,KAAA,EAAO,IAAA,CAAK,MAAM,CAAA;IAIvC,IAAA,CAAK,kBAAA,CAAoB,CAAA;IACzB,IAAA,CAAK,cAAA,CAAe,QAAA,EAAU,IAAA,CAAK,cAAA,EAAgB,IAAA,CAAK,kBAAA,EAAoB,OAAA,EAAU,CAAG,CAAA;IACzF,IAAA,CAAK,iBAAA,CAAmB,CAAA;IAIxB,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,cAAc,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,YAAA;IACxD,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,aAAa,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,WAAA;IACvD,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,aAAa,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,WAAA;IACvD,IAAA,CAAK,UAAA,CAAW,QAAA,EAAU,IAAA,CAAK,YAAA,EAAc,IAAA,CAAK,gBAAgB,CAAA;IAIlE,IAAA,CAAK,UAAA,CAAW,QAAA,EAAU,IAAA,CAAK,YAAA,EAAc,IAAA,CAAK,gBAAgB,CAAA;IAIlE,QAAQ,IAAA,CAAK,MAAA;MACX,KAAK,SAAA,CAAS,MAAA,CAAO,IAAA;QACnB,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,UAAU,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,gBAAA,CAAiB,OAAA;QACrE,IAAA,CAAK,YAAA,CAAa,QAAA,GAAW,UAAA;QAC7B,IAAA,CAAK,UAAA,CAAW,QAAA,EAAU,IAAA,CAAK,YAAA,EAAc,IAAA,CAAK,cAAA,GAAiB,IAAA,GAAO,WAAW,CAAA;QAErF;MAEF,KAAK,SAAA,CAAS,MAAA,CAAO,IAAA;QACnB,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,UAAU,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,gBAAA,CAAiB,OAAA;QACrE,IAAA,CAAK,YAAA,CAAa,QAAA,GAAW,UAAA;QAC7B,IAAA,CAAK,UAAA,CAAW,QAAA,EAAU,IAAA,CAAK,YAAA,EAAc,IAAA,CAAK,cAAA,GAAiB,IAAA,GAAO,WAAW,CAAA;QAErF;MAEF,KAAK,SAAA,CAAS,MAAA,CAAO,MAAA;QACnB,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,UAAU,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,kBAAA,CAAmB,OAAA;QACvE,IAAA,CAAK,YAAA,CAAa,QAAA,GAAW,UAAA;QAC7B,IAAA,CAAK,UAAA,CAAW,QAAA,EAAU,IAAA,CAAK,YAAA,EAAc,IAAA,CAAK,cAAA,GAAiB,IAAA,GAAO,WAAW,CAAA;QAErF;MAEF,KAAK,SAAA,CAAS,MAAA,CAAO,KAAA;QACnB,IAAA,CAAK,UAAA,CAAW,QAAA,EAAU,IAAA,CAAK,mBAAA,EAAqB,IAAA,CAAK,cAAA,GAAiB,IAAA,GAAO,WAAW,CAAA;QAE5F;MAEF,KAAK,SAAA,CAAS,MAAA,CAAO,MAAA;QACnB,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,UAAU,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,kBAAA,CAAmB,OAAA;QACvE,IAAA,CAAK,YAAA,CAAa,QAAA,GAAW,UAAA;QAC7B,IAAA,CAAK,UAAA,CAAW,QAAA,EAAU,IAAA,CAAK,YAAA,EAAc,IAAA,CAAK,cAAA,GAAiB,IAAA,GAAO,WAAW,CAAA;QAErF;MAEF,KAAK,SAAA,CAAS,MAAA,CAAO,OAAA;QACnB,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,UAAU,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,kBAAA,CAAmB,OAAA;QACvE,IAAA,CAAK,YAAA,CAAa,QAAA,GAAW,UAAA;QAC7B,IAAA,CAAK,UAAA,CAAW,QAAA,EAAU,IAAA,CAAK,YAAA,EAAc,IAAA,CAAK,cAAA,GAAiB,IAAA,GAAO,WAAW,CAAA;QAErF,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,UAAU,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,gBAAA,CAAiB,OAAA;QACrE,IAAA,CAAK,YAAA,CAAa,QAAA,GAAW,cAAA;QAC7B,IAAA,CAAK,UAAA,CAAW,QAAA,EAAU,IAAA,CAAK,YAAA,EAAc,IAAA,CAAK,cAAA,GAAiB,IAAA,GAAO,WAAW,CAAA;QAErF;MAEF;QACE,OAAA,CAAQ,IAAA,CAAK,sCAAsC,CAAA;IACtD;EACF;EAED,UAAA,CAAW,QAAA,EAAU,YAAA,EAAc,YAAA,EAAc,UAAA,EAAY,UAAA,EAAY;IAEvE,QAAA,CAAS,aAAA,CAAc,IAAA,CAAK,kBAAkB,CAAA;IAC9C,MAAM,kBAAA,GAAqB,QAAA,CAAS,aAAA,CAAe,CAAA;IACnD,MAAM,iBAAA,GAAoB,QAAA,CAAS,SAAA;IAEnC,QAAA,CAAS,eAAA,CAAgB,YAAY,CAAA;IAGrC,QAAA,CAAS,SAAA,GAAY,KAAA;IACrB,IAAI,UAAA,KAAe,KAAA,CAAA,IAAa,UAAA,KAAe,IAAA,EAAM;MACnD,QAAA,CAAS,aAAA,CAAc,UAAU,CAAA;MACjC,QAAA,CAAS,aAAA,CAAc,UAAA,IAAc,CAAG,CAAA;MACxC,QAAA,CAAS,KAAA,CAAO,CAAA;IACjB;IAED,IAAA,CAAK,MAAA,CAAO,QAAA,GAAW,YAAA;IACvB,IAAA,CAAK,MAAA,CAAO,MAAA,CAAO,QAAQ,CAAA;IAG3B,QAAA,CAAS,SAAA,GAAY,iBAAA;IACrB,QAAA,CAAS,aAAA,CAAc,IAAA,CAAK,kBAAkB,CAAA;IAC9C,QAAA,CAAS,aAAA,CAAc,kBAAkB,CAAA;EAC1C;EAED,cAAA,CAAe,QAAA,EAAU,gBAAA,EAAkB,YAAA,EAAc,UAAA,EAAY,UAAA,EAAY;IAC/E,QAAA,CAAS,aAAA,CAAc,IAAA,CAAK,kBAAkB,CAAA;IAC9C,MAAM,kBAAA,GAAqB,QAAA,CAAS,aAAA,CAAe,CAAA;IACnD,MAAM,iBAAA,GAAoB,QAAA,CAAS,SAAA;IAEnC,QAAA,CAAS,eAAA,CAAgB,YAAY,CAAA;IACrC,QAAA,CAAS,SAAA,GAAY,KAAA;IAErB,UAAA,GAAa,gBAAA,CAAiB,UAAA,IAAc,UAAA;IAC5C,UAAA,GAAa,gBAAA,CAAiB,UAAA,IAAc,UAAA;IAE5C,IAAI,UAAA,KAAe,KAAA,CAAA,IAAa,UAAA,KAAe,IAAA,EAAM;MACnD,QAAA,CAAS,aAAA,CAAc,UAAU,CAAA;MACjC,QAAA,CAAS,aAAA,CAAc,UAAA,IAAc,CAAG,CAAA;MACxC,QAAA,CAAS,KAAA,CAAO,CAAA;IACjB;IAED,IAAA,CAAK,KAAA,CAAM,gBAAA,GAAmB,gBAAA;IAC9B,QAAA,CAAS,MAAA,CAAO,IAAA,CAAK,KAAA,EAAO,IAAA,CAAK,MAAM,CAAA;IACvC,IAAA,CAAK,KAAA,CAAM,gBAAA,GAAmB,IAAA;IAI9B,QAAA,CAAS,SAAA,GAAY,iBAAA;IACrB,QAAA,CAAS,aAAA,CAAc,IAAA,CAAK,kBAAkB,CAAA;IAC9C,QAAA,CAAS,aAAA,CAAc,kBAAkB,CAAA;EAC1C;EAED,OAAA,CAAQ,KAAA,EAAO,MAAA,EAAQ;IACrB,IAAA,CAAK,KAAA,GAAQ,KAAA;IACb,IAAA,CAAK,MAAA,GAAS,MAAA;IAEd,IAAA,CAAK,kBAAA,CAAmB,OAAA,CAAQ,KAAA,EAAO,MAAM,CAAA;IAC7C,IAAA,CAAK,gBAAA,CAAiB,OAAA,CAAQ,KAAA,EAAO,MAAM,CAAA;IAC3C,IAAA,CAAK,kBAAA,CAAmB,OAAA,CAAQ,KAAA,EAAO,MAAM,CAAA;IAC7C,IAAA,CAAK,gBAAA,CAAiB,OAAA,CAAQ,KAAA,EAAO,MAAM,CAAA;IAE3C,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,YAAY,CAAA,CAAE,KAAA,CAAM,GAAA,CAAI,KAAA,EAAO,MAAM,CAAA;IAChE,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,wBAAwB,CAAA,CAAE,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,MAAA,CAAO,gBAAgB,CAAA;IAC5F,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,+BAA+B,CAAA,CAAE,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,MAAA,CAAO,uBAAuB,CAAA;IAE1G,IAAA,CAAK,YAAA,CAAa,QAAA,CAAS,YAAY,CAAA,CAAE,KAAA,CAAM,GAAA,CAAI,KAAA,EAAO,MAAM,CAAA;EACjE;EAED,oBAAA,CAAA,EAAuB;IACrB,MAAM,UAAA,GAAa,IAAA,CAAK,UAAA;IACxB,MAAM,MAAA,GAAS,IAAA,CAAK,MAAA;IAEpB,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,UAAA,EAAY,CAAA,EAAA,EAAK;MACnC,MAAM,MAAA,GAAS,IAAI,OAAA,CAAS,CAAA;MAC5B,MAAA,CAAO,CAAA,GAAI,IAAA,CAAK,MAAA,CAAQ,CAAA,GAAG,CAAA,GAAI,CAAA;MAC/B,MAAA,CAAO,CAAA,GAAI,IAAA,CAAK,MAAA,CAAQ,CAAA,GAAG,CAAA,GAAI,CAAA;MAC/B,MAAA,CAAO,CAAA,GAAI,IAAA,CAAK,MAAA,CAAQ,CAAA;MAExB,MAAA,CAAO,SAAA,CAAW,CAAA;MAElB,IAAI,KAAA,GAAQ,CAAA,GAAI,UAAA;MAChB,KAAA,GAAQ,SAAA,CAAU,IAAA,CAAK,GAAA,EAAK,CAAA,EAAG,KAAA,GAAQ,KAAK,CAAA;MAC5C,MAAA,CAAO,cAAA,CAAe,KAAK,CAAA;MAE3B,MAAA,CAAO,IAAA,CAAK,MAAM,CAAA;IACnB;EACF;EAED,6BAAA,CAAA,EAAgC;IAC9B,MAAM,KAAA,GAAQ,CAAA;MACZ,MAAA,GAAS,CAAA;IAEX,IAAI,YAAA,KAAiB,KAAA,CAAA,EAAW;MAC9B,OAAA,CAAQ,KAAA,CAAM,kDAAkD,CAAA;IACjE;IAED,MAAM,OAAA,GAAU,IAAI,YAAA,CAAc,CAAA;IAElC,MAAM,IAAA,GAAO,KAAA,GAAQ,MAAA;IACrB,MAAM,IAAA,GAAO,IAAI,YAAA,CAAa,IAAI,CAAA;IAElC,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,IAAA,EAAM,CAAA,EAAA,EAAK;MAC7B,MAAM,CAAA,GAAI,IAAA,CAAK,MAAA,CAAQ,CAAA,GAAG,CAAA,GAAI,CAAA;MAC9B,MAAM,CAAA,GAAI,IAAA,CAAK,MAAA,CAAQ,CAAA,GAAG,CAAA,GAAI,CAAA;MAC9B,MAAM,CAAA,GAAI,CAAA;MAEV,IAAA,CAAK,CAAC,CAAA,GAAI,OAAA,CAAQ,OAAA,CAAQ,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;IAClC;IAED,IAAA,CAAK,YAAA,GAAe,IAAI,WAAA,CAAY,IAAA,EAAM,KAAA,EAAO,MAAA,EAAQ,SAAA,EAAW,SAAS,CAAA;IAC7E,IAAA,CAAK,YAAA,CAAa,KAAA,GAAQ,cAAA;IAC1B,IAAA,CAAK,YAAA,CAAa,KAAA,GAAQ,cAAA;IAC1B,IAAA,CAAK,YAAA,CAAa,WAAA,GAAc,IAAA;EACjC;EAED,kBAAA,CAAA,EAAqB;IACnB,MAAM,KAAA,GAAQ,IAAA,CAAK,KAAA;IACnB,MAAM,KAAA,GAAQ,IAAA,CAAK,gBAAA;IAEnB,KAAA,CAAM,QAAA,CAAS,UAAU,MAAA,EAAQ;MAC/B,KAAA,CAAM,GAAA,CAAI,MAAA,EAAQ,MAAA,CAAO,OAAO,CAAA;MAEhC,IAAI,MAAA,CAAO,QAAA,IAAY,MAAA,CAAO,MAAA,EAAQ,MAAA,CAAO,OAAA,GAAU,KAAA;IAC7D,CAAK,CAAA;EACF;EAED,iBAAA,CAAA,EAAoB;IAClB,MAAM,KAAA,GAAQ,IAAA,CAAK,KAAA;IACnB,MAAM,KAAA,GAAQ,IAAA,CAAK,gBAAA;IAEnB,KAAA,CAAM,QAAA,CAAS,UAAU,MAAA,EAAQ;MAC/B,MAAM,OAAA,GAAU,KAAA,CAAM,GAAA,CAAI,MAAM,CAAA;MAChC,MAAA,CAAO,OAAA,GAAU,OAAA;IACvB,CAAK,CAAA;IAED,KAAA,CAAM,KAAA,CAAO,CAAA;EACd;AACH,CAAA;AAnXA,IAAM,QAAA,GAAN,SAAA;AACE,aAAA,CADI,QAAA,EACG,QAAA,EAAS;EACd,OAAA,EAAS,CAAA;EACT,IAAA,EAAM,CAAA;EACN,IAAA,EAAM,CAAA;EACN,MAAA,EAAQ,CAAA;EACR,KAAA,EAAO,CAAA;EACP,MAAA,EAAQ;AACT,CAAA,CAAA","sourcesContent":["import {\n  AddEquation,\n  Color,\n  CustomBlending,\n  DataTexture,\n  DepthTexture,\n  DstAlphaFactor,\n  DstColorFactor,\n  FloatType,\n  MathUtils,\n  MeshNormalMaterial,\n  NearestFilter,\n  NoBlending,\n  RedFormat,\n  LuminanceFormat,\n  DepthStencilFormat,\n  UnsignedInt248Type,\n  RepeatWrapping,\n  ShaderMaterial,\n  UniformsUtils,\n  Vector3,\n  WebGLRenderTarget,\n  ZeroFactor,\n} from 'three'\nimport { Pass, FullScreenQuad } from './Pass'\nimport { SimplexNoise } from '../math/SimplexNoise'\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader'\n\nimport { CopyShader } from '../shaders/CopyShader'\n\nclass SSAOPass extends Pass {\n  static OUTPUT = {\n    Default: 0,\n    SSAO: 1,\n    Blur: 2,\n    Beauty: 3,\n    Depth: 4,\n    Normal: 5,\n  }\n\n  constructor(scene, camera, width, height) {\n    super()\n\n    this.width = width !== undefined ? width : 512\n    this.height = height !== undefined ? height : 512\n\n    this.clear = true\n\n    this.camera = camera\n    this.scene = scene\n\n    this.kernelRadius = 8\n    this.kernelSize = 32\n    this.kernel = []\n    this.noiseTexture = null\n    this.output = 0\n\n    this.minDistance = 0.005\n    this.maxDistance = 0.1\n\n    this._visibilityCache = new Map()\n\n    //\n\n    this.generateSampleKernel()\n    this.generateRandomKernelRotations()\n\n    // beauty render target\n\n    const depthTexture = new DepthTexture()\n    depthTexture.format = DepthStencilFormat\n    depthTexture.type = UnsignedInt248Type\n\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height)\n\n    // normal render target with depth buffer\n\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture: depthTexture,\n    })\n\n    // ssao render target\n\n    this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height)\n\n    this.blurRenderTarget = this.ssaoRenderTarget.clone()\n\n    // ssao material\n\n    if (SSAOShader === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SSAOShader.')\n    }\n\n    this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending,\n    })\n\n    this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n    this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture\n    this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture\n    this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture\n    this.ssaoMaterial.uniforms['kernel'].value = this.kernel\n    this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far\n    this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height)\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix)\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse)\n\n    // normal material\n\n    this.normalMaterial = new MeshNormalMaterial()\n    this.normalMaterial.blending = NoBlending\n\n    // blur material\n\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader,\n    })\n    this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture\n    this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height)\n\n    // material for rendering the depth\n\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending,\n    })\n    this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture\n    this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far\n\n    // material for rendering the content of a render target\n\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation,\n    })\n\n    this.fsQuad = new FullScreenQuad(null)\n\n    this.originalClearColor = new Color()\n  }\n\n  dispose() {\n    // dispose render targets\n\n    this.beautyRenderTarget.dispose()\n    this.normalRenderTarget.dispose()\n    this.ssaoRenderTarget.dispose()\n    this.blurRenderTarget.dispose()\n\n    // dispose materials\n\n    this.normalMaterial.dispose()\n    this.blurMaterial.dispose()\n    this.copyMaterial.dispose()\n    this.depthRenderMaterial.dispose()\n\n    // dipsose full screen quad\n\n    this.fsQuad.dispose()\n  }\n\n  render(renderer, writeBuffer /*, readBuffer, deltaTime, maskActive */) {\n    if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat\n\n    // render beauty\n\n    renderer.setRenderTarget(this.beautyRenderTarget)\n    renderer.clear()\n    renderer.render(this.scene, this.camera)\n\n    // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n    this.overrideVisibility()\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0)\n    this.restoreVisibility()\n\n    // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget)\n\n    // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget)\n\n    // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture\n        this.copyMaterial.blending = CustomBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.')\n    }\n  }\n\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor)\n    const originalClearAlpha = renderer.getClearAlpha()\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n\n    // setup pass state\n    renderer.autoClear = false\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.fsQuad.material = passMaterial\n    this.fsQuad.render(renderer)\n\n    // restore original state\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor)\n    const originalClearAlpha = renderer.getClearAlpha()\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n    renderer.autoClear = false\n\n    clearColor = overrideMaterial.clearColor || clearColor\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.scene.overrideMaterial = overrideMaterial\n    renderer.render(this.scene, this.camera)\n    this.scene.overrideMaterial = null\n\n    // restore original state\n\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  setSize(width, height) {\n    this.width = width\n    this.height = height\n\n    this.beautyRenderTarget.setSize(width, height)\n    this.ssaoRenderTarget.setSize(width, height)\n    this.normalRenderTarget.setSize(width, height)\n    this.blurRenderTarget.setSize(width, height)\n\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height)\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix)\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse)\n\n    this.blurMaterial.uniforms['resolution'].value.set(width, height)\n  }\n\n  generateSampleKernel() {\n    const kernelSize = this.kernelSize\n    const kernel = this.kernel\n\n    for (let i = 0; i < kernelSize; i++) {\n      const sample = new Vector3()\n      sample.x = Math.random() * 2 - 1\n      sample.y = Math.random() * 2 - 1\n      sample.z = Math.random()\n\n      sample.normalize()\n\n      let scale = i / kernelSize\n      scale = MathUtils.lerp(0.1, 1, scale * scale)\n      sample.multiplyScalar(scale)\n\n      kernel.push(sample)\n    }\n  }\n\n  generateRandomKernelRotations() {\n    const width = 4,\n      height = 4\n\n    if (SimplexNoise === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.')\n    }\n\n    const simplex = new SimplexNoise()\n\n    const size = width * height\n    const data = new Float32Array(size)\n\n    for (let i = 0; i < size; i++) {\n      const x = Math.random() * 2 - 1\n      const y = Math.random() * 2 - 1\n      const z = 0\n\n      data[i] = simplex.noise3d(x, y, z)\n    }\n\n    this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType)\n    this.noiseTexture.wrapS = RepeatWrapping\n    this.noiseTexture.wrapT = RepeatWrapping\n    this.noiseTexture.needsUpdate = true\n  }\n\n  overrideVisibility() {\n    const scene = this.scene\n    const cache = this._visibilityCache\n\n    scene.traverse(function (object) {\n      cache.set(object, object.visible)\n\n      if (object.isPoints || object.isLine) object.visible = false\n    })\n  }\n\n  restoreVisibility() {\n    const scene = this.scene\n    const cache = this._visibilityCache\n\n    scene.traverse(function (object) {\n      const visible = cache.get(object)\n      object.visible = visible\n    })\n\n    cache.clear()\n  }\n}\n\nexport { SSAOPass }\n"]},"metadata":{},"sourceType":"module"}