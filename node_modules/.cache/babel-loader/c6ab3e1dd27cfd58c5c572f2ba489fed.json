{"ast":null,"code":"const ACESFilmicToneMappingShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    exposure: {\n      value: 1\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"#define saturate(a) clamp( a, 0.0, 1.0 )\", \"uniform sampler2D tDiffuse;\", \"uniform float exposure;\", \"varying vec2 vUv;\", \"vec3 RRTAndODTFit( vec3 v ) {\", \"\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\", \"\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\", \"\treturn a / b;\", \"}\", \"vec3 ACESFilmicToneMapping( vec3 color ) {\",\n  // sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\n  \"\tconst mat3 ACESInputMat = mat3(\", \"\t\tvec3( 0.59719, 0.07600, 0.02840 ),\",\n  // transposed from source\n  \"\t\tvec3( 0.35458, 0.90834, 0.13383 ),\", \"\t\tvec3( 0.04823, 0.01566, 0.83777 )\", \"\t);\",\n  // ODT_SAT => XYZ => D60_2_D65 => sRGB\n  \"\tconst mat3 ACESOutputMat = mat3(\", \"\t\tvec3(  1.60475, -0.10208, -0.00327 ),\",\n  // transposed from source\n  \"\t\tvec3( -0.53108,  1.10813, -0.07276 ),\", \"\t\tvec3( -0.07367, -0.00605,  1.07602 )\", \"\t);\", \"\tcolor = ACESInputMat * color;\",\n  // Apply RRT and ODT\n  \"\tcolor = RRTAndODTFit( color );\", \"\tcolor = ACESOutputMat * color;\",\n  // Clamp to [0, 1]\n  \"\treturn saturate( color );\", \"}\", \"void main() {\", \"\tvec4 tex = texture2D( tDiffuse, vUv );\", \"\ttex.rgb *= exposure / 0.6;\",\n  // pre-exposed, outside of the tone mapping function\n  \"\tgl_FragColor = vec4( ACESFilmicToneMapping( tex.rgb ), tex.a );\", \"}\"].join(\"\\n\")\n};\nexport { ACESFilmicToneMappingShader };","map":{"version":3,"sources":["../../src/shaders/ACESFilmicToneMappingShader.ts"],"names":[],"mappings":"AAkBO,MAAM,2BAAA,GAA4D;EACvE,QAAA,EAAU;IACR,QAAA,EAAU;MAAE,KAAA,EAAO;IAAK,CAAA;IACxB,QAAA,EAAU;MAAE,KAAA,EAAO;IAAI;EACzB,CAAA;EAEA,YAAA,EAAc,CACZ,mBAAA,EAEA,eAAA,EAEA,YAAA,EACA,4EAAA,EAEA,GAAA,CAAA,CACA,IAAA,CAAK,IAAI,CAAA;EAEX,cAAA,EAAgB,CACd,0CAAA,EAEA,6BAAA,EAEA,yBAAA,EAEA,mBAAA,EAEA,+BAAA,EAEA,gDAAA,EACA,wDAAA,EACA,gBAAA,EAEA,GAAA,EAEA,4CAAA;EAAA;EAGA,kCAAA,EACA,sCAAA;EAAA;EACA,sCAAA,EACA,qCAAA,EACA,KAAA;EAAA;EAGA,mCAAA,EACA,yCAAA;EAAA;EACA,yCAAA,EACA,wCAAA,EACA,KAAA,EAEA,gCAAA;EAAA;EAGA,iCAAA,EAEA,iCAAA;EAAA;EAGA,4BAAA,EAEA,GAAA,EAEA,eAAA,EAEA,yCAAA,EAEA,6BAAA;EAAA;EAEA,kEAAA,EAEA,GAAA,CAAA,CACA,IAAA,CAAK,IAAI;AACb,CAAA","sourcesContent":["/**\n * ACES Filmic Tone Mapping Shader by Stephen Hill\n * source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\n *\n * this implementation of ACES is modified to accommodate a brighter viewing environment.\n * the scale factor of 1/0.6 is subjective. see discussion in #19621.\n */\n\nimport type { IUniform, Texture } from 'three'\nimport type { IShader } from './types'\n\nexport type ACESFilmicToneMappingShaderUniforms = {\n  exposure: IUniform<number>\n  tDiffuse: IUniform<Texture | null>\n}\n\nexport interface IACESFilmicToneMappingShader extends IShader<ACESFilmicToneMappingShaderUniforms> {}\n\nexport const ACESFilmicToneMappingShader: IACESFilmicToneMappingShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    exposure: { value: 1.0 },\n  },\n\n  vertexShader: [\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvUv = uv;',\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    '#define saturate(a) clamp( a, 0.0, 1.0 )',\n\n    'uniform sampler2D tDiffuse;',\n\n    'uniform float exposure;',\n\n    'varying vec2 vUv;',\n\n    'vec3 RRTAndODTFit( vec3 v ) {',\n\n    '\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;',\n    '\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;',\n    '\treturn a / b;',\n\n    '}',\n\n    'vec3 ACESFilmicToneMapping( vec3 color ) {',\n\n    // sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\n    '\tconst mat3 ACESInputMat = mat3(',\n    '\t\tvec3( 0.59719, 0.07600, 0.02840 ),', // transposed from source\n    '\t\tvec3( 0.35458, 0.90834, 0.13383 ),',\n    '\t\tvec3( 0.04823, 0.01566, 0.83777 )',\n    '\t);',\n\n    // ODT_SAT => XYZ => D60_2_D65 => sRGB\n    '\tconst mat3 ACESOutputMat = mat3(',\n    '\t\tvec3(  1.60475, -0.10208, -0.00327 ),', // transposed from source\n    '\t\tvec3( -0.53108,  1.10813, -0.07276 ),',\n    '\t\tvec3( -0.07367, -0.00605,  1.07602 )',\n    '\t);',\n\n    '\tcolor = ACESInputMat * color;',\n\n    // Apply RRT and ODT\n    '\tcolor = RRTAndODTFit( color );',\n\n    '\tcolor = ACESOutputMat * color;',\n\n    // Clamp to [0, 1]\n    '\treturn saturate( color );',\n\n    '}',\n\n    'void main() {',\n\n    '\tvec4 tex = texture2D( tDiffuse, vUv );',\n\n    '\ttex.rgb *= exposure / 0.6;', // pre-exposed, outside of the tone mapping function\n\n    '\tgl_FragColor = vec4( ACESFilmicToneMapping( tex.rgb ), tex.a );',\n\n    '}',\n  ].join('\\n'),\n}\n"]},"metadata":{},"sourceType":"module"}