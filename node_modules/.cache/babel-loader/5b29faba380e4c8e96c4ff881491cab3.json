{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { ShaderMaterial, UniformsUtils } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nclass ShaderPass extends Pass {\n  constructor(shader, textureID = \"tDiffuse\") {\n    super();\n    __publicField(this, \"textureID\");\n    __publicField(this, \"uniforms\");\n    __publicField(this, \"material\");\n    __publicField(this, \"fsQuad\");\n    this.textureID = textureID;\n    if (shader instanceof ShaderMaterial) {\n      this.uniforms = shader.uniforms;\n      this.material = shader;\n    } else {\n      this.uniforms = UniformsUtils.clone(shader.uniforms);\n      this.material = new ShaderMaterial({\n        defines: Object.assign({}, shader.defines),\n        uniforms: this.uniforms,\n        vertexShader: shader.vertexShader,\n        fragmentShader: shader.fragmentShader\n      });\n    }\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n    this.fsQuad.material = this.material;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n      this.fsQuad.render(renderer);\n    }\n  }\n  dispose() {\n    this.fsQuad.dispose();\n    this.material.dispose();\n  }\n}\nexport { ShaderPass };","map":{"version":3,"sources":["../../src/postprocessing/ShaderPass.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAIA,MAAM,UAAA,SAAmB,IAAA,CAAK;EAM5B,WAAA,CAAY,MAAA,EAAiE,SAAA,GAAY,UAAA,EAAY;IAC7F,KAAA,CAAA,CAAA;IAND,aAAA,CAAA,IAAA,EAAA,WAAA,CAAA;IACA,aAAA,CAAA,IAAA,EAAA,UAAA,CAAA;IACA,aAAA,CAAA,IAAA,EAAA,UAAA,CAAA;IACA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;IAKL,IAAA,CAAK,SAAA,GAAY,SAAA;IAEjB,IAAI,MAAA,YAAkB,cAAA,EAAgB;MACpC,IAAA,CAAK,QAAA,GAAW,MAAA,CAAO,QAAA;MAEvB,IAAA,CAAK,QAAA,GAAW,MAAA;IAAA,CAAA,MACX;MACL,IAAA,CAAK,QAAA,GAAW,aAAA,CAAc,KAAA,CAAM,MAAA,CAAO,QAAQ,CAAA;MAE9C,IAAA,CAAA,QAAA,GAAW,IAAI,cAAA,CAAe;QACjC,OAAA,EAAS,MAAA,CAAO,MAAA,CAAO,CAAA,CAAA,EAAI,MAAA,CAAO,OAAO,CAAA;QACzC,QAAA,EAAU,IAAA,CAAK,QAAA;QACf,YAAA,EAAc,MAAA,CAAO,YAAA;QACrB,cAAA,EAAgB,MAAA,CAAO;MAAA,CACxB,CAAA;IACH;IAEA,IAAA,CAAK,MAAA,GAAS,IAAI,cAAA,CAAe,IAAA,CAAK,QAAQ,CAAA;EAChD;EAEO,MAAA,CACL,QAAA,EACA,WAAA,EACA,UAAA,EACM;IACN,IAAI,IAAA,CAAK,QAAA,CAAS,IAAA,CAAK,SAAS,CAAA,EAAG;MACjC,IAAA,CAAK,QAAA,CAAS,IAAA,CAAK,SAAS,CAAA,CAAE,KAAA,GAAQ,UAAA,CAAW,OAAA;IACnD;IAEK,IAAA,CAAA,MAAA,CAAO,QAAA,GAAW,IAAA,CAAK,QAAA;IAE5B,IAAI,IAAA,CAAK,cAAA,EAAgB;MACvB,QAAA,CAAS,eAAA,CAAgB,IAAI,CAAA;MACxB,IAAA,CAAA,MAAA,CAAO,MAAA,CAAO,QAAQ,CAAA;IAAA,CAAA,MACtB;MACL,QAAA,CAAS,eAAA,CAAgB,WAAW,CAAA;MAEpC,IAAI,IAAA,CAAK,KAAA,EAAO,QAAA,CAAS,KAAA,CAAM,QAAA,CAAS,cAAA,EAAgB,QAAA,CAAS,cAAA,EAAgB,QAAA,CAAS,gBAAgB,CAAA;MACrG,IAAA,CAAA,MAAA,CAAO,MAAA,CAAO,QAAQ,CAAA;IAC7B;EACF;EAEO,OAAA,CAAA,EAAU;IACf,IAAA,CAAK,MAAA,CAAO,OAAA,CAAA,CAAA;IACZ,IAAA,CAAK,QAAA,CAAS,OAAA,CAAA,CAAA;EAChB;AACF","sourcesContent":["import { ShaderMaterial, UniformsUtils, WebGLRenderer, WebGLRenderTarget } from 'three'\nimport { Pass, FullScreenQuad } from './Pass'\nimport { Defines, IShader, Uniforms } from '../shaders/types'\n\nclass ShaderPass extends Pass {\n  public textureID: string\n  public uniforms: Uniforms\n  public material: ShaderMaterial\n  public fsQuad: FullScreenQuad\n\n  constructor(shader: ShaderMaterial | IShader<Uniforms, Defines | undefined>, textureID = 'tDiffuse') {\n    super()\n\n    this.textureID = textureID\n\n    if (shader instanceof ShaderMaterial) {\n      this.uniforms = shader.uniforms\n\n      this.material = shader\n    } else {\n      this.uniforms = UniformsUtils.clone(shader.uniforms)\n\n      this.material = new ShaderMaterial({\n        defines: Object.assign({}, shader.defines),\n        uniforms: this.uniforms,\n        vertexShader: shader.vertexShader,\n        fragmentShader: shader.fragmentShader,\n      })\n    }\n\n    this.fsQuad = new FullScreenQuad(this.material)\n  }\n\n  public render(\n    renderer: WebGLRenderer,\n    writeBuffer: WebGLRenderTarget,\n    readBuffer: WebGLRenderTarget /*, deltaTime, maskActive */,\n  ): void {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture\n    }\n\n    this.fsQuad.material = this.material\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null)\n      this.fsQuad.render(renderer)\n    } else {\n      renderer.setRenderTarget(writeBuffer)\n      // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n      if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil)\n      this.fsQuad.render(renderer)\n    }\n  }\n\n  public dispose() {\n    this.fsQuad.dispose()\n    this.material.dispose()\n  }\n}\n\nexport { ShaderPass }\n"]},"metadata":{},"sourceType":"module"}