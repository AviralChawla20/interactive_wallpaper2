{"ast":null,"code":"var _s = $RefreshSig$();\nimport * as THREE from \"three\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport * as d3 from \"d3-ease\";\nimport { InstancedPrefabBufferGeometry, ShaderChunk, StandardAnimationMaterial } from \"three-bas\";\nimport { AdditiveBlending } from \"three\";\nconst worker = new Worker(\"./attractors/attractors.js\");\nconst length = 25000;\nexport const useBufferAnimation = ({\n  parameters,\n  setWaiting,\n  onError\n}) => {\n  _s();\n  const meshRef = useRef();\n  const posRef = useRef();\n  const rotRef = useRef();\n  const progress = useRef(-1);\n  const geometryRef = useRef(null);\n  const materialRef = useRef(null);\n  const curId = useRef(null);\n  const prevId = useRef(null);\n  const [init, setInit] = useState(false);\n  useEffect(() => {\n    curId.current = parameters.id;\n    if (!parameters || curId.current === prevId.current) return;\n    worker.postMessage({\n      parameters,\n      length\n    });\n  }, [parameters]);\n  useEffect(() => {\n    const updateGeo = (name, array) => {\n      const geometry = geometryRef.current;\n      const buffer = geometry.attributes[name];\n      for (let i = 0; i < length; i++) {\n        geometry.setPrefabData(buffer, i, array[i]);\n      }\n      buffer.needsUpdate = true;\n    };\n    worker.onmessage = e => {\n      const {\n        error,\n        positions,\n        rotations\n      } = e.data;\n      if (error) {\n        setWaiting(false);\n        onError();\n        return;\n      }\n      prevId.current = curId.current;\n      //only update geo if it already exists\n      if (posRef.current) {\n        updateGeo(\"prevPos\", posRef.current);\n        updateGeo(\"prevRot\", rotRef.current);\n        updateGeo(\"pos\", positions);\n        updateGeo(\"rot\", rotations);\n        progress.current = 0;\n      }\n      posRef.current = positions;\n      rotRef.current = rotations;\n      setInit(true);\n    };\n  }, [meshRef, onError, setWaiting]);\n  useFrame(() => {\n    if (!meshRef.current) return;\n    const uniforms = meshRef.current.material.uniforms;\n    if (progress.current >= 0) {\n      progress.current += 0.01;\n      uniforms.progress.value = d3.easeCubicInOut(progress.current);\n      if (progress.current > 1) {\n        progress.current = -1;\n        uniforms.progress.value = -1;\n        setWaiting(false);\n      }\n    }\n    uniforms.index.value--;\n    if (uniforms.index.value === 0) uniforms.index.value = length;\n  });\n  return useMemo(() => {\n    if (!init) return [];\n    const length = posRef.current.length;\n    const prefab = new THREE.ConeBufferGeometry(0.003, 0.01, 3);\n    const geometry = new InstancedPrefabBufferGeometry(prefab, length);\n    geometry.createAttribute(\"prevPos\", 3);\n    geometry.createAttribute(\"prevRot\", 3);\n    const positionBuffer = geometry.createAttribute(\"pos\", 3);\n    const rotationBuffer = geometry.createAttribute(\"rot\", 3);\n    const referenceBuffer = geometry.createAttribute(\"ref\", 1);\n\n    //loop through all new points\n    for (let i = 0; i < length; i++) {\n      geometry.setPrefabData(positionBuffer, i, posRef.current[i]);\n      geometry.setPrefabData(rotationBuffer, i, rotRef.current[i]);\n      geometry.setPrefabData(referenceBuffer, i, [i]);\n    }\n    const material = new StandardAnimationMaterial({\n      roughness: 0.9,\n      metalness: 0.1,\n      uniforms: {\n        progress: {\n          value: -1\n        },\n        index: {\n          value: length\n        },\n        length: {\n          value: length\n        },\n        a: {\n          value: 1103515245\n        },\n        c: {\n          value: 12345\n        },\n        m: {\n          value: 2593123487\n        },\n        xAxis: {\n          value: [1.0, 0.0, 0.0]\n        },\n        yAxis: {\n          value: [0.0, 1.0, 0.0]\n        },\n        zAxis: {\n          value: [0.0, 0.0, 1.0]\n        }\n      },\n      vertexParameters: [\"uniform float progress;\", \"uniform float index;\", \"uniform float length;\", \"uniform float a;\", \"uniform float c;\", \"uniform float m;\", \"uniform vec3 xAxis;\", \"uniform vec3 yAxis;\", \"uniform vec3 zAxis;\", \"attribute float ref;\", \"attribute vec3 pos;\", \"attribute vec3 prevPos;\", \"attribute vec3 prevRot;\", \"attribute vec3 rot;\", \"float rand(float seed) {\", \"float random1 = fract(((a * seed + c) / m));\", \"return (0.5 - random1) * 0.015;\", \"}\"],\n      vertexNormal: [\"vec3 rotation;\", \"if(progress > 0.0) {\", \"rotation = mix(prevRot, rot, progress);\", \"} else {\", \"rotation = rot;\", \"};\", \"vec4 quatZ = quatFromAxisAngle(zAxis, rotation.z);\", \"objectNormal  = rotateVector(quatZ, objectNormal );\", \"vec4 quatY = quatFromAxisAngle(yAxis, rotation.y);\", \"objectNormal  = rotateVector(quatY, objectNormal );\", \"vec4 quatX = quatFromAxisAngle(xAxis, rotation.x);\", \"objectNormal  = rotateVector(quatX, objectNormal );\"],\n      vertexPosition: [\"vec3 offset;\", \"float ind1 = mod((ref + index) , length);\", \"offset.x = rand(ind1);\", \"offset.y = rand(ind1*100.0);\", \"offset.z = rand(ind1*300.0);\", \"transformed = rotateVector(quatZ, transformed);\", \"transformed = rotateVector(quatY, transformed);\", \"transformed = rotateVector(quatX, transformed);\", \"if(progress > 0.0) {\", \"transformed += mix(prevPos + offset, pos + offset, progress);\", \"} else {\", \"transformed += pos + offset;\", \"};\"],\n      vertexFunctions: [ShaderChunk[\"quaternion_rotation\"]],\n      color: \"white\",\n      blending: AdditiveBlending\n    });\n    geometry.computeVertexNormals();\n    geometryRef.current && geometryRef.current.dispose();\n    materialRef.current && materialRef.current.dispose();\n    geometryRef.current = geometry;\n    materialRef.current = material;\n    return [meshRef, geometry, material];\n  }, [init]);\n};\n_s(useBufferAnimation, \"bnIAcQTKrU6/J5sfm3nT8L7g1pY=\", false, function () {\n  return [useFrame];\n});","map":{"version":3,"names":["THREE","useEffect","useMemo","useRef","useState","useFrame","d3","InstancedPrefabBufferGeometry","ShaderChunk","StandardAnimationMaterial","AdditiveBlending","worker","Worker","length","useBufferAnimation","parameters","setWaiting","onError","_s","meshRef","posRef","rotRef","progress","geometryRef","materialRef","curId","prevId","init","setInit","current","id","postMessage","updateGeo","name","array","geometry","buffer","attributes","i","setPrefabData","needsUpdate","onmessage","e","error","positions","rotations","data","uniforms","material","value","easeCubicInOut","index","prefab","ConeBufferGeometry","createAttribute","positionBuffer","rotationBuffer","referenceBuffer","roughness","metalness","a","c","m","xAxis","yAxis","zAxis","vertexParameters","vertexNormal","vertexPosition","vertexFunctions","color","blending","computeVertexNormals","dispose"],"sources":["C:/Users/Aviral Chawla/Downloads/Attractors-buffer/Attractors-buffer/src/Particles/useBufferAnimation.js"],"sourcesContent":["import * as THREE from \"three\";\r\nimport { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport * as d3 from \"d3-ease\";\r\n\r\nimport {\r\n  InstancedPrefabBufferGeometry,\r\n  ShaderChunk,\r\n  StandardAnimationMaterial,\r\n} from \"three-bas\";\r\nimport { AdditiveBlending } from \"three\";\r\n\r\nconst worker = new Worker(\"./attractors/attractors.js\");\r\n\r\nconst length = 25000;\r\n\r\nexport const useBufferAnimation = ({ parameters, setWaiting, onError }) => {\r\n  const meshRef = useRef();\r\n  const posRef = useRef();\r\n  const rotRef = useRef();\r\n  const progress = useRef(-1);\r\n\r\n  const geometryRef = useRef(null);\r\n  const materialRef = useRef(null);\r\n  const curId = useRef(null);\r\n  const prevId = useRef(null);\r\n\r\n  const [init, setInit] = useState(false);\r\n\r\n  useEffect(() => {\r\n    curId.current = parameters.id;\r\n    if (!parameters || curId.current === prevId.current) return;\r\n    worker.postMessage({ parameters, length });\r\n  }, [parameters]);\r\n\r\n  useEffect(() => {\r\n    const updateGeo = (name, array) => {\r\n      const geometry = geometryRef.current;\r\n      const buffer = geometry.attributes[name];\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        geometry.setPrefabData(buffer, i, array[i]);\r\n      }\r\n      buffer.needsUpdate = true;\r\n    };\r\n\r\n    worker.onmessage = (e) => {\r\n      const { error, positions, rotations } = e.data;\r\n      if (error) {\r\n        setWaiting(false);\r\n        onError();\r\n        return;\r\n      }\r\n      prevId.current = curId.current;\r\n      //only update geo if it already exists\r\n      if (posRef.current) {\r\n        updateGeo(\"prevPos\", posRef.current);\r\n        updateGeo(\"prevRot\", rotRef.current);\r\n        updateGeo(\"pos\", positions);\r\n        updateGeo(\"rot\", rotations);\r\n        progress.current = 0;\r\n      }\r\n      posRef.current = positions;\r\n      rotRef.current = rotations;\r\n      setInit(true);\r\n    };\r\n  }, [meshRef, onError, setWaiting]);\r\n\r\n  useFrame(() => {\r\n    if (!meshRef.current) return;\r\n    const uniforms = meshRef.current.material.uniforms;\r\n    if (progress.current >= 0) {\r\n      progress.current += 0.01;\r\n      uniforms.progress.value = d3.easeCubicInOut(progress.current);\r\n      if (progress.current > 1) {\r\n        progress.current = -1;\r\n        uniforms.progress.value = -1;\r\n        setWaiting(false);\r\n      }\r\n    }\r\n    uniforms.index.value--;\r\n    if (uniforms.index.value === 0) uniforms.index.value = length;\r\n  });\r\n\r\n  return useMemo(() => {\r\n    if (!init) return [];\r\n    const length = posRef.current.length;\r\n\r\n    const prefab = new THREE.ConeBufferGeometry(0.003, 0.01, 3);\r\n    const geometry = new InstancedPrefabBufferGeometry(prefab, length);\r\n\r\n    geometry.createAttribute(\"prevPos\", 3);\r\n    geometry.createAttribute(\"prevRot\", 3);\r\n    const positionBuffer = geometry.createAttribute(\"pos\", 3);\r\n    const rotationBuffer = geometry.createAttribute(\"rot\", 3);\r\n    const referenceBuffer = geometry.createAttribute(\"ref\", 1);\r\n\r\n    //loop through all new points\r\n    for (let i = 0; i < length; i++) {\r\n      geometry.setPrefabData(positionBuffer, i, posRef.current[i]);\r\n      geometry.setPrefabData(rotationBuffer, i, rotRef.current[i]);\r\n      geometry.setPrefabData(referenceBuffer, i, [i]);\r\n    }\r\n\r\n    const material = new StandardAnimationMaterial({\r\n      roughness: 0.9,\r\n      metalness: 0.1,\r\n      uniforms: {\r\n        progress: { value: -1 },\r\n        index: { value: length },\r\n        length: { value: length },\r\n        a: { value: 1103515245 },\r\n        c: { value: 12345 },\r\n        m: { value: 2593123487 },\r\n        xAxis: { value: [1.0, 0.0, 0.0] },\r\n        yAxis: { value: [0.0, 1.0, 0.0] },\r\n        zAxis: { value: [0.0, 0.0, 1.0] },\r\n      },\r\n      vertexParameters: [\r\n        \"uniform float progress;\",\r\n        \"uniform float index;\",\r\n        \"uniform float length;\",\r\n\r\n        \"uniform float a;\",\r\n        \"uniform float c;\",\r\n        \"uniform float m;\",\r\n\r\n        \"uniform vec3 xAxis;\",\r\n        \"uniform vec3 yAxis;\",\r\n        \"uniform vec3 zAxis;\",\r\n\r\n        \"attribute float ref;\",\r\n        \"attribute vec3 pos;\",\r\n        \"attribute vec3 prevPos;\",\r\n        \"attribute vec3 prevRot;\",\r\n        \"attribute vec3 rot;\",\r\n\r\n        \"float rand(float seed) {\",\r\n        \"float random1 = fract(((a * seed + c) / m));\",\r\n        \"return (0.5 - random1) * 0.015;\",\r\n        \"}\",\r\n      ],\r\n      vertexNormal: [\r\n        \"vec3 rotation;\",\r\n        \"if(progress > 0.0) {\",\r\n        \"rotation = mix(prevRot, rot, progress);\",\r\n        \"} else {\",\r\n        \"rotation = rot;\",\r\n        \"};\",\r\n        \"vec4 quatZ = quatFromAxisAngle(zAxis, rotation.z);\",\r\n        \"objectNormal  = rotateVector(quatZ, objectNormal );\",\r\n\r\n        \"vec4 quatY = quatFromAxisAngle(yAxis, rotation.y);\",\r\n        \"objectNormal  = rotateVector(quatY, objectNormal );\",\r\n\r\n        \"vec4 quatX = quatFromAxisAngle(xAxis, rotation.x);\",\r\n        \"objectNormal  = rotateVector(quatX, objectNormal );\",\r\n      ],\r\n      vertexPosition: [\r\n        \"vec3 offset;\",\r\n        \"float ind1 = mod((ref + index) , length);\",\r\n        \"offset.x = rand(ind1);\",\r\n        \"offset.y = rand(ind1*100.0);\",\r\n        \"offset.z = rand(ind1*300.0);\",\r\n\r\n        \"transformed = rotateVector(quatZ, transformed);\",\r\n        \"transformed = rotateVector(quatY, transformed);\",\r\n        \"transformed = rotateVector(quatX, transformed);\",\r\n\r\n        \"if(progress > 0.0) {\",\r\n        \"transformed += mix(prevPos + offset, pos + offset, progress);\",\r\n        \"} else {\",\r\n        \"transformed += pos + offset;\",\r\n        \"};\",\r\n      ],\r\n      vertexFunctions: [ShaderChunk[\"quaternion_rotation\"]],\r\n      color: \"white\",\r\n      blending: AdditiveBlending,\r\n    });\r\n    geometry.computeVertexNormals();\r\n\r\n    geometryRef.current && geometryRef.current.dispose();\r\n    materialRef.current && materialRef.current.dispose();\r\n    geometryRef.current = geometry;\r\n    materialRef.current = material;\r\n    return [meshRef, geometry, material];\r\n  }, [init]);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}