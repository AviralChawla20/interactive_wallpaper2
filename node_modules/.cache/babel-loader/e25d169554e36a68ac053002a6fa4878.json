{"ast":null,"code":"import { UniformsUtils, ShaderMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nclass TexturePass extends Pass {\n  constructor(map, opacity) {\n    super();\n    const shader = CopyShader;\n    this.map = map;\n    this.opacity = opacity !== void 0 ? opacity : 1;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      depthTest: false,\n      depthWrite: false,\n      premultipliedAlpha: true\n    });\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(null);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    this.fsQuad.material = this.material;\n    this.uniforms[\"opacity\"].value = this.opacity;\n    this.uniforms[\"tDiffuse\"].value = this.map;\n    this.material.transparent = this.opacity < 1;\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n    renderer.autoClear = oldAutoClear;\n  }\n  dispose() {\n    this.material.dispose();\n    this.fsQuad.dispose();\n  }\n}\nexport { TexturePass };","map":{"version":3,"sources":["../../src/postprocessing/TexturePass.js"],"names":[],"mappings":";;;AAIA,MAAM,WAAA,SAAoB,IAAA,CAAK;EAC7B,WAAA,CAAY,GAAA,EAAK,OAAA,EAAS;IACxB,KAAA,CAAO,CAAA;IAEP,MAAM,MAAA,GAAS,UAAA;IAEf,IAAA,CAAK,GAAA,GAAM,GAAA;IACX,IAAA,CAAK,OAAA,GAAU,OAAA,KAAY,KAAA,CAAA,GAAY,OAAA,GAAU,CAAA;IAEjD,IAAA,CAAK,QAAA,GAAW,aAAA,CAAc,KAAA,CAAM,MAAA,CAAO,QAAQ,CAAA;IAEnD,IAAA,CAAK,QAAA,GAAW,IAAI,cAAA,CAAe;MACjC,QAAA,EAAU,IAAA,CAAK,QAAA;MACf,YAAA,EAAc,MAAA,CAAO,YAAA;MACrB,cAAA,EAAgB,MAAA,CAAO,cAAA;MACvB,SAAA,EAAW,KAAA;MACX,UAAA,EAAY,KAAA;MACZ,kBAAA,EAAoB;IAC1B,CAAK,CAAA;IAED,IAAA,CAAK,SAAA,GAAY,KAAA;IAEjB,IAAA,CAAK,MAAA,GAAS,IAAI,cAAA,CAAe,IAAI,CAAA;EACtC;EAED,MAAA,CAAO,QAAA,EAAU,WAAA,EAAa,UAAA,EAAyC;IACrE,MAAM,YAAA,GAAe,QAAA,CAAS,SAAA;IAC9B,QAAA,CAAS,SAAA,GAAY,KAAA;IAErB,IAAA,CAAK,MAAA,CAAO,QAAA,GAAW,IAAA,CAAK,QAAA;IAE5B,IAAA,CAAK,QAAA,CAAS,SAAS,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,OAAA;IACtC,IAAA,CAAK,QAAA,CAAS,UAAU,CAAA,CAAE,KAAA,GAAQ,IAAA,CAAK,GAAA;IACvC,IAAA,CAAK,QAAA,CAAS,WAAA,GAAc,IAAA,CAAK,OAAA,GAAU,CAAA;IAE3C,QAAA,CAAS,eAAA,CAAgB,IAAA,CAAK,cAAA,GAAiB,IAAA,GAAO,UAAU,CAAA;IAChE,IAAI,IAAA,CAAK,KAAA,EAAO,QAAA,CAAS,KAAA,CAAO,CAAA;IAChC,IAAA,CAAK,MAAA,CAAO,MAAA,CAAO,QAAQ,CAAA;IAE3B,QAAA,CAAS,SAAA,GAAY,YAAA;EACtB;EAED,OAAA,CAAA,EAAU;IACR,IAAA,CAAK,QAAA,CAAS,OAAA,CAAS,CAAA;IAEvB,IAAA,CAAK,MAAA,CAAO,OAAA,CAAS,CAAA;EACtB;AACH","sourcesContent":["import { ShaderMaterial, UniformsUtils } from 'three'\nimport { Pass, FullScreenQuad } from './Pass'\nimport { CopyShader } from '../shaders/CopyShader'\n\nclass TexturePass extends Pass {\n  constructor(map, opacity) {\n    super()\n\n    const shader = CopyShader\n\n    this.map = map\n    this.opacity = opacity !== undefined ? opacity : 1.0\n\n    this.uniforms = UniformsUtils.clone(shader.uniforms)\n\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      depthTest: false,\n      depthWrite: false,\n      premultipliedAlpha: true,\n    })\n\n    this.needsSwap = false\n\n    this.fsQuad = new FullScreenQuad(null)\n  }\n\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n    const oldAutoClear = renderer.autoClear\n    renderer.autoClear = false\n\n    this.fsQuad.material = this.material\n\n    this.uniforms['opacity'].value = this.opacity\n    this.uniforms['tDiffuse'].value = this.map\n    this.material.transparent = this.opacity < 1.0\n\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer)\n    if (this.clear) renderer.clear()\n    this.fsQuad.render(renderer)\n\n    renderer.autoClear = oldAutoClear\n  }\n\n  dispose() {\n    this.material.dispose()\n\n    this.fsQuad.dispose()\n  }\n}\n\nexport { TexturePass }\n"]},"metadata":{},"sourceType":"module"}