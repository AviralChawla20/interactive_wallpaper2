{"ast":null,"code":"import { ExtrudeGeometry } from \"three\";\nclass TextGeometry extends ExtrudeGeometry {\n  constructor(text, parameters = {}) {\n    const {\n      bevelEnabled = false,\n      bevelSize = 8,\n      bevelThickness = 10,\n      font,\n      height = 50,\n      size = 100,\n      lineHeight = 1,\n      letterSpacing = 0,\n      ...rest\n    } = parameters;\n    if (font === void 0) {\n      super();\n    } else {\n      const shapes = font.generateShapes(text, size, {\n        lineHeight,\n        letterSpacing\n      });\n      super(shapes, {\n        ...rest,\n        bevelEnabled,\n        bevelSize,\n        bevelThickness,\n        depth: height\n      });\n    }\n    this.type = \"TextGeometry\";\n  }\n}\nexport { TextGeometry as TextBufferGeometry, TextGeometry };","map":{"version":3,"sources":["../../src/geometries/TextGeometry.ts"],"names":[],"mappings":";AAiBO,MAAM,YAAA,SAAqB,eAAA,CAAgB;EAChD,WAAA,CAAY,IAAA,EAAc,UAAA,GAAqC,CAAA,CAAA,EAA8B;IACrF,MAAA;MACJ,YAAA,GAAe,KAAA;MACf,SAAA,GAAY,CAAA;MACZ,cAAA,GAAiB,EAAA;MACjB,IAAA;MACA,MAAA,GAAS,EAAA;MACT,IAAA,GAAO,GAAA;MACP,UAAA,GAAa,CAAA;MACb,aAAA,GAAgB,CAAA;MAChB,GAAG;IACD,CAAA,GAAA,UAAA;IAEJ,IAAI,IAAA,KAAS,KAAA,CAAA,EAAW;MAEhB,KAAA,CAAA,CAAA;IAAA,CAAA,MACD;MACC,MAAA,MAAA,GAAS,IAAA,CAAK,cAAA,CAAe,IAAA,EAAM,IAAA,EAAM;QAAE,UAAA;QAAY;MAAA,CAAe,CAAA;MACtE,KAAA,CAAA,MAAA,EAAQ;QAAE,GAAG,IAAA;QAAM,YAAA;QAAc,SAAA;QAAW,cAAA;QAAgB,KAAA,EAAO;MAAA,CAAQ,CAAA;IACnF;IAEA,IAAA,CAAK,IAAA,GAAO,cAAA;EACd;AACF","sourcesContent":["import { ExtrudeGeometry } from 'three'\n\nimport type { Font } from '../loaders/FontLoader'\n\nexport type TextGeometryParameters = {\n  bevelEnabled?: boolean\n  bevelOffset?: number\n  bevelSize?: number\n  bevelThickness?: number\n  curveSegments?: number\n  font: Font\n  height?: number\n  size?: number\n  lineHeight?: number\n  letterSpacing?: number\n}\n\nexport class TextGeometry extends ExtrudeGeometry {\n  constructor(text: string, parameters: TextGeometryParameters = {} as TextGeometryParameters) {\n    const {\n      bevelEnabled = false,\n      bevelSize = 8,\n      bevelThickness = 10,\n      font,\n      height = 50,\n      size = 100,\n      lineHeight = 1,\n      letterSpacing = 0,\n      ...rest\n    } = parameters\n\n    if (font === undefined) {\n      // @ts-ignore\n      super() // generate default extrude geometry\n    } else {\n      const shapes = font.generateShapes(text, size, { lineHeight, letterSpacing })\n      super(shapes, { ...rest, bevelEnabled, bevelSize, bevelThickness, depth: height })\n    }\n    // @ts-ignore\n    this.type = 'TextGeometry'\n  }\n}\n\nexport { TextGeometry as TextBufferGeometry }\n"]},"metadata":{},"sourceType":"module"}