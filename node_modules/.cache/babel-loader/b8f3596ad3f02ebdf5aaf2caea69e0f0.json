{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color } from \"three\";\nimport { Pass } from \"./Pass.js\";\nclass RenderPass extends Pass {\n  constructor(scene, camera, overrideMaterial, clearColor, clearAlpha = 0) {\n    super();\n    __publicField(this, \"scene\");\n    __publicField(this, \"camera\");\n    __publicField(this, \"overrideMaterial\");\n    __publicField(this, \"clearColor\");\n    __publicField(this, \"clearAlpha\");\n    __publicField(this, \"clearDepth\", false);\n    __publicField(this, \"_oldClearColor\", new Color());\n    this.scene = scene;\n    this.camera = camera;\n    this.overrideMaterial = overrideMaterial;\n    this.clearColor = clearColor;\n    this.clearAlpha = clearAlpha;\n    this.clear = true;\n    this.needsSwap = false;\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    let oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    let oldClearAlpha;\n    let oldOverrideMaterial = null;\n    if (this.overrideMaterial !== void 0) {\n      oldOverrideMaterial = this.scene.overrideMaterial;\n      this.scene.overrideMaterial = this.overrideMaterial;\n    }\n    if (this.clearColor) {\n      renderer.getClearColor(this._oldClearColor);\n      oldClearAlpha = renderer.getClearAlpha();\n      renderer.setClearColor(this.clearColor, this.clearAlpha);\n    }\n    if (this.clearDepth) {\n      renderer.clearDepth();\n    }\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n    if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n    renderer.render(this.scene, this.camera);\n    if (this.clearColor) {\n      renderer.setClearColor(this._oldClearColor, oldClearAlpha);\n    }\n    if (this.overrideMaterial !== void 0) {\n      this.scene.overrideMaterial = oldOverrideMaterial;\n    }\n    renderer.autoClear = oldAutoClear;\n  }\n}\nexport { RenderPass };","map":{"version":3,"sources":["../../src/postprocessing/RenderPass.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAGA,MAAM,UAAA,SAAmB,IAAA,CAAK;EAS5B,WAAA,CAAY,KAAA,EAAc,MAAA,EAAgB,gBAAA,EAA6B,UAAA,EAAoB,UAAA,GAAa,CAAA,EAAG;IACnG,KAAA,CAAA,CAAA;IATD,aAAA,CAAA,IAAA,EAAA,OAAA,CAAA;IACA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;IACA,aAAA,CAAA,IAAA,EAAA,kBAAA,CAAA;IACA,aAAA,CAAA,IAAA,EAAA,YAAA,CAAA;IACA,aAAA,CAAA,IAAA,EAAA,YAAA,CAAA;IACA,aAAA,CAAA,IAAA,EAAA,YAAA,EAAa,KAAA,CAAA;IACZ,aAAA,CAAA,IAAA,EAAA,gBAAA,EAAiB,IAAI,KAAA,CAAA,CAAA,CAAA;IAK3B,IAAA,CAAK,KAAA,GAAQ,KAAA;IACb,IAAA,CAAK,MAAA,GAAS,MAAA;IAEd,IAAA,CAAK,gBAAA,GAAmB,gBAAA;IAExB,IAAA,CAAK,UAAA,GAAa,UAAA;IAClB,IAAA,CAAK,UAAA,GAAa,UAAA;IAElB,IAAA,CAAK,KAAA,GAAQ,IAAA;IACb,IAAA,CAAK,SAAA,GAAY,KAAA;EACnB;EAEO,MAAA,CACL,QAAA,EACA,WAAA,EACA,UAAA,EACM;IACN,IAAI,YAAA,GAAe,QAAA,CAAS,SAAA;IAC5B,QAAA,CAAS,SAAA,GAAY,KAAA;IAEjB,IAAA,aAAA;IACJ,IAAI,mBAAA,GAAuC,IAAA;IAEvC,IAAA,IAAA,CAAK,gBAAA,KAAqB,KAAA,CAAA,EAAW;MACvC,mBAAA,GAAsB,IAAA,CAAK,KAAA,CAAM,gBAAA;MAE5B,IAAA,CAAA,KAAA,CAAM,gBAAA,GAAmB,IAAA,CAAK,gBAAA;IACrC;IAEA,IAAI,IAAA,CAAK,UAAA,EAAY;MACV,QAAA,CAAA,aAAA,CAAc,IAAA,CAAK,cAAc,CAAA;MAC1C,aAAA,GAAgB,QAAA,CAAS,aAAA,CAAA,CAAA;MAEzB,QAAA,CAAS,aAAA,CAAc,IAAA,CAAK,UAAA,EAAY,IAAA,CAAK,UAAU,CAAA;IACzD;IAEA,IAAI,IAAA,CAAK,UAAA,EAAY;MACnB,QAAA,CAAS,UAAA,CAAW,CAAA;IACtB;IAEA,QAAA,CAAS,eAAA,CAAgB,IAAA,CAAK,cAAA,GAAiB,IAAA,GAAO,UAAU,CAAA;IAGhE,IAAI,IAAA,CAAK,KAAA,EAAO,QAAA,CAAS,KAAA,CAAM,QAAA,CAAS,cAAA,EAAgB,QAAA,CAAS,cAAA,EAAgB,QAAA,CAAS,gBAAgB,CAAA;IAC1G,QAAA,CAAS,MAAA,CAAO,IAAA,CAAK,KAAA,EAAO,IAAA,CAAK,MAAM,CAAA;IAEvC,IAAI,IAAA,CAAK,UAAA,EAAY;MACV,QAAA,CAAA,aAAA,CAAc,IAAA,CAAK,cAAA,EAAgB,aAAa,CAAA;IAC3D;IAEI,IAAA,IAAA,CAAK,gBAAA,KAAqB,KAAA,CAAA,EAAW;MACvC,IAAA,CAAK,KAAA,CAAM,gBAAA,GAAmB,mBAAA;IAChC;IAEA,QAAA,CAAS,SAAA,GAAY,YAAA;EACvB;AACF","sourcesContent":["import { Camera, Color, Material, Scene, WebGLRenderTarget, WebGLRenderer } from 'three'\nimport { Pass } from './Pass'\n\nclass RenderPass extends Pass {\n  public scene: Scene\n  public camera: Camera\n  public overrideMaterial: Material | undefined\n  public clearColor: Color | undefined\n  public clearAlpha: number\n  public clearDepth = false\n  private _oldClearColor = new Color()\n\n  constructor(scene: Scene, camera: Camera, overrideMaterial?: Material, clearColor?: Color, clearAlpha = 0) {\n    super()\n\n    this.scene = scene\n    this.camera = camera\n\n    this.overrideMaterial = overrideMaterial\n\n    this.clearColor = clearColor\n    this.clearAlpha = clearAlpha\n\n    this.clear = true\n    this.needsSwap = false\n  }\n\n  public render(\n    renderer: WebGLRenderer,\n    writeBuffer: WebGLRenderTarget,\n    readBuffer: WebGLRenderTarget /*, deltaTime, maskActive */,\n  ): void {\n    let oldAutoClear = renderer.autoClear\n    renderer.autoClear = false\n\n    let oldClearAlpha\n    let oldOverrideMaterial: Material | null = null\n\n    if (this.overrideMaterial !== undefined) {\n      oldOverrideMaterial = this.scene.overrideMaterial\n\n      this.scene.overrideMaterial = this.overrideMaterial\n    }\n\n    if (this.clearColor) {\n      renderer.getClearColor(this._oldClearColor)\n      oldClearAlpha = renderer.getClearAlpha()\n\n      renderer.setClearColor(this.clearColor, this.clearAlpha)\n    }\n\n    if (this.clearDepth) {\n      renderer.clearDepth()\n    }\n\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer)\n\n    // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n    if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil)\n    renderer.render(this.scene, this.camera)\n\n    if (this.clearColor) {\n      renderer.setClearColor(this._oldClearColor, oldClearAlpha)\n    }\n\n    if (this.overrideMaterial !== undefined) {\n      this.scene.overrideMaterial = oldOverrideMaterial\n    }\n\n    renderer.autoClear = oldAutoClear\n  }\n}\n\nexport { RenderPass }\n"]},"metadata":{},"sourceType":"module"}