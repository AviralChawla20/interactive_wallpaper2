{"ast":null,"code":"import { Mesh, Vector3, Color, FrontSide, Plane, Matrix4, Vector4, PerspectiveCamera, WebGLRenderTarget, UniformsUtils, UniformsLib, REVISION, ShaderMaterial } from \"three\";\nclass Water extends Mesh {\n  constructor(geometry, options = {}) {\n    super(geometry);\n    this.isWater = true;\n    const scope = this;\n    const textureWidth = options.textureWidth !== void 0 ? options.textureWidth : 512;\n    const textureHeight = options.textureHeight !== void 0 ? options.textureHeight : 512;\n    const clipBias = options.clipBias !== void 0 ? options.clipBias : 0;\n    const alpha = options.alpha !== void 0 ? options.alpha : 1;\n    const time = options.time !== void 0 ? options.time : 0;\n    const normalSampler = options.waterNormals !== void 0 ? options.waterNormals : null;\n    const sunDirection = options.sunDirection !== void 0 ? options.sunDirection : new Vector3(0.70707, 0.70707, 0);\n    const sunColor = new Color(options.sunColor !== void 0 ? options.sunColor : 16777215);\n    const waterColor = new Color(options.waterColor !== void 0 ? options.waterColor : 8355711);\n    const eye = options.eye !== void 0 ? options.eye : new Vector3(0, 0, 0);\n    const distortionScale = options.distortionScale !== void 0 ? options.distortionScale : 20;\n    const side = options.side !== void 0 ? options.side : FrontSide;\n    const fog = options.fog !== void 0 ? options.fog : false;\n    const mirrorPlane = new Plane();\n    const normal = new Vector3();\n    const mirrorWorldPosition = new Vector3();\n    const cameraWorldPosition = new Vector3();\n    const rotationMatrix = new Matrix4();\n    const lookAtPosition = new Vector3(0, 0, -1);\n    const clipPlane = new Vector4();\n    const view = new Vector3();\n    const target = new Vector3();\n    const q = new Vector4();\n    const textureMatrix = new Matrix4();\n    const mirrorCamera = new PerspectiveCamera();\n    const renderTarget = new WebGLRenderTarget(textureWidth, textureHeight);\n    const mirrorShader = {\n      uniforms: UniformsUtils.merge([UniformsLib[\"fog\"], UniformsLib[\"lights\"], {\n        normalSampler: {\n          value: null\n        },\n        mirrorSampler: {\n          value: null\n        },\n        alpha: {\n          value: 1\n        },\n        time: {\n          value: 0\n        },\n        size: {\n          value: 1\n        },\n        distortionScale: {\n          value: 20\n        },\n        textureMatrix: {\n          value: new Matrix4()\n        },\n        sunColor: {\n          value: new Color(8355711)\n        },\n        sunDirection: {\n          value: new Vector3(0.70707, 0.70707, 0)\n        },\n        eye: {\n          value: new Vector3()\n        },\n        waterColor: {\n          value: new Color(5592405)\n        }\n      }]),\n      vertexShader: (/* glsl */\n      `\n\t\t\t\tuniform mat4 textureMatrix;\n\t\t\t\tuniform float time;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <shadowmap_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tmirrorCoord = modelMatrix * vec4( position, 1.0 );\n\t\t\t\t\tworldPosition = mirrorCoord.xyzw;\n\t\t\t\t\tmirrorCoord = textureMatrix * mirrorCoord;\n\t\t\t\t\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t#include <beginnormal_vertex>\n\t\t\t\t#include <defaultnormal_vertex>\n\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t#include <fog_vertex>\n\t\t\t\t#include <shadowmap_vertex>\n\t\t\t}`),\n      fragmentShader: (/* glsl */\n      `\n\t\t\t\tuniform sampler2D mirrorSampler;\n\t\t\t\tuniform float alpha;\n\t\t\t\tuniform float time;\n\t\t\t\tuniform float size;\n\t\t\t\tuniform float distortionScale;\n\t\t\t\tuniform sampler2D normalSampler;\n\t\t\t\tuniform vec3 sunColor;\n\t\t\t\tuniform vec3 sunDirection;\n\t\t\t\tuniform vec3 eye;\n\t\t\t\tuniform vec3 waterColor;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\tvec4 getNoise( vec2 uv ) {\n\t\t\t\t\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);\n\t\t\t\t\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );\n\t\t\t\t\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );\n\t\t\t\t\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );\n\t\t\t\t\tvec4 noise = texture2D( normalSampler, uv0 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv1 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv2 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv3 );\n\t\t\t\t\treturn noise * 0.5 - 1.0;\n\t\t\t\t}\n\n\t\t\t\tvoid sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {\n\t\t\t\t\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );\n\t\t\t\t\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );\n\t\t\t\t\tspecularColor += pow( direction, shiny ) * sunColor * spec;\n\t\t\t\t\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;\n\t\t\t\t}\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <packing>\n\t\t\t\t#include <bsdfs>\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t\t#include <lights_pars_begin>\n\t\t\t\t#include <shadowmap_pars_fragment>\n\t\t\t\t#include <shadowmask_pars_fragment>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <logdepthbuf_fragment>\n\t\t\t\t\tvec4 noise = getNoise( worldPosition.xz * size );\n\t\t\t\t\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );\n\n\t\t\t\t\tvec3 diffuseLight = vec3(0.0);\n\t\t\t\t\tvec3 specularLight = vec3(0.0);\n\n\t\t\t\t\tvec3 worldToEye = eye-worldPosition.xyz;\n\t\t\t\t\tvec3 eyeDirection = normalize( worldToEye );\n\t\t\t\t\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );\n\n\t\t\t\t\tfloat distance = length(worldToEye);\n\n\t\t\t\t\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;\n\t\t\t\t\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );\n\n\t\t\t\t\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );\n\t\t\t\t\tfloat rf0 = 0.3;\n\t\t\t\t\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );\n\t\t\t\t\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;\n\t\t\t\t\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);\n\t\t\t\t\tvec3 outgoingLight = albedo;\n\t\t\t\t\tgl_FragColor = vec4( outgoingLight, alpha );\n\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <${parseInt(REVISION.replace(/\\D+/g, \"\")) >= 154 ? \"colorspace_fragment\" : \"encodings_fragment\"}>\n\t\t\t\t\t#include <fog_fragment>\t\n\t\t\t\t}`)\n    };\n    const material = new ShaderMaterial({\n      fragmentShader: mirrorShader.fragmentShader,\n      vertexShader: mirrorShader.vertexShader,\n      uniforms: UniformsUtils.clone(mirrorShader.uniforms),\n      lights: true,\n      side,\n      fog\n    });\n    material.uniforms[\"mirrorSampler\"].value = renderTarget.texture;\n    material.uniforms[\"textureMatrix\"].value = textureMatrix;\n    material.uniforms[\"alpha\"].value = alpha;\n    material.uniforms[\"time\"].value = time;\n    material.uniforms[\"normalSampler\"].value = normalSampler;\n    material.uniforms[\"sunColor\"].value = sunColor;\n    material.uniforms[\"waterColor\"].value = waterColor;\n    material.uniforms[\"sunDirection\"].value = sunDirection;\n    material.uniforms[\"distortionScale\"].value = distortionScale;\n    material.uniforms[\"eye\"].value = eye;\n    scope.material = material;\n    scope.onBeforeRender = function (renderer, scene, camera) {\n      mirrorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n      cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n      rotationMatrix.extractRotation(scope.matrixWorld);\n      normal.set(0, 0, 1);\n      normal.applyMatrix4(rotationMatrix);\n      view.subVectors(mirrorWorldPosition, cameraWorldPosition);\n      if (view.dot(normal) > 0) return;\n      view.reflect(normal).negate();\n      view.add(mirrorWorldPosition);\n      rotationMatrix.extractRotation(camera.matrixWorld);\n      lookAtPosition.set(0, 0, -1);\n      lookAtPosition.applyMatrix4(rotationMatrix);\n      lookAtPosition.add(cameraWorldPosition);\n      target.subVectors(mirrorWorldPosition, lookAtPosition);\n      target.reflect(normal).negate();\n      target.add(mirrorWorldPosition);\n      mirrorCamera.position.copy(view);\n      mirrorCamera.up.set(0, 1, 0);\n      mirrorCamera.up.applyMatrix4(rotationMatrix);\n      mirrorCamera.up.reflect(normal);\n      mirrorCamera.lookAt(target);\n      mirrorCamera.far = camera.far;\n      mirrorCamera.updateMatrixWorld();\n      mirrorCamera.projectionMatrix.copy(camera.projectionMatrix);\n      textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);\n      textureMatrix.multiply(mirrorCamera.projectionMatrix);\n      textureMatrix.multiply(mirrorCamera.matrixWorldInverse);\n      mirrorPlane.setFromNormalAndCoplanarPoint(normal, mirrorWorldPosition);\n      mirrorPlane.applyMatrix4(mirrorCamera.matrixWorldInverse);\n      clipPlane.set(mirrorPlane.normal.x, mirrorPlane.normal.y, mirrorPlane.normal.z, mirrorPlane.constant);\n      const projectionMatrix = mirrorCamera.projectionMatrix;\n      q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n      q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n      q.z = -1;\n      q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];\n      clipPlane.multiplyScalar(2 / clipPlane.dot(q));\n      projectionMatrix.elements[2] = clipPlane.x;\n      projectionMatrix.elements[6] = clipPlane.y;\n      projectionMatrix.elements[10] = clipPlane.z + 1 - clipBias;\n      projectionMatrix.elements[14] = clipPlane.w;\n      eye.setFromMatrixPosition(camera.matrixWorld);\n      const currentRenderTarget = renderer.getRenderTarget();\n      const currentXrEnabled = renderer.xr.enabled;\n      const currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n      scope.visible = false;\n      renderer.xr.enabled = false;\n      renderer.shadowMap.autoUpdate = false;\n      renderer.setRenderTarget(renderTarget);\n      renderer.state.buffers.depth.setMask(true);\n      if (renderer.autoClear === false) renderer.clear();\n      renderer.render(scene, mirrorCamera);\n      scope.visible = true;\n      renderer.xr.enabled = currentXrEnabled;\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n      renderer.setRenderTarget(currentRenderTarget);\n      const viewport = camera.viewport;\n      if (viewport !== void 0) {\n        renderer.state.viewport(viewport);\n      }\n    };\n  }\n}\nexport { Water };","map":{"version":3,"sources":["../../src/objects/Water.js"],"names":[],"mappings":";AAuBA,MAAM,KAAA,SAAc,IAAA,CAAK;EACvB,WAAA,CAAY,QAAA,EAAU,OAAA,GAAU,CAAA,CAAA,EAAI;IAClC,KAAA,CAAM,QAAQ,CAAA;IAEd,IAAA,CAAK,OAAA,GAAU,IAAA;IAEf,MAAM,KAAA,GAAQ,IAAA;IAEd,MAAM,YAAA,GAAe,OAAA,CAAQ,YAAA,KAAiB,KAAA,CAAA,GAAY,OAAA,CAAQ,YAAA,GAAe,GAAA;IACjF,MAAM,aAAA,GAAgB,OAAA,CAAQ,aAAA,KAAkB,KAAA,CAAA,GAAY,OAAA,CAAQ,aAAA,GAAgB,GAAA;IAEpF,MAAM,QAAA,GAAW,OAAA,CAAQ,QAAA,KAAa,KAAA,CAAA,GAAY,OAAA,CAAQ,QAAA,GAAW,CAAA;IACrE,MAAM,KAAA,GAAQ,OAAA,CAAQ,KAAA,KAAU,KAAA,CAAA,GAAY,OAAA,CAAQ,KAAA,GAAQ,CAAA;IAC5D,MAAM,IAAA,GAAO,OAAA,CAAQ,IAAA,KAAS,KAAA,CAAA,GAAY,OAAA,CAAQ,IAAA,GAAO,CAAA;IACzD,MAAM,aAAA,GAAgB,OAAA,CAAQ,YAAA,KAAiB,KAAA,CAAA,GAAY,OAAA,CAAQ,YAAA,GAAe,IAAA;IAClF,MAAM,YAAA,GAAe,OAAA,CAAQ,YAAA,KAAiB,KAAA,CAAA,GAAY,OAAA,CAAQ,YAAA,GAAe,IAAI,OAAA,CAAQ,OAAA,EAAS,OAAA,EAAS,CAAG,CAAA;IAClH,MAAM,QAAA,GAAW,IAAI,KAAA,CAAM,OAAA,CAAQ,QAAA,KAAa,KAAA,CAAA,GAAY,OAAA,CAAQ,QAAA,GAAW,QAAQ,CAAA;IACvF,MAAM,UAAA,GAAa,IAAI,KAAA,CAAM,OAAA,CAAQ,UAAA,KAAe,KAAA,CAAA,GAAY,OAAA,CAAQ,UAAA,GAAa,OAAQ,CAAA;IAC7F,MAAM,GAAA,GAAM,OAAA,CAAQ,GAAA,KAAQ,KAAA,CAAA,GAAY,OAAA,CAAQ,GAAA,GAAM,IAAI,OAAA,CAAQ,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;IACzE,MAAM,eAAA,GAAkB,OAAA,CAAQ,eAAA,KAAoB,KAAA,CAAA,GAAY,OAAA,CAAQ,eAAA,GAAkB,EAAA;IAC1F,MAAM,IAAA,GAAO,OAAA,CAAQ,IAAA,KAAS,KAAA,CAAA,GAAY,OAAA,CAAQ,IAAA,GAAO,SAAA;IACzD,MAAM,GAAA,GAAM,OAAA,CAAQ,GAAA,KAAQ,KAAA,CAAA,GAAY,OAAA,CAAQ,GAAA,GAAM,KAAA;IAItD,MAAM,WAAA,GAAc,IAAI,KAAA,CAAO,CAAA;IAC/B,MAAM,MAAA,GAAS,IAAI,OAAA,CAAS,CAAA;IAC5B,MAAM,mBAAA,GAAsB,IAAI,OAAA,CAAS,CAAA;IACzC,MAAM,mBAAA,GAAsB,IAAI,OAAA,CAAS,CAAA;IACzC,MAAM,cAAA,GAAiB,IAAI,OAAA,CAAS,CAAA;IACpC,MAAM,cAAA,GAAiB,IAAI,OAAA,CAAQ,CAAA,EAAG,CAAA,EAAG,CAAA,CAAE,CAAA;IAC3C,MAAM,SAAA,GAAY,IAAI,OAAA,CAAS,CAAA;IAE/B,MAAM,IAAA,GAAO,IAAI,OAAA,CAAS,CAAA;IAC1B,MAAM,MAAA,GAAS,IAAI,OAAA,CAAS,CAAA;IAC5B,MAAM,CAAA,GAAI,IAAI,OAAA,CAAS,CAAA;IAEvB,MAAM,aAAA,GAAgB,IAAI,OAAA,CAAS,CAAA;IAEnC,MAAM,YAAA,GAAe,IAAI,iBAAA,CAAmB,CAAA;IAE5C,MAAM,YAAA,GAAe,IAAI,iBAAA,CAAkB,YAAA,EAAc,aAAa,CAAA;IAEtE,MAAM,YAAA,GAAe;MACnB,QAAA,EAAU,aAAA,CAAc,KAAA,CAAM,CAC5B,WAAA,CAAY,KAAK,CAAA,EACjB,WAAA,CAAY,QAAQ,CAAA,EACpB;QACE,aAAA,EAAe;UAAE,KAAA,EAAO;QAAM,CAAA;QAC9B,aAAA,EAAe;UAAE,KAAA,EAAO;QAAM,CAAA;QAC9B,KAAA,EAAO;UAAE,KAAA,EAAO;QAAK,CAAA;QACrB,IAAA,EAAM;UAAE,KAAA,EAAO;QAAK,CAAA;QACpB,IAAA,EAAM;UAAE,KAAA,EAAO;QAAK,CAAA;QACpB,eAAA,EAAiB;UAAE,KAAA,EAAO;QAAM,CAAA;QAChC,aAAA,EAAe;UAAE,KAAA,EAAO,IAAI,OAAA,CAAA;QAAW,CAAA;QACvC,QAAA,EAAU;UAAE,KAAA,EAAO,IAAI,KAAA,CAAM,OAAQ;QAAG,CAAA;QACxC,YAAA,EAAc;UAAE,KAAA,EAAO,IAAI,OAAA,CAAQ,OAAA,EAAS,OAAA,EAAS,CAAC;QAAG,CAAA;QACzD,GAAA,EAAK;UAAE,KAAA,EAAO,IAAI,OAAA,CAAA;QAAW,CAAA;QAC7B,UAAA,EAAY;UAAE,KAAA,EAAO,IAAI,KAAA,CAAM,OAAQ;QAAG;MAC3C,CAAA,CACF,CAAA;MAED,YAAA,GAAA;MAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAA,CAAA;MA0BzB,cAAA,GAAA;MAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAsEhB,QAAA,CAAS,QAAA,CAAS,OAAA,CAAQ,MAAA,EAAQ,EAAE,CAAC,CAAA,IAAK,GAAA,GAAM,qBAAA,GAAwB,oBAAA;AAAA;AAAA,MAAA;IAGpF,CAAA;IAED,MAAM,QAAA,GAAW,IAAI,cAAA,CAAe;MAClC,cAAA,EAAgB,YAAA,CAAa,cAAA;MAC7B,YAAA,EAAc,YAAA,CAAa,YAAA;MAC3B,QAAA,EAAU,aAAA,CAAc,KAAA,CAAM,YAAA,CAAa,QAAQ,CAAA;MACnD,MAAA,EAAQ,IAAA;MACR,IAAA;MACA;IACN,CAAK,CAAA;IAED,QAAA,CAAS,QAAA,CAAS,eAAe,CAAA,CAAE,KAAA,GAAQ,YAAA,CAAa,OAAA;IACxD,QAAA,CAAS,QAAA,CAAS,eAAe,CAAA,CAAE,KAAA,GAAQ,aAAA;IAC3C,QAAA,CAAS,QAAA,CAAS,OAAO,CAAA,CAAE,KAAA,GAAQ,KAAA;IACnC,QAAA,CAAS,QAAA,CAAS,MAAM,CAAA,CAAE,KAAA,GAAQ,IAAA;IAClC,QAAA,CAAS,QAAA,CAAS,eAAe,CAAA,CAAE,KAAA,GAAQ,aAAA;IAC3C,QAAA,CAAS,QAAA,CAAS,UAAU,CAAA,CAAE,KAAA,GAAQ,QAAA;IACtC,QAAA,CAAS,QAAA,CAAS,YAAY,CAAA,CAAE,KAAA,GAAQ,UAAA;IACxC,QAAA,CAAS,QAAA,CAAS,cAAc,CAAA,CAAE,KAAA,GAAQ,YAAA;IAC1C,QAAA,CAAS,QAAA,CAAS,iBAAiB,CAAA,CAAE,KAAA,GAAQ,eAAA;IAE7C,QAAA,CAAS,QAAA,CAAS,KAAK,CAAA,CAAE,KAAA,GAAQ,GAAA;IAEjC,KAAA,CAAM,QAAA,GAAW,QAAA;IAEjB,KAAA,CAAM,cAAA,GAAiB,UAAU,QAAA,EAAU,KAAA,EAAO,MAAA,EAAQ;MACxD,mBAAA,CAAoB,qBAAA,CAAsB,KAAA,CAAM,WAAW,CAAA;MAC3D,mBAAA,CAAoB,qBAAA,CAAsB,MAAA,CAAO,WAAW,CAAA;MAE5D,cAAA,CAAe,eAAA,CAAgB,KAAA,CAAM,WAAW,CAAA;MAEhD,MAAA,CAAO,GAAA,CAAI,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;MAClB,MAAA,CAAO,YAAA,CAAa,cAAc,CAAA;MAElC,IAAA,CAAK,UAAA,CAAW,mBAAA,EAAqB,mBAAmB,CAAA;MAIxD,IAAI,IAAA,CAAK,GAAA,CAAI,MAAM,CAAA,GAAI,CAAA,EAAG;MAE1B,IAAA,CAAK,OAAA,CAAQ,MAAM,CAAA,CAAE,MAAA,CAAQ,CAAA;MAC7B,IAAA,CAAK,GAAA,CAAI,mBAAmB,CAAA;MAE5B,cAAA,CAAe,eAAA,CAAgB,MAAA,CAAO,WAAW,CAAA;MAEjD,cAAA,CAAe,GAAA,CAAI,CAAA,EAAG,CAAA,EAAG,CAAA,CAAE,CAAA;MAC3B,cAAA,CAAe,YAAA,CAAa,cAAc,CAAA;MAC1C,cAAA,CAAe,GAAA,CAAI,mBAAmB,CAAA;MAEtC,MAAA,CAAO,UAAA,CAAW,mBAAA,EAAqB,cAAc,CAAA;MACrD,MAAA,CAAO,OAAA,CAAQ,MAAM,CAAA,CAAE,MAAA,CAAQ,CAAA;MAC/B,MAAA,CAAO,GAAA,CAAI,mBAAmB,CAAA;MAE9B,YAAA,CAAa,QAAA,CAAS,IAAA,CAAK,IAAI,CAAA;MAC/B,YAAA,CAAa,EAAA,CAAG,GAAA,CAAI,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;MAC3B,YAAA,CAAa,EAAA,CAAG,YAAA,CAAa,cAAc,CAAA;MAC3C,YAAA,CAAa,EAAA,CAAG,OAAA,CAAQ,MAAM,CAAA;MAC9B,YAAA,CAAa,MAAA,CAAO,MAAM,CAAA;MAE1B,YAAA,CAAa,GAAA,GAAM,MAAA,CAAO,GAAA;MAE1B,YAAA,CAAa,iBAAA,CAAmB,CAAA;MAChC,YAAA,CAAa,gBAAA,CAAiB,IAAA,CAAK,MAAA,CAAO,gBAAgB,CAAA;MAG1D,aAAA,CAAc,GAAA,CAAI,GAAA,EAAK,CAAA,EAAK,CAAA,EAAK,GAAA,EAAK,CAAA,EAAK,GAAA,EAAK,CAAA,EAAK,GAAA,EAAK,CAAA,EAAK,CAAA,EAAK,GAAA,EAAK,GAAA,EAAK,CAAA,EAAK,CAAA,EAAK,CAAA,EAAK,CAAG,CAAA;MAChG,aAAA,CAAc,QAAA,CAAS,YAAA,CAAa,gBAAgB,CAAA;MACpD,aAAA,CAAc,QAAA,CAAS,YAAA,CAAa,kBAAkB,CAAA;MAItD,WAAA,CAAY,6BAAA,CAA8B,MAAA,EAAQ,mBAAmB,CAAA;MACrE,WAAA,CAAY,YAAA,CAAa,YAAA,CAAa,kBAAkB,CAAA;MAExD,SAAA,CAAU,GAAA,CAAI,WAAA,CAAY,MAAA,CAAO,CAAA,EAAG,WAAA,CAAY,MAAA,CAAO,CAAA,EAAG,WAAA,CAAY,MAAA,CAAO,CAAA,EAAG,WAAA,CAAY,QAAQ,CAAA;MAEpG,MAAM,gBAAA,GAAmB,YAAA,CAAa,gBAAA;MAEtC,CAAA,CAAE,CAAA,GAAA,CAAK,IAAA,CAAK,IAAA,CAAK,SAAA,CAAU,CAAC,CAAA,GAAI,gBAAA,CAAiB,QAAA,CAAS,CAAC,CAAA,IAAK,gBAAA,CAAiB,QAAA,CAAS,CAAC,CAAA;MAC3F,CAAA,CAAE,CAAA,GAAA,CAAK,IAAA,CAAK,IAAA,CAAK,SAAA,CAAU,CAAC,CAAA,GAAI,gBAAA,CAAiB,QAAA,CAAS,CAAC,CAAA,IAAK,gBAAA,CAAiB,QAAA,CAAS,CAAC,CAAA;MAC3F,CAAA,CAAE,CAAA,GAAI,CAAA,CAAA;MACN,CAAA,CAAE,CAAA,GAAA,CAAK,CAAA,GAAM,gBAAA,CAAiB,QAAA,CAAS,EAAE,CAAA,IAAK,gBAAA,CAAiB,QAAA,CAAS,EAAE,CAAA;MAG1E,SAAA,CAAU,cAAA,CAAe,CAAA,GAAM,SAAA,CAAU,GAAA,CAAI,CAAC,CAAC,CAAA;MAG/C,gBAAA,CAAiB,QAAA,CAAS,CAAC,CAAA,GAAI,SAAA,CAAU,CAAA;MACzC,gBAAA,CAAiB,QAAA,CAAS,CAAC,CAAA,GAAI,SAAA,CAAU,CAAA;MACzC,gBAAA,CAAiB,QAAA,CAAS,EAAE,CAAA,GAAI,SAAA,CAAU,CAAA,GAAI,CAAA,GAAM,QAAA;MACpD,gBAAA,CAAiB,QAAA,CAAS,EAAE,CAAA,GAAI,SAAA,CAAU,CAAA;MAE1C,GAAA,CAAI,qBAAA,CAAsB,MAAA,CAAO,WAAW,CAAA;MAI5C,MAAM,mBAAA,GAAsB,QAAA,CAAS,eAAA,CAAiB,CAAA;MAEtD,MAAM,gBAAA,GAAmB,QAAA,CAAS,EAAA,CAAG,OAAA;MACrC,MAAM,uBAAA,GAA0B,QAAA,CAAS,SAAA,CAAU,UAAA;MAEnD,KAAA,CAAM,OAAA,GAAU,KAAA;MAEhB,QAAA,CAAS,EAAA,CAAG,OAAA,GAAU,KAAA;MACtB,QAAA,CAAS,SAAA,CAAU,UAAA,GAAa,KAAA;MAEhC,QAAA,CAAS,eAAA,CAAgB,YAAY,CAAA;MAErC,QAAA,CAAS,KAAA,CAAM,OAAA,CAAQ,KAAA,CAAM,OAAA,CAAQ,IAAI,CAAA;MAEzC,IAAI,QAAA,CAAS,SAAA,KAAc,KAAA,EAAO,QAAA,CAAS,KAAA,CAAO,CAAA;MAClD,QAAA,CAAS,MAAA,CAAO,KAAA,EAAO,YAAY,CAAA;MAEnC,KAAA,CAAM,OAAA,GAAU,IAAA;MAEhB,QAAA,CAAS,EAAA,CAAG,OAAA,GAAU,gBAAA;MACtB,QAAA,CAAS,SAAA,CAAU,UAAA,GAAa,uBAAA;MAEhC,QAAA,CAAS,eAAA,CAAgB,mBAAmB,CAAA;MAI5C,MAAM,QAAA,GAAW,MAAA,CAAO,QAAA;MAExB,IAAI,QAAA,KAAa,KAAA,CAAA,EAAW;QAC1B,QAAA,CAAS,KAAA,CAAM,QAAA,CAAS,QAAQ,CAAA;MACjC;IACF,CAAA;EACF;AACH","sourcesContent":["import {\n  Color,\n  FrontSide,\n  Matrix4,\n  Mesh,\n  PerspectiveCamera,\n  Plane,\n  ShaderMaterial,\n  UniformsLib,\n  UniformsUtils,\n  Vector3,\n  Vector4,\n  WebGLRenderTarget,\n  REVISION,\n} from 'three'\n\n/**\n * Work based on :\n * https://github.com/Slayvin: Flat mirror for three.js\n * https://home.adelphi.edu/~stemkoski/ : An implementation of water shader based on the flat mirror\n * http://29a.ch/ && http://29a.ch/slides/2012/webglwater/ : Water shader explanations in WebGL\n */\n\nclass Water extends Mesh {\n  constructor(geometry, options = {}) {\n    super(geometry)\n\n    this.isWater = true\n\n    const scope = this\n\n    const textureWidth = options.textureWidth !== undefined ? options.textureWidth : 512\n    const textureHeight = options.textureHeight !== undefined ? options.textureHeight : 512\n\n    const clipBias = options.clipBias !== undefined ? options.clipBias : 0.0\n    const alpha = options.alpha !== undefined ? options.alpha : 1.0\n    const time = options.time !== undefined ? options.time : 0.0\n    const normalSampler = options.waterNormals !== undefined ? options.waterNormals : null\n    const sunDirection = options.sunDirection !== undefined ? options.sunDirection : new Vector3(0.70707, 0.70707, 0.0)\n    const sunColor = new Color(options.sunColor !== undefined ? options.sunColor : 0xffffff)\n    const waterColor = new Color(options.waterColor !== undefined ? options.waterColor : 0x7f7f7f)\n    const eye = options.eye !== undefined ? options.eye : new Vector3(0, 0, 0)\n    const distortionScale = options.distortionScale !== undefined ? options.distortionScale : 20.0\n    const side = options.side !== undefined ? options.side : FrontSide\n    const fog = options.fog !== undefined ? options.fog : false\n\n    //\n\n    const mirrorPlane = new Plane()\n    const normal = new Vector3()\n    const mirrorWorldPosition = new Vector3()\n    const cameraWorldPosition = new Vector3()\n    const rotationMatrix = new Matrix4()\n    const lookAtPosition = new Vector3(0, 0, -1)\n    const clipPlane = new Vector4()\n\n    const view = new Vector3()\n    const target = new Vector3()\n    const q = new Vector4()\n\n    const textureMatrix = new Matrix4()\n\n    const mirrorCamera = new PerspectiveCamera()\n\n    const renderTarget = new WebGLRenderTarget(textureWidth, textureHeight)\n\n    const mirrorShader = {\n      uniforms: UniformsUtils.merge([\n        UniformsLib['fog'],\n        UniformsLib['lights'],\n        {\n          normalSampler: { value: null },\n          mirrorSampler: { value: null },\n          alpha: { value: 1.0 },\n          time: { value: 0.0 },\n          size: { value: 1.0 },\n          distortionScale: { value: 20.0 },\n          textureMatrix: { value: new Matrix4() },\n          sunColor: { value: new Color(0x7f7f7f) },\n          sunDirection: { value: new Vector3(0.70707, 0.70707, 0) },\n          eye: { value: new Vector3() },\n          waterColor: { value: new Color(0x555555) },\n        },\n      ]),\n\n      vertexShader: /* glsl */ `\n\t\t\t\tuniform mat4 textureMatrix;\n\t\t\t\tuniform float time;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <shadowmap_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tmirrorCoord = modelMatrix * vec4( position, 1.0 );\n\t\t\t\t\tworldPosition = mirrorCoord.xyzw;\n\t\t\t\t\tmirrorCoord = textureMatrix * mirrorCoord;\n\t\t\t\t\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t#include <beginnormal_vertex>\n\t\t\t\t#include <defaultnormal_vertex>\n\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t#include <fog_vertex>\n\t\t\t\t#include <shadowmap_vertex>\n\t\t\t}`,\n\n      fragmentShader: /* glsl */ `\n\t\t\t\tuniform sampler2D mirrorSampler;\n\t\t\t\tuniform float alpha;\n\t\t\t\tuniform float time;\n\t\t\t\tuniform float size;\n\t\t\t\tuniform float distortionScale;\n\t\t\t\tuniform sampler2D normalSampler;\n\t\t\t\tuniform vec3 sunColor;\n\t\t\t\tuniform vec3 sunDirection;\n\t\t\t\tuniform vec3 eye;\n\t\t\t\tuniform vec3 waterColor;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\tvec4 getNoise( vec2 uv ) {\n\t\t\t\t\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);\n\t\t\t\t\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );\n\t\t\t\t\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );\n\t\t\t\t\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );\n\t\t\t\t\tvec4 noise = texture2D( normalSampler, uv0 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv1 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv2 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv3 );\n\t\t\t\t\treturn noise * 0.5 - 1.0;\n\t\t\t\t}\n\n\t\t\t\tvoid sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {\n\t\t\t\t\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );\n\t\t\t\t\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );\n\t\t\t\t\tspecularColor += pow( direction, shiny ) * sunColor * spec;\n\t\t\t\t\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;\n\t\t\t\t}\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <packing>\n\t\t\t\t#include <bsdfs>\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t\t#include <lights_pars_begin>\n\t\t\t\t#include <shadowmap_pars_fragment>\n\t\t\t\t#include <shadowmask_pars_fragment>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <logdepthbuf_fragment>\n\t\t\t\t\tvec4 noise = getNoise( worldPosition.xz * size );\n\t\t\t\t\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );\n\n\t\t\t\t\tvec3 diffuseLight = vec3(0.0);\n\t\t\t\t\tvec3 specularLight = vec3(0.0);\n\n\t\t\t\t\tvec3 worldToEye = eye-worldPosition.xyz;\n\t\t\t\t\tvec3 eyeDirection = normalize( worldToEye );\n\t\t\t\t\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );\n\n\t\t\t\t\tfloat distance = length(worldToEye);\n\n\t\t\t\t\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;\n\t\t\t\t\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );\n\n\t\t\t\t\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );\n\t\t\t\t\tfloat rf0 = 0.3;\n\t\t\t\t\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );\n\t\t\t\t\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;\n\t\t\t\t\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);\n\t\t\t\t\tvec3 outgoingLight = albedo;\n\t\t\t\t\tgl_FragColor = vec4( outgoingLight, alpha );\n\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <${parseInt(REVISION.replace(/\\D+/g, '')) >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n\t\t\t\t\t#include <fog_fragment>\t\n\t\t\t\t}`,\n    }\n\n    const material = new ShaderMaterial({\n      fragmentShader: mirrorShader.fragmentShader,\n      vertexShader: mirrorShader.vertexShader,\n      uniforms: UniformsUtils.clone(mirrorShader.uniforms),\n      lights: true,\n      side: side,\n      fog: fog,\n    })\n\n    material.uniforms['mirrorSampler'].value = renderTarget.texture\n    material.uniforms['textureMatrix'].value = textureMatrix\n    material.uniforms['alpha'].value = alpha\n    material.uniforms['time'].value = time\n    material.uniforms['normalSampler'].value = normalSampler\n    material.uniforms['sunColor'].value = sunColor\n    material.uniforms['waterColor'].value = waterColor\n    material.uniforms['sunDirection'].value = sunDirection\n    material.uniforms['distortionScale'].value = distortionScale\n\n    material.uniforms['eye'].value = eye\n\n    scope.material = material\n\n    scope.onBeforeRender = function (renderer, scene, camera) {\n      mirrorWorldPosition.setFromMatrixPosition(scope.matrixWorld)\n      cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld)\n\n      rotationMatrix.extractRotation(scope.matrixWorld)\n\n      normal.set(0, 0, 1)\n      normal.applyMatrix4(rotationMatrix)\n\n      view.subVectors(mirrorWorldPosition, cameraWorldPosition)\n\n      // Avoid rendering when mirror is facing away\n\n      if (view.dot(normal) > 0) return\n\n      view.reflect(normal).negate()\n      view.add(mirrorWorldPosition)\n\n      rotationMatrix.extractRotation(camera.matrixWorld)\n\n      lookAtPosition.set(0, 0, -1)\n      lookAtPosition.applyMatrix4(rotationMatrix)\n      lookAtPosition.add(cameraWorldPosition)\n\n      target.subVectors(mirrorWorldPosition, lookAtPosition)\n      target.reflect(normal).negate()\n      target.add(mirrorWorldPosition)\n\n      mirrorCamera.position.copy(view)\n      mirrorCamera.up.set(0, 1, 0)\n      mirrorCamera.up.applyMatrix4(rotationMatrix)\n      mirrorCamera.up.reflect(normal)\n      mirrorCamera.lookAt(target)\n\n      mirrorCamera.far = camera.far // Used in WebGLBackground\n\n      mirrorCamera.updateMatrixWorld()\n      mirrorCamera.projectionMatrix.copy(camera.projectionMatrix)\n\n      // Update the texture matrix\n      textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0)\n      textureMatrix.multiply(mirrorCamera.projectionMatrix)\n      textureMatrix.multiply(mirrorCamera.matrixWorldInverse)\n\n      // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n      // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n      mirrorPlane.setFromNormalAndCoplanarPoint(normal, mirrorWorldPosition)\n      mirrorPlane.applyMatrix4(mirrorCamera.matrixWorldInverse)\n\n      clipPlane.set(mirrorPlane.normal.x, mirrorPlane.normal.y, mirrorPlane.normal.z, mirrorPlane.constant)\n\n      const projectionMatrix = mirrorCamera.projectionMatrix\n\n      q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0]\n      q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5]\n      q.z = -1.0\n      q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]\n\n      // Calculate the scaled plane vector\n      clipPlane.multiplyScalar(2.0 / clipPlane.dot(q))\n\n      // Replacing the third row of the projection matrix\n      projectionMatrix.elements[2] = clipPlane.x\n      projectionMatrix.elements[6] = clipPlane.y\n      projectionMatrix.elements[10] = clipPlane.z + 1.0 - clipBias\n      projectionMatrix.elements[14] = clipPlane.w\n\n      eye.setFromMatrixPosition(camera.matrixWorld)\n\n      // Render\n\n      const currentRenderTarget = renderer.getRenderTarget()\n\n      const currentXrEnabled = renderer.xr.enabled\n      const currentShadowAutoUpdate = renderer.shadowMap.autoUpdate\n\n      scope.visible = false\n\n      renderer.xr.enabled = false // Avoid camera modification and recursion\n      renderer.shadowMap.autoUpdate = false // Avoid re-computing shadows\n\n      renderer.setRenderTarget(renderTarget)\n\n      renderer.state.buffers.depth.setMask(true) // make sure the depth buffer is writable so it can be properly cleared, see #18897\n\n      if (renderer.autoClear === false) renderer.clear()\n      renderer.render(scene, mirrorCamera)\n\n      scope.visible = true\n\n      renderer.xr.enabled = currentXrEnabled\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate\n\n      renderer.setRenderTarget(currentRenderTarget)\n\n      // Restore viewport\n\n      const viewport = camera.viewport\n\n      if (viewport !== undefined) {\n        renderer.state.viewport(viewport)\n      }\n    }\n  }\n}\n\nexport { Water }\n"]},"metadata":{},"sourceType":"module"}