{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { EventDispatcher, Plane, Raycaster, Vector2, Vector3, Matrix4 } from \"three\";\nclass DragControls extends EventDispatcher {\n  constructor(_objects, _camera, _domElement) {\n    super();\n    __publicField(this, \"enabled\", true);\n    __publicField(this, \"transformGroup\", false);\n    __publicField(this, \"_objects\");\n    __publicField(this, \"_camera\");\n    __publicField(this, \"_domElement\");\n    __publicField(this, \"_plane\", new Plane());\n    __publicField(this, \"_raycaster\", new Raycaster());\n    __publicField(this, \"_mouse\", new Vector2());\n    __publicField(this, \"_offset\", new Vector3());\n    __publicField(this, \"_intersection\", new Vector3());\n    __publicField(this, \"_worldPosition\", new Vector3());\n    __publicField(this, \"_inverseMatrix\", new Matrix4());\n    __publicField(this, \"_intersections\", []);\n    __publicField(this, \"_selected\", null);\n    __publicField(this, \"_hovered\", null);\n    __publicField(this, \"activate\", () => {\n      this._domElement.addEventListener(\"pointermove\", this.onPointerMove);\n      this._domElement.addEventListener(\"pointerdown\", this.onPointerDown);\n      this._domElement.addEventListener(\"pointerup\", this.onPointerCancel);\n      this._domElement.addEventListener(\"pointerleave\", this.onPointerCancel);\n      this._domElement.addEventListener(\"touchmove\", this.onTouchMove);\n      this._domElement.addEventListener(\"touchstart\", this.onTouchStart);\n      this._domElement.addEventListener(\"touchend\", this.onTouchEnd);\n    });\n    __publicField(this, \"deactivate\", () => {\n      this._domElement.removeEventListener(\"pointermove\", this.onPointerMove);\n      this._domElement.removeEventListener(\"pointerdown\", this.onPointerDown);\n      this._domElement.removeEventListener(\"pointerup\", this.onPointerCancel);\n      this._domElement.removeEventListener(\"pointerleave\", this.onPointerCancel);\n      this._domElement.removeEventListener(\"touchmove\", this.onTouchMove);\n      this._domElement.removeEventListener(\"touchstart\", this.onTouchStart);\n      this._domElement.removeEventListener(\"touchend\", this.onTouchEnd);\n      this._domElement.style.cursor = \"\";\n    });\n    // TODO: confirm if this can be removed?\n    __publicField(this, \"dispose\", () => this.deactivate());\n    __publicField(this, \"getObjects\", () => this._objects);\n    __publicField(this, \"getRaycaster\", () => this._raycaster);\n    __publicField(this, \"onMouseMove\", event => {\n      const rect = this._domElement.getBoundingClientRect();\n      this._mouse.x = (event.clientX - rect.left) / rect.width * 2 - 1;\n      this._mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n      this._raycaster.setFromCamera(this._mouse, this._camera);\n      if (this._selected && this.enabled) {\n        if (this._raycaster.ray.intersectPlane(this._plane, this._intersection)) {\n          this._selected.position.copy(this._intersection.sub(this._offset).applyMatrix4(this._inverseMatrix));\n        }\n        this.dispatchEvent({\n          type: \"drag\",\n          object: this._selected\n        });\n        return;\n      }\n      this._intersections.length = 0;\n      this._raycaster.setFromCamera(this._mouse, this._camera);\n      this._raycaster.intersectObjects(this._objects, true, this._intersections);\n      if (this._intersections.length > 0) {\n        const object = this._intersections[0].object;\n        this._plane.setFromNormalAndCoplanarPoint(this._camera.getWorldDirection(this._plane.normal), this._worldPosition.setFromMatrixPosition(object.matrixWorld));\n        if (this._hovered !== object) {\n          this.dispatchEvent({\n            type: \"hoveron\",\n            object\n          });\n          this._domElement.style.cursor = \"pointer\";\n          this._hovered = object;\n        }\n      } else {\n        if (this._hovered !== null) {\n          this.dispatchEvent({\n            type: \"hoveroff\",\n            object: this._hovered\n          });\n          this._domElement.style.cursor = \"auto\";\n          this._hovered = null;\n        }\n      }\n    });\n    __publicField(this, \"onMouseDown\", () => {\n      this._intersections.length = 0;\n      this._raycaster.setFromCamera(this._mouse, this._camera);\n      this._raycaster.intersectObjects(this._objects, true, this._intersections);\n      if (this._intersections.length > 0) {\n        this._selected = this.transformGroup === true ? this._objects[0] : this._intersections[0].object;\n        if (this._raycaster.ray.intersectPlane(this._plane, this._intersection) && this._selected.parent) {\n          this._inverseMatrix.copy(this._selected.parent.matrixWorld).invert();\n          this._offset.copy(this._intersection).sub(this._worldPosition.setFromMatrixPosition(this._selected.matrixWorld));\n        }\n        this._domElement.style.cursor = \"move\";\n        this.dispatchEvent({\n          type: \"dragstart\",\n          object: this._selected\n        });\n      }\n    });\n    __publicField(this, \"onMouseCancel\", () => {\n      if (this._selected) {\n        this.dispatchEvent({\n          type: \"dragend\",\n          object: this._selected\n        });\n        this._selected = null;\n      }\n      this._domElement.style.cursor = this._hovered ? \"pointer\" : \"auto\";\n    });\n    __publicField(this, \"onPointerMove\", event => {\n      switch (event.pointerType) {\n        case \"mouse\":\n        case \"pen\":\n          this.onMouseMove(event);\n          break;\n      }\n    });\n    __publicField(this, \"onPointerDown\", event => {\n      switch (event.pointerType) {\n        case \"mouse\":\n        case \"pen\":\n          this.onMouseDown();\n          break;\n      }\n    });\n    __publicField(this, \"onPointerCancel\", event => {\n      switch (event.pointerType) {\n        case \"mouse\":\n        case \"pen\":\n          this.onMouseCancel();\n          break;\n      }\n    });\n    __publicField(this, \"onTouchMove\", event => {\n      event.preventDefault();\n      const newEvent = event.changedTouches[0];\n      const rect = this._domElement.getBoundingClientRect();\n      this._mouse.x = (newEvent.clientX - rect.left) / rect.width * 2 - 1;\n      this._mouse.y = -((newEvent.clientY - rect.top) / rect.height) * 2 + 1;\n      this._raycaster.setFromCamera(this._mouse, this._camera);\n      if (this._selected && this.enabled) {\n        if (this._raycaster.ray.intersectPlane(this._plane, this._intersection)) {\n          this._selected.position.copy(this._intersection.sub(this._offset).applyMatrix4(this._inverseMatrix));\n        }\n        this.dispatchEvent({\n          type: \"drag\",\n          object: this._selected\n        });\n        return;\n      }\n    });\n    __publicField(this, \"onTouchStart\", event => {\n      event.preventDefault();\n      const newEvent = event.changedTouches[0];\n      const rect = this._domElement.getBoundingClientRect();\n      this._mouse.x = (newEvent.clientX - rect.left) / rect.width * 2 - 1;\n      this._mouse.y = -((newEvent.clientY - rect.top) / rect.height) * 2 + 1;\n      this._intersections.length = 0;\n      this._raycaster.setFromCamera(this._mouse, this._camera);\n      this._raycaster.intersectObjects(this._objects, true, this._intersections);\n      if (this._intersections.length > 0) {\n        this._selected = this.transformGroup === true ? this._objects[0] : this._intersections[0].object;\n        this._plane.setFromNormalAndCoplanarPoint(this._camera.getWorldDirection(this._plane.normal), this._worldPosition.setFromMatrixPosition(this._selected.matrixWorld));\n        if (this._raycaster.ray.intersectPlane(this._plane, this._intersection) && this._selected.parent) {\n          this._inverseMatrix.copy(this._selected.parent.matrixWorld).invert();\n          this._offset.copy(this._intersection).sub(this._worldPosition.setFromMatrixPosition(this._selected.matrixWorld));\n        }\n        this._domElement.style.cursor = \"move\";\n        this.dispatchEvent({\n          type: \"dragstart\",\n          object: this._selected\n        });\n      }\n    });\n    __publicField(this, \"onTouchEnd\", event => {\n      event.preventDefault();\n      if (this._selected) {\n        this.dispatchEvent({\n          type: \"dragend\",\n          object: this._selected\n        });\n        this._selected = null;\n      }\n      this._domElement.style.cursor = \"auto\";\n    });\n    this._objects = _objects;\n    this._camera = _camera;\n    this._domElement = _domElement;\n    this.activate();\n  }\n}\nexport { DragControls };","map":{"version":3,"sources":["../../src/controls/DragControls.ts"],"names":[],"mappings":"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","sourcesContent":["import { Camera, EventDispatcher, Intersection, Matrix4, Object3D, Plane, Raycaster, Vector2, Vector3 } from 'three'\n\nclass DragControls extends EventDispatcher {\n  public enabled = true\n  public transformGroup = false\n\n  private _objects: Object3D[]\n  private _camera: Camera\n  private _domElement: HTMLElement\n\n  private _plane = new Plane()\n  private _raycaster = new Raycaster()\n\n  private _mouse = new Vector2()\n  private _offset = new Vector3()\n  private _intersection = new Vector3()\n  private _worldPosition = new Vector3()\n  private _inverseMatrix = new Matrix4()\n  private _intersections: Intersection[] = []\n  private _selected: Object3D | null = null\n  private _hovered: Object3D | null = null\n\n  constructor(_objects: Object3D[], _camera: Camera, _domElement: HTMLElement) {\n    super()\n\n    this._objects = _objects\n    this._camera = _camera\n    this._domElement = _domElement\n\n    this.activate()\n  }\n\n  public activate = (): void => {\n    this._domElement.addEventListener('pointermove', this.onPointerMove)\n    this._domElement.addEventListener('pointerdown', this.onPointerDown)\n    this._domElement.addEventListener('pointerup', this.onPointerCancel)\n    this._domElement.addEventListener('pointerleave', this.onPointerCancel)\n    this._domElement.addEventListener('touchmove', this.onTouchMove)\n    this._domElement.addEventListener('touchstart', this.onTouchStart)\n    this._domElement.addEventListener('touchend', this.onTouchEnd)\n  }\n\n  public deactivate = (): void => {\n    this._domElement.removeEventListener('pointermove', this.onPointerMove)\n    this._domElement.removeEventListener('pointerdown', this.onPointerDown)\n    this._domElement.removeEventListener('pointerup', this.onPointerCancel)\n    this._domElement.removeEventListener('pointerleave', this.onPointerCancel)\n    this._domElement.removeEventListener('touchmove', this.onTouchMove)\n    this._domElement.removeEventListener('touchstart', this.onTouchStart)\n    this._domElement.removeEventListener('touchend', this.onTouchEnd)\n\n    this._domElement.style.cursor = ''\n  }\n\n  // TODO: confirm if this can be removed?\n  public dispose = (): void => this.deactivate()\n\n  public getObjects = (): Object3D[] => this._objects\n\n  public getRaycaster = (): Raycaster => this._raycaster\n\n  private onMouseMove = (event: MouseEvent): void => {\n    const rect = this._domElement.getBoundingClientRect()\n\n    this._mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1\n    this._mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1\n\n    this._raycaster.setFromCamera(this._mouse, this._camera)\n\n    if (this._selected && this.enabled) {\n      if (this._raycaster.ray.intersectPlane(this._plane, this._intersection)) {\n        this._selected.position.copy(this._intersection.sub(this._offset).applyMatrix4(this._inverseMatrix))\n      }\n\n      // @ts-ignore\n      this.dispatchEvent({ type: 'drag', object: this._selected })\n\n      return\n    }\n\n    this._intersections.length = 0\n\n    this._raycaster.setFromCamera(this._mouse, this._camera)\n    this._raycaster.intersectObjects(this._objects, true, this._intersections)\n\n    if (this._intersections.length > 0) {\n      const object = this._intersections[0].object\n\n      this._plane.setFromNormalAndCoplanarPoint(\n        this._camera.getWorldDirection(this._plane.normal),\n        this._worldPosition.setFromMatrixPosition(object.matrixWorld),\n      )\n\n      if (this._hovered !== object) {\n        // @ts-ignore\n        this.dispatchEvent({ type: 'hoveron', object })\n\n        this._domElement.style.cursor = 'pointer'\n        this._hovered = object\n      }\n    } else {\n      if (this._hovered !== null) {\n        // @ts-ignore\n        this.dispatchEvent({ type: 'hoveroff', object: this._hovered })\n\n        this._domElement.style.cursor = 'auto'\n        this._hovered = null\n      }\n    }\n  }\n\n  private onMouseDown = (): void => {\n    this._intersections.length = 0\n\n    this._raycaster.setFromCamera(this._mouse, this._camera)\n    this._raycaster.intersectObjects(this._objects, true, this._intersections)\n\n    if (this._intersections.length > 0) {\n      this._selected = this.transformGroup === true ? this._objects[0] : this._intersections[0].object\n\n      if (this._raycaster.ray.intersectPlane(this._plane, this._intersection) && this._selected.parent) {\n        this._inverseMatrix.copy(this._selected.parent.matrixWorld).invert()\n        this._offset.copy(this._intersection).sub(this._worldPosition.setFromMatrixPosition(this._selected.matrixWorld))\n      }\n\n      this._domElement.style.cursor = 'move'\n\n      // @ts-ignore\n      this.dispatchEvent({ type: 'dragstart', object: this._selected })\n    }\n  }\n\n  private onMouseCancel = (): void => {\n    if (this._selected) {\n      // @ts-ignore\n      this.dispatchEvent({ type: 'dragend', object: this._selected })\n\n      this._selected = null\n    }\n\n    this._domElement.style.cursor = this._hovered ? 'pointer' : 'auto'\n  }\n\n  private onPointerMove = (event: PointerEvent): void => {\n    switch (event.pointerType) {\n      case 'mouse':\n      case 'pen':\n        this.onMouseMove(event)\n        break\n\n      // TODO touch\n    }\n  }\n\n  private onPointerDown = (event: PointerEvent): void => {\n    switch (event.pointerType) {\n      case 'mouse':\n      case 'pen':\n        this.onMouseDown()\n        break\n\n      // TODO touch\n    }\n  }\n\n  private onPointerCancel = (event: PointerEvent): void => {\n    switch (event.pointerType) {\n      case 'mouse':\n      case 'pen':\n        this.onMouseCancel()\n        break\n\n      // TODO touch\n    }\n  }\n\n  private onTouchMove = (event: TouchEvent): void => {\n    event.preventDefault()\n    const newEvent = event.changedTouches[0]\n\n    const rect = this._domElement.getBoundingClientRect()\n\n    this._mouse.x = ((newEvent.clientX - rect.left) / rect.width) * 2 - 1\n    this._mouse.y = -((newEvent.clientY - rect.top) / rect.height) * 2 + 1\n\n    this._raycaster.setFromCamera(this._mouse, this._camera)\n\n    if (this._selected && this.enabled) {\n      if (this._raycaster.ray.intersectPlane(this._plane, this._intersection)) {\n        this._selected.position.copy(this._intersection.sub(this._offset).applyMatrix4(this._inverseMatrix))\n      }\n\n      // @ts-ignore\n      this.dispatchEvent({ type: 'drag', object: this._selected })\n\n      return\n    }\n  }\n\n  private onTouchStart = (event: TouchEvent): void => {\n    event.preventDefault()\n    const newEvent = event.changedTouches[0]\n\n    const rect = this._domElement.getBoundingClientRect()\n\n    this._mouse.x = ((newEvent.clientX - rect.left) / rect.width) * 2 - 1\n    this._mouse.y = -((newEvent.clientY - rect.top) / rect.height) * 2 + 1\n\n    this._intersections.length = 0\n\n    this._raycaster.setFromCamera(this._mouse, this._camera)\n    this._raycaster.intersectObjects(this._objects, true, this._intersections)\n\n    if (this._intersections.length > 0) {\n      this._selected = this.transformGroup === true ? this._objects[0] : this._intersections[0].object\n\n      this._plane.setFromNormalAndCoplanarPoint(\n        this._camera.getWorldDirection(this._plane.normal),\n        this._worldPosition.setFromMatrixPosition(this._selected.matrixWorld),\n      )\n\n      if (this._raycaster.ray.intersectPlane(this._plane, this._intersection) && this._selected.parent) {\n        this._inverseMatrix.copy(this._selected.parent.matrixWorld).invert()\n        this._offset.copy(this._intersection).sub(this._worldPosition.setFromMatrixPosition(this._selected.matrixWorld))\n      }\n\n      this._domElement.style.cursor = 'move'\n\n      // @ts-ignore\n      this.dispatchEvent({ type: 'dragstart', object: this._selected })\n    }\n  }\n\n  private onTouchEnd = (event: TouchEvent): void => {\n    event.preventDefault()\n\n    if (this._selected) {\n      // @ts-ignore\n      this.dispatchEvent({ type: 'dragend', object: this._selected })\n\n      this._selected = null\n    }\n\n    this._domElement.style.cursor = 'auto'\n  }\n}\n\nexport { DragControls }\n"]},"metadata":{},"sourceType":"module"}