{"ast":null,"code":"import { Loader, FileLoader, BufferGeometry, Float32BufferAttribute } from \"three\";\nclass XYZLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(text) {\n    const lines = text.split(\"\\n\");\n    const vertices = [];\n    const colors = [];\n    for (let line of lines) {\n      line = line.trim();\n      if (line.charAt(0) === \"#\") continue;\n      const lineValues = line.split(/\\s+/);\n      if (lineValues.length === 3) {\n        vertices.push(parseFloat(lineValues[0]));\n        vertices.push(parseFloat(lineValues[1]));\n        vertices.push(parseFloat(lineValues[2]));\n      }\n      if (lineValues.length === 6) {\n        vertices.push(parseFloat(lineValues[0]));\n        vertices.push(parseFloat(lineValues[1]));\n        vertices.push(parseFloat(lineValues[2]));\n        colors.push(parseFloat(lineValues[3]) / 255);\n        colors.push(parseFloat(lineValues[4]) / 255);\n        colors.push(parseFloat(lineValues[5]) / 255);\n      }\n    }\n    const geometry = new BufferGeometry();\n    geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    if (colors.length > 0) {\n      geometry.setAttribute(\"color\", new Float32BufferAttribute(colors, 3));\n    }\n    return geometry;\n  }\n}\nexport { XYZLoader };","map":{"version":3,"sources":["../../src/loaders/XYZLoader.js"],"names":[],"mappings":";AAEA,MAAM,SAAA,SAAkB,MAAA,CAAO;EAC7B,IAAA,CAAK,GAAA,EAAK,MAAA,EAAQ,UAAA,EAAY,OAAA,EAAS;IACrC,MAAM,KAAA,GAAQ,IAAA;IAEd,MAAM,MAAA,GAAS,IAAI,UAAA,CAAW,IAAA,CAAK,OAAO,CAAA;IAC1C,MAAA,CAAO,OAAA,CAAQ,IAAA,CAAK,IAAI,CAAA;IACxB,MAAA,CAAO,gBAAA,CAAiB,IAAA,CAAK,aAAa,CAAA;IAC1C,MAAA,CAAO,kBAAA,CAAmB,IAAA,CAAK,eAAe,CAAA;IAC9C,MAAA,CAAO,IAAA,CACL,GAAA,EACA,UAAU,IAAA,EAAM;MACd,IAAI;QACF,MAAA,CAAO,KAAA,CAAM,KAAA,CAAM,IAAI,CAAC,CAAA;MACzB,CAAA,CAAA,OAAQ,CAAA,EAAP;QACA,IAAI,OAAA,EAAS;UACX,OAAA,CAAQ,CAAC,CAAA;QACrB,CAAA,MAAiB;UACL,OAAA,CAAQ,KAAA,CAAM,CAAC,CAAA;QAChB;QAED,KAAA,CAAM,OAAA,CAAQ,SAAA,CAAU,GAAG,CAAA;MAC5B;IACF,CAAA,EACD,UAAA,EACA,OACD,CAAA;EACF;EAED,KAAA,CAAM,IAAA,EAAM;IACV,MAAM,KAAA,GAAQ,IAAA,CAAK,KAAA,CAAM,IAAI,CAAA;IAE7B,MAAM,QAAA,GAAW,EAAE;IACnB,MAAM,MAAA,GAAS,EAAE;IAEjB,KAAA,IAAS,IAAA,IAAQ,KAAA,EAAO;MACtB,IAAA,GAAO,IAAA,CAAK,IAAA,CAAM,CAAA;MAElB,IAAI,IAAA,CAAK,MAAA,CAAO,CAAC,CAAA,KAAM,GAAA,EAAK;MAE5B,MAAM,UAAA,GAAa,IAAA,CAAK,KAAA,CAAM,KAAK,CAAA;MAEnC,IAAI,UAAA,CAAW,MAAA,KAAW,CAAA,EAAG;QAG3B,QAAA,CAAS,IAAA,CAAK,UAAA,CAAW,UAAA,CAAW,CAAC,CAAC,CAAC,CAAA;QACvC,QAAA,CAAS,IAAA,CAAK,UAAA,CAAW,UAAA,CAAW,CAAC,CAAC,CAAC,CAAA;QACvC,QAAA,CAAS,IAAA,CAAK,UAAA,CAAW,UAAA,CAAW,CAAC,CAAC,CAAC,CAAA;MACxC;MAED,IAAI,UAAA,CAAW,MAAA,KAAW,CAAA,EAAG;QAG3B,QAAA,CAAS,IAAA,CAAK,UAAA,CAAW,UAAA,CAAW,CAAC,CAAC,CAAC,CAAA;QACvC,QAAA,CAAS,IAAA,CAAK,UAAA,CAAW,UAAA,CAAW,CAAC,CAAC,CAAC,CAAA;QACvC,QAAA,CAAS,IAAA,CAAK,UAAA,CAAW,UAAA,CAAW,CAAC,CAAC,CAAC,CAAA;QAEvC,MAAA,CAAO,IAAA,CAAK,UAAA,CAAW,UAAA,CAAW,CAAC,CAAC,CAAA,GAAI,GAAG,CAAA;QAC3C,MAAA,CAAO,IAAA,CAAK,UAAA,CAAW,UAAA,CAAW,CAAC,CAAC,CAAA,GAAI,GAAG,CAAA;QAC3C,MAAA,CAAO,IAAA,CAAK,UAAA,CAAW,UAAA,CAAW,CAAC,CAAC,CAAA,GAAI,GAAG,CAAA;MAC5C;IACF;IAED,MAAM,QAAA,GAAW,IAAI,cAAA,CAAgB,CAAA;IACrC,QAAA,CAAS,YAAA,CAAa,UAAA,EAAY,IAAI,sBAAA,CAAuB,QAAA,EAAU,CAAC,CAAC,CAAA;IAEzE,IAAI,MAAA,CAAO,MAAA,GAAS,CAAA,EAAG;MACrB,QAAA,CAAS,YAAA,CAAa,OAAA,EAAS,IAAI,sBAAA,CAAuB,MAAA,EAAQ,CAAC,CAAC,CAAA;IACrE;IAED,OAAO,QAAA;EACR;AACH","sourcesContent":["import { BufferGeometry, FileLoader, Float32BufferAttribute, Loader } from 'three'\n\nclass XYZLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const scope = this\n\n    const loader = new FileLoader(this.manager)\n    loader.setPath(this.path)\n    loader.setRequestHeader(this.requestHeader)\n    loader.setWithCredentials(this.withCredentials)\n    loader.load(\n      url,\n      function (text) {\n        try {\n          onLoad(scope.parse(text))\n        } catch (e) {\n          if (onError) {\n            onError(e)\n          } else {\n            console.error(e)\n          }\n\n          scope.manager.itemError(url)\n        }\n      },\n      onProgress,\n      onError,\n    )\n  }\n\n  parse(text) {\n    const lines = text.split('\\n')\n\n    const vertices = []\n    const colors = []\n\n    for (let line of lines) {\n      line = line.trim()\n\n      if (line.charAt(0) === '#') continue // skip comments\n\n      const lineValues = line.split(/\\s+/)\n\n      if (lineValues.length === 3) {\n        // XYZ\n\n        vertices.push(parseFloat(lineValues[0]))\n        vertices.push(parseFloat(lineValues[1]))\n        vertices.push(parseFloat(lineValues[2]))\n      }\n\n      if (lineValues.length === 6) {\n        // XYZRGB\n\n        vertices.push(parseFloat(lineValues[0]))\n        vertices.push(parseFloat(lineValues[1]))\n        vertices.push(parseFloat(lineValues[2]))\n\n        colors.push(parseFloat(lineValues[3]) / 255)\n        colors.push(parseFloat(lineValues[4]) / 255)\n        colors.push(parseFloat(lineValues[5]) / 255)\n      }\n    }\n\n    const geometry = new BufferGeometry()\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3))\n\n    if (colors.length > 0) {\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3))\n    }\n\n    return geometry\n  }\n}\n\nexport { XYZLoader }\n"]},"metadata":{},"sourceType":"module"}