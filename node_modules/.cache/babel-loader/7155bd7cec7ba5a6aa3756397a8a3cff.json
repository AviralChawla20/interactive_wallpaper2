{"ast":null,"code":"import { Loader, FileLoader, LoadingManager, Group } from \"three\";\nimport { ColladaLoader } from \"./ColladaLoader.js\";\nimport { unzipSync } from \"fflate\";\nclass KMZLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(data) {\n    function findFile(url) {\n      for (const path in zip) {\n        if (path.substr(-url.length) === url) {\n          return zip[path];\n        }\n      }\n    }\n    const manager = new LoadingManager();\n    manager.setURLModifier(function (url) {\n      const image = findFile(url);\n      if (image) {\n        console.log(\"Loading\", url);\n        const blob = new Blob([image.buffer], {\n          type: \"application/octet-stream\"\n        });\n        return URL.createObjectURL(blob);\n      }\n      return url;\n    });\n    const zip = unzipSync(new Uint8Array(data));\n    if (zip[\"doc.kml\"]) {\n      const xml = new DOMParser().parseFromString(fflate.strFromU8(zip[\"doc.kml\"]), \"application/xml\");\n      const model = xml.querySelector(\"Placemark Model Link href\");\n      if (model) {\n        const loader = new ColladaLoader(manager);\n        return loader.parse(fflate.strFromU8(zip[model.textContent]));\n      }\n    } else {\n      console.warn(\"KMZLoader: Missing doc.kml file.\");\n      for (const path in zip) {\n        const extension = path.split(\".\").pop().toLowerCase();\n        if (extension === \"dae\") {\n          const loader = new ColladaLoader(manager);\n          return loader.parse(fflate.strFromU8(zip[path]));\n        }\n      }\n    }\n    console.error(\"KMZLoader: Couldn't find .dae file.\");\n    return {\n      scene: new Group()\n    };\n  }\n}\nexport { KMZLoader };","map":{"version":3,"sources":["../../src/loaders/KMZLoader.js"],"names":[],"mappings":"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","sourcesContent":["import { FileLoader, Group, Loader, LoadingManager } from 'three'\nimport { ColladaLoader } from '../loaders/ColladaLoader'\nimport { unzipSync } from 'fflate'\n\nclass KMZLoader extends Loader {\n  constructor(manager) {\n    super(manager)\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this\n\n    const loader = new FileLoader(scope.manager)\n    loader.setPath(scope.path)\n    loader.setResponseType('arraybuffer')\n    loader.setRequestHeader(scope.requestHeader)\n    loader.setWithCredentials(scope.withCredentials)\n    loader.load(\n      url,\n      function (text) {\n        try {\n          onLoad(scope.parse(text))\n        } catch (e) {\n          if (onError) {\n            onError(e)\n          } else {\n            console.error(e)\n          }\n\n          scope.manager.itemError(url)\n        }\n      },\n      onProgress,\n      onError,\n    )\n  }\n\n  parse(data) {\n    function findFile(url) {\n      for (const path in zip) {\n        if (path.substr(-url.length) === url) {\n          return zip[path]\n        }\n      }\n    }\n\n    const manager = new LoadingManager()\n    manager.setURLModifier(function (url) {\n      const image = findFile(url)\n\n      if (image) {\n        console.log('Loading', url)\n\n        const blob = new Blob([image.buffer], { type: 'application/octet-stream' })\n        return URL.createObjectURL(blob)\n      }\n\n      return url\n    })\n\n    //\n\n    const zip = unzipSync(new Uint8Array(data))\n\n    if (zip['doc.kml']) {\n      const xml = new DOMParser().parseFromString(fflate.strFromU8(zip['doc.kml']), 'application/xml')\n      const model = xml.querySelector('Placemark Model Link href')\n\n      if (model) {\n        const loader = new ColladaLoader(manager)\n        return loader.parse(fflate.strFromU8(zip[model.textContent]))\n      }\n    } else {\n      console.warn('KMZLoader: Missing doc.kml file.')\n\n      for (const path in zip) {\n        const extension = path.split('.').pop().toLowerCase()\n\n        if (extension === 'dae') {\n          const loader = new ColladaLoader(manager)\n          return loader.parse(fflate.strFromU8(zip[path]))\n        }\n      }\n    }\n\n    console.error(\"KMZLoader: Couldn't find .dae file.\")\n    return { scene: new Group() }\n  }\n}\n\nexport { KMZLoader }\n"]},"metadata":{},"sourceType":"module"}