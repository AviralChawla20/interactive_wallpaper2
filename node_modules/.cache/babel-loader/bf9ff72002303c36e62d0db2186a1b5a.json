{"ast":null,"code":"class ARButton {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement(\"button\");\n    function showStartAR() {\n      if (sessionInit.domOverlay === void 0) {\n        const overlay = document.createElement(\"div\");\n        overlay.style.display = \"none\";\n        document.body.appendChild(overlay);\n        const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        svg.setAttribute(\"width\", \"38px\");\n        svg.setAttribute(\"height\", \"38px\");\n        svg.style.position = \"absolute\";\n        svg.style.right = \"20px\";\n        svg.style.top = \"20px\";\n        svg.addEventListener(\"click\", function () {\n          currentSession == null ? void 0 : currentSession.end();\n        });\n        overlay.appendChild(svg);\n        const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n        path.setAttribute(\"d\", \"M 12,12 L 28,28 M 28,12 12,28\");\n        path.setAttribute(\"stroke\", \"#fff\");\n        path.setAttribute(\"stroke-width\", \"2px\");\n        svg.appendChild(path);\n        if (sessionInit.optionalFeatures === void 0) {\n          sessionInit.optionalFeatures = [];\n        }\n        sessionInit.optionalFeatures.push(\"dom-overlay\");\n        sessionInit.domOverlay = {\n          root: overlay\n        };\n      }\n      let currentSession = null;\n      async function onSessionStarted(session) {\n        session.addEventListener(\"end\", onSessionEnded);\n        renderer.xr.setReferenceSpaceType(\"local\");\n        await renderer.xr.setSession(session);\n        button.textContent = \"STOP AR\";\n        sessionInit.domOverlay.root.style.display = \"\";\n        currentSession = session;\n      }\n      function onSessionEnded() {\n        currentSession.removeEventListener(\"end\", onSessionEnded);\n        button.textContent = \"START AR\";\n        sessionInit.domOverlay.root.style.display = \"none\";\n        currentSession = null;\n      }\n      button.style.display = \"\";\n      button.style.cursor = \"pointer\";\n      button.style.left = \"calc(50% - 50px)\";\n      button.style.width = \"100px\";\n      button.textContent = \"START AR\";\n      button.onmouseenter = () => {\n        button.style.opacity = \"1.0\";\n      };\n      button.onmouseleave = () => {\n        button.style.opacity = \"0.5\";\n      };\n      button.onclick = () => {\n        if (currentSession === null) {\n          navigator.xr.requestSession(\"immersive-ar\", sessionInit).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n    function disableButton() {\n      button.style.display = \"\";\n      button.style.cursor = \"auto\";\n      button.style.left = \"calc(50% - 75px)\";\n      button.style.width = \"150px\";\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n    function showARNotSupported() {\n      disableButton();\n      button.textContent = \"AR NOT SUPPORTED\";\n    }\n    function stylizeElement(element) {\n      element.style.position = \"absolute\";\n      element.style.bottom = \"20px\";\n      element.style.padding = \"12px 6px\";\n      element.style.border = \"1px solid #fff\";\n      element.style.borderRadius = \"4px\";\n      element.style.background = \"rgba(0,0,0,0.1)\";\n      element.style.color = \"#fff\";\n      element.style.font = \"normal 13px sans-serif\";\n      element.style.textAlign = \"center\";\n      element.style.opacity = \"0.5\";\n      element.style.outline = \"none\";\n      element.style.zIndex = \"999\";\n    }\n    if (\"xr\" in navigator) {\n      button.id = \"ARButton\";\n      button.style.display = \"none\";\n      stylizeElement(button);\n      navigator.xr.isSessionSupported(\"immersive-ar\").then(function (supported) {\n        supported ? showStartAR() : showARNotSupported();\n      }).catch(showARNotSupported);\n      return button;\n    } else {\n      const message = document.createElement(\"a\");\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, \"https:\");\n        message.innerHTML = \"WEBXR NEEDS HTTPS\";\n      } else {\n        message.href = \"https://immersiveweb.dev/\";\n        message.innerHTML = \"WEBXR NOT AVAILABLE\";\n      }\n      message.style.left = \"calc(50% - 90px)\";\n      message.style.width = \"180px\";\n      message.style.textDecoration = \"none\";\n      stylizeElement(message);\n      return message;\n    }\n  }\n}\nexport { ARButton };","map":{"version":3,"sources":["../../src/webxr/ARButton.ts"],"names":[],"mappings":"AAEA,MAAM,QAAA,CAAS;EACb,OAAO,YAAA,CAAa,QAAA,EAAyB,WAAA,GAA6B,CAAA,CAAA,EAA2C;IAC7G,MAAA,MAAA,GAAS,QAAA,CAAS,aAAA,CAAc,QAAQ,CAAA;IAE9C,SAAS,WAAA,CAAA,EAA8B;MAChC,IAAA,WAAA,CAAoB,UAAA,KAAe,KAAA,CAAA,EAAW;QAC3C,MAAA,OAAA,GAAU,QAAA,CAAS,aAAA,CAAc,KAAK,CAAA;QAC5C,OAAA,CAAQ,KAAA,CAAM,OAAA,GAAU,MAAA;QACf,QAAA,CAAA,IAAA,CAAK,WAAA,CAAY,OAAO,CAAA;QAEjC,MAAM,GAAA,GAAM,QAAA,CAAS,eAAA,CAAgB,4BAAA,EAA8B,KAAK,CAAA;QACpE,GAAA,CAAA,YAAA,CAAa,OAAA,EAAS,MAAM,CAAA;QAC5B,GAAA,CAAA,YAAA,CAAa,QAAA,EAAU,MAAM,CAAA;QACjC,GAAA,CAAI,KAAA,CAAM,QAAA,GAAW,UAAA;QACrB,GAAA,CAAI,KAAA,CAAM,KAAA,GAAQ,MAAA;QAClB,GAAA,CAAI,KAAA,CAAM,GAAA,GAAM,MAAA;QACZ,GAAA,CAAA,gBAAA,CAAiB,OAAA,EAAS,YAAY;UACxC,cAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,cAAA,CAAgB,GAAA,CAAA,CAAA;QAAI,CACrB,CAAA;QACD,OAAA,CAAQ,WAAA,CAAY,GAAG,CAAA;QAEvB,MAAM,IAAA,GAAO,QAAA,CAAS,eAAA,CAAgB,4BAAA,EAA8B,MAAM,CAAA;QACrE,IAAA,CAAA,YAAA,CAAa,GAAA,EAAK,+BAA+B,CAAA;QACjD,IAAA,CAAA,YAAA,CAAa,QAAA,EAAU,MAAM,CAAA;QAC7B,IAAA,CAAA,YAAA,CAAa,cAAA,EAAgB,KAAK,CAAA;QACvC,GAAA,CAAI,WAAA,CAAY,IAAI,CAAA;QAEhB,IAAA,WAAA,CAAY,gBAAA,KAAqB,KAAA,CAAA,EAAW;UAC9C,WAAA,CAAY,gBAAA,GAAmB,EAAA;QACjC;QAEY,WAAA,CAAA,gBAAA,CAAiB,IAAA,CAAK,aAAa,CAAA;QAC7C,WAAA,CAAoB,UAAA,GAAa;UAAE,IAAA,EAAM;QAAQ,CAAA;MACrD;MAIA,IAAI,cAAA,GAAmC,IAAA;MAEvC,eAAe,gBAAA,CAAiB,OAAA,EAAmC;QACzD,OAAA,CAAA,gBAAA,CAAiB,KAAA,EAAO,cAAc,CAAA;QAErC,QAAA,CAAA,EAAA,CAAG,qBAAA,CAAsB,OAAO,CAAA;QAEnC,MAAA,QAAA,CAAS,EAAA,CAAG,UAAA,CAAW,OAAc,CAAA;QAE3C,MAAA,CAAO,WAAA,GAAc,SAAA;QACnB,WAAA,CAAoB,UAAA,CAAY,IAAA,CAAK,KAAA,CAAM,OAAA,GAAU,EAAA;QAEtC,cAAA,GAAA,OAAA;MACnB;MAEA,SAAS,cAAA,CAAA,EAAgC;QACvB,cAAA,CAAA,mBAAA,CAAoB,KAAA,EAAO,cAAc,CAAA;QAEzD,MAAA,CAAO,WAAA,GAAc,UAAA;QACnB,WAAA,CAAoB,UAAA,CAAY,IAAA,CAAK,KAAA,CAAM,OAAA,GAAU,MAAA;QAEtC,cAAA,GAAA,IAAA;MACnB;MAIA,MAAA,CAAO,KAAA,CAAM,OAAA,GAAU,EAAA;MAEvB,MAAA,CAAO,KAAA,CAAM,MAAA,GAAS,SAAA;MACtB,MAAA,CAAO,KAAA,CAAM,IAAA,GAAO,kBAAA;MACpB,MAAA,CAAO,KAAA,CAAM,KAAA,GAAQ,OAAA;MAErB,MAAA,CAAO,WAAA,GAAc,UAAA;MAErB,MAAA,CAAO,YAAA,GAAe,MAAY;QAChC,MAAA,CAAO,KAAA,CAAM,OAAA,GAAU,KAAA;MAAA,CAAA;MAGzB,MAAA,CAAO,YAAA,GAAe,MAAY;QAChC,MAAA,CAAO,KAAA,CAAM,OAAA,GAAU,KAAA;MAAA,CAAA;MAGzB,MAAA,CAAO,OAAA,GAAU,MAAY;QAC3B,IAAI,cAAA,KAAmB,IAAA,EAAM;UACzB,SAAA,CAAwB,EAAA,CAAI,cAAA,CAAe,cAAA,EAAgB,WAAW,CAAA,CAAE,IAAA,CAAK,gBAAgB,CAAA;QAAA,CAAA,MAC1F;UACL,cAAA,CAAe,GAAA,CAAI,CAAA;QACrB;MAAA,CAAA;IAEJ;IAEA,SAAS,aAAA,CAAA,EAAsB;MAC7B,MAAA,CAAO,KAAA,CAAM,OAAA,GAAU,EAAA;MAEvB,MAAA,CAAO,KAAA,CAAM,MAAA,GAAS,MAAA;MACtB,MAAA,CAAO,KAAA,CAAM,IAAA,GAAO,kBAAA;MACpB,MAAA,CAAO,KAAA,CAAM,KAAA,GAAQ,OAAA;MAErB,MAAA,CAAO,YAAA,GAAe,IAAA;MACtB,MAAA,CAAO,YAAA,GAAe,IAAA;MAEtB,MAAA,CAAO,OAAA,GAAU,IAAA;IACnB;IAEA,SAAS,kBAAA,CAAA,EAA2B;MACpB,aAAA,CAAA,CAAA;MAEd,MAAA,CAAO,WAAA,GAAc,kBAAA;IACvB;IAEA,SAAS,cAAA,CAAe,OAAA,EAA4B;MAClD,OAAA,CAAQ,KAAA,CAAM,QAAA,GAAW,UAAA;MACzB,OAAA,CAAQ,KAAA,CAAM,MAAA,GAAS,MAAA;MACvB,OAAA,CAAQ,KAAA,CAAM,OAAA,GAAU,UAAA;MACxB,OAAA,CAAQ,KAAA,CAAM,MAAA,GAAS,gBAAA;MACvB,OAAA,CAAQ,KAAA,CAAM,YAAA,GAAe,KAAA;MAC7B,OAAA,CAAQ,KAAA,CAAM,UAAA,GAAa,iBAAA;MAC3B,OAAA,CAAQ,KAAA,CAAM,KAAA,GAAQ,MAAA;MACtB,OAAA,CAAQ,KAAA,CAAM,IAAA,GAAO,wBAAA;MACrB,OAAA,CAAQ,KAAA,CAAM,SAAA,GAAY,QAAA;MAC1B,OAAA,CAAQ,KAAA,CAAM,OAAA,GAAU,KAAA;MACxB,OAAA,CAAQ,KAAA,CAAM,OAAA,GAAU,MAAA;MACxB,OAAA,CAAQ,KAAA,CAAM,MAAA,GAAS,KAAA;IACzB;IAEA,IAAI,IAAA,IAAQ,SAAA,EAAW;MACrB,MAAA,CAAO,EAAA,GAAK,UAAA;MACZ,MAAA,CAAO,KAAA,CAAM,OAAA,GAAU,MAAA;MAEvB,cAAA,CAAe,MAAM,CAAA;MAGnB,SAAA,CACC,EAAA,CAAI,kBAAA,CAAmB,cAAc,CAAA,CACrC,IAAA,CAAK,UAAU,SAAA,EAAoB;QACtB,SAAA,GAAA,WAAA,CAAA,CAAA,GAAgB,kBAAA,CAAA,CAAA;MAAmB,CAChD,CAAA,CACA,KAAA,CAAM,kBAAkB,CAAA;MAEpB,OAAA,MAAA;IAAA,CAAA,MACF;MACC,MAAA,OAAA,GAAU,QAAA,CAAS,aAAA,CAAc,GAAG,CAAA;MAEtC,IAAA,MAAA,CAAO,eAAA,KAAoB,KAAA,EAAO;QACpC,OAAA,CAAQ,IAAA,GAAO,QAAA,CAAS,QAAA,CAAS,IAAA,CAAK,OAAA,CAAQ,QAAA,EAAU,QAAQ,CAAA;QAChE,OAAA,CAAQ,SAAA,GAAY,mBAAA;MAAA,CAAA,MACf;QACL,OAAA,CAAQ,IAAA,GAAO,2BAAA;QACf,OAAA,CAAQ,SAAA,GAAY,qBAAA;MACtB;MAEA,OAAA,CAAQ,KAAA,CAAM,IAAA,GAAO,kBAAA;MACrB,OAAA,CAAQ,KAAA,CAAM,KAAA,GAAQ,OAAA;MACtB,OAAA,CAAQ,KAAA,CAAM,cAAA,GAAiB,MAAA;MAE/B,cAAA,CAAe,OAAO,CAAA;MAEf,OAAA,OAAA;IACT;EACF;AACF","sourcesContent":["import { WebGLRenderer } from 'three'\n\nclass ARButton {\n  static createButton(renderer: WebGLRenderer, sessionInit: XRSessionInit = {}): HTMLButtonElement | HTMLAnchorElement {\n    const button = document.createElement('button')\n\n    function showStartAR(/*device*/): void {\n      if ((sessionInit as any).domOverlay === undefined) {\n        const overlay = document.createElement('div')\n        overlay.style.display = 'none'\n        document.body.appendChild(overlay)\n\n        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n        svg.setAttribute('width', '38px')\n        svg.setAttribute('height', '38px')\n        svg.style.position = 'absolute'\n        svg.style.right = '20px'\n        svg.style.top = '20px'\n        svg.addEventListener('click', function () {\n          currentSession?.end()\n        })\n        overlay.appendChild(svg)\n\n        const path = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n        path.setAttribute('d', 'M 12,12 L 28,28 M 28,12 12,28')\n        path.setAttribute('stroke', '#fff')\n        path.setAttribute('stroke-width', '2px')\n        svg.appendChild(path)\n\n        if (sessionInit.optionalFeatures === undefined) {\n          sessionInit.optionalFeatures = []\n        }\n\n        sessionInit.optionalFeatures.push('dom-overlay')\n        ;(sessionInit as any).domOverlay = { root: overlay }\n      }\n\n      //\n\n      let currentSession: XRSession | null = null\n\n      async function onSessionStarted(session: XRSession): Promise<void> {\n        session.addEventListener('end', onSessionEnded)\n\n        renderer.xr.setReferenceSpaceType('local')\n\n        await renderer.xr.setSession(session as any)\n\n        button.textContent = 'STOP AR'\n        ;(sessionInit as any).domOverlay!.root.style.display = ''\n\n        currentSession = session\n      }\n\n      function onSessionEnded(/*event*/): void {\n        currentSession!.removeEventListener('end', onSessionEnded)\n\n        button.textContent = 'START AR'\n        ;(sessionInit as any).domOverlay!.root.style.display = 'none'\n\n        currentSession = null\n      }\n\n      //\n\n      button.style.display = ''\n\n      button.style.cursor = 'pointer'\n      button.style.left = 'calc(50% - 50px)'\n      button.style.width = '100px'\n\n      button.textContent = 'START AR'\n\n      button.onmouseenter = (): void => {\n        button.style.opacity = '1.0'\n      }\n\n      button.onmouseleave = (): void => {\n        button.style.opacity = '0.5'\n      }\n\n      button.onclick = (): void => {\n        if (currentSession === null) {\n          ;(navigator as Navigator).xr!.requestSession('immersive-ar', sessionInit).then(onSessionStarted)\n        } else {\n          currentSession.end()\n        }\n      }\n    }\n\n    function disableButton(): void {\n      button.style.display = ''\n\n      button.style.cursor = 'auto'\n      button.style.left = 'calc(50% - 75px)'\n      button.style.width = '150px'\n\n      button.onmouseenter = null\n      button.onmouseleave = null\n\n      button.onclick = null\n    }\n\n    function showARNotSupported(): void {\n      disableButton()\n\n      button.textContent = 'AR NOT SUPPORTED'\n    }\n\n    function stylizeElement(element: HTMLElement): void {\n      element.style.position = 'absolute'\n      element.style.bottom = '20px'\n      element.style.padding = '12px 6px'\n      element.style.border = '1px solid #fff'\n      element.style.borderRadius = '4px'\n      element.style.background = 'rgba(0,0,0,0.1)'\n      element.style.color = '#fff'\n      element.style.font = 'normal 13px sans-serif'\n      element.style.textAlign = 'center'\n      element.style.opacity = '0.5'\n      element.style.outline = 'none'\n      element.style.zIndex = '999'\n    }\n\n    if ('xr' in navigator) {\n      button.id = 'ARButton'\n      button.style.display = 'none'\n\n      stylizeElement(button)\n\n      // Query for session mode\n      ;(navigator as Navigator)\n        .xr!.isSessionSupported('immersive-ar')\n        .then(function (supported: boolean) {\n          supported ? showStartAR() : showARNotSupported()\n        })\n        .catch(showARNotSupported)\n\n      return button\n    } else {\n      const message = document.createElement('a')\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:')\n        message.innerHTML = 'WEBXR NEEDS HTTPS' // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/'\n        message.innerHTML = 'WEBXR NOT AVAILABLE'\n      }\n\n      message.style.left = 'calc(50% - 90px)'\n      message.style.width = '180px'\n      message.style.textDecoration = 'none'\n\n      stylizeElement(message)\n\n      return message\n    }\n  }\n}\n\nexport { ARButton }\n"]},"metadata":{},"sourceType":"module"}