{"ast":null,"code":"class AsciiEffect {\n  constructor(renderer, charSet = \" .:-=+*#%@\", options = {}) {\n    const fResolution = options[\"resolution\"] || 0.15;\n    const iScale = options[\"scale\"] || 1;\n    const bColor = options[\"color\"] || false;\n    const bAlpha = options[\"alpha\"] || false;\n    const bBlock = options[\"block\"] || false;\n    const bInvert = options[\"invert\"] || false;\n    const strResolution = options[\"strResolution\"] || \"low\";\n    let width, height;\n    const domElement = document.createElement(\"div\");\n    domElement.style.cursor = \"default\";\n    const oAscii = document.createElement(\"table\");\n    domElement.appendChild(oAscii);\n    let iWidth, iHeight;\n    let oImg;\n    this.setSize = function (w, h) {\n      width = w;\n      height = h;\n      renderer.setSize(w, h);\n      initAsciiSize();\n    };\n    this.render = function (scene, camera) {\n      renderer.render(scene, camera);\n      asciifyImage(oAscii);\n    };\n    this.domElement = domElement;\n    function initAsciiSize() {\n      iWidth = Math.floor(width * fResolution);\n      iHeight = Math.floor(height * fResolution);\n      oCanvas.width = iWidth;\n      oCanvas.height = iHeight;\n      oImg = renderer.domElement;\n      if (oImg.style.backgroundColor) {\n        oAscii.rows[0].cells[0].style.backgroundColor = oImg.style.backgroundColor;\n        oAscii.rows[0].cells[0].style.color = oImg.style.color;\n      }\n      oAscii.cellSpacing = 0;\n      oAscii.cellPadding = 0;\n      const oStyle = oAscii.style;\n      oStyle.whiteSpace = \"pre\";\n      oStyle.margin = \"0px\";\n      oStyle.padding = \"0px\";\n      oStyle.letterSpacing = fLetterSpacing + \"px\";\n      oStyle.fontFamily = strFont;\n      oStyle.fontSize = fFontSize + \"px\";\n      oStyle.lineHeight = fLineHeight + \"px\";\n      oStyle.textAlign = \"left\";\n      oStyle.textDecoration = \"none\";\n    }\n    const aDefaultCharList = \" .,:;i1tfLCG08@\".split(\"\");\n    const aDefaultColorCharList = \" CGO08@\".split(\"\");\n    const strFont = \"courier new, monospace\";\n    const oCanvasImg = renderer.domElement;\n    const oCanvas = document.createElement(\"canvas\");\n    if (!oCanvas.getContext) {\n      return;\n    }\n    const oCtx = oCanvas.getContext(\"2d\");\n    if (!oCtx.getImageData) {\n      return;\n    }\n    let aCharList = bColor ? aDefaultColorCharList : aDefaultCharList;\n    if (charSet) aCharList = charSet;\n    const fFontSize = 2 / fResolution * iScale;\n    const fLineHeight = 2 / fResolution * iScale;\n    let fLetterSpacing = 0;\n    if (strResolution == \"low\") {\n      switch (iScale) {\n        case 1:\n          fLetterSpacing = -1;\n          break;\n        case 2:\n        case 3:\n          fLetterSpacing = -2.1;\n          break;\n        case 4:\n          fLetterSpacing = -3.1;\n          break;\n        case 5:\n          fLetterSpacing = -4.15;\n          break;\n      }\n    }\n    if (strResolution == \"medium\") {\n      switch (iScale) {\n        case 1:\n          fLetterSpacing = 0;\n          break;\n        case 2:\n          fLetterSpacing = -1;\n          break;\n        case 3:\n          fLetterSpacing = -1.04;\n          break;\n        case 4:\n        case 5:\n          fLetterSpacing = -2.1;\n          break;\n      }\n    }\n    if (strResolution == \"high\") {\n      switch (iScale) {\n        case 1:\n        case 2:\n          fLetterSpacing = 0;\n          break;\n        case 3:\n        case 4:\n        case 5:\n          fLetterSpacing = -1;\n          break;\n      }\n    }\n    function asciifyImage(oAscii2) {\n      oCtx.clearRect(0, 0, iWidth, iHeight);\n      oCtx.drawImage(oCanvasImg, 0, 0, iWidth, iHeight);\n      const oImgData = oCtx.getImageData(0, 0, iWidth, iHeight).data;\n      let strChars = \"\";\n      for (let y = 0; y < iHeight; y += 2) {\n        for (let x = 0; x < iWidth; x++) {\n          const iOffset = (y * iWidth + x) * 4;\n          const iRed = oImgData[iOffset];\n          const iGreen = oImgData[iOffset + 1];\n          const iBlue = oImgData[iOffset + 2];\n          const iAlpha = oImgData[iOffset + 3];\n          let iCharIdx;\n          let fBrightness;\n          fBrightness = (0.3 * iRed + 0.59 * iGreen + 0.11 * iBlue) / 255;\n          if (iAlpha == 0) {\n            fBrightness = 1;\n          }\n          iCharIdx = Math.floor((1 - fBrightness) * (aCharList.length - 1));\n          if (bInvert) {\n            iCharIdx = aCharList.length - iCharIdx - 1;\n          }\n          let strThisChar = aCharList[iCharIdx];\n          if (strThisChar === void 0 || strThisChar == \" \") strThisChar = \"&nbsp;\";\n          if (bColor) {\n            strChars += \"<span style='color:rgb(\" + iRed + \",\" + iGreen + \",\" + iBlue + \");\" + (bBlock ? \"background-color:rgb(\" + iRed + \",\" + iGreen + \",\" + iBlue + \");\" : \"\") + (bAlpha ? \"opacity:\" + iAlpha / 255 + \";\" : \"\") + \"'>\" + strThisChar + \"</span>\";\n          } else {\n            strChars += strThisChar;\n          }\n        }\n        strChars += \"<br/>\";\n      }\n      oAscii2.innerHTML = `<tr><td style=\"display:block;width:${width}px;height:${height}px;overflow:hidden\">${strChars}</td></tr>`;\n    }\n  }\n}\nexport { AsciiEffect };","map":{"version":3,"sources":["../../src/effects/AsciiEffect.js"],"names":["oAscii"],"mappings":"AAMA,MAAM,WAAA,CAAY;EAChB,WAAA,CAAY,QAAA,EAAU,OAAA,GAAU,YAAA,EAAc,OAAA,GAAU,CAAA,CAAA,EAAI;IAO1D,MAAM,WAAA,GAAc,OAAA,CAAQ,YAAY,CAAA,IAAK,IAAA;IAC7C,MAAM,MAAA,GAAS,OAAA,CAAQ,OAAO,CAAA,IAAK,CAAA;IACnC,MAAM,MAAA,GAAS,OAAA,CAAQ,OAAO,CAAA,IAAK,KAAA;IACnC,MAAM,MAAA,GAAS,OAAA,CAAQ,OAAO,CAAA,IAAK,KAAA;IACnC,MAAM,MAAA,GAAS,OAAA,CAAQ,OAAO,CAAA,IAAK,KAAA;IACnC,MAAM,OAAA,GAAU,OAAA,CAAQ,QAAQ,CAAA,IAAK,KAAA;IACrC,MAAM,aAAA,GAAgB,OAAA,CAAQ,eAAe,CAAA,IAAK,KAAA;IAElD,IAAI,KAAA,EAAO,MAAA;IAEX,MAAM,UAAA,GAAa,QAAA,CAAS,aAAA,CAAc,KAAK,CAAA;IAC/C,UAAA,CAAW,KAAA,CAAM,MAAA,GAAS,SAAA;IAE1B,MAAM,MAAA,GAAS,QAAA,CAAS,aAAA,CAAc,OAAO,CAAA;IAC7C,UAAA,CAAW,WAAA,CAAY,MAAM,CAAA;IAE7B,IAAI,MAAA,EAAQ,OAAA;IACZ,IAAI,IAAA;IAEJ,IAAA,CAAK,OAAA,GAAU,UAAU,CAAA,EAAG,CAAA,EAAG;MAC7B,KAAA,GAAQ,CAAA;MACR,MAAA,GAAS,CAAA;MAET,QAAA,CAAS,OAAA,CAAQ,CAAA,EAAG,CAAC,CAAA;MAErB,aAAA,CAAe,CAAA;IAChB,CAAA;IAED,IAAA,CAAK,MAAA,GAAS,UAAU,KAAA,EAAO,MAAA,EAAQ;MACrC,QAAA,CAAS,MAAA,CAAO,KAAA,EAAO,MAAM,CAAA;MAC7B,YAAA,CAAa,MAAM,CAAA;IACpB,CAAA;IAED,IAAA,CAAK,UAAA,GAAa,UAAA;IAIlB,SAAS,aAAA,CAAA,EAAgB;MACvB,MAAA,GAAS,IAAA,CAAK,KAAA,CAAM,KAAA,GAAQ,WAAW,CAAA;MACvC,OAAA,GAAU,IAAA,CAAK,KAAA,CAAM,MAAA,GAAS,WAAW,CAAA;MAEzC,OAAA,CAAQ,KAAA,GAAQ,MAAA;MAChB,OAAA,CAAQ,MAAA,GAAS,OAAA;MAKjB,IAAA,GAAO,QAAA,CAAS,UAAA;MAEhB,IAAI,IAAA,CAAK,KAAA,CAAM,eAAA,EAAiB;QAC9B,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA,CAAE,KAAA,CAAM,CAAC,CAAA,CAAE,KAAA,CAAM,eAAA,GAAkB,IAAA,CAAK,KAAA,CAAM,eAAA;QAC3D,MAAA,CAAO,IAAA,CAAK,CAAC,CAAA,CAAE,KAAA,CAAM,CAAC,CAAA,CAAE,KAAA,CAAM,KAAA,GAAQ,IAAA,CAAK,KAAA,CAAM,KAAA;MAClD;MAED,MAAA,CAAO,WAAA,GAAc,CAAA;MACrB,MAAA,CAAO,WAAA,GAAc,CAAA;MAErB,MAAM,MAAA,GAAS,MAAA,CAAO,KAAA;MACtB,MAAA,CAAO,UAAA,GAAa,KAAA;MACpB,MAAA,CAAO,MAAA,GAAS,KAAA;MAChB,MAAA,CAAO,OAAA,GAAU,KAAA;MACjB,MAAA,CAAO,aAAA,GAAgB,cAAA,GAAiB,IAAA;MACxC,MAAA,CAAO,UAAA,GAAa,OAAA;MACpB,MAAA,CAAO,QAAA,GAAW,SAAA,GAAY,IAAA;MAC9B,MAAA,CAAO,UAAA,GAAa,WAAA,GAAc,IAAA;MAClC,MAAA,CAAO,SAAA,GAAY,MAAA;MACnB,MAAA,CAAO,cAAA,GAAiB,MAAA;IACzB;IAED,MAAM,gBAAA,GAAmB,iBAAA,CAAkB,KAAA,CAAM,EAAE,CAAA;IACnD,MAAM,qBAAA,GAAwB,SAAA,CAAU,KAAA,CAAM,EAAE,CAAA;IAChD,MAAM,OAAA,GAAU,wBAAA;IAEhB,MAAM,UAAA,GAAa,QAAA,CAAS,UAAA;IAE5B,MAAM,OAAA,GAAU,QAAA,CAAS,aAAA,CAAc,QAAQ,CAAA;IAC/C,IAAI,CAAC,OAAA,CAAQ,UAAA,EAAY;MACvB;IACD;IAED,MAAM,IAAA,GAAO,OAAA,CAAQ,UAAA,CAAW,IAAI,CAAA;IACpC,IAAI,CAAC,IAAA,CAAK,YAAA,EAAc;MACtB;IACD;IAED,IAAI,SAAA,GAAY,MAAA,GAAS,qBAAA,GAAwB,gBAAA;IAEjD,IAAI,OAAA,EAAS,SAAA,GAAY,OAAA;IAIzB,MAAM,SAAA,GAAa,CAAA,GAAI,WAAA,GAAe,MAAA;IACtC,MAAM,WAAA,GAAe,CAAA,GAAI,WAAA,GAAe,MAAA;IAIxC,IAAI,cAAA,GAAiB,CAAA;IAErB,IAAI,aAAA,IAAiB,KAAA,EAAO;MAC1B,QAAQ,MAAA;QACN,KAAK,CAAA;UACH,cAAA,GAAiB,CAAA,CAAA;UACjB;QACF,KAAK,CAAA;QACL,KAAK,CAAA;UACH,cAAA,GAAiB,CAAA,GAAA;UACjB;QACF,KAAK,CAAA;UACH,cAAA,GAAiB,CAAA,GAAA;UACjB;QACF,KAAK,CAAA;UACH,cAAA,GAAiB,CAAA,IAAA;UACjB;MACH;IACF;IAED,IAAI,aAAA,IAAiB,QAAA,EAAU;MAC7B,QAAQ,MAAA;QACN,KAAK,CAAA;UACH,cAAA,GAAiB,CAAA;UACjB;QACF,KAAK,CAAA;UACH,cAAA,GAAiB,CAAA,CAAA;UACjB;QACF,KAAK,CAAA;UACH,cAAA,GAAiB,CAAA,IAAA;UACjB;QACF,KAAK,CAAA;QACL,KAAK,CAAA;UACH,cAAA,GAAiB,CAAA,GAAA;UACjB;MACH;IACF;IAED,IAAI,aAAA,IAAiB,MAAA,EAAQ;MAC3B,QAAQ,MAAA;QACN,KAAK,CAAA;QACL,KAAK,CAAA;UACH,cAAA,GAAiB,CAAA;UACjB;QACF,KAAK,CAAA;QACL,KAAK,CAAA;QACL,KAAK,CAAA;UACH,cAAA,GAAiB,CAAA,CAAA;UACjB;MACH;IACF;IAMD,SAAS,YAAA,CAAaA,OAAAA,EAAQ;MAC5B,IAAA,CAAK,SAAA,CAAU,CAAA,EAAG,CAAA,EAAG,MAAA,EAAQ,OAAO,CAAA;MACpC,IAAA,CAAK,SAAA,CAAU,UAAA,EAAY,CAAA,EAAG,CAAA,EAAG,MAAA,EAAQ,OAAO,CAAA;MAChD,MAAM,QAAA,GAAW,IAAA,CAAK,YAAA,CAAa,CAAA,EAAG,CAAA,EAAG,MAAA,EAAQ,OAAO,CAAA,CAAE,IAAA;MAG1D,IAAI,QAAA,GAAW,EAAA;MAIf,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,OAAA,EAAS,CAAA,IAAK,CAAA,EAAG;QACnC,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,MAAA,EAAQ,CAAA,EAAA,EAAK;UAC/B,MAAM,OAAA,GAAA,CAAW,CAAA,GAAI,MAAA,GAAS,CAAA,IAAK,CAAA;UAEnC,MAAM,IAAA,GAAO,QAAA,CAAS,OAAO,CAAA;UAC7B,MAAM,MAAA,GAAS,QAAA,CAAS,OAAA,GAAU,CAAC,CAAA;UACnC,MAAM,KAAA,GAAQ,QAAA,CAAS,OAAA,GAAU,CAAC,CAAA;UAClC,MAAM,MAAA,GAAS,QAAA,CAAS,OAAA,GAAU,CAAC,CAAA;UACnC,IAAI,QAAA;UAEJ,IAAI,WAAA;UAEJ,WAAA,GAAA,CAAe,GAAA,GAAM,IAAA,GAAO,IAAA,GAAO,MAAA,GAAS,IAAA,GAAO,KAAA,IAAS,GAAA;UAG5D,IAAI,MAAA,IAAU,CAAA,EAAG;YAGf,WAAA,GAAc,CAAA;UACf;UAED,QAAA,GAAW,IAAA,CAAK,KAAA,CAAA,CAAO,CAAA,GAAI,WAAA,KAAgB,SAAA,CAAU,MAAA,GAAS,CAAA,CAAE,CAAA;UAEhE,IAAI,OAAA,EAAS;YACX,QAAA,GAAW,SAAA,CAAU,MAAA,GAAS,QAAA,GAAW,CAAA;UAC1C;UAMD,IAAI,WAAA,GAAc,SAAA,CAAU,QAAQ,CAAA;UAEpC,IAAI,WAAA,KAAgB,KAAA,CAAA,IAAa,WAAA,IAAe,GAAA,EAAK,WAAA,GAAc,QAAA;UAEnE,IAAI,MAAA,EAAQ;YACV,QAAA,IACE,yBAAA,GAEA,IAAA,GACA,GAAA,GACA,MAAA,GACA,GAAA,GACA,KAAA,GACA,IAAA,IACC,MAAA,GAAS,uBAAA,GAA0B,IAAA,GAAO,GAAA,GAAM,MAAA,GAAS,GAAA,GAAM,KAAA,GAAQ,IAAA,GAAO,EAAA,CAAA,IAC9E,MAAA,GAAS,UAAA,GAAa,MAAA,GAAS,GAAA,GAAM,GAAA,GAAM,EAAA,CAAA,GAC5C,IAAA,GACA,WAAA,GACA,SAAA;UACd,CAAA,MAAiB;YACL,QAAA,IAAY,WAAA;UACb;QACF;QAED,QAAA,IAAY,OAAA;MACb;MAED,OAAA,CAAO,SAAA,GAAY,sCAAsC,KAAA,aAAkB,MAAA,uBAA6B,QAAA,YAAA;IAKzG;EACF;AACH","sourcesContent":["/**\n * Ascii generation is based on https://github.com/hassadee/jsascii/blob/master/jsascii.js\n *\n * 16 April 2012 - @blurspline\n */\n\nclass AsciiEffect {\n  constructor(renderer, charSet = ' .:-=+*#%@', options = {}) {\n    // ' .,:;=|iI+hHOE#`$';\n    // darker bolder character set from https://github.com/saw/Canvas-ASCII-Art/\n    // ' .\\'`^\",:;Il!i~+_-?][}{1)(|/tfjrxnuvczXYUJCLQ0OZmwqpdbkhao*#MW&8%B@$'.split('');\n\n    // Some ASCII settings\n\n    const fResolution = options['resolution'] || 0.15 // Higher for more details\n    const iScale = options['scale'] || 1\n    const bColor = options['color'] || false // nice but slows down rendering!\n    const bAlpha = options['alpha'] || false // Transparency\n    const bBlock = options['block'] || false // blocked characters. like good O dos\n    const bInvert = options['invert'] || false // black is white, white is black\n    const strResolution = options['strResolution'] || 'low'\n\n    let width, height\n\n    const domElement = document.createElement('div')\n    domElement.style.cursor = 'default'\n\n    const oAscii = document.createElement('table')\n    domElement.appendChild(oAscii)\n\n    let iWidth, iHeight\n    let oImg\n\n    this.setSize = function (w, h) {\n      width = w\n      height = h\n\n      renderer.setSize(w, h)\n\n      initAsciiSize()\n    }\n\n    this.render = function (scene, camera) {\n      renderer.render(scene, camera)\n      asciifyImage(oAscii)\n    }\n\n    this.domElement = domElement\n\n    // Throw in ascii library from https://github.com/hassadee/jsascii/blob/master/jsascii.js (MIT License)\n\n    function initAsciiSize() {\n      iWidth = Math.floor(width * fResolution)\n      iHeight = Math.floor(height * fResolution)\n\n      oCanvas.width = iWidth\n      oCanvas.height = iHeight\n      // oCanvas.style.display = \"none\";\n      // oCanvas.style.width = iWidth;\n      // oCanvas.style.height = iHeight;\n\n      oImg = renderer.domElement\n\n      if (oImg.style.backgroundColor) {\n        oAscii.rows[0].cells[0].style.backgroundColor = oImg.style.backgroundColor\n        oAscii.rows[0].cells[0].style.color = oImg.style.color\n      }\n\n      oAscii.cellSpacing = 0\n      oAscii.cellPadding = 0\n\n      const oStyle = oAscii.style\n      oStyle.whiteSpace = 'pre'\n      oStyle.margin = '0px'\n      oStyle.padding = '0px'\n      oStyle.letterSpacing = fLetterSpacing + 'px'\n      oStyle.fontFamily = strFont\n      oStyle.fontSize = fFontSize + 'px'\n      oStyle.lineHeight = fLineHeight + 'px'\n      oStyle.textAlign = 'left'\n      oStyle.textDecoration = 'none'\n    }\n\n    const aDefaultCharList = ' .,:;i1tfLCG08@'.split('')\n    const aDefaultColorCharList = ' CGO08@'.split('')\n    const strFont = 'courier new, monospace'\n\n    const oCanvasImg = renderer.domElement\n\n    const oCanvas = document.createElement('canvas')\n    if (!oCanvas.getContext) {\n      return\n    }\n\n    const oCtx = oCanvas.getContext('2d')\n    if (!oCtx.getImageData) {\n      return\n    }\n\n    let aCharList = bColor ? aDefaultColorCharList : aDefaultCharList\n\n    if (charSet) aCharList = charSet\n\n    // Setup dom\n\n    const fFontSize = (2 / fResolution) * iScale\n    const fLineHeight = (2 / fResolution) * iScale\n\n    // adjust letter-spacing for all combinations of scale and resolution to get it to fit the image width.\n\n    let fLetterSpacing = 0\n\n    if (strResolution == 'low') {\n      switch (iScale) {\n        case 1:\n          fLetterSpacing = -1\n          break\n        case 2:\n        case 3:\n          fLetterSpacing = -2.1\n          break\n        case 4:\n          fLetterSpacing = -3.1\n          break\n        case 5:\n          fLetterSpacing = -4.15\n          break\n      }\n    }\n\n    if (strResolution == 'medium') {\n      switch (iScale) {\n        case 1:\n          fLetterSpacing = 0\n          break\n        case 2:\n          fLetterSpacing = -1\n          break\n        case 3:\n          fLetterSpacing = -1.04\n          break\n        case 4:\n        case 5:\n          fLetterSpacing = -2.1\n          break\n      }\n    }\n\n    if (strResolution == 'high') {\n      switch (iScale) {\n        case 1:\n        case 2:\n          fLetterSpacing = 0\n          break\n        case 3:\n        case 4:\n        case 5:\n          fLetterSpacing = -1\n          break\n      }\n    }\n\n    // can't get a span or div to flow like an img element, but a table works?\n\n    // convert img element to ascii\n\n    function asciifyImage(oAscii) {\n      oCtx.clearRect(0, 0, iWidth, iHeight)\n      oCtx.drawImage(oCanvasImg, 0, 0, iWidth, iHeight)\n      const oImgData = oCtx.getImageData(0, 0, iWidth, iHeight).data\n\n      // Coloring loop starts now\n      let strChars = ''\n\n      // console.time('rendering');\n\n      for (let y = 0; y < iHeight; y += 2) {\n        for (let x = 0; x < iWidth; x++) {\n          const iOffset = (y * iWidth + x) * 4\n\n          const iRed = oImgData[iOffset]\n          const iGreen = oImgData[iOffset + 1]\n          const iBlue = oImgData[iOffset + 2]\n          const iAlpha = oImgData[iOffset + 3]\n          let iCharIdx\n\n          let fBrightness\n\n          fBrightness = (0.3 * iRed + 0.59 * iGreen + 0.11 * iBlue) / 255\n          // fBrightness = (0.3*iRed + 0.5*iGreen + 0.3*iBlue) / 255;\n\n          if (iAlpha == 0) {\n            // should calculate alpha instead, but quick hack :)\n            //fBrightness *= (iAlpha / 255);\n            fBrightness = 1\n          }\n\n          iCharIdx = Math.floor((1 - fBrightness) * (aCharList.length - 1))\n\n          if (bInvert) {\n            iCharIdx = aCharList.length - iCharIdx - 1\n          }\n\n          // good for debugging\n          //fBrightness = Math.floor(fBrightness * 10);\n          //strThisChar = fBrightness;\n\n          let strThisChar = aCharList[iCharIdx]\n\n          if (strThisChar === undefined || strThisChar == ' ') strThisChar = '&nbsp;'\n\n          if (bColor) {\n            strChars +=\n              \"<span style='\" +\n              'color:rgb(' +\n              iRed +\n              ',' +\n              iGreen +\n              ',' +\n              iBlue +\n              ');' +\n              (bBlock ? 'background-color:rgb(' + iRed + ',' + iGreen + ',' + iBlue + ');' : '') +\n              (bAlpha ? 'opacity:' + iAlpha / 255 + ';' : '') +\n              \"'>\" +\n              strThisChar +\n              '</span>'\n          } else {\n            strChars += strThisChar\n          }\n        }\n\n        strChars += '<br/>'\n      }\n\n      oAscii.innerHTML = `<tr><td style=\"display:block;width:${width}px;height:${height}px;overflow:hidden\">${strChars}</td></tr>`\n\n      // console.timeEnd('rendering');\n\n      // return oAscii;\n    }\n  }\n}\n\nexport { AsciiEffect }\n"]},"metadata":{},"sourceType":"module"}