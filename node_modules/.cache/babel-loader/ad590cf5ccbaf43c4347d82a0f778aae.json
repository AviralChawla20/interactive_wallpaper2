{"ast":null,"code":"import { Vector3 } from \"three\";\nconst _v1 = new Vector3();\nconst _v2 = new Vector3();\nconst _v3 = new Vector3();\nconst EPS = 1e-10;\nclass Capsule {\n  constructor(start = new Vector3(0, 0, 0), end = new Vector3(0, 1, 0), radius = 1) {\n    this.start = start;\n    this.end = end;\n    this.radius = radius;\n  }\n  clone() {\n    return new Capsule(this.start.clone(), this.end.clone(), this.radius);\n  }\n  set(start, end, radius) {\n    this.start.copy(start);\n    this.end.copy(end);\n    this.radius = radius;\n  }\n  copy(capsule) {\n    this.start.copy(capsule.start);\n    this.end.copy(capsule.end);\n    this.radius = capsule.radius;\n  }\n  getCenter(target) {\n    return target.copy(this.end).add(this.start).multiplyScalar(0.5);\n  }\n  translate(v) {\n    this.start.add(v);\n    this.end.add(v);\n  }\n  checkAABBAxis(p1x, p1y, p2x, p2y, minx, maxx, miny, maxy, radius) {\n    return (minx - p1x < radius || minx - p2x < radius) && (p1x - maxx < radius || p2x - maxx < radius) && (miny - p1y < radius || miny - p2y < radius) && (p1y - maxy < radius || p2y - maxy < radius);\n  }\n  intersectsBox(box) {\n    return this.checkAABBAxis(this.start.x, this.start.y, this.end.x, this.end.y, box.min.x, box.max.x, box.min.y, box.max.y, this.radius) && this.checkAABBAxis(this.start.x, this.start.z, this.end.x, this.end.z, box.min.x, box.max.x, box.min.z, box.max.z, this.radius) && this.checkAABBAxis(this.start.y, this.start.z, this.end.y, this.end.z, box.min.y, box.max.y, box.min.z, box.max.z, this.radius);\n  }\n  lineLineMinimumPoints(line1, line2) {\n    const r = _v1.copy(line1.end).sub(line1.start);\n    const s = _v2.copy(line2.end).sub(line2.start);\n    const w = _v3.copy(line2.start).sub(line1.start);\n    const a = r.dot(s),\n      b = r.dot(r),\n      c = s.dot(s),\n      d = s.dot(w),\n      e = r.dot(w);\n    let t1, t2;\n    const divisor = b * c - a * a;\n    if (Math.abs(divisor) < EPS) {\n      const d1 = -d / c;\n      const d2 = (a - d) / c;\n      if (Math.abs(d1 - 0.5) < Math.abs(d2 - 0.5)) {\n        t1 = 0;\n        t2 = d1;\n      } else {\n        t1 = 1;\n        t2 = d2;\n      }\n    } else {\n      t1 = (d * a + e * c) / divisor;\n      t2 = (t1 * a - d) / c;\n    }\n    t2 = Math.max(0, Math.min(1, t2));\n    t1 = Math.max(0, Math.min(1, t1));\n    const point1 = r.multiplyScalar(t1).add(line1.start);\n    const point2 = s.multiplyScalar(t2).add(line2.start);\n    return [point1, point2];\n  }\n}\nexport { Capsule };","map":{"version":3,"sources":["../../src/math/Capsule.js"],"names":[],"mappings":"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","sourcesContent":["import { Vector3 } from 'three'\n\nconst _v1 = new Vector3()\nconst _v2 = new Vector3()\nconst _v3 = new Vector3()\n\nconst EPS = 1e-10\n\nclass Capsule {\n  constructor(start = new Vector3(0, 0, 0), end = new Vector3(0, 1, 0), radius = 1) {\n    this.start = start\n    this.end = end\n    this.radius = radius\n  }\n\n  clone() {\n    return new Capsule(this.start.clone(), this.end.clone(), this.radius)\n  }\n\n  set(start, end, radius) {\n    this.start.copy(start)\n    this.end.copy(end)\n    this.radius = radius\n  }\n\n  copy(capsule) {\n    this.start.copy(capsule.start)\n    this.end.copy(capsule.end)\n    this.radius = capsule.radius\n  }\n\n  getCenter(target) {\n    return target.copy(this.end).add(this.start).multiplyScalar(0.5)\n  }\n\n  translate(v) {\n    this.start.add(v)\n    this.end.add(v)\n  }\n\n  checkAABBAxis(p1x, p1y, p2x, p2y, minx, maxx, miny, maxy, radius) {\n    return (\n      (minx - p1x < radius || minx - p2x < radius) &&\n      (p1x - maxx < radius || p2x - maxx < radius) &&\n      (miny - p1y < radius || miny - p2y < radius) &&\n      (p1y - maxy < radius || p2y - maxy < radius)\n    )\n  }\n\n  intersectsBox(box) {\n    return (\n      this.checkAABBAxis(\n        this.start.x,\n        this.start.y,\n        this.end.x,\n        this.end.y,\n        box.min.x,\n        box.max.x,\n        box.min.y,\n        box.max.y,\n        this.radius,\n      ) &&\n      this.checkAABBAxis(\n        this.start.x,\n        this.start.z,\n        this.end.x,\n        this.end.z,\n        box.min.x,\n        box.max.x,\n        box.min.z,\n        box.max.z,\n        this.radius,\n      ) &&\n      this.checkAABBAxis(\n        this.start.y,\n        this.start.z,\n        this.end.y,\n        this.end.z,\n        box.min.y,\n        box.max.y,\n        box.min.z,\n        box.max.z,\n        this.radius,\n      )\n    )\n  }\n\n  lineLineMinimumPoints(line1, line2) {\n    const r = _v1.copy(line1.end).sub(line1.start)\n    const s = _v2.copy(line2.end).sub(line2.start)\n    const w = _v3.copy(line2.start).sub(line1.start)\n\n    const a = r.dot(s),\n      b = r.dot(r),\n      c = s.dot(s),\n      d = s.dot(w),\n      e = r.dot(w)\n\n    let t1, t2\n    const divisor = b * c - a * a\n\n    if (Math.abs(divisor) < EPS) {\n      const d1 = -d / c\n      const d2 = (a - d) / c\n\n      if (Math.abs(d1 - 0.5) < Math.abs(d2 - 0.5)) {\n        t1 = 0\n        t2 = d1\n      } else {\n        t1 = 1\n        t2 = d2\n      }\n    } else {\n      t1 = (d * a + e * c) / divisor\n      t2 = (t1 * a - d) / c\n    }\n\n    t2 = Math.max(0, Math.min(1, t2))\n    t1 = Math.max(0, Math.min(1, t1))\n\n    const point1 = r.multiplyScalar(t1).add(line1.start)\n    const point2 = s.multiplyScalar(t2).add(line2.start)\n\n    return [point1, point2]\n  }\n}\n\nexport { Capsule }\n"]},"metadata":{},"sourceType":"module"}