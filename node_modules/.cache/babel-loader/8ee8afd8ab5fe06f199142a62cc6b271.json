{"ast":null,"code":"import { Vector3, Quaternion, FileLoader, LoaderUtils, Matrix4, Bone, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, MeshPhongMaterial, FrontSide, Vector2, SkinnedMesh, Mesh, Skeleton, AnimationClip, AnimationMixer, Loader, TextureLoader } from \"three\";\nimport { decodeText } from \"../_polyfill/LoaderUtils.js\";\nvar XLoader = function () {\n  var classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (let i2 = 0; i2 < props.length; i2++) {\n        var descriptor = props[i2];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n  var XboneInf = function XboneInf2() {\n    classCallCheck(this, XboneInf2);\n    this.boneName = \"\";\n    this.BoneIndex = 0;\n    this.Indeces = [];\n    this.Weights = [];\n    this.initMatrix = null;\n    this.OffsetMatrix = null;\n  };\n  var XAnimationInfo = function XAnimationInfo2() {\n    classCallCheck(this, XAnimationInfo2);\n    this.animeName = \"\";\n    this.boneName = \"\";\n    this.targetBone = null;\n    this.keyType = 4;\n    this.frameStartLv = 0;\n    this.keyFrames = [];\n    this.InverseMx = null;\n  };\n  var XAnimationObj = function () {\n    function XAnimationObj2(_flags) {\n      classCallCheck(this, XAnimationObj2);\n      this.fps = 30;\n      this.name = \"xanimation\";\n      this.length = 0;\n      this.hierarchy = [];\n      this.putFlags = _flags;\n      if (this.putFlags.putPos === void 0) {\n        this.putFlags.putPos = true;\n      }\n      if (this.putFlags.putRot === void 0) {\n        this.putFlags.putRot = true;\n      }\n      if (this.putFlags.putScl === void 0) {\n        this.putFlags.putScl = true;\n      }\n    }\n    createClass(XAnimationObj2, [{\n      key: \"make\",\n      value: function make(XAnimationInfoArray) {\n        for (let i2 = 0; i2 < XAnimationInfoArray.length; i2++) {\n          this.hierarchy.push(this.makeBonekeys(XAnimationInfoArray[i2]));\n        }\n        this.length = this.hierarchy[0].keys[this.hierarchy[0].keys.length - 1].time;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return Object.assign({}, this);\n      }\n    }, {\n      key: \"makeBonekeys\",\n      value: function makeBonekeys(XAnimationInfo2) {\n        var refObj = {};\n        refObj.name = XAnimationInfo2.boneName;\n        refObj.parent = \"\";\n        refObj.keys = this.keyFrameRefactor(XAnimationInfo2);\n        refObj.copy = function () {\n          return Object.assign({}, this);\n        };\n        return refObj;\n      }\n    }, {\n      key: \"keyFrameRefactor\",\n      value: function keyFrameRefactor(XAnimationInfo2) {\n        var keys = [];\n        for (let i2 = 0; i2 < XAnimationInfo2.keyFrames.length; i2++) {\n          var keyframe = {};\n          keyframe.time = XAnimationInfo2.keyFrames[i2].time * this.fps;\n          if (XAnimationInfo2.keyFrames[i2].pos && this.putFlags.putPos) {\n            keyframe.pos = XAnimationInfo2.keyFrames[i2].pos;\n          }\n          if (XAnimationInfo2.keyFrames[i2].rot && this.putFlags.putRot) {\n            keyframe.rot = XAnimationInfo2.keyFrames[i2].rot;\n          }\n          if (XAnimationInfo2.keyFrames[i2].scl && this.putFlags.putScl) {\n            keyframe.scl = XAnimationInfo2.keyFrames[i2].scl;\n          }\n          if (XAnimationInfo2.keyFrames[i2].matrix) {\n            keyframe.matrix = XAnimationInfo2.keyFrames[i2].matrix;\n            if (this.putFlags.putPos) {\n              keyframe.pos = new Vector3().setFromMatrixPosition(keyframe.matrix);\n            }\n            if (this.putFlags.putRot) {\n              keyframe.rot = new Quaternion().setFromRotationMatrix(keyframe.matrix);\n            }\n            if (this.putFlags.putScl) {\n              keyframe.scl = new Vector3().setFromMatrixScale(keyframe.matrix);\n            }\n          }\n          keys.push(keyframe);\n        }\n        return keys;\n      }\n    }]);\n    return XAnimationObj2;\n  }();\n  var XKeyFrameInfo = function XKeyFrameInfo2() {\n    classCallCheck(this, XKeyFrameInfo2);\n    this.index = 0;\n    this.Frame = 0;\n    this.time = 0;\n    this.matrix = null;\n  };\n  var XLoader2 = function () {\n    function XLoader3(manager) {\n      Loader.call(this, manager);\n      classCallCheck(this, XLoader3);\n      this.debug = false;\n      this.texloader = new TextureLoader(this.manager);\n      this.url = \"\";\n      this._putMatLength = 0;\n      this._nowMat = null;\n      this._nowFrameName = \"\";\n      this.frameHierarchie = [];\n      this.Hierarchies = {};\n      this.HieStack = [];\n      this._currentObject = {};\n      this._currentFrame = {};\n      this._data = null;\n      this.onLoad = null;\n      this.IsUvYReverse = true;\n      this.Meshes = [];\n      this.animations = [];\n      this.animTicksPerSecond = 30;\n      this._currentGeo = null;\n      this._currentAnime = null;\n      this._currentAnimeFrames = null;\n    }\n    createClass(XLoader3, [{\n      key: \"_setArgOption\",\n      value: function _setArgOption(_arg) {\n        var _start = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        if (!_arg) {\n          return;\n        }\n        for (let i2 = _start; i2 < _arg.length; i2++) {\n          switch (i2) {\n            case 0:\n              this.url = _arg[i2];\n              break;\n            case 1:\n              this.options = _arg[i2];\n              break;\n          }\n        }\n        if (this.options === void 0) {\n          this.options = {};\n        }\n      }\n    }, {\n      key: \"load\",\n      value: function load(_arg, onLoad, onProgress, onError) {\n        var _this = this;\n        this._setArgOption(_arg);\n        var loader = new FileLoader(this.manager);\n        loader.setPath(this.path);\n        loader.setResponseType(\"arraybuffer\");\n        loader.setRequestHeader(this.requestHeader);\n        loader.setWithCredentials(this.withCredentials);\n        loader.load(this.url, function (response) {\n          try {\n            _this.parse(response, onLoad);\n          } catch (e) {\n            if (onError) {\n              onError(e);\n            } else {\n              console.error(e);\n            }\n            _this.manager.itemError(_this.url);\n          }\n        }, onProgress, onError);\n      }\n    }, {\n      key: \"_readLine\",\n      value: function _readLine(line) {\n        var readed = 0;\n        while (true) {\n          var find = -1;\n          find = line.indexOf(\"//\", readed);\n          if (find === -1) {\n            find = line.indexOf(\"#\", readed);\n          }\n          if (find > -1 && find < 2) {\n            var foundNewLine = -1;\n            foundNewLine = line.indexOf(\"\\r\\n\", readed);\n            if (foundNewLine > 0) {\n              readed = foundNewLine + 2;\n            } else {\n              foundNewLine = line.indexOf(\"\\r\", readed);\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 1;\n              } else {\n                readed = line.indexOf(\"\\n\", readed) + 1;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n        return line.substr(readed);\n      }\n    }, {\n      key: \"_readLine\",\n      value: function _readLine(line) {\n        var readed = 0;\n        while (true) {\n          var find = -1;\n          find = line.indexOf(\"//\", readed);\n          if (find === -1) {\n            find = line.indexOf(\"#\", readed);\n          }\n          if (find > -1 && find < 2) {\n            var foundNewLine = -1;\n            foundNewLine = line.indexOf(\"\\r\\n\", readed);\n            if (foundNewLine > 0) {\n              readed = foundNewLine + 2;\n            } else {\n              foundNewLine = line.indexOf(\"\\r\", readed);\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 1;\n              } else {\n                readed = line.indexOf(\"\\n\", readed) + 1;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n        return line.substr(readed);\n      }\n    }, {\n      key: \"_isBinary\",\n      value: function _isBinary(binData) {\n        var reader = new DataView(binData);\n        var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n        var n_faces = reader.getUint32(80, true);\n        var expect = 80 + 32 / 8 + n_faces * face_size;\n        if (expect === reader.byteLength) {\n          return true;\n        }\n        var fileLength = reader.byteLength;\n        for (let index = 0; index < fileLength; index++) {\n          if (reader.getUint8(index, false) > 127) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }, {\n      key: \"_ensureBinary\",\n      value: function _ensureBinary(buf) {\n        if (typeof buf === \"string\") {\n          var array_buffer = new Uint8Array(buf.length);\n          for (let i2 = 0; i2 < buf.length; i2++) {\n            array_buffer[i2] = buf.charCodeAt(i2) & 255;\n          }\n          return array_buffer.buffer || array_buffer;\n        } else {\n          return buf;\n        }\n      }\n    }, {\n      key: \"_ensureString\",\n      value: function _ensureString(buf) {\n        if (typeof buf !== \"string\") {\n          return decodeText(new Uint8Array(buf));\n        } else {\n          return buf;\n        }\n      }\n    }, {\n      key: \"parse\",\n      value: function _parse(data, onLoad) {\n        var binData = this._ensureBinary(data);\n        this._data = this._ensureString(data);\n        this.onLoad = onLoad;\n        return this._isBinary(binData) ? this._parseBinary(binData) : this._parseASCII();\n      }\n    }, {\n      key: \"_parseBinary\",\n      value: function _parseBinary(data) {\n        return this._parseASCII(decodeText(new Uint8Array(data)));\n      }\n    }, {\n      key: \"_parseASCII\",\n      value: function _parseASCII() {\n        var path;\n        if (this.resourcePath !== \"\") {\n          path = this.resourcePath;\n        } else if (this.path !== \"\") {\n          path = this.path;\n        } else {\n          path = LoaderUtils.extractUrlBase(this.url);\n        }\n        this.texloader.setPath(path).setCrossOrigin(this.crossOrigin);\n        var endRead = 16;\n        this.Hierarchies.children = [];\n        this._hierarchieParse(this.Hierarchies, endRead);\n        this._changeRoot();\n        this._currentObject = this.Hierarchies.children.shift();\n        this._mainloop();\n      }\n    }, {\n      key: \"_hierarchieParse\",\n      value: function _hierarchieParse(_parent, _end) {\n        var endRead = _end;\n        while (true) {\n          var find1 = this._data.indexOf(\"{\", endRead) + 1;\n          var findEnd = this._data.indexOf(\"}\", endRead);\n          var findNext = this._data.indexOf(\"{\", find1) + 1;\n          if (find1 > 0 && findEnd > find1) {\n            var _currentObject = {};\n            _currentObject.children = [];\n            var nameData = this._readLine(this._data.substr(endRead, find1 - endRead - 1)).trim();\n            var word = nameData.split(/ /g);\n            if (word.length > 0) {\n              _currentObject.type = word[0];\n              if (word.length >= 2) {\n                _currentObject.name = word[1];\n              } else {\n                _currentObject.name = word[0] + this.Hierarchies.children.length;\n              }\n            } else {\n              _currentObject.name = nameData;\n              _currentObject.type = \"\";\n            }\n            if (_currentObject.type === \"Animation\") {\n              _currentObject.data = this._data.substr(findNext, findEnd - findNext).trim();\n              var refs = this._hierarchieParse(_currentObject, findEnd + 1);\n              endRead = refs.end;\n              _currentObject.children = refs.parent.children;\n            } else {\n              var DataEnder = this._data.lastIndexOf(\";\", findNext > 0 ? Math.min(findNext, findEnd) : findEnd);\n              _currentObject.data = this._data.substr(find1, DataEnder - find1).trim();\n              if (findNext <= 0 || findEnd < findNext) {\n                endRead = findEnd + 1;\n              } else {\n                var nextStart = Math.max(DataEnder + 1, find1);\n                var _refs = this._hierarchieParse(_currentObject, nextStart);\n                endRead = _refs.end;\n                _currentObject.children = _refs.parent.children;\n              }\n            }\n            _currentObject.parent = _parent;\n            if (_currentObject.type != \"template\") {\n              _parent.children.push(_currentObject);\n            }\n          } else {\n            endRead = find1 === -1 ? this._data.length : findEnd + 1;\n            break;\n          }\n        }\n        return {\n          parent: _parent,\n          end: endRead\n        };\n      }\n    }, {\n      key: \"_mainloop\",\n      value: function _mainloop() {\n        var _this2 = this;\n        this._mainProc();\n        if (this._currentObject.parent || this._currentObject.children.length > 0 || !this._currentObject.worked) {\n          setTimeout(function () {\n            _this2._mainloop();\n          }, 1);\n        } else {\n          setTimeout(function () {\n            _this2.onLoad({\n              models: _this2.Meshes,\n              animations: _this2.animations\n            });\n          }, 1);\n        }\n      }\n    }, {\n      key: \"_mainProc\",\n      value: function _mainProc() {\n        var breakFlag = false;\n        while (true) {\n          if (!this._currentObject.worked) {\n            switch (this._currentObject.type) {\n              case \"template\":\n                break;\n              case \"AnimTicksPerSecond\":\n                this.animTicksPerSecond = parseInt(this._currentObject.data);\n                break;\n              case \"Frame\":\n                this._setFrame();\n                break;\n              case \"FrameTransformMatrix\":\n                this._setFrameTransformMatrix();\n                break;\n              case \"Mesh\":\n                this._changeRoot();\n                this._currentGeo = {};\n                this._currentGeo.name = this._currentObject.name.trim();\n                this._currentGeo.parentName = this._getParentName(this._currentObject).trim();\n                this._currentGeo.VertexSetedBoneCount = [];\n                this._currentGeo.GeometryData = {\n                  vertices: [],\n                  normals: [],\n                  uvs: [],\n                  skinIndices: [],\n                  skinWeights: [],\n                  indices: [],\n                  materialIndices: []\n                };\n                this._currentGeo.Materials = [];\n                this._currentGeo.normalVectors = [];\n                this._currentGeo.BoneInfs = [];\n                this._currentGeo.baseFrame = this._currentFrame;\n                this._makeBoneFrom_CurrentFrame();\n                this._readVertexDatas();\n                breakFlag = true;\n                break;\n              case \"MeshNormals\":\n                this._readVertexDatas();\n                break;\n              case \"MeshTextureCoords\":\n                this._setMeshTextureCoords();\n                break;\n              case \"VertexDuplicationIndices\":\n                break;\n              case \"MeshMaterialList\":\n                this._setMeshMaterialList();\n                break;\n              case \"Material\":\n                this._setMaterial();\n                break;\n              case \"SkinWeights\":\n                this._setSkinWeights();\n                break;\n              case \"AnimationSet\":\n                this._changeRoot();\n                this._currentAnime = {};\n                this._currentAnime.name = this._currentObject.name.trim();\n                this._currentAnime.AnimeFrames = [];\n                break;\n              case \"Animation\":\n                if (this._currentAnimeFrames) {\n                  this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n                }\n                this._currentAnimeFrames = new XAnimationInfo();\n                this._currentAnimeFrames.boneName = this._currentObject.data.trim();\n                break;\n              case \"AnimationKey\":\n                this._readAnimationKey();\n                breakFlag = true;\n                break;\n            }\n            this._currentObject.worked = true;\n          }\n          if (this._currentObject.children.length > 0) {\n            this._currentObject = this._currentObject.children.shift();\n            if (this.debug) {\n              console.log(\"processing \" + this._currentObject.name);\n            }\n            if (breakFlag) break;\n          } else {\n            if (this._currentObject.worked) {\n              if (this._currentObject.parent && !this._currentObject.parent.parent) {\n                this._changeRoot();\n              }\n            }\n            if (this._currentObject.parent) {\n              this._currentObject = this._currentObject.parent;\n            } else {\n              breakFlag = true;\n            }\n            if (breakFlag) break;\n          }\n        }\n        return;\n      }\n    }, {\n      key: \"_changeRoot\",\n      value: function _changeRoot() {\n        if (this._currentGeo != null && this._currentGeo.name) {\n          this._makeOutputGeometry();\n        }\n        this._currentGeo = {};\n        if (this._currentAnime != null && this._currentAnime.name) {\n          if (this._currentAnimeFrames) {\n            this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n            this._currentAnimeFrames = null;\n          }\n          this._makeOutputAnimation();\n        }\n        this._currentAnime = {};\n      }\n    }, {\n      key: \"_getParentName\",\n      value: function _getParentName(_obj) {\n        if (_obj.parent) {\n          if (_obj.parent.name) {\n            return _obj.parent.name;\n          } else {\n            return this._getParentName(_obj.parent);\n          }\n        } else {\n          return \"\";\n        }\n      }\n    }, {\n      key: \"_setFrame\",\n      value: function _setFrame() {\n        this._nowFrameName = this._currentObject.name.trim();\n        this._currentFrame = {};\n        this._currentFrame.name = this._nowFrameName;\n        this._currentFrame.children = [];\n        if (this._currentObject.parent && this._currentObject.parent.name) {\n          this._currentFrame.parentName = this._currentObject.parent.name;\n        }\n        this.frameHierarchie.push(this._nowFrameName);\n        this.HieStack[this._nowFrameName] = this._currentFrame;\n      }\n    }, {\n      key: \"_setFrameTransformMatrix\",\n      value: function _setFrameTransformMatrix() {\n        this._currentFrame.FrameTransformMatrix = new Matrix4();\n        var data = this._currentObject.data.split(\",\");\n        this._ParseMatrixData(this._currentFrame.FrameTransformMatrix, data);\n        this._makeBoneFrom_CurrentFrame();\n      }\n    }, {\n      key: \"_makeBoneFrom_CurrentFrame\",\n      value: function _makeBoneFrom_CurrentFrame() {\n        if (!this._currentFrame.FrameTransformMatrix) {\n          return;\n        }\n        var b = new Bone();\n        b.name = this._currentFrame.name;\n        b.applyMatrix4(this._currentFrame.FrameTransformMatrix);\n        b.matrixWorld = b.matrix;\n        b.FrameTransformMatrix = this._currentFrame.FrameTransformMatrix;\n        this._currentFrame.putBone = b;\n        if (this._currentFrame.parentName) {\n          for (let frame in this.HieStack) {\n            if (this.HieStack[frame].name === this._currentFrame.parentName) {\n              this.HieStack[frame].putBone.add(this._currentFrame.putBone);\n            }\n          }\n        }\n      }\n    }, {\n      key: \"_readVertexDatas\",\n      value: function _readVertexDatas() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n        var maxLength = 0;\n        while (true) {\n          var changeMode = false;\n          if (mode_local === 0) {\n            var refO = this._readInt1(endRead);\n            endRead = refO.endRead;\n            mode_local = 1;\n            maxLength = this._currentObject.data.indexOf(\";;\", endRead) + 1;\n            if (maxLength <= 0) {\n              maxLength = this._currentObject.data.length;\n            }\n          } else {\n            var find = 0;\n            switch (mode) {\n              case 0:\n                find = this._currentObject.data.indexOf(\",\", endRead) + 1;\n                break;\n              case 1:\n                find = this._currentObject.data.indexOf(\";,\", endRead) + 1;\n                break;\n            }\n            if (find === 0 || find > maxLength) {\n              find = maxLength;\n              mode_local = 0;\n              changeMode = true;\n            }\n            switch (this._currentObject.type) {\n              case \"Mesh\":\n                switch (mode) {\n                  case 0:\n                    this._readVertex1(this._currentObject.data.substr(endRead, find - endRead));\n                    break;\n                  case 1:\n                    this._readFace1(this._currentObject.data.substr(endRead, find - endRead));\n                    break;\n                }\n                break;\n              case \"MeshNormals\":\n                switch (mode) {\n                  case 0:\n                    this._readNormalVector1(this._currentObject.data.substr(endRead, find - endRead));\n                    break;\n                }\n                break;\n            }\n            endRead = find + 1;\n            if (changeMode) {\n              mode++;\n            }\n          }\n          if (endRead >= this._currentObject.data.length) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: \"_readInt1\",\n      value: function _readInt1(start) {\n        var find = this._currentObject.data.indexOf(\";\", start);\n        return {\n          refI: parseInt(this._currentObject.data.substr(start, find - start)),\n          endRead: find + 1\n        };\n      }\n    }, {\n      key: \"_readVertex1\",\n      value: function _readVertex1(line) {\n        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(\";\");\n        this._currentGeo.GeometryData.vertices.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n        this._currentGeo.GeometryData.skinIndices.push(0, 0, 0, 0);\n        this._currentGeo.GeometryData.skinWeights.push(1, 0, 0, 0);\n        this._currentGeo.VertexSetedBoneCount.push(0);\n      }\n    }, {\n      key: \"_readFace1\",\n      value: function _readFace1(line) {\n        var data = this._readLine(line.trim()).substr(2, line.length - 4).split(\",\");\n        this._currentGeo.GeometryData.indices.push(parseInt(data[0], 10), parseInt(data[1], 10), parseInt(data[2], 10));\n      }\n    }, {\n      key: \"_readNormalVector1\",\n      value: function _readNormalVector1(line) {\n        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(\";\");\n        this._currentGeo.GeometryData.normals.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n      }\n    }, {\n      key: \"_buildGeometry\",\n      value: function _buildGeometry() {\n        var bufferGeometry = new BufferGeometry();\n        var position = [];\n        var normals = [];\n        var uvs = [];\n        var skinIndices = [];\n        var skinWeights = [];\n        var data = this._currentGeo.GeometryData;\n        for (let i2 = 0, l = data.indices.length; i2 < l; i2++) {\n          var stride2 = data.indices[i2] * 2;\n          var stride3 = data.indices[i2] * 3;\n          var stride4 = data.indices[i2] * 4;\n          position.push(data.vertices[stride3], data.vertices[stride3 + 1], data.vertices[stride3 + 2]);\n          normals.push(data.normals[stride3], data.normals[stride3 + 1], data.normals[stride3 + 2]);\n          skinIndices.push(data.skinIndices[stride4], data.skinIndices[stride4 + 1], data.skinIndices[stride4 + 2], data.skinIndices[stride4 + 3]);\n          skinWeights.push(data.skinWeights[stride4], data.skinWeights[stride4 + 1], data.skinWeights[stride4 + 2], data.skinWeights[stride4 + 3]);\n          uvs.push(data.uvs[stride2], data.uvs[stride2 + 1]);\n        }\n        bufferGeometry.setAttribute(\"position\", new Float32BufferAttribute(position, 3));\n        bufferGeometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n        bufferGeometry.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n        bufferGeometry.setAttribute(\"skinIndex\", new Uint16BufferAttribute(skinIndices, 4));\n        bufferGeometry.setAttribute(\"skinWeight\", new Float32BufferAttribute(skinWeights, 4));\n        this._computeGroups(bufferGeometry, data.materialIndices);\n        return bufferGeometry;\n      }\n    }, {\n      key: \"_computeGroups\",\n      value: function _computeGroups(bufferGeometry, materialIndices) {\n        var group;\n        var groups = [];\n        var materialIndex = void 0;\n        for (let i2 = 0; i2 < materialIndices.length; i2++) {\n          var currentMaterialIndex = materialIndices[i2];\n          if (currentMaterialIndex !== materialIndex) {\n            materialIndex = currentMaterialIndex;\n            if (group !== void 0) {\n              group.count = i2 * 3 - group.start;\n              groups.push(group);\n            }\n            group = {\n              start: i2 * 3,\n              materialIndex\n            };\n          }\n        }\n        if (group !== void 0) {\n          group.count = i * 3 - group.start;\n          groups.push(group);\n        }\n        bufferGeometry.groups = groups;\n      }\n    }, {\n      key: \"_setMeshTextureCoords\",\n      value: function _setMeshTextureCoords() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n        while (true) {\n          switch (mode) {\n            case 0:\n              if (mode_local === 0) {\n                var refO = this._readInt1(0);\n                endRead = refO.endRead;\n                mode_local = 1;\n              } else {\n                var find = this._currentObject.data.indexOf(\",\", endRead) + 1;\n                if (find === 0) {\n                  find = this._currentObject.data.length;\n                  mode = 2;\n                  mode_local = 0;\n                }\n                var line = this._currentObject.data.substr(endRead, find - endRead);\n                var data = this._readLine(line.trim()).split(\";\");\n                if (this.IsUvYReverse) {\n                  this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), 1 - parseFloat(data[1]));\n                } else {\n                  this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), parseFloat(data[1]));\n                }\n                endRead = find + 1;\n              }\n              break;\n          }\n          if (endRead >= this._currentObject.data.length) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: \"_setMeshMaterialList\",\n      value: function _setMeshMaterialList() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n        while (true) {\n          if (mode_local < 2) {\n            var refO = this._readInt1(endRead);\n            endRead = refO.endRead;\n            mode_local++;\n          } else {\n            var find = this._currentObject.data.indexOf(\";\", endRead);\n            if (find === -1) {\n              find = this._currentObject.data.length;\n              mode = 3;\n              mode_local = 0;\n            }\n            var line = this._currentObject.data.substr(endRead, find - endRead);\n            var data = this._readLine(line.trim()).split(\",\");\n            for (let i2 = 0; i2 < data.length; i2++) {\n              this._currentGeo.GeometryData.materialIndices[i2] = parseInt(data[i2]);\n            }\n            endRead = this._currentObject.data.length;\n          }\n          if (endRead >= this._currentObject.data.length || mode >= 3) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: \"_setMaterial\",\n      value: function _setMaterial() {\n        var _nowMat = new MeshPhongMaterial({\n          color: Math.random() * 16777215\n        });\n        _nowMat.side = FrontSide;\n        _nowMat.name = this._currentObject.name;\n        var endRead = 0;\n        var find = this._currentObject.data.indexOf(\";;\", endRead);\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n        var data = this._readLine(line.trim()).split(\";\");\n        _nowMat.color.r = parseFloat(data[0]);\n        _nowMat.color.g = parseFloat(data[1]);\n        _nowMat.color.b = parseFloat(data[2]);\n        endRead = find + 2;\n        find = this._currentObject.data.indexOf(\";\", endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        _nowMat.shininess = parseFloat(this._readLine(line));\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(\";;\", endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        var data2 = this._readLine(line.trim()).split(\";\");\n        _nowMat.specular.r = parseFloat(data2[0]);\n        _nowMat.specular.g = parseFloat(data2[1]);\n        _nowMat.specular.b = parseFloat(data2[2]);\n        endRead = find + 2;\n        find = this._currentObject.data.indexOf(\";;\", endRead);\n        if (find === -1) {\n          find = this._currentObject.data.length;\n        }\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        var data3 = this._readLine(line.trim()).split(\";\");\n        _nowMat.emissive.r = parseFloat(data3[0]);\n        _nowMat.emissive.g = parseFloat(data3[1]);\n        _nowMat.emissive.b = parseFloat(data3[2]);\n        var localObject = null;\n        while (true) {\n          if (this._currentObject.children.length > 0) {\n            localObject = this._currentObject.children.shift();\n            if (this.debug) {\n              console.log(\"processing \" + localObject.name);\n            }\n            var fileName = localObject.data.substr(1, localObject.data.length - 2);\n            switch (localObject.type) {\n              case \"TextureFilename\":\n                _nowMat.map = this.texloader.load(fileName);\n                break;\n              case \"BumpMapFilename\":\n                _nowMat.bumpMap = this.texloader.load(fileName);\n                _nowMat.bumpScale = 0.05;\n                break;\n              case \"NormalMapFilename\":\n                _nowMat.normalMap = this.texloader.load(fileName);\n                _nowMat.normalScale = new Vector2(2, 2);\n                break;\n              case \"EmissiveMapFilename\":\n                _nowMat.emissiveMap = this.texloader.load(fileName);\n                break;\n              case \"LightMapFilename\":\n                _nowMat.lightMap = this.texloader.load(fileName);\n                break;\n            }\n          } else {\n            break;\n          }\n        }\n        this._currentGeo.Materials.push(_nowMat);\n      }\n    }, {\n      key: \"_setSkinWeights\",\n      value: function _setSkinWeights() {\n        var boneInf = new XboneInf();\n        var endRead = 0;\n        var find = this._currentObject.data.indexOf(\";\", endRead);\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n        endRead = find + 1;\n        boneInf.boneName = line.substr(1, line.length - 2);\n        boneInf.BoneIndex = this._currentGeo.BoneInfs.length;\n        find = this._currentObject.data.indexOf(\";\", endRead);\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(\";\", endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        var data = this._readLine(line.trim()).split(\",\");\n        for (let i2 = 0; i2 < data.length; i2++) {\n          boneInf.Indeces.push(parseInt(data[i2]));\n        }\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(\";\", endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        var data2 = this._readLine(line.trim()).split(\",\");\n        for (let _i = 0; _i < data2.length; _i++) {\n          boneInf.Weights.push(parseFloat(data2[_i]));\n        }\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(\";\", endRead);\n        if (find <= 0) {\n          find = this._currentObject.data.length;\n        }\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        var data3 = this._readLine(line.trim()).split(\",\");\n        boneInf.OffsetMatrix = new Matrix4();\n        this._ParseMatrixData(boneInf.OffsetMatrix, data3);\n        this._currentGeo.BoneInfs.push(boneInf);\n      }\n    }, {\n      key: \"_makePutBoneList\",\n      value: function _makePutBoneList(_RootName, _bones) {\n        var putting = false;\n        for (let frame in this.HieStack) {\n          if (this.HieStack[frame].name === _RootName || putting) {\n            putting = true;\n            var b = new Bone();\n            b.name = this.HieStack[frame].name;\n            b.applyMatrix4(this.HieStack[frame].FrameTransformMatrix);\n            b.matrixWorld = b.matrix;\n            b.FrameTransformMatrix = this.HieStack[frame].FrameTransformMatrix;\n            b.pos = new Vector3().setFromMatrixPosition(b.FrameTransformMatrix).toArray();\n            b.rotq = new Quaternion().setFromRotationMatrix(b.FrameTransformMatrix).toArray();\n            b.scl = new Vector3().setFromMatrixScale(b.FrameTransformMatrix).toArray();\n            if (this.HieStack[frame].parentName && this.HieStack[frame].parentName.length > 0) {\n              for (let i2 = 0; i2 < _bones.length; i2++) {\n                if (this.HieStack[frame].parentName === _bones[i2].name) {\n                  _bones[i2].add(b);\n                  b.parent = i2;\n                  break;\n                }\n              }\n            }\n            _bones.push(b);\n          }\n        }\n      }\n    }, {\n      key: \"_makeOutputGeometry\",\n      value: function _makeOutputGeometry() {\n        var mesh = null;\n        if (this._currentGeo.BoneInfs.length > 0) {\n          var putBones = [];\n          this._makePutBoneList(this._currentGeo.baseFrame.parentName, putBones);\n          for (let bi = 0; bi < this._currentGeo.BoneInfs.length; bi++) {\n            var boneIndex = 0;\n            for (let bb = 0; bb < putBones.length; bb++) {\n              if (putBones[bb].name === this._currentGeo.BoneInfs[bi].boneName) {\n                boneIndex = bb;\n                putBones[bb].OffsetMatrix = new Matrix4();\n                putBones[bb].OffsetMatrix.copy(this._currentGeo.BoneInfs[bi].OffsetMatrix);\n                break;\n              }\n            }\n            for (let vi = 0; vi < this._currentGeo.BoneInfs[bi].Indeces.length; vi++) {\n              var nowVertexID = this._currentGeo.BoneInfs[bi].Indeces[vi];\n              var nowVal = this._currentGeo.BoneInfs[bi].Weights[vi];\n              var stride = nowVertexID * 4;\n              switch (this._currentGeo.VertexSetedBoneCount[nowVertexID]) {\n                case 0:\n                  this._currentGeo.GeometryData.skinIndices[stride] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride] = nowVal;\n                  break;\n                case 1:\n                  this._currentGeo.GeometryData.skinIndices[stride + 1] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 1] = nowVal;\n                  break;\n                case 2:\n                  this._currentGeo.GeometryData.skinIndices[stride + 2] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 2] = nowVal;\n                  break;\n                case 3:\n                  this._currentGeo.GeometryData.skinIndices[stride + 3] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 3] = nowVal;\n                  break;\n              }\n              this._currentGeo.VertexSetedBoneCount[nowVertexID]++;\n              if (this._currentGeo.VertexSetedBoneCount[nowVertexID] > 4) {\n                console.log(\"warn! over 4 bone weight! :\" + nowVertexID);\n              }\n            }\n          }\n          for (let sk = 0; sk < this._currentGeo.Materials.length; sk++) {\n            this._currentGeo.Materials[sk].skinning = true;\n          }\n          var offsetList = [];\n          for (let _bi = 0; _bi < putBones.length; _bi++) {\n            if (putBones[_bi].OffsetMatrix) {\n              offsetList.push(putBones[_bi].OffsetMatrix);\n            } else {\n              offsetList.push(new Matrix4());\n            }\n          }\n          var bufferGeometry = this._buildGeometry();\n          mesh = new SkinnedMesh(bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n          this._initSkeleton(mesh, putBones, offsetList);\n        } else {\n          var _bufferGeometry = this._buildGeometry();\n          mesh = new Mesh(_bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n        }\n        mesh.name = this._currentGeo.name;\n        var worldBaseMx = new Matrix4();\n        var currentMxFrame = this._currentGeo.baseFrame.putBone;\n        if (currentMxFrame && currentMxFrame.parent) {\n          while (true) {\n            currentMxFrame = currentMxFrame.parent;\n            if (currentMxFrame) {\n              worldBaseMx.multiply(currentMxFrame.FrameTransformMatrix);\n            } else {\n              break;\n            }\n          }\n          mesh.applyMatrix4(worldBaseMx);\n        }\n        this.Meshes.push(mesh);\n      }\n    }, {\n      key: \"_initSkeleton\",\n      value: function _initSkeleton(mesh, boneList, boneInverses) {\n        var bones = [],\n          bone,\n          gbone;\n        var i2, il;\n        for (i2 = 0, il = boneList.length; i2 < il; i2++) {\n          gbone = boneList[i2];\n          bone = new Bone();\n          bones.push(bone);\n          bone.name = gbone.name;\n          bone.position.fromArray(gbone.pos);\n          bone.quaternion.fromArray(gbone.rotq);\n          if (gbone.scl !== void 0) bone.scale.fromArray(gbone.scl);\n        }\n        for (i2 = 0, il = boneList.length; i2 < il; i2++) {\n          gbone = boneList[i2];\n          if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== void 0) {\n            bones[gbone.parent].add(bones[i2]);\n          } else {\n            mesh.add(bones[i2]);\n          }\n        }\n        mesh.updateMatrixWorld(true);\n        var skeleton = new Skeleton(bones, boneInverses);\n        mesh.bind(skeleton, mesh.matrixWorld);\n      }\n    }, {\n      key: \"_readAnimationKey\",\n      value: function _readAnimationKey() {\n        var endRead = 0;\n        var find = this._currentObject.data.indexOf(\";\", endRead);\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n        endRead = find + 1;\n        var nowKeyType = parseInt(this._readLine(line));\n        find = this._currentObject.data.indexOf(\";\", endRead);\n        endRead = find + 1;\n        line = this._currentObject.data.substr(endRead);\n        var data = this._readLine(line.trim()).split(\";;,\");\n        for (let i2 = 0; i2 < data.length; i2++) {\n          var data2 = data[i2].split(\";\");\n          var keyInfo = new XKeyFrameInfo();\n          keyInfo.type = nowKeyType;\n          keyInfo.Frame = parseInt(data2[0]);\n          keyInfo.index = this._currentAnimeFrames.keyFrames.length;\n          keyInfo.time = keyInfo.Frame;\n          if (nowKeyType != 4) {\n            var frameFound = false;\n            for (let mm = 0; mm < this._currentAnimeFrames.keyFrames.length; mm++) {\n              if (this._currentAnimeFrames.keyFrames[mm].Frame === keyInfo.Frame) {\n                keyInfo = this._currentAnimeFrames.keyFrames[mm];\n                frameFound = true;\n                break;\n              }\n            }\n            var frameValue = data2[2].split(\",\");\n            switch (nowKeyType) {\n              case 0:\n                keyInfo.rot = new Quaternion(parseFloat(frameValue[1]), parseFloat(frameValue[2]), parseFloat(frameValue[3]), parseFloat(frameValue[0]) * -1);\n                break;\n              case 1:\n                keyInfo.scl = new Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                break;\n              case 2:\n                keyInfo.pos = new Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                break;\n            }\n            if (!frameFound) {\n              this._currentAnimeFrames.keyFrames.push(keyInfo);\n            }\n          } else {\n            keyInfo.matrix = new Matrix4();\n            this._ParseMatrixData(keyInfo.matrix, data2[2].split(\",\"));\n            this._currentAnimeFrames.keyFrames.push(keyInfo);\n          }\n        }\n      }\n    }, {\n      key: \"_makeOutputAnimation\",\n      value: function _makeOutputAnimation() {\n        var animationObj = new XAnimationObj(this.options);\n        animationObj.fps = this.animTicksPerSecond;\n        animationObj.name = this._currentAnime.name;\n        animationObj.make(this._currentAnime.AnimeFrames);\n        this.animations.push(animationObj);\n      }\n    }, {\n      key: \"assignAnimation\",\n      value: function assignAnimation(_model, _animation) {\n        var model = _model;\n        var animation = _animation;\n        if (!model) {\n          model = this.Meshes[0];\n        }\n        if (!animation) {\n          animation = this.animations[0];\n        }\n        if (!model || !animation) {\n          return null;\n        }\n        var put = {};\n        put.fps = animation.fps;\n        put.name = animation.name;\n        put.length = animation.length;\n        put.hierarchy = [];\n        for (let b = 0; b < model.skeleton.bones.length; b++) {\n          var findAnimation = false;\n          for (let i2 = 0; i2 < animation.hierarchy.length; i2++) {\n            if (model.skeleton.bones[b].name === animation.hierarchy[i2].name) {\n              findAnimation = true;\n              var c_key = animation.hierarchy[i2].copy();\n              c_key.parent = -1;\n              if (model.skeleton.bones[b].parent && model.skeleton.bones[b].parent.type === \"Bone\") {\n                for (let bb = 0; bb < put.hierarchy.length; bb++) {\n                  if (put.hierarchy[bb].name === model.skeleton.bones[b].parent.name) {\n                    c_key.parent = bb;\n                    c_key.parentName = model.skeleton.bones[b].parent.name;\n                  }\n                }\n              }\n              put.hierarchy.push(c_key);\n              break;\n            }\n          }\n          if (!findAnimation) {\n            var _c_key = animation.hierarchy[0].copy();\n            _c_key.name = model.skeleton.bones[b].name;\n            _c_key.parent = -1;\n            for (let k = 0; k < _c_key.keys.length; k++) {\n              if (_c_key.keys[k].pos) {\n                _c_key.keys[k].pos.set(0, 0, 0);\n              }\n              if (_c_key.keys[k].scl) {\n                _c_key.keys[k].scl.set(1, 1, 1);\n              }\n              if (_c_key.keys[k].rot) {\n                _c_key.keys[k].rot.set(0, 0, 0, 1);\n              }\n            }\n            put.hierarchy.push(_c_key);\n          }\n        }\n        if (!model.geometry.animations) {\n          model.geometry.animations = [];\n        }\n        model.geometry.animations.push(AnimationClip.parseAnimation(put, model.skeleton.bones));\n        if (!model.animationMixer) {\n          model.animationMixer = new AnimationMixer(model);\n        }\n        return put;\n      }\n    }, {\n      key: \"_ParseMatrixData\",\n      value: function _ParseMatrixData(targetMatrix, data) {\n        targetMatrix.set(parseFloat(data[0]), parseFloat(data[4]), parseFloat(data[8]), parseFloat(data[12]), parseFloat(data[1]), parseFloat(data[5]), parseFloat(data[9]), parseFloat(data[13]), parseFloat(data[2]), parseFloat(data[6]), parseFloat(data[10]), parseFloat(data[14]), parseFloat(data[3]), parseFloat(data[7]), parseFloat(data[11]), parseFloat(data[15]));\n      }\n    }]);\n    return XLoader3;\n  }();\n  return XLoader2;\n}();\nexport { XLoader };","map":{"version":3,"sources":["../../src/loaders/XLoader.js"],"names":["i","XboneInf","XAnimationInfo","XAnimationObj","XKeyFrameInfo","XLoader"],"mappings":"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","sourcesContent":["import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  FileLoader,\n  Float32BufferAttribute,\n  FrontSide,\n  Loader,\n  LoaderUtils,\n  Matrix4,\n  Mesh,\n  MeshPhongMaterial,\n  Quaternion,\n  Skeleton,\n  SkinnedMesh,\n  TextureLoader,\n  Uint16BufferAttribute,\n  Vector2,\n  Vector3,\n} from 'three'\nimport { decodeText } from '../_polyfill/LoaderUtils'\n\nvar XLoader = (function () {\n  var classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function')\n    }\n  }\n\n  var createClass = (function () {\n    function defineProperties(target, props) {\n      for (let i = 0; i < props.length; i++) {\n        var descriptor = props[i]\n        descriptor.enumerable = descriptor.enumerable || false\n        descriptor.configurable = true\n        if ('value' in descriptor) descriptor.writable = true\n        Object.defineProperty(target, descriptor.key, descriptor)\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps)\n      if (staticProps) defineProperties(Constructor, staticProps)\n      return Constructor\n    }\n  })()\n\n  var XboneInf = function XboneInf() {\n    classCallCheck(this, XboneInf)\n\n    this.boneName = ''\n    this.BoneIndex = 0\n    this.Indeces = []\n    this.Weights = []\n    this.initMatrix = null\n    this.OffsetMatrix = null\n  }\n\n  var XAnimationInfo = function XAnimationInfo() {\n    classCallCheck(this, XAnimationInfo)\n\n    this.animeName = ''\n    this.boneName = ''\n    this.targetBone = null\n    this.keyType = 4\n    this.frameStartLv = 0\n    this.keyFrames = []\n    this.InverseMx = null\n  }\n\n  var XAnimationObj = (function () {\n    function XAnimationObj(_flags) {\n      classCallCheck(this, XAnimationObj)\n\n      this.fps = 30\n      this.name = 'xanimation'\n      this.length = 0\n      this.hierarchy = []\n      this.putFlags = _flags\n      if (this.putFlags.putPos === undefined) {\n        this.putFlags.putPos = true\n      }\n\n      if (this.putFlags.putRot === undefined) {\n        this.putFlags.putRot = true\n      }\n\n      if (this.putFlags.putScl === undefined) {\n        this.putFlags.putScl = true\n      }\n    }\n\n    createClass(XAnimationObj, [\n      {\n        key: 'make',\n        value: function make(XAnimationInfoArray) {\n          for (let i = 0; i < XAnimationInfoArray.length; i++) {\n            this.hierarchy.push(this.makeBonekeys(XAnimationInfoArray[i]))\n          }\n\n          this.length = this.hierarchy[0].keys[this.hierarchy[0].keys.length - 1].time\n        },\n      },\n      {\n        key: 'clone',\n        value: function clone() {\n          return Object.assign({}, this)\n        },\n      },\n      {\n        key: 'makeBonekeys',\n        value: function makeBonekeys(XAnimationInfo) {\n          var refObj = {}\n          refObj.name = XAnimationInfo.boneName\n          refObj.parent = ''\n          refObj.keys = this.keyFrameRefactor(XAnimationInfo)\n          refObj.copy = function () {\n            return Object.assign({}, this)\n          }\n\n          return refObj\n        },\n      },\n      {\n        key: 'keyFrameRefactor',\n        value: function keyFrameRefactor(XAnimationInfo) {\n          var keys = []\n          for (let i = 0; i < XAnimationInfo.keyFrames.length; i++) {\n            var keyframe = {}\n            keyframe.time = XAnimationInfo.keyFrames[i].time * this.fps\n            if (XAnimationInfo.keyFrames[i].pos && this.putFlags.putPos) {\n              keyframe.pos = XAnimationInfo.keyFrames[i].pos\n            }\n\n            if (XAnimationInfo.keyFrames[i].rot && this.putFlags.putRot) {\n              keyframe.rot = XAnimationInfo.keyFrames[i].rot\n            }\n\n            if (XAnimationInfo.keyFrames[i].scl && this.putFlags.putScl) {\n              keyframe.scl = XAnimationInfo.keyFrames[i].scl\n            }\n\n            if (XAnimationInfo.keyFrames[i].matrix) {\n              keyframe.matrix = XAnimationInfo.keyFrames[i].matrix\n              if (this.putFlags.putPos) {\n                keyframe.pos = new Vector3().setFromMatrixPosition(keyframe.matrix)\n              }\n\n              if (this.putFlags.putRot) {\n                keyframe.rot = new Quaternion().setFromRotationMatrix(keyframe.matrix)\n              }\n\n              if (this.putFlags.putScl) {\n                keyframe.scl = new Vector3().setFromMatrixScale(keyframe.matrix)\n              }\n            }\n\n            keys.push(keyframe)\n          }\n\n          return keys\n        },\n      },\n    ])\n    return XAnimationObj\n  })()\n\n  var XKeyFrameInfo = function XKeyFrameInfo() {\n    classCallCheck(this, XKeyFrameInfo)\n\n    this.index = 0\n    this.Frame = 0\n    this.time = 0.0\n    this.matrix = null\n  }\n\n  var XLoader = (function () {\n    function XLoader(manager) {\n      Loader.call(this, manager)\n\n      classCallCheck(this, XLoader)\n\n      this.debug = false\n      this.texloader = new TextureLoader(this.manager)\n      this.url = ''\n      this._putMatLength = 0\n      this._nowMat = null\n      this._nowFrameName = ''\n      this.frameHierarchie = []\n      this.Hierarchies = {}\n      this.HieStack = []\n      this._currentObject = {}\n      this._currentFrame = {}\n      this._data = null\n      this.onLoad = null\n      this.IsUvYReverse = true\n      this.Meshes = []\n      this.animations = []\n      this.animTicksPerSecond = 30\n      this._currentGeo = null\n      this._currentAnime = null\n      this._currentAnimeFrames = null\n    }\n\n    createClass(XLoader, [\n      {\n        key: '_setArgOption',\n        value: function _setArgOption(_arg) {\n          var _start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0\n\n          if (!_arg) {\n            return\n          }\n\n          for (let i = _start; i < _arg.length; i++) {\n            switch (i) {\n              case 0:\n                this.url = _arg[i]\n                break\n              case 1:\n                this.options = _arg[i]\n                break\n            }\n          }\n\n          if (this.options === undefined) {\n            this.options = {}\n          }\n        },\n      },\n      {\n        key: 'load',\n        value: function load(_arg, onLoad, onProgress, onError) {\n          var _this = this\n\n          this._setArgOption(_arg)\n          var loader = new FileLoader(this.manager)\n          loader.setPath(this.path)\n          loader.setResponseType('arraybuffer')\n          loader.setRequestHeader(this.requestHeader)\n          loader.setWithCredentials(this.withCredentials)\n          loader.load(\n            this.url,\n            function (response) {\n              try {\n                _this.parse(response, onLoad)\n              } catch (e) {\n                if (onError) {\n                  onError(e)\n                } else {\n                  console.error(e)\n                }\n\n                _this.manager.itemError(_this.url)\n              }\n            },\n            onProgress,\n            onError,\n          )\n        },\n      },\n      {\n        key: '_readLine',\n        value: function _readLine(line) {\n          var readed = 0\n          while (true) {\n            var find = -1\n            find = line.indexOf('//', readed)\n            if (find === -1) {\n              find = line.indexOf('#', readed)\n            }\n\n            if (find > -1 && find < 2) {\n              var foundNewLine = -1\n              foundNewLine = line.indexOf('\\r\\n', readed)\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 2\n              } else {\n                foundNewLine = line.indexOf('\\r', readed)\n                if (foundNewLine > 0) {\n                  readed = foundNewLine + 1\n                } else {\n                  readed = line.indexOf('\\n', readed) + 1\n                }\n              }\n            } else {\n              break\n            }\n          }\n\n          return line.substr(readed)\n        },\n      },\n      {\n        key: '_readLine',\n        value: function _readLine(line) {\n          var readed = 0\n          while (true) {\n            var find = -1\n            find = line.indexOf('//', readed)\n            if (find === -1) {\n              find = line.indexOf('#', readed)\n            }\n\n            if (find > -1 && find < 2) {\n              var foundNewLine = -1\n              foundNewLine = line.indexOf('\\r\\n', readed)\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 2\n              } else {\n                foundNewLine = line.indexOf('\\r', readed)\n                if (foundNewLine > 0) {\n                  readed = foundNewLine + 1\n                } else {\n                  readed = line.indexOf('\\n', readed) + 1\n                }\n              }\n            } else {\n              break\n            }\n          }\n\n          return line.substr(readed)\n        },\n      },\n      {\n        key: '_isBinary',\n        value: function _isBinary(binData) {\n          var reader = new DataView(binData)\n          var face_size = (32 / 8) * 3 + (32 / 8) * 3 * 3 + 16 / 8\n          var n_faces = reader.getUint32(80, true)\n          var expect = 80 + 32 / 8 + n_faces * face_size\n          if (expect === reader.byteLength) {\n            return true\n          }\n\n          var fileLength = reader.byteLength\n          for (let index = 0; index < fileLength; index++) {\n            if (reader.getUint8(index, false) > 127) {\n              return true\n            }\n          }\n\n          return false\n        },\n      },\n      {\n        key: '_ensureBinary',\n        value: function _ensureBinary(buf) {\n          if (typeof buf === 'string') {\n            var array_buffer = new Uint8Array(buf.length)\n            for (let i = 0; i < buf.length; i++) {\n              array_buffer[i] = buf.charCodeAt(i) & 0xff\n            }\n\n            return array_buffer.buffer || array_buffer\n          } else {\n            return buf\n          }\n        },\n      },\n      {\n        key: '_ensureString',\n        value: function _ensureString(buf) {\n          if (typeof buf !== 'string') {\n            return decodeText(new Uint8Array(buf))\n          } else {\n            return buf\n          }\n        },\n      },\n      {\n        key: 'parse',\n        value: function _parse(data, onLoad) {\n          var binData = this._ensureBinary(data)\n          this._data = this._ensureString(data)\n          this.onLoad = onLoad\n          return this._isBinary(binData) ? this._parseBinary(binData) : this._parseASCII()\n        },\n      },\n      {\n        key: '_parseBinary',\n        value: function _parseBinary(data) {\n          return this._parseASCII(decodeText(new Uint8Array(data)))\n        },\n      },\n      {\n        key: '_parseASCII',\n        value: function _parseASCII() {\n          var path\n\n          if (this.resourcePath !== '') {\n            path = this.resourcePath\n          } else if (this.path !== '') {\n            path = this.path\n          } else {\n            path = LoaderUtils.extractUrlBase(this.url)\n          }\n\n          this.texloader.setPath(path).setCrossOrigin(this.crossOrigin)\n\n          var endRead = 16\n          this.Hierarchies.children = []\n          this._hierarchieParse(this.Hierarchies, endRead)\n          this._changeRoot()\n          this._currentObject = this.Hierarchies.children.shift()\n          this._mainloop()\n        },\n      },\n      {\n        key: '_hierarchieParse',\n        value: function _hierarchieParse(_parent, _end) {\n          var endRead = _end\n          while (true) {\n            var find1 = this._data.indexOf('{', endRead) + 1\n            var findEnd = this._data.indexOf('}', endRead)\n            var findNext = this._data.indexOf('{', find1) + 1\n            if (find1 > 0 && findEnd > find1) {\n              var _currentObject = {}\n              _currentObject.children = []\n              var nameData = this._readLine(this._data.substr(endRead, find1 - endRead - 1)).trim()\n              var word = nameData.split(/ /g)\n              if (word.length > 0) {\n                _currentObject.type = word[0]\n                if (word.length >= 2) {\n                  _currentObject.name = word[1]\n                } else {\n                  _currentObject.name = word[0] + this.Hierarchies.children.length\n                }\n              } else {\n                _currentObject.name = nameData\n                _currentObject.type = ''\n              }\n\n              if (_currentObject.type === 'Animation') {\n                _currentObject.data = this._data.substr(findNext, findEnd - findNext).trim()\n                var refs = this._hierarchieParse(_currentObject, findEnd + 1)\n                endRead = refs.end\n                _currentObject.children = refs.parent.children\n              } else {\n                var DataEnder = this._data.lastIndexOf(';', findNext > 0 ? Math.min(findNext, findEnd) : findEnd)\n                _currentObject.data = this._data.substr(find1, DataEnder - find1).trim()\n                if (findNext <= 0 || findEnd < findNext) {\n                  endRead = findEnd + 1\n                } else {\n                  var nextStart = Math.max(DataEnder + 1, find1)\n                  var _refs = this._hierarchieParse(_currentObject, nextStart)\n                  endRead = _refs.end\n                  _currentObject.children = _refs.parent.children\n                }\n              }\n\n              _currentObject.parent = _parent\n              if (_currentObject.type != 'template') {\n                _parent.children.push(_currentObject)\n              }\n            } else {\n              endRead = find1 === -1 ? this._data.length : findEnd + 1\n              break\n            }\n          }\n\n          return {\n            parent: _parent,\n            end: endRead,\n          }\n        },\n      },\n      {\n        key: '_mainloop',\n        value: function _mainloop() {\n          var _this2 = this\n\n          this._mainProc()\n          if (this._currentObject.parent || this._currentObject.children.length > 0 || !this._currentObject.worked) {\n            setTimeout(function () {\n              _this2._mainloop()\n            }, 1)\n          } else {\n            setTimeout(function () {\n              _this2.onLoad({\n                models: _this2.Meshes,\n                animations: _this2.animations,\n              })\n            }, 1)\n          }\n        },\n      },\n      {\n        key: '_mainProc',\n        value: function _mainProc() {\n          var breakFlag = false\n          while (true) {\n            if (!this._currentObject.worked) {\n              switch (this._currentObject.type) {\n                case 'template':\n                  break\n                case 'AnimTicksPerSecond':\n                  this.animTicksPerSecond = parseInt(this._currentObject.data)\n                  break\n                case 'Frame':\n                  this._setFrame()\n                  break\n                case 'FrameTransformMatrix':\n                  this._setFrameTransformMatrix()\n                  break\n                case 'Mesh':\n                  this._changeRoot()\n                  this._currentGeo = {}\n                  this._currentGeo.name = this._currentObject.name.trim()\n                  this._currentGeo.parentName = this._getParentName(this._currentObject).trim()\n                  this._currentGeo.VertexSetedBoneCount = []\n                  this._currentGeo.GeometryData = {\n                    vertices: [],\n                    normals: [],\n                    uvs: [],\n                    skinIndices: [],\n                    skinWeights: [],\n                    indices: [],\n                    materialIndices: [],\n                  }\n                  this._currentGeo.Materials = []\n                  this._currentGeo.normalVectors = []\n                  this._currentGeo.BoneInfs = []\n                  this._currentGeo.baseFrame = this._currentFrame\n                  this._makeBoneFrom_CurrentFrame()\n                  this._readVertexDatas()\n                  breakFlag = true\n                  break\n                case 'MeshNormals':\n                  this._readVertexDatas()\n                  break\n                case 'MeshTextureCoords':\n                  this._setMeshTextureCoords()\n                  break\n                case 'VertexDuplicationIndices':\n                  break\n                case 'MeshMaterialList':\n                  this._setMeshMaterialList()\n                  break\n                case 'Material':\n                  this._setMaterial()\n                  break\n                case 'SkinWeights':\n                  this._setSkinWeights()\n                  break\n                case 'AnimationSet':\n                  this._changeRoot()\n                  this._currentAnime = {}\n                  this._currentAnime.name = this._currentObject.name.trim()\n                  this._currentAnime.AnimeFrames = []\n                  break\n                case 'Animation':\n                  if (this._currentAnimeFrames) {\n                    this._currentAnime.AnimeFrames.push(this._currentAnimeFrames)\n                  }\n\n                  this._currentAnimeFrames = new XAnimationInfo()\n                  this._currentAnimeFrames.boneName = this._currentObject.data.trim()\n                  break\n                case 'AnimationKey':\n                  this._readAnimationKey()\n                  breakFlag = true\n                  break\n              }\n\n              this._currentObject.worked = true\n            }\n\n            if (this._currentObject.children.length > 0) {\n              this._currentObject = this._currentObject.children.shift()\n              if (this.debug) {\n                console.log('processing ' + this._currentObject.name)\n              }\n\n              if (breakFlag) break\n            } else {\n              if (this._currentObject.worked) {\n                if (this._currentObject.parent && !this._currentObject.parent.parent) {\n                  this._changeRoot()\n                }\n              }\n\n              if (this._currentObject.parent) {\n                this._currentObject = this._currentObject.parent\n              } else {\n                breakFlag = true\n              }\n\n              if (breakFlag) break\n            }\n          }\n\n          return\n        },\n      },\n      {\n        key: '_changeRoot',\n        value: function _changeRoot() {\n          if (this._currentGeo != null && this._currentGeo.name) {\n            this._makeOutputGeometry()\n          }\n\n          this._currentGeo = {}\n          if (this._currentAnime != null && this._currentAnime.name) {\n            if (this._currentAnimeFrames) {\n              this._currentAnime.AnimeFrames.push(this._currentAnimeFrames)\n              this._currentAnimeFrames = null\n            }\n\n            this._makeOutputAnimation()\n          }\n\n          this._currentAnime = {}\n        },\n      },\n      {\n        key: '_getParentName',\n        value: function _getParentName(_obj) {\n          if (_obj.parent) {\n            if (_obj.parent.name) {\n              return _obj.parent.name\n            } else {\n              return this._getParentName(_obj.parent)\n            }\n          } else {\n            return ''\n          }\n        },\n      },\n      {\n        key: '_setFrame',\n        value: function _setFrame() {\n          this._nowFrameName = this._currentObject.name.trim()\n          this._currentFrame = {}\n          this._currentFrame.name = this._nowFrameName\n          this._currentFrame.children = []\n          if (this._currentObject.parent && this._currentObject.parent.name) {\n            this._currentFrame.parentName = this._currentObject.parent.name\n          }\n\n          this.frameHierarchie.push(this._nowFrameName)\n          this.HieStack[this._nowFrameName] = this._currentFrame\n        },\n      },\n      {\n        key: '_setFrameTransformMatrix',\n        value: function _setFrameTransformMatrix() {\n          this._currentFrame.FrameTransformMatrix = new Matrix4()\n          var data = this._currentObject.data.split(',')\n          this._ParseMatrixData(this._currentFrame.FrameTransformMatrix, data)\n          this._makeBoneFrom_CurrentFrame()\n        },\n      },\n      {\n        key: '_makeBoneFrom_CurrentFrame',\n        value: function _makeBoneFrom_CurrentFrame() {\n          if (!this._currentFrame.FrameTransformMatrix) {\n            return\n          }\n\n          var b = new Bone()\n          b.name = this._currentFrame.name\n          b.applyMatrix4(this._currentFrame.FrameTransformMatrix)\n          b.matrixWorld = b.matrix\n          b.FrameTransformMatrix = this._currentFrame.FrameTransformMatrix\n          this._currentFrame.putBone = b\n          if (this._currentFrame.parentName) {\n            for (let frame in this.HieStack) {\n              if (this.HieStack[frame].name === this._currentFrame.parentName) {\n                this.HieStack[frame].putBone.add(this._currentFrame.putBone)\n              }\n            }\n          }\n        },\n      },\n      {\n        key: '_readVertexDatas',\n        value: function _readVertexDatas() {\n          var endRead = 0\n          var mode = 0\n          var mode_local = 0\n          var maxLength = 0\n          while (true) {\n            var changeMode = false\n            if (mode_local === 0) {\n              var refO = this._readInt1(endRead)\n              endRead = refO.endRead\n              mode_local = 1\n              maxLength = this._currentObject.data.indexOf(';;', endRead) + 1\n              if (maxLength <= 0) {\n                maxLength = this._currentObject.data.length\n              }\n            } else {\n              var find = 0\n              switch (mode) {\n                case 0:\n                  find = this._currentObject.data.indexOf(',', endRead) + 1\n                  break\n                case 1:\n                  find = this._currentObject.data.indexOf(';,', endRead) + 1\n                  break\n              }\n\n              if (find === 0 || find > maxLength) {\n                find = maxLength\n                mode_local = 0\n                changeMode = true\n              }\n\n              switch (this._currentObject.type) {\n                case 'Mesh':\n                  switch (mode) {\n                    case 0:\n                      this._readVertex1(this._currentObject.data.substr(endRead, find - endRead))\n                      break\n                    case 1:\n                      this._readFace1(this._currentObject.data.substr(endRead, find - endRead))\n                      break\n                  }\n\n                  break\n                case 'MeshNormals':\n                  switch (mode) {\n                    case 0:\n                      this._readNormalVector1(this._currentObject.data.substr(endRead, find - endRead))\n                      break\n                  }\n\n                  break\n              }\n\n              endRead = find + 1\n              if (changeMode) {\n                mode++\n              }\n            }\n\n            if (endRead >= this._currentObject.data.length) {\n              break\n            }\n          }\n        },\n      },\n      {\n        key: '_readInt1',\n        value: function _readInt1(start) {\n          var find = this._currentObject.data.indexOf(';', start)\n          return {\n            refI: parseInt(this._currentObject.data.substr(start, find - start)),\n            endRead: find + 1,\n          }\n        },\n      },\n      {\n        key: '_readVertex1',\n        value: function _readVertex1(line) {\n          var data = this._readLine(line.trim())\n            .substr(0, line.length - 2)\n            .split(';')\n          this._currentGeo.GeometryData.vertices.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]))\n          this._currentGeo.GeometryData.skinIndices.push(0, 0, 0, 0)\n          this._currentGeo.GeometryData.skinWeights.push(1, 0, 0, 0)\n          this._currentGeo.VertexSetedBoneCount.push(0)\n        },\n      },\n      {\n        key: '_readFace1',\n        value: function _readFace1(line) {\n          var data = this._readLine(line.trim())\n            .substr(2, line.length - 4)\n            .split(',')\n          this._currentGeo.GeometryData.indices.push(\n            parseInt(data[0], 10),\n            parseInt(data[1], 10),\n            parseInt(data[2], 10),\n          )\n        },\n      },\n      {\n        key: '_readNormalVector1',\n        value: function _readNormalVector1(line) {\n          var data = this._readLine(line.trim())\n            .substr(0, line.length - 2)\n            .split(';')\n          this._currentGeo.GeometryData.normals.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]))\n        },\n      },\n      {\n        key: '_buildGeometry',\n        value: function _buildGeometry() {\n          var bufferGeometry = new BufferGeometry()\n          var position = []\n          var normals = []\n          var uvs = []\n          var skinIndices = []\n          var skinWeights = []\n\n          //\n\n          var data = this._currentGeo.GeometryData\n\n          for (let i = 0, l = data.indices.length; i < l; i++) {\n            var stride2 = data.indices[i] * 2\n            var stride3 = data.indices[i] * 3\n            var stride4 = data.indices[i] * 4\n\n            position.push(data.vertices[stride3], data.vertices[stride3 + 1], data.vertices[stride3 + 2])\n            normals.push(data.normals[stride3], data.normals[stride3 + 1], data.normals[stride3 + 2])\n            skinIndices.push(\n              data.skinIndices[stride4],\n              data.skinIndices[stride4 + 1],\n              data.skinIndices[stride4 + 2],\n              data.skinIndices[stride4 + 3],\n            )\n            skinWeights.push(\n              data.skinWeights[stride4],\n              data.skinWeights[stride4 + 1],\n              data.skinWeights[stride4 + 2],\n              data.skinWeights[stride4 + 3],\n            )\n            uvs.push(data.uvs[stride2], data.uvs[stride2 + 1])\n          }\n\n          //\n\n          bufferGeometry.setAttribute('position', new Float32BufferAttribute(position, 3))\n          bufferGeometry.setAttribute('normal', new Float32BufferAttribute(normals, 3))\n          bufferGeometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2))\n          bufferGeometry.setAttribute('skinIndex', new Uint16BufferAttribute(skinIndices, 4))\n          bufferGeometry.setAttribute('skinWeight', new Float32BufferAttribute(skinWeights, 4))\n\n          this._computeGroups(bufferGeometry, data.materialIndices)\n\n          return bufferGeometry\n        },\n      },\n      {\n        key: '_computeGroups',\n        value: function _computeGroups(bufferGeometry, materialIndices) {\n          var group\n          var groups = []\n          var materialIndex = undefined\n\n          for (let i = 0; i < materialIndices.length; i++) {\n            var currentMaterialIndex = materialIndices[i]\n\n            if (currentMaterialIndex !== materialIndex) {\n              materialIndex = currentMaterialIndex\n\n              if (group !== undefined) {\n                group.count = i * 3 - group.start\n                groups.push(group)\n              }\n\n              group = {\n                start: i * 3,\n                materialIndex: materialIndex,\n              }\n            }\n          }\n\n          if (group !== undefined) {\n            group.count = i * 3 - group.start\n            groups.push(group)\n          }\n\n          bufferGeometry.groups = groups\n        },\n      },\n      {\n        key: '_setMeshTextureCoords',\n        value: function _setMeshTextureCoords() {\n          var endRead = 0\n          var mode = 0\n          var mode_local = 0\n          while (true) {\n            switch (mode) {\n              case 0:\n                if (mode_local === 0) {\n                  var refO = this._readInt1(0)\n                  endRead = refO.endRead\n                  mode_local = 1\n                } else {\n                  var find = this._currentObject.data.indexOf(',', endRead) + 1\n                  if (find === 0) {\n                    find = this._currentObject.data.length\n                    mode = 2\n                    mode_local = 0\n                  }\n\n                  var line = this._currentObject.data.substr(endRead, find - endRead)\n                  var data = this._readLine(line.trim()).split(';')\n                  if (this.IsUvYReverse) {\n                    this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), 1 - parseFloat(data[1]))\n                  } else {\n                    this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), parseFloat(data[1]))\n                  }\n\n                  endRead = find + 1\n                }\n\n                break\n            }\n\n            if (endRead >= this._currentObject.data.length) {\n              break\n            }\n          }\n        },\n      },\n      {\n        key: '_setMeshMaterialList',\n        value: function _setMeshMaterialList() {\n          var endRead = 0\n          var mode = 0\n          var mode_local = 0\n          while (true) {\n            if (mode_local < 2) {\n              var refO = this._readInt1(endRead)\n              endRead = refO.endRead\n              mode_local++\n            } else {\n              var find = this._currentObject.data.indexOf(';', endRead)\n              if (find === -1) {\n                find = this._currentObject.data.length\n                mode = 3\n                mode_local = 0\n              }\n\n              var line = this._currentObject.data.substr(endRead, find - endRead)\n              var data = this._readLine(line.trim()).split(',')\n              for (let i = 0; i < data.length; i++) {\n                this._currentGeo.GeometryData.materialIndices[i] = parseInt(data[i])\n              }\n\n              endRead = this._currentObject.data.length\n            }\n\n            if (endRead >= this._currentObject.data.length || mode >= 3) {\n              break\n            }\n          }\n        },\n      },\n      {\n        key: '_setMaterial',\n        value: function _setMaterial() {\n          var _nowMat = new MeshPhongMaterial({\n            color: Math.random() * 0xffffff,\n          })\n          _nowMat.side = FrontSide\n          _nowMat.name = this._currentObject.name\n          var endRead = 0\n          var find = this._currentObject.data.indexOf(';;', endRead)\n          var line = this._currentObject.data.substr(endRead, find - endRead)\n          var data = this._readLine(line.trim()).split(';')\n          _nowMat.color.r = parseFloat(data[0])\n          _nowMat.color.g = parseFloat(data[1])\n          _nowMat.color.b = parseFloat(data[2])\n          endRead = find + 2\n          find = this._currentObject.data.indexOf(';', endRead)\n          line = this._currentObject.data.substr(endRead, find - endRead)\n          _nowMat.shininess = parseFloat(this._readLine(line))\n          endRead = find + 1\n          find = this._currentObject.data.indexOf(';;', endRead)\n          line = this._currentObject.data.substr(endRead, find - endRead)\n          var data2 = this._readLine(line.trim()).split(';')\n          _nowMat.specular.r = parseFloat(data2[0])\n          _nowMat.specular.g = parseFloat(data2[1])\n          _nowMat.specular.b = parseFloat(data2[2])\n          endRead = find + 2\n          find = this._currentObject.data.indexOf(';;', endRead)\n          if (find === -1) {\n            find = this._currentObject.data.length\n          }\n\n          line = this._currentObject.data.substr(endRead, find - endRead)\n          var data3 = this._readLine(line.trim()).split(';')\n          _nowMat.emissive.r = parseFloat(data3[0])\n          _nowMat.emissive.g = parseFloat(data3[1])\n          _nowMat.emissive.b = parseFloat(data3[2])\n          var localObject = null\n          while (true) {\n            if (this._currentObject.children.length > 0) {\n              localObject = this._currentObject.children.shift()\n              if (this.debug) {\n                console.log('processing ' + localObject.name)\n              }\n\n              var fileName = localObject.data.substr(1, localObject.data.length - 2)\n              switch (localObject.type) {\n                case 'TextureFilename':\n                  _nowMat.map = this.texloader.load(fileName)\n                  break\n                case 'BumpMapFilename':\n                  _nowMat.bumpMap = this.texloader.load(fileName)\n                  _nowMat.bumpScale = 0.05\n                  break\n                case 'NormalMapFilename':\n                  _nowMat.normalMap = this.texloader.load(fileName)\n                  _nowMat.normalScale = new Vector2(2, 2)\n                  break\n                case 'EmissiveMapFilename':\n                  _nowMat.emissiveMap = this.texloader.load(fileName)\n                  break\n                case 'LightMapFilename':\n                  _nowMat.lightMap = this.texloader.load(fileName)\n                  break\n              }\n            } else {\n              break\n            }\n          }\n\n          this._currentGeo.Materials.push(_nowMat)\n        },\n      },\n      {\n        key: '_setSkinWeights',\n        value: function _setSkinWeights() {\n          var boneInf = new XboneInf()\n          var endRead = 0\n          var find = this._currentObject.data.indexOf(';', endRead)\n          var line = this._currentObject.data.substr(endRead, find - endRead)\n          endRead = find + 1\n          boneInf.boneName = line.substr(1, line.length - 2)\n          boneInf.BoneIndex = this._currentGeo.BoneInfs.length\n          find = this._currentObject.data.indexOf(';', endRead)\n          endRead = find + 1\n          find = this._currentObject.data.indexOf(';', endRead)\n          line = this._currentObject.data.substr(endRead, find - endRead)\n          var data = this._readLine(line.trim()).split(',')\n          for (let i = 0; i < data.length; i++) {\n            boneInf.Indeces.push(parseInt(data[i]))\n          }\n\n          endRead = find + 1\n          find = this._currentObject.data.indexOf(';', endRead)\n          line = this._currentObject.data.substr(endRead, find - endRead)\n          var data2 = this._readLine(line.trim()).split(',')\n          for (let _i = 0; _i < data2.length; _i++) {\n            boneInf.Weights.push(parseFloat(data2[_i]))\n          }\n\n          endRead = find + 1\n          find = this._currentObject.data.indexOf(';', endRead)\n          if (find <= 0) {\n            find = this._currentObject.data.length\n          }\n\n          line = this._currentObject.data.substr(endRead, find - endRead)\n          var data3 = this._readLine(line.trim()).split(',')\n          boneInf.OffsetMatrix = new Matrix4()\n          this._ParseMatrixData(boneInf.OffsetMatrix, data3)\n          this._currentGeo.BoneInfs.push(boneInf)\n        },\n      },\n      {\n        key: '_makePutBoneList',\n        value: function _makePutBoneList(_RootName, _bones) {\n          var putting = false\n          for (let frame in this.HieStack) {\n            if (this.HieStack[frame].name === _RootName || putting) {\n              putting = true\n              var b = new Bone()\n              b.name = this.HieStack[frame].name\n              b.applyMatrix4(this.HieStack[frame].FrameTransformMatrix)\n              b.matrixWorld = b.matrix\n              b.FrameTransformMatrix = this.HieStack[frame].FrameTransformMatrix\n              b.pos = new Vector3().setFromMatrixPosition(b.FrameTransformMatrix).toArray()\n              b.rotq = new Quaternion().setFromRotationMatrix(b.FrameTransformMatrix).toArray()\n              b.scl = new Vector3().setFromMatrixScale(b.FrameTransformMatrix).toArray()\n              if (this.HieStack[frame].parentName && this.HieStack[frame].parentName.length > 0) {\n                for (let i = 0; i < _bones.length; i++) {\n                  if (this.HieStack[frame].parentName === _bones[i].name) {\n                    _bones[i].add(b)\n                    b.parent = i\n                    break\n                  }\n                }\n              }\n\n              _bones.push(b)\n            }\n          }\n        },\n      },\n      {\n        key: '_makeOutputGeometry',\n        value: function _makeOutputGeometry() {\n          var mesh = null\n          if (this._currentGeo.BoneInfs.length > 0) {\n            var putBones = []\n            this._makePutBoneList(this._currentGeo.baseFrame.parentName, putBones)\n            for (let bi = 0; bi < this._currentGeo.BoneInfs.length; bi++) {\n              var boneIndex = 0\n              for (let bb = 0; bb < putBones.length; bb++) {\n                if (putBones[bb].name === this._currentGeo.BoneInfs[bi].boneName) {\n                  boneIndex = bb\n                  putBones[bb].OffsetMatrix = new Matrix4()\n                  putBones[bb].OffsetMatrix.copy(this._currentGeo.BoneInfs[bi].OffsetMatrix)\n                  break\n                }\n              }\n\n              for (let vi = 0; vi < this._currentGeo.BoneInfs[bi].Indeces.length; vi++) {\n                var nowVertexID = this._currentGeo.BoneInfs[bi].Indeces[vi]\n                var nowVal = this._currentGeo.BoneInfs[bi].Weights[vi]\n\n                var stride = nowVertexID * 4\n\n                switch (this._currentGeo.VertexSetedBoneCount[nowVertexID]) {\n                  case 0:\n                    this._currentGeo.GeometryData.skinIndices[stride] = boneIndex\n                    this._currentGeo.GeometryData.skinWeights[stride] = nowVal\n                    break\n                  case 1:\n                    this._currentGeo.GeometryData.skinIndices[stride + 1] = boneIndex\n                    this._currentGeo.GeometryData.skinWeights[stride + 1] = nowVal\n                    break\n                  case 2:\n                    this._currentGeo.GeometryData.skinIndices[stride + 2] = boneIndex\n                    this._currentGeo.GeometryData.skinWeights[stride + 2] = nowVal\n                    break\n                  case 3:\n                    this._currentGeo.GeometryData.skinIndices[stride + 3] = boneIndex\n                    this._currentGeo.GeometryData.skinWeights[stride + 3] = nowVal\n                    break\n                }\n\n                this._currentGeo.VertexSetedBoneCount[nowVertexID]++\n                if (this._currentGeo.VertexSetedBoneCount[nowVertexID] > 4) {\n                  console.log('warn! over 4 bone weight! :' + nowVertexID)\n                }\n              }\n            }\n\n            for (let sk = 0; sk < this._currentGeo.Materials.length; sk++) {\n              this._currentGeo.Materials[sk].skinning = true\n            }\n\n            var offsetList = []\n            for (let _bi = 0; _bi < putBones.length; _bi++) {\n              if (putBones[_bi].OffsetMatrix) {\n                offsetList.push(putBones[_bi].OffsetMatrix)\n              } else {\n                offsetList.push(new Matrix4())\n              }\n            }\n\n            var bufferGeometry = this._buildGeometry()\n            mesh = new SkinnedMesh(\n              bufferGeometry,\n              this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials,\n            )\n\n            this._initSkeleton(mesh, putBones, offsetList)\n          } else {\n            var _bufferGeometry = this._buildGeometry()\n            mesh = new Mesh(\n              _bufferGeometry,\n              this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials,\n            )\n          }\n\n          mesh.name = this._currentGeo.name\n          var worldBaseMx = new Matrix4()\n          var currentMxFrame = this._currentGeo.baseFrame.putBone\n          if (currentMxFrame && currentMxFrame.parent) {\n            while (true) {\n              currentMxFrame = currentMxFrame.parent\n              if (currentMxFrame) {\n                worldBaseMx.multiply(currentMxFrame.FrameTransformMatrix)\n              } else {\n                break\n              }\n            }\n\n            mesh.applyMatrix4(worldBaseMx)\n          }\n\n          this.Meshes.push(mesh)\n        },\n      },\n      {\n        key: '_initSkeleton',\n        value: function _initSkeleton(mesh, boneList, boneInverses) {\n          var bones = [],\n            bone,\n            gbone\n          var i, il\n\n          for (i = 0, il = boneList.length; i < il; i++) {\n            gbone = boneList[i]\n\n            bone = new Bone()\n            bones.push(bone)\n\n            bone.name = gbone.name\n            bone.position.fromArray(gbone.pos)\n            bone.quaternion.fromArray(gbone.rotq)\n            if (gbone.scl !== undefined) bone.scale.fromArray(gbone.scl)\n          }\n\n          for (i = 0, il = boneList.length; i < il; i++) {\n            gbone = boneList[i]\n\n            if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== undefined) {\n              bones[gbone.parent].add(bones[i])\n            } else {\n              mesh.add(bones[i])\n            }\n          }\n\n          mesh.updateMatrixWorld(true)\n\n          var skeleton = new Skeleton(bones, boneInverses)\n          mesh.bind(skeleton, mesh.matrixWorld)\n        },\n      },\n      {\n        key: '_readAnimationKey',\n        value: function _readAnimationKey() {\n          var endRead = 0\n          var find = this._currentObject.data.indexOf(';', endRead)\n          var line = this._currentObject.data.substr(endRead, find - endRead)\n          endRead = find + 1\n          var nowKeyType = parseInt(this._readLine(line))\n          find = this._currentObject.data.indexOf(';', endRead)\n          endRead = find + 1\n          line = this._currentObject.data.substr(endRead)\n          var data = this._readLine(line.trim()).split(';;,')\n          for (let i = 0; i < data.length; i++) {\n            var data2 = data[i].split(';')\n            var keyInfo = new XKeyFrameInfo()\n            keyInfo.type = nowKeyType\n            keyInfo.Frame = parseInt(data2[0])\n            keyInfo.index = this._currentAnimeFrames.keyFrames.length\n            keyInfo.time = keyInfo.Frame\n            if (nowKeyType != 4) {\n              var frameFound = false\n              for (let mm = 0; mm < this._currentAnimeFrames.keyFrames.length; mm++) {\n                if (this._currentAnimeFrames.keyFrames[mm].Frame === keyInfo.Frame) {\n                  keyInfo = this._currentAnimeFrames.keyFrames[mm]\n                  frameFound = true\n                  break\n                }\n              }\n\n              var frameValue = data2[2].split(',')\n              switch (nowKeyType) {\n                case 0:\n                  keyInfo.rot = new Quaternion(\n                    parseFloat(frameValue[1]),\n                    parseFloat(frameValue[2]),\n                    parseFloat(frameValue[3]),\n                    parseFloat(frameValue[0]) * -1,\n                  )\n                  break\n                case 1:\n                  keyInfo.scl = new Vector3(\n                    parseFloat(frameValue[0]),\n                    parseFloat(frameValue[1]),\n                    parseFloat(frameValue[2]),\n                  )\n                  break\n                case 2:\n                  keyInfo.pos = new Vector3(\n                    parseFloat(frameValue[0]),\n                    parseFloat(frameValue[1]),\n                    parseFloat(frameValue[2]),\n                  )\n                  break\n              }\n\n              if (!frameFound) {\n                this._currentAnimeFrames.keyFrames.push(keyInfo)\n              }\n            } else {\n              keyInfo.matrix = new Matrix4()\n              this._ParseMatrixData(keyInfo.matrix, data2[2].split(','))\n              this._currentAnimeFrames.keyFrames.push(keyInfo)\n            }\n          }\n        },\n      },\n      {\n        key: '_makeOutputAnimation',\n        value: function _makeOutputAnimation() {\n          var animationObj = new XAnimationObj(this.options)\n          animationObj.fps = this.animTicksPerSecond\n          animationObj.name = this._currentAnime.name\n          animationObj.make(this._currentAnime.AnimeFrames)\n          this.animations.push(animationObj)\n        },\n      },\n      {\n        key: 'assignAnimation',\n        value: function assignAnimation(_model, _animation) {\n          var model = _model\n          var animation = _animation\n          if (!model) {\n            model = this.Meshes[0]\n          }\n\n          if (!animation) {\n            animation = this.animations[0]\n          }\n\n          if (!model || !animation) {\n            return null\n          }\n\n          var put = {}\n          put.fps = animation.fps\n          put.name = animation.name\n          put.length = animation.length\n          put.hierarchy = []\n          for (let b = 0; b < model.skeleton.bones.length; b++) {\n            var findAnimation = false\n            for (let i = 0; i < animation.hierarchy.length; i++) {\n              if (model.skeleton.bones[b].name === animation.hierarchy[i].name) {\n                findAnimation = true\n                var c_key = animation.hierarchy[i].copy()\n                c_key.parent = -1\n                if (model.skeleton.bones[b].parent && model.skeleton.bones[b].parent.type === 'Bone') {\n                  for (let bb = 0; bb < put.hierarchy.length; bb++) {\n                    if (put.hierarchy[bb].name === model.skeleton.bones[b].parent.name) {\n                      c_key.parent = bb\n                      c_key.parentName = model.skeleton.bones[b].parent.name\n                    }\n                  }\n                }\n\n                put.hierarchy.push(c_key)\n                break\n              }\n            }\n\n            if (!findAnimation) {\n              var _c_key = animation.hierarchy[0].copy()\n              _c_key.name = model.skeleton.bones[b].name\n              _c_key.parent = -1\n              for (let k = 0; k < _c_key.keys.length; k++) {\n                if (_c_key.keys[k].pos) {\n                  _c_key.keys[k].pos.set(0, 0, 0)\n                }\n\n                if (_c_key.keys[k].scl) {\n                  _c_key.keys[k].scl.set(1, 1, 1)\n                }\n\n                if (_c_key.keys[k].rot) {\n                  _c_key.keys[k].rot.set(0, 0, 0, 1)\n                }\n              }\n\n              put.hierarchy.push(_c_key)\n            }\n          }\n\n          if (!model.geometry.animations) {\n            model.geometry.animations = []\n          }\n\n          model.geometry.animations.push(AnimationClip.parseAnimation(put, model.skeleton.bones))\n          if (!model.animationMixer) {\n            model.animationMixer = new AnimationMixer(model)\n          }\n\n          return put\n        },\n      },\n      {\n        key: '_ParseMatrixData',\n        value: function _ParseMatrixData(targetMatrix, data) {\n          targetMatrix.set(\n            parseFloat(data[0]),\n            parseFloat(data[4]),\n            parseFloat(data[8]),\n            parseFloat(data[12]),\n            parseFloat(data[1]),\n            parseFloat(data[5]),\n            parseFloat(data[9]),\n            parseFloat(data[13]),\n            parseFloat(data[2]),\n            parseFloat(data[6]),\n            parseFloat(data[10]),\n            parseFloat(data[14]),\n            parseFloat(data[3]),\n            parseFloat(data[7]),\n            parseFloat(data[11]),\n            parseFloat(data[15]),\n          )\n        },\n      },\n    ])\n    return XLoader\n  })()\n\n  return XLoader\n})()\n\nexport { XLoader }\n"]},"metadata":{},"sourceType":"module"}