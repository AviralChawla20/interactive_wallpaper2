{"ast":null,"code":"import { MathUtils } from \"three\";\nconst _hsl = {};\nclass ColorConverter {\n  static setHSV(color, h, s, v) {\n    h = MathUtils.euclideanModulo(h, 1);\n    s = MathUtils.clamp(s, 0, 1);\n    v = MathUtils.clamp(v, 0, 1);\n    return color.setHSL(h, s * v / ((h = (2 - s) * v) < 1 ? h : 2 - h), h * 0.5);\n  }\n  static getHSV(color, target) {\n    color.getHSL(_hsl);\n    _hsl.s *= _hsl.l < 0.5 ? _hsl.l : 1 - _hsl.l;\n    target.h = _hsl.h;\n    target.s = 2 * _hsl.s / (_hsl.l + _hsl.s);\n    target.v = _hsl.l + _hsl.s;\n    return target;\n  }\n  // where c, m, y, k is between 0 and 1\n  static setCMYK(color, c, m, y, k) {\n    const r = (1 - c) * (1 - k);\n    const g = (1 - m) * (1 - k);\n    const b = (1 - y) * (1 - k);\n    return color.setRGB(r, g, b);\n  }\n  static getCMYK(color, target) {\n    const r = color.r;\n    const g = color.g;\n    const b = color.b;\n    const k = 1 - Math.max(r, g, b);\n    const c = (1 - r - k) / (1 - k);\n    const m = (1 - g - k) / (1 - k);\n    const y = (1 - b - k) / (1 - k);\n    target.c = c;\n    target.m = m;\n    target.y = y;\n    target.k = k;\n    return target;\n  }\n}\nexport { ColorConverter };","map":{"version":3,"sources":["../../src/math/ColorConverter.js"],"names":[],"mappings":";AAEA,MAAM,IAAA,GAAO,CAAE,CAAA;AAEf,MAAM,cAAA,CAAe;EACnB,OAAO,MAAA,CAAO,KAAA,EAAO,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG;IAG5B,CAAA,GAAI,SAAA,CAAU,eAAA,CAAgB,CAAA,EAAG,CAAC,CAAA;IAClC,CAAA,GAAI,SAAA,CAAU,KAAA,CAAM,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;IAC3B,CAAA,GAAI,SAAA,CAAU,KAAA,CAAM,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;IAE3B,OAAO,KAAA,CAAM,MAAA,CAAO,CAAA,EAAI,CAAA,GAAI,CAAA,IAAA,CAAO,CAAA,GAAA,CAAK,CAAA,GAAI,CAAA,IAAK,CAAA,IAAK,CAAA,GAAI,CAAA,GAAI,CAAA,GAAI,CAAA,CAAA,EAAI,CAAA,GAAI,GAAG,CAAA;EAC9E;EAED,OAAO,MAAA,CAAO,KAAA,EAAO,MAAA,EAAQ;IAC3B,KAAA,CAAM,MAAA,CAAO,IAAI,CAAA;IAGjB,IAAA,CAAK,CAAA,IAAK,IAAA,CAAK,CAAA,GAAI,GAAA,GAAM,IAAA,CAAK,CAAA,GAAI,CAAA,GAAI,IAAA,CAAK,CAAA;IAE3C,MAAA,CAAO,CAAA,GAAI,IAAA,CAAK,CAAA;IAChB,MAAA,CAAO,CAAA,GAAK,CAAA,GAAI,IAAA,CAAK,CAAA,IAAM,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,CAAA;IACzC,MAAA,CAAO,CAAA,GAAI,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA;IAEzB,OAAO,MAAA;EACR;EAAA;EAID,OAAO,OAAA,CAAQ,KAAA,EAAO,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG;IAChC,MAAM,CAAA,GAAA,CAAK,CAAA,GAAI,CAAA,KAAM,CAAA,GAAI,CAAA,CAAA;IACzB,MAAM,CAAA,GAAA,CAAK,CAAA,GAAI,CAAA,KAAM,CAAA,GAAI,CAAA,CAAA;IACzB,MAAM,CAAA,GAAA,CAAK,CAAA,GAAI,CAAA,KAAM,CAAA,GAAI,CAAA,CAAA;IAEzB,OAAO,KAAA,CAAM,MAAA,CAAO,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;EAC5B;EAED,OAAO,OAAA,CAAQ,KAAA,EAAO,MAAA,EAAQ;IAC5B,MAAM,CAAA,GAAI,KAAA,CAAM,CAAA;IAChB,MAAM,CAAA,GAAI,KAAA,CAAM,CAAA;IAChB,MAAM,CAAA,GAAI,KAAA,CAAM,CAAA;IAEhB,MAAM,CAAA,GAAI,CAAA,GAAI,IAAA,CAAK,GAAA,CAAI,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;IAC9B,MAAM,CAAA,GAAA,CAAK,CAAA,GAAI,CAAA,GAAI,CAAA,KAAM,CAAA,GAAI,CAAA,CAAA;IAC7B,MAAM,CAAA,GAAA,CAAK,CAAA,GAAI,CAAA,GAAI,CAAA,KAAM,CAAA,GAAI,CAAA,CAAA;IAC7B,MAAM,CAAA,GAAA,CAAK,CAAA,GAAI,CAAA,GAAI,CAAA,KAAM,CAAA,GAAI,CAAA,CAAA;IAE7B,MAAA,CAAO,CAAA,GAAI,CAAA;IACX,MAAA,CAAO,CAAA,GAAI,CAAA;IACX,MAAA,CAAO,CAAA,GAAI,CAAA;IACX,MAAA,CAAO,CAAA,GAAI,CAAA;IAEX,OAAO,MAAA;EACR;AACH","sourcesContent":["import { MathUtils } from 'three'\n\nconst _hsl = {}\n\nclass ColorConverter {\n  static setHSV(color, h, s, v) {\n    // https://gist.github.com/xpansive/1337890#file-index-js\n\n    h = MathUtils.euclideanModulo(h, 1)\n    s = MathUtils.clamp(s, 0, 1)\n    v = MathUtils.clamp(v, 0, 1)\n\n    return color.setHSL(h, (s * v) / ((h = (2 - s) * v) < 1 ? h : 2 - h), h * 0.5)\n  }\n\n  static getHSV(color, target) {\n    color.getHSL(_hsl)\n\n    // based on https://gist.github.com/xpansive/1337890#file-index-js\n    _hsl.s *= _hsl.l < 0.5 ? _hsl.l : 1 - _hsl.l\n\n    target.h = _hsl.h\n    target.s = (2 * _hsl.s) / (_hsl.l + _hsl.s)\n    target.v = _hsl.l + _hsl.s\n\n    return target\n  }\n\n  // where c, m, y, k is between 0 and 1\n\n  static setCMYK(color, c, m, y, k) {\n    const r = (1 - c) * (1 - k)\n    const g = (1 - m) * (1 - k)\n    const b = (1 - y) * (1 - k)\n\n    return color.setRGB(r, g, b)\n  }\n\n  static getCMYK(color, target) {\n    const r = color.r\n    const g = color.g\n    const b = color.b\n\n    const k = 1 - Math.max(r, g, b)\n    const c = (1 - r - k) / (1 - k)\n    const m = (1 - g - k) / (1 - k)\n    const y = (1 - b - k) / (1 - k)\n\n    target.c = c\n    target.m = m\n    target.y = y\n    target.k = k\n\n    return target\n  }\n}\n\nexport { ColorConverter }\n"]},"metadata":{},"sourceType":"module"}