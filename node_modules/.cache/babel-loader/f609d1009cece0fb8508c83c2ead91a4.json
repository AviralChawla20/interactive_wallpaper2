{"ast":null,"code":"import { Loader, HalfFloatType, CubeTexture, LinearFilter, FloatType, FileLoader, DataTexture } from \"three\";\nimport { RGBELoader } from \"./RGBELoader.js\";\nclass HDRCubeTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.hdrLoader = new RGBELoader();\n    this.type = HalfFloatType;\n  }\n  load(urls, onLoad, onProgress, onError) {\n    if (typeof urls === \"string\") {\n      urls = [urls];\n    } else if (!Array.isArray(urls)) {\n      console.warn(\"THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.\");\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n    const texture = new CubeTexture();\n    texture.type = this.type;\n    switch (texture.type) {\n      case FloatType:\n      case HalfFloatType:\n        if (\"colorSpace\" in texture) texture.colorSpace = \"srgb-linear\";else texture.encoding = 3e3;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n    const scope = this;\n    let loaded = 0;\n    function loadHDRData(i, onLoad2, onProgress2, onError2) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType(\"arraybuffer\").setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n        loaded++;\n        const texData = scope.hdrLoader.parse(buffer);\n        if (!texData) return;\n        if (texData.data !== void 0) {\n          const dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n          dataTexture.type = texture.type;\n          if (\"colorSpace\" in dataTexture) dataTexture.colorSpace = texture.SRGBColorSpace;else dataTexture.encoding = texture.encoding;\n          dataTexture.format = texture.format;\n          dataTexture.minFilter = texture.minFilter;\n          dataTexture.magFilter = texture.magFilter;\n          dataTexture.generateMipmaps = texture.generateMipmaps;\n          texture.images[i] = dataTexture;\n        }\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad2) onLoad2(texture);\n        }\n      }, onProgress2, onError2);\n    }\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n    return texture;\n  }\n  setDataType(value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n}\nexport { HDRCubeTextureLoader };","map":{"version":3,"sources":["../../src/loaders/HDRCubeTextureLoader.js"],"names":["onLoad","onProgress","onError"],"mappings":"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","sourcesContent":["import { CubeTexture, DataTexture, FileLoader, FloatType, HalfFloatType, LinearFilter, Loader } from 'three'\nimport { RGBELoader } from '../loaders/RGBELoader.js'\n\nclass HDRCubeTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager)\n\n    this.hdrLoader = new RGBELoader()\n    this.type = HalfFloatType\n  }\n\n  load(urls, onLoad, onProgress, onError) {\n    if (typeof urls === 'string') {\n      urls = [urls]\n    } else if (!Array.isArray(urls)) {\n      console.warn('THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.')\n\n      this.setDataType(urls)\n\n      urls = onLoad\n      onLoad = onProgress\n      onProgress = onError\n      onError = arguments[4]\n    }\n\n    const texture = new CubeTexture()\n\n    texture.type = this.type\n\n    switch (texture.type) {\n      case FloatType:\n      case HalfFloatType:\n        if ('colorSpace' in texture) texture.colorSpace = 'srgb-linear'\n        else texture.encoding = 3000 // LinearEncoding\n        texture.minFilter = LinearFilter\n        texture.magFilter = LinearFilter\n        texture.generateMipmaps = false\n        break\n    }\n\n    const scope = this\n\n    let loaded = 0\n\n    function loadHDRData(i, onLoad, onProgress, onError) {\n      new FileLoader(scope.manager)\n        .setPath(scope.path)\n        .setResponseType('arraybuffer')\n        .setWithCredentials(scope.withCredentials)\n        .load(\n          urls[i],\n          function (buffer) {\n            loaded++\n\n            const texData = scope.hdrLoader.parse(buffer)\n\n            if (!texData) return\n\n            if (texData.data !== undefined) {\n              const dataTexture = new DataTexture(texData.data, texData.width, texData.height)\n\n              dataTexture.type = texture.type\n              if ('colorSpace' in dataTexture) dataTexture.colorSpace = texture.SRGBColorSpace\n              else dataTexture.encoding = texture.encoding\n              dataTexture.format = texture.format\n              dataTexture.minFilter = texture.minFilter\n              dataTexture.magFilter = texture.magFilter\n              dataTexture.generateMipmaps = texture.generateMipmaps\n\n              texture.images[i] = dataTexture\n            }\n\n            if (loaded === 6) {\n              texture.needsUpdate = true\n              if (onLoad) onLoad(texture)\n            }\n          },\n          onProgress,\n          onError,\n        )\n    }\n\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError)\n    }\n\n    return texture\n  }\n\n  setDataType(value) {\n    this.type = value\n    this.hdrLoader.setDataType(value)\n\n    return this\n  }\n}\n\nexport { HDRCubeTextureLoader }\n"]},"metadata":{},"sourceType":"module"}