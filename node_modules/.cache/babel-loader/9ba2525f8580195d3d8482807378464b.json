{"ast":null,"code":"import { DataTextureLoader, HalfFloatType, CubeTexture, RGBAFormat, LinearFilter, DataUtils } from \"three\";\nlet UPNG;\nfunction init() {\n  if (UPNG) return UPNG;\n  UPNG = {};\n  UPNG.toRGBA8 = function (out) {\n    var w = out.width,\n      h = out.height;\n    if (out.tabs.acTL == null) return [UPNG.toRGBA8.decodeImage(out.data, w, h, out).buffer];\n    var frms = [];\n    if (out.frames[0].data == null) out.frames[0].data = out.data;\n    var len = w * h * 4,\n      img = new Uint8Array(len),\n      empty = new Uint8Array(len),\n      prev = new Uint8Array(len);\n    for (var i = 0; i < out.frames.length; i++) {\n      var frm = out.frames[i];\n      var fx = frm.rect.x,\n        fy = frm.rect.y,\n        fw = frm.rect.width,\n        fh = frm.rect.height;\n      var fdata = UPNG.toRGBA8.decodeImage(frm.data, fw, fh, out);\n      if (i != 0) for (var j = 0; j < len; j++) prev[j] = img[j];\n      if (frm.blend == 0) UPNG._copyTile(fdata, fw, fh, img, w, h, fx, fy, 0);else if (frm.blend == 1) UPNG._copyTile(fdata, fw, fh, img, w, h, fx, fy, 1);\n      frms.push(img.buffer.slice(0));\n      if (frm.dispose == 1) UPNG._copyTile(empty, fw, fh, img, w, h, fx, fy, 0);else if (frm.dispose == 2) for (var j = 0; j < len; j++) img[j] = prev[j];\n    }\n    return frms;\n  };\n  UPNG.toRGBA8.decodeImage = function (data, w, h, out) {\n    var area = w * h,\n      bpp = UPNG.decode._getBPP(out);\n    var bpl = Math.ceil(w * bpp / 8);\n    var bf = new Uint8Array(area * 4),\n      bf32 = new Uint32Array(bf.buffer);\n    var ctype = out.ctype,\n      depth = out.depth;\n    var rs = UPNG._bin.readUshort;\n    if (ctype == 6) {\n      var qarea = area << 2;\n      if (depth == 8) {\n        for (var i = 0; i < qarea; i += 4) {\n          bf[i] = data[i];\n          bf[i + 1] = data[i + 1];\n          bf[i + 2] = data[i + 2];\n          bf[i + 3] = data[i + 3];\n        }\n      }\n      if (depth == 16) {\n        for (var i = 0; i < qarea; i++) {\n          bf[i] = data[i << 1];\n        }\n      }\n    } else if (ctype == 2) {\n      var ts = out.tabs[\"tRNS\"];\n      if (ts == null) {\n        if (depth == 8) {\n          for (var i = 0; i < area; i++) {\n            var ti = i * 3;\n            bf32[i] = 255 << 24 | data[ti + 2] << 16 | data[ti + 1] << 8 | data[ti];\n          }\n        }\n        if (depth == 16) {\n          for (var i = 0; i < area; i++) {\n            var ti = i * 6;\n            bf32[i] = 255 << 24 | data[ti + 4] << 16 | data[ti + 2] << 8 | data[ti];\n          }\n        }\n      } else {\n        var tr = ts[0],\n          tg = ts[1],\n          tb = ts[2];\n        if (depth == 8) {\n          for (var i = 0; i < area; i++) {\n            var qi = i << 2,\n              ti = i * 3;\n            bf32[i] = 255 << 24 | data[ti + 2] << 16 | data[ti + 1] << 8 | data[ti];\n            if (data[ti] == tr && data[ti + 1] == tg && data[ti + 2] == tb) bf[qi + 3] = 0;\n          }\n        }\n        if (depth == 16) {\n          for (var i = 0; i < area; i++) {\n            var qi = i << 2,\n              ti = i * 6;\n            bf32[i] = 255 << 24 | data[ti + 4] << 16 | data[ti + 2] << 8 | data[ti];\n            if (rs(data, ti) == tr && rs(data, ti + 2) == tg && rs(data, ti + 4) == tb) bf[qi + 3] = 0;\n          }\n        }\n      }\n    } else if (ctype == 3) {\n      var p = out.tabs[\"PLTE\"],\n        ap = out.tabs[\"tRNS\"],\n        tl = ap ? ap.length : 0;\n      if (depth == 1) {\n        for (var y = 0; y < h; y++) {\n          var s0 = y * bpl,\n            t0 = y * w;\n          for (var i = 0; i < w; i++) {\n            var qi = t0 + i << 2,\n              j = data[s0 + (i >> 3)] >> 7 - ((i & 7) << 0) & 1,\n              cj = 3 * j;\n            bf[qi] = p[cj];\n            bf[qi + 1] = p[cj + 1];\n            bf[qi + 2] = p[cj + 2];\n            bf[qi + 3] = j < tl ? ap[j] : 255;\n          }\n        }\n      }\n      if (depth == 2) {\n        for (var y = 0; y < h; y++) {\n          var s0 = y * bpl,\n            t0 = y * w;\n          for (var i = 0; i < w; i++) {\n            var qi = t0 + i << 2,\n              j = data[s0 + (i >> 2)] >> 6 - ((i & 3) << 1) & 3,\n              cj = 3 * j;\n            bf[qi] = p[cj];\n            bf[qi + 1] = p[cj + 1];\n            bf[qi + 2] = p[cj + 2];\n            bf[qi + 3] = j < tl ? ap[j] : 255;\n          }\n        }\n      }\n      if (depth == 4) {\n        for (var y = 0; y < h; y++) {\n          var s0 = y * bpl,\n            t0 = y * w;\n          for (var i = 0; i < w; i++) {\n            var qi = t0 + i << 2,\n              j = data[s0 + (i >> 1)] >> 4 - ((i & 1) << 2) & 15,\n              cj = 3 * j;\n            bf[qi] = p[cj];\n            bf[qi + 1] = p[cj + 1];\n            bf[qi + 2] = p[cj + 2];\n            bf[qi + 3] = j < tl ? ap[j] : 255;\n          }\n        }\n      }\n      if (depth == 8) {\n        for (var i = 0; i < area; i++) {\n          var qi = i << 2,\n            j = data[i],\n            cj = 3 * j;\n          bf[qi] = p[cj];\n          bf[qi + 1] = p[cj + 1];\n          bf[qi + 2] = p[cj + 2];\n          bf[qi + 3] = j < tl ? ap[j] : 255;\n        }\n      }\n    } else if (ctype == 4) {\n      if (depth == 8) {\n        for (var i = 0; i < area; i++) {\n          var qi = i << 2,\n            di = i << 1,\n            gr = data[di];\n          bf[qi] = gr;\n          bf[qi + 1] = gr;\n          bf[qi + 2] = gr;\n          bf[qi + 3] = data[di + 1];\n        }\n      }\n      if (depth == 16) {\n        for (var i = 0; i < area; i++) {\n          var qi = i << 2,\n            di = i << 2,\n            gr = data[di];\n          bf[qi] = gr;\n          bf[qi + 1] = gr;\n          bf[qi + 2] = gr;\n          bf[qi + 3] = data[di + 2];\n        }\n      }\n    } else if (ctype == 0) {\n      var tr = out.tabs[\"tRNS\"] ? out.tabs[\"tRNS\"] : -1;\n      for (var y = 0; y < h; y++) {\n        var off = y * bpl,\n          to = y * w;\n        if (depth == 1) {\n          for (var x = 0; x < w; x++) {\n            var gr = 255 * (data[off + (x >>> 3)] >>> 7 - (x & 7) & 1),\n              al = gr == tr * 255 ? 0 : 255;\n            bf32[to + x] = al << 24 | gr << 16 | gr << 8 | gr;\n          }\n        } else if (depth == 2) {\n          for (var x = 0; x < w; x++) {\n            var gr = 85 * (data[off + (x >>> 2)] >>> 6 - ((x & 3) << 1) & 3),\n              al = gr == tr * 85 ? 0 : 255;\n            bf32[to + x] = al << 24 | gr << 16 | gr << 8 | gr;\n          }\n        } else if (depth == 4) {\n          for (var x = 0; x < w; x++) {\n            var gr = 17 * (data[off + (x >>> 1)] >>> 4 - ((x & 1) << 2) & 15),\n              al = gr == tr * 17 ? 0 : 255;\n            bf32[to + x] = al << 24 | gr << 16 | gr << 8 | gr;\n          }\n        } else if (depth == 8) {\n          for (var x = 0; x < w; x++) {\n            var gr = data[off + x],\n              al = gr == tr ? 0 : 255;\n            bf32[to + x] = al << 24 | gr << 16 | gr << 8 | gr;\n          }\n        } else if (depth == 16) {\n          for (var x = 0; x < w; x++) {\n            var gr = data[off + (x << 1)],\n              al = rs(data, off + (x << 1)) == tr ? 0 : 255;\n            bf32[to + x] = al << 24 | gr << 16 | gr << 8 | gr;\n          }\n        }\n      }\n    }\n    return bf;\n  };\n  UPNG.decode = function (buff) {\n    var data = new Uint8Array(buff),\n      offset = 8,\n      bin = UPNG._bin,\n      rUs = bin.readUshort,\n      rUi = bin.readUint;\n    var out = {\n      tabs: {},\n      frames: []\n    };\n    var dd = new Uint8Array(data.length),\n      doff = 0;\n    var fd,\n      foff = 0;\n    var text, keyw, bfr;\n    var mgck = [137, 80, 78, 71, 13, 10, 26, 10];\n    for (var i = 0; i < 8; i++) if (data[i] != mgck[i]) throw new Error(\"The input is not a PNG file!\");\n    while (offset < data.length) {\n      var len = bin.readUint(data, offset);\n      offset += 4;\n      var type = bin.readASCII(data, offset, 4);\n      offset += 4;\n      if (type == \"IHDR\") {\n        UPNG.decode._IHDR(data, offset, out);\n      } else if (type == \"CgBI\") {\n        out.tabs[type] = data.slice(offset, offset + 4);\n      } else if (type == \"IDAT\") {\n        for (var i = 0; i < len; i++) dd[doff + i] = data[offset + i];\n        doff += len;\n      } else if (type == \"acTL\") {\n        out.tabs[type] = {\n          num_frames: rUi(data, offset),\n          num_plays: rUi(data, offset + 4)\n        };\n        fd = new Uint8Array(data.length);\n      } else if (type == \"fcTL\") {\n        if (foff != 0) {\n          var fr = out.frames[out.frames.length - 1];\n          fr.data = UPNG.decode._decompress(out, fd.slice(0, foff), fr.rect.width, fr.rect.height);\n          foff = 0;\n        }\n        var rct = {\n          x: rUi(data, offset + 12),\n          y: rUi(data, offset + 16),\n          width: rUi(data, offset + 4),\n          height: rUi(data, offset + 8)\n        };\n        var del = rUs(data, offset + 22);\n        del = rUs(data, offset + 20) / (del == 0 ? 100 : del);\n        var frm = {\n          rect: rct,\n          delay: Math.round(del * 1e3),\n          dispose: data[offset + 24],\n          blend: data[offset + 25]\n        };\n        out.frames.push(frm);\n      } else if (type == \"fdAT\") {\n        for (var i = 0; i < len - 4; i++) fd[foff + i] = data[offset + i + 4];\n        foff += len - 4;\n      } else if (type == \"pHYs\") {\n        out.tabs[type] = [bin.readUint(data, offset), bin.readUint(data, offset + 4), data[offset + 8]];\n      } else if (type == \"cHRM\") {\n        out.tabs[type] = [];\n        for (var i = 0; i < 8; i++) out.tabs[type].push(bin.readUint(data, offset + i * 4));\n      } else if (type == \"tEXt\" || type == \"zTXt\") {\n        if (out.tabs[type] == null) out.tabs[type] = {};\n        var nz = bin.nextZero(data, offset);\n        keyw = bin.readASCII(data, offset, nz - offset);\n        var tl = offset + len - nz - 1;\n        if (type == \"tEXt\") {\n          text = bin.readASCII(data, nz + 1, tl);\n        } else {\n          bfr = UPNG.decode._inflate(data.slice(nz + 2, nz + 2 + tl));\n          text = bin.readUTF8(bfr, 0, bfr.length);\n        }\n        out.tabs[type][keyw] = text;\n      } else if (type == \"iTXt\") {\n        if (out.tabs[type] == null) out.tabs[type] = {};\n        var nz = 0,\n          off = offset;\n        nz = bin.nextZero(data, off);\n        keyw = bin.readASCII(data, off, nz - off);\n        off = nz + 1;\n        var cflag = data[off];\n        off += 2;\n        nz = bin.nextZero(data, off);\n        bin.readASCII(data, off, nz - off);\n        off = nz + 1;\n        nz = bin.nextZero(data, off);\n        bin.readUTF8(data, off, nz - off);\n        off = nz + 1;\n        var tl = len - (off - offset);\n        if (cflag == 0) {\n          text = bin.readUTF8(data, off, tl);\n        } else {\n          bfr = UPNG.decode._inflate(data.slice(off, off + tl));\n          text = bin.readUTF8(bfr, 0, bfr.length);\n        }\n        out.tabs[type][keyw] = text;\n      } else if (type == \"PLTE\") {\n        out.tabs[type] = bin.readBytes(data, offset, len);\n      } else if (type == \"hIST\") {\n        var pl = out.tabs[\"PLTE\"].length / 3;\n        out.tabs[type] = [];\n        for (var i = 0; i < pl; i++) out.tabs[type].push(rUs(data, offset + i * 2));\n      } else if (type == \"tRNS\") {\n        if (out.ctype == 3) out.tabs[type] = bin.readBytes(data, offset, len);else if (out.ctype == 0) out.tabs[type] = rUs(data, offset);else if (out.ctype == 2) out.tabs[type] = [rUs(data, offset), rUs(data, offset + 2), rUs(data, offset + 4)];\n      } else if (type == \"gAMA\") {\n        out.tabs[type] = bin.readUint(data, offset) / 1e5;\n      } else if (type == \"sRGB\") {\n        out.tabs[type] = data[offset];\n      } else if (type == \"bKGD\") {\n        if (out.ctype == 0 || out.ctype == 4) {\n          out.tabs[type] = [rUs(data, offset)];\n        } else if (out.ctype == 2 || out.ctype == 6) {\n          out.tabs[type] = [rUs(data, offset), rUs(data, offset + 2), rUs(data, offset + 4)];\n        } else if (out.ctype == 3) {\n          out.tabs[type] = data[offset];\n        }\n      } else if (type == \"IEND\") {\n        break;\n      }\n      offset += len;\n      bin.readUint(data, offset);\n      offset += 4;\n    }\n    if (foff != 0) {\n      var fr = out.frames[out.frames.length - 1];\n      fr.data = UPNG.decode._decompress(out, fd.slice(0, foff), fr.rect.width, fr.rect.height);\n    }\n    out.data = UPNG.decode._decompress(out, dd, out.width, out.height);\n    delete out.compress;\n    delete out.interlace;\n    delete out.filter;\n    return out;\n  };\n  UPNG.decode._decompress = function (out, dd, w, h) {\n    var bpp = UPNG.decode._getBPP(out),\n      bpl = Math.ceil(w * bpp / 8),\n      buff = new Uint8Array((bpl + 1 + out.interlace) * h);\n    if (out.tabs[\"CgBI\"]) dd = UPNG.inflateRaw(dd, buff);else dd = UPNG.decode._inflate(dd, buff);\n    if (out.interlace == 0) dd = UPNG.decode._filterZero(dd, out, 0, w, h);else if (out.interlace == 1) dd = UPNG.decode._readInterlace(dd, out);\n    return dd;\n  };\n  UPNG.decode._inflate = function (data, buff) {\n    var out = UPNG[\"inflateRaw\"](new Uint8Array(data.buffer, 2, data.length - 6), buff);\n    return out;\n  };\n  UPNG.inflateRaw = function () {\n    var H = {};\n    H.H = {};\n    H.H.N = function (N, W) {\n      var R = Uint8Array,\n        i = 0,\n        m = 0,\n        J = 0,\n        h = 0,\n        Q = 0,\n        X = 0,\n        u = 0,\n        w = 0,\n        d = 0,\n        v,\n        C;\n      if (N[0] == 3 && N[1] == 0) return W ? W : new R(0);\n      var V = H.H,\n        n = V.b,\n        A = V.e,\n        l = V.R,\n        M = V.n,\n        I = V.A,\n        e = V.Z,\n        b = V.m,\n        Z = W == null;\n      if (Z) W = new R(N.length >>> 2 << 5);\n      while (i == 0) {\n        i = n(N, d, 1);\n        m = n(N, d + 1, 2);\n        d += 3;\n        if (m == 0) {\n          if ((d & 7) != 0) d += 8 - (d & 7);\n          var D = (d >>> 3) + 4,\n            q = N[D - 4] | N[D - 3] << 8;\n          if (Z) W = H.H.W(W, w + q);\n          W.set(new R(N.buffer, N.byteOffset + D, q), w);\n          d = D + q << 3;\n          w += q;\n          continue;\n        }\n        if (Z) W = H.H.W(W, w + (1 << 17));\n        if (m == 1) {\n          v = b.J;\n          C = b.h;\n          X = (1 << 9) - 1;\n          u = (1 << 5) - 1;\n        }\n        if (m == 2) {\n          J = A(N, d, 5) + 257;\n          h = A(N, d + 5, 5) + 1;\n          Q = A(N, d + 10, 4) + 4;\n          d += 14;\n          var j = 1;\n          for (var c = 0; c < 38; c += 2) {\n            b.Q[c] = 0;\n            b.Q[c + 1] = 0;\n          }\n          for (var c = 0; c < Q; c++) {\n            var K = A(N, d + c * 3, 3);\n            b.Q[(b.X[c] << 1) + 1] = K;\n            if (K > j) j = K;\n          }\n          d += 3 * Q;\n          M(b.Q, j);\n          I(b.Q, j, b.u);\n          v = b.w;\n          C = b.d;\n          d = l(b.u, (1 << j) - 1, J + h, N, d, b.v);\n          var r = V.V(b.v, 0, J, b.C);\n          X = (1 << r) - 1;\n          var S = V.V(b.v, J, h, b.D);\n          u = (1 << S) - 1;\n          M(b.C, r);\n          I(b.C, r, v);\n          M(b.D, S);\n          I(b.D, S, C);\n        }\n        while (true) {\n          var T = v[e(N, d) & X];\n          d += T & 15;\n          var p = T >>> 4;\n          if (p >>> 8 == 0) {\n            W[w++] = p;\n          } else if (p == 256) {\n            break;\n          } else {\n            var z = w + p - 254;\n            if (p > 264) {\n              var _ = b.q[p - 257];\n              z = w + (_ >>> 3) + A(N, d, _ & 7);\n              d += _ & 7;\n            }\n            var $ = C[e(N, d) & u];\n            d += $ & 15;\n            var s = $ >>> 4,\n              Y = b.c[s],\n              a = (Y >>> 4) + n(N, d, Y & 15);\n            d += Y & 15;\n            while (w < z) {\n              W[w] = W[w++ - a];\n              W[w] = W[w++ - a];\n              W[w] = W[w++ - a];\n              W[w] = W[w++ - a];\n            }\n            w = z;\n          }\n        }\n      }\n      return W.length == w ? W : W.slice(0, w);\n    };\n    H.H.W = function (N, W) {\n      var R = N.length;\n      if (W <= R) return N;\n      var V = new Uint8Array(R << 1);\n      V.set(N, 0);\n      return V;\n    };\n    H.H.R = function (N, W, R, V, n, A) {\n      var l = H.H.e,\n        M = H.H.Z,\n        I = 0;\n      while (I < R) {\n        var e = N[M(V, n) & W];\n        n += e & 15;\n        var b = e >>> 4;\n        if (b <= 15) {\n          A[I] = b;\n          I++;\n        } else {\n          var Z = 0,\n            m = 0;\n          if (b == 16) {\n            m = 3 + l(V, n, 2);\n            n += 2;\n            Z = A[I - 1];\n          } else if (b == 17) {\n            m = 3 + l(V, n, 3);\n            n += 3;\n          } else if (b == 18) {\n            m = 11 + l(V, n, 7);\n            n += 7;\n          }\n          var J = I + m;\n          while (I < J) {\n            A[I] = Z;\n            I++;\n          }\n        }\n      }\n      return n;\n    };\n    H.H.V = function (N, W, R, V) {\n      var n = 0,\n        A = 0,\n        l = V.length >>> 1;\n      while (A < R) {\n        var M = N[A + W];\n        V[A << 1] = 0;\n        V[(A << 1) + 1] = M;\n        if (M > n) n = M;\n        A++;\n      }\n      while (A < l) {\n        V[A << 1] = 0;\n        V[(A << 1) + 1] = 0;\n        A++;\n      }\n      return n;\n    };\n    H.H.n = function (N, W) {\n      var R = H.H.m,\n        V = N.length,\n        n,\n        A,\n        l,\n        M,\n        I,\n        e = R.j;\n      for (var M = 0; M <= W; M++) e[M] = 0;\n      for (M = 1; M < V; M += 2) e[N[M]]++;\n      var b = R.K;\n      n = 0;\n      e[0] = 0;\n      for (A = 1; A <= W; A++) {\n        n = n + e[A - 1] << 1;\n        b[A] = n;\n      }\n      for (l = 0; l < V; l += 2) {\n        I = N[l + 1];\n        if (I != 0) {\n          N[l] = b[I];\n          b[I]++;\n        }\n      }\n    };\n    H.H.A = function (N, W, R) {\n      var V = N.length,\n        n = H.H.m,\n        A = n.r;\n      for (var l = 0; l < V; l += 2) {\n        if (N[l + 1] != 0) {\n          var M = l >> 1,\n            I = N[l + 1],\n            e = M << 4 | I,\n            b = W - I,\n            Z = N[l] << b,\n            m = Z + (1 << b);\n          while (Z != m) {\n            var J = A[Z] >>> 15 - W;\n            R[J] = e;\n            Z++;\n          }\n        }\n      }\n    };\n    H.H.l = function (N, W) {\n      var R = H.H.m.r,\n        V = 15 - W;\n      for (var n = 0; n < N.length; n += 2) {\n        var A = N[n] << W - N[n + 1];\n        N[n] = R[A] >>> V;\n      }\n    };\n    H.H.M = function (N, W, R) {\n      R = R << (W & 7);\n      var V = W >>> 3;\n      N[V] |= R;\n      N[V + 1] |= R >>> 8;\n    };\n    H.H.I = function (N, W, R) {\n      R = R << (W & 7);\n      var V = W >>> 3;\n      N[V] |= R;\n      N[V + 1] |= R >>> 8;\n      N[V + 2] |= R >>> 16;\n    };\n    H.H.e = function (N, W, R) {\n      return (N[W >>> 3] | N[(W >>> 3) + 1] << 8) >>> (W & 7) & (1 << R) - 1;\n    };\n    H.H.b = function (N, W, R) {\n      return (N[W >>> 3] | N[(W >>> 3) + 1] << 8 | N[(W >>> 3) + 2] << 16) >>> (W & 7) & (1 << R) - 1;\n    };\n    H.H.Z = function (N, W) {\n      return (N[W >>> 3] | N[(W >>> 3) + 1] << 8 | N[(W >>> 3) + 2] << 16) >>> (W & 7);\n    };\n    H.H.i = function (N, W) {\n      return (N[W >>> 3] | N[(W >>> 3) + 1] << 8 | N[(W >>> 3) + 2] << 16 | N[(W >>> 3) + 3] << 24) >>> (W & 7);\n    };\n    H.H.m = function () {\n      var N = Uint16Array,\n        W = Uint32Array;\n      return {\n        K: new N(16),\n        j: new N(16),\n        X: [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],\n        S: [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 999, 999, 999],\n        T: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0],\n        q: new N(32),\n        p: [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 65535, 65535],\n        z: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0],\n        c: new W(32),\n        J: new N(512),\n        _: [],\n        h: new N(32),\n        $: [],\n        w: new N(32768),\n        C: [],\n        v: [],\n        d: new N(32768),\n        D: [],\n        u: new N(512),\n        Q: [],\n        r: new N(1 << 15),\n        s: new W(286),\n        Y: new W(30),\n        a: new W(19),\n        t: new W(15e3),\n        k: new N(1 << 16),\n        g: new N(1 << 15)\n      };\n    }();\n    (function () {\n      var N = H.H.m,\n        W = 1 << 15;\n      for (var R = 0; R < W; R++) {\n        var V = R;\n        V = (V & 2863311530) >>> 1 | (V & 1431655765) << 1;\n        V = (V & 3435973836) >>> 2 | (V & 858993459) << 2;\n        V = (V & 4042322160) >>> 4 | (V & 252645135) << 4;\n        V = (V & 4278255360) >>> 8 | (V & 16711935) << 8;\n        N.r[R] = (V >>> 16 | V << 16) >>> 17;\n      }\n      function n(A, l, M) {\n        while (l-- != 0) A.push(0, M);\n      }\n      for (var R = 0; R < 32; R++) {\n        N.q[R] = N.S[R] << 3 | N.T[R];\n        N.c[R] = N.p[R] << 4 | N.z[R];\n      }\n      n(N._, 144, 8);\n      n(N._, 255 - 143, 9);\n      n(N._, 279 - 255, 7);\n      n(N._, 287 - 279, 8);\n      H.H.n(N._, 9);\n      H.H.A(N._, 9, N.J);\n      H.H.l(N._, 9);\n      n(N.$, 32, 5);\n      H.H.n(N.$, 5);\n      H.H.A(N.$, 5, N.h);\n      H.H.l(N.$, 5);\n      n(N.Q, 19, 0);\n      n(N.C, 286, 0);\n      n(N.D, 30, 0);\n      n(N.v, 320, 0);\n    })();\n    return H.H.N;\n  }();\n  UPNG.decode._readInterlace = function (data, out) {\n    var w = out.width,\n      h = out.height;\n    var bpp = UPNG.decode._getBPP(out),\n      cbpp = bpp >> 3,\n      bpl = Math.ceil(w * bpp / 8);\n    var img = new Uint8Array(h * bpl);\n    var di = 0;\n    var starting_row = [0, 0, 4, 0, 2, 0, 1];\n    var starting_col = [0, 4, 0, 2, 0, 1, 0];\n    var row_increment = [8, 8, 8, 4, 4, 2, 2];\n    var col_increment = [8, 8, 4, 4, 2, 2, 1];\n    var pass = 0;\n    while (pass < 7) {\n      var ri = row_increment[pass],\n        ci = col_increment[pass];\n      var sw = 0,\n        sh = 0;\n      var cr = starting_row[pass];\n      while (cr < h) {\n        cr += ri;\n        sh++;\n      }\n      var cc = starting_col[pass];\n      while (cc < w) {\n        cc += ci;\n        sw++;\n      }\n      var bpll = Math.ceil(sw * bpp / 8);\n      UPNG.decode._filterZero(data, out, di, sw, sh);\n      var y = 0,\n        row = starting_row[pass];\n      var val;\n      while (row < h) {\n        var col = starting_col[pass];\n        var cdi = di + y * bpll << 3;\n        while (col < w) {\n          if (bpp == 1) {\n            val = data[cdi >> 3];\n            val = val >> 7 - (cdi & 7) & 1;\n            img[row * bpl + (col >> 3)] |= val << 7 - ((col & 7) << 0);\n          }\n          if (bpp == 2) {\n            val = data[cdi >> 3];\n            val = val >> 6 - (cdi & 7) & 3;\n            img[row * bpl + (col >> 2)] |= val << 6 - ((col & 3) << 1);\n          }\n          if (bpp == 4) {\n            val = data[cdi >> 3];\n            val = val >> 4 - (cdi & 7) & 15;\n            img[row * bpl + (col >> 1)] |= val << 4 - ((col & 1) << 2);\n          }\n          if (bpp >= 8) {\n            var ii = row * bpl + col * cbpp;\n            for (var j = 0; j < cbpp; j++) img[ii + j] = data[(cdi >> 3) + j];\n          }\n          cdi += bpp;\n          col += ci;\n        }\n        y++;\n        row += ri;\n      }\n      if (sw * sh != 0) di += sh * (1 + bpll);\n      pass = pass + 1;\n    }\n    return img;\n  };\n  UPNG.decode._getBPP = function (out) {\n    var noc = [1, null, 3, 1, 2, null, 4][out.ctype];\n    return noc * out.depth;\n  };\n  UPNG.decode._filterZero = function (data, out, off, w, h) {\n    var bpp = UPNG.decode._getBPP(out),\n      bpl = Math.ceil(w * bpp / 8),\n      paeth = UPNG.decode._paeth;\n    bpp = Math.ceil(bpp / 8);\n    var i,\n      di,\n      type = data[off],\n      x = 0;\n    if (type > 1) data[off] = [0, 0, 1][type - 2];\n    if (type == 3) for (x = bpp; x < bpl; x++) data[x + 1] = data[x + 1] + (data[x + 1 - bpp] >>> 1) & 255;\n    for (var y = 0; y < h; y++) {\n      i = off + y * bpl;\n      di = i + y + 1;\n      type = data[di - 1];\n      x = 0;\n      if (type == 0) {\n        for (; x < bpl; x++) data[i + x] = data[di + x];\n      } else if (type == 1) {\n        for (; x < bpp; x++) data[i + x] = data[di + x];\n        for (; x < bpl; x++) data[i + x] = data[di + x] + data[i + x - bpp];\n      } else if (type == 2) {\n        for (; x < bpl; x++) data[i + x] = data[di + x] + data[i + x - bpl];\n      } else if (type == 3) {\n        for (; x < bpp; x++) data[i + x] = data[di + x] + (data[i + x - bpl] >>> 1);\n        for (; x < bpl; x++) data[i + x] = data[di + x] + (data[i + x - bpl] + data[i + x - bpp] >>> 1);\n      } else {\n        for (; x < bpp; x++) data[i + x] = data[di + x] + paeth(0, data[i + x - bpl], 0);\n        for (; x < bpl; x++) {\n          data[i + x] = data[di + x] + paeth(data[i + x - bpp], data[i + x - bpl], data[i + x - bpp - bpl]);\n        }\n      }\n    }\n    return data;\n  };\n  UPNG.decode._paeth = function (a, b, c) {\n    var p = a + b - c,\n      pa = p - a,\n      pb = p - b,\n      pc = p - c;\n    if (pa * pa <= pb * pb && pa * pa <= pc * pc) return a;else if (pb * pb <= pc * pc) return b;\n    return c;\n  };\n  UPNG.decode._IHDR = function (data, offset, out) {\n    var bin = UPNG._bin;\n    out.width = bin.readUint(data, offset);\n    offset += 4;\n    out.height = bin.readUint(data, offset);\n    offset += 4;\n    out.depth = data[offset];\n    offset++;\n    out.ctype = data[offset];\n    offset++;\n    out.compress = data[offset];\n    offset++;\n    out.filter = data[offset];\n    offset++;\n    out.interlace = data[offset];\n    offset++;\n  };\n  UPNG._bin = {\n    nextZero: function (data, p) {\n      while (data[p] != 0) p++;\n      return p;\n    },\n    readUshort: function (buff, p) {\n      return buff[p] << 8 | buff[p + 1];\n    },\n    writeUshort: function (buff, p, n) {\n      buff[p] = n >> 8 & 255;\n      buff[p + 1] = n & 255;\n    },\n    readUint: function (buff, p) {\n      return buff[p] * (256 * 256 * 256) + (buff[p + 1] << 16 | buff[p + 2] << 8 | buff[p + 3]);\n    },\n    writeUint: function (buff, p, n) {\n      buff[p] = n >> 24 & 255;\n      buff[p + 1] = n >> 16 & 255;\n      buff[p + 2] = n >> 8 & 255;\n      buff[p + 3] = n & 255;\n    },\n    readASCII: function (buff, p, l) {\n      var s = \"\";\n      for (var i = 0; i < l; i++) s += String.fromCharCode(buff[p + i]);\n      return s;\n    },\n    writeASCII: function (data, p, s) {\n      for (var i = 0; i < s.length; i++) data[p + i] = s.charCodeAt(i);\n    },\n    readBytes: function (buff, p, l) {\n      var arr = [];\n      for (var i = 0; i < l; i++) arr.push(buff[p + i]);\n      return arr;\n    },\n    pad: function (n) {\n      return n.length < 2 ? \"0\" + n : n;\n    },\n    readUTF8: function (buff, p, l) {\n      var s = \"\",\n        ns;\n      for (var i = 0; i < l; i++) s += \"%\" + UPNG._bin.pad(buff[p + i].toString(16));\n      try {\n        ns = decodeURIComponent(s);\n      } catch (e) {\n        return UPNG._bin.readASCII(buff, p, l);\n      }\n      return ns;\n    }\n  };\n  UPNG._copyTile = function (sb, sw, sh, tb, tw, th, xoff, yoff, mode) {\n    var w = Math.min(sw, tw),\n      h = Math.min(sh, th);\n    var si = 0,\n      ti = 0;\n    for (var y = 0; y < h; y++) {\n      for (var x = 0; x < w; x++) {\n        if (xoff >= 0 && yoff >= 0) {\n          si = y * sw + x << 2;\n          ti = (yoff + y) * tw + xoff + x << 2;\n        } else {\n          si = (-yoff + y) * sw - xoff + x << 2;\n          ti = y * tw + x << 2;\n        }\n        if (mode == 0) {\n          tb[ti] = sb[si];\n          tb[ti + 1] = sb[si + 1];\n          tb[ti + 2] = sb[si + 2];\n          tb[ti + 3] = sb[si + 3];\n        } else if (mode == 1) {\n          var fa = sb[si + 3] * (1 / 255),\n            fr = sb[si] * fa,\n            fg = sb[si + 1] * fa,\n            fb = sb[si + 2] * fa;\n          var ba = tb[ti + 3] * (1 / 255),\n            br = tb[ti] * ba,\n            bg = tb[ti + 1] * ba,\n            bb = tb[ti + 2] * ba;\n          var ifa = 1 - fa,\n            oa = fa + ba * ifa,\n            ioa = oa == 0 ? 0 : 1 / oa;\n          tb[ti + 3] = 255 * oa;\n          tb[ti + 0] = (fr + br * ifa) * ioa;\n          tb[ti + 1] = (fg + bg * ifa) * ioa;\n          tb[ti + 2] = (fb + bb * ifa) * ioa;\n        } else if (mode == 2) {\n          var fa = sb[si + 3],\n            fr = sb[si],\n            fg = sb[si + 1],\n            fb = sb[si + 2];\n          var ba = tb[ti + 3],\n            br = tb[ti],\n            bg = tb[ti + 1],\n            bb = tb[ti + 2];\n          if (fa == ba && fr == br && fg == bg && fb == bb) {\n            tb[ti] = 0;\n            tb[ti + 1] = 0;\n            tb[ti + 2] = 0;\n            tb[ti + 3] = 0;\n          } else {\n            tb[ti] = fr;\n            tb[ti + 1] = fg;\n            tb[ti + 2] = fb;\n            tb[ti + 3] = fa;\n          }\n        } else if (mode == 3) {\n          var fa = sb[si + 3],\n            fr = sb[si],\n            fg = sb[si + 1],\n            fb = sb[si + 2];\n          var ba = tb[ti + 3],\n            br = tb[ti],\n            bg = tb[ti + 1],\n            bb = tb[ti + 2];\n          if (fa == ba && fr == br && fg == bg && fb == bb) continue;\n          if (fa < 220 && ba > 20) return false;\n        }\n      }\n    }\n    return true;\n  };\n}\nclass RGBMLoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n    this.maxRange = 7;\n  }\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n  setMaxRange(value) {\n    this.maxRange = value;\n    return this;\n  }\n  loadCubemap(urls, onLoad, onProgress, onError) {\n    const texture = new CubeTexture();\n    let loaded = 0;\n    const scope = this;\n    function loadTexture(i) {\n      scope.load(urls[i], function (image) {\n        texture.images[i] = image;\n        loaded++;\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, void 0, onError);\n    }\n    for (let i = 0; i < urls.length; ++i) {\n      loadTexture(i);\n    }\n    texture.type = this.type;\n    texture.format = RGBAFormat;\n    texture.minFilter = LinearFilter;\n    texture.generateMipmaps = false;\n    return texture;\n  }\n  parse(buffer) {\n    init();\n    const img = UPNG.decode(buffer);\n    const rgba = UPNG.toRGBA8(img)[0];\n    const data = new Uint8Array(rgba);\n    const size = img.width * img.height * 4;\n    const output = this.type === HalfFloatType ? new Uint16Array(size) : new Float32Array(size);\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i + 0] / 255;\n      const g = data[i + 1] / 255;\n      const b = data[i + 2] / 255;\n      const a = data[i + 3] / 255;\n      if (this.type === HalfFloatType) {\n        output[i + 0] = DataUtils.toHalfFloat(Math.min(r * a * this.maxRange, 65504));\n        output[i + 1] = DataUtils.toHalfFloat(Math.min(g * a * this.maxRange, 65504));\n        output[i + 2] = DataUtils.toHalfFloat(Math.min(b * a * this.maxRange, 65504));\n        output[i + 3] = DataUtils.toHalfFloat(1);\n      } else {\n        output[i + 0] = r * a * this.maxRange;\n        output[i + 1] = g * a * this.maxRange;\n        output[i + 2] = b * a * this.maxRange;\n        output[i + 3] = 1;\n      }\n    }\n    return {\n      width: img.width,\n      height: img.height,\n      data: output,\n      format: RGBAFormat,\n      type: this.type,\n      flipY: true\n    };\n  }\n}\nexport { RGBMLoader };","map":{"version":3,"sources":["../../src/loaders/RGBMLoader.js"],"names":[],"mappings":"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","sourcesContent":["import { DataTextureLoader, RGBAFormat, LinearFilter, CubeTexture, HalfFloatType, DataUtils } from 'three'\n\nlet UPNG\n\nfunction init() {\n  if (UPNG) return UPNG\n  // from https://github.com/photopea/UPNG.js (MIT License)\n\n  UPNG = {}\n\n  UPNG.toRGBA8 = function (out) {\n    var w = out.width,\n      h = out.height\n    if (out.tabs.acTL == null) return [UPNG.toRGBA8.decodeImage(out.data, w, h, out).buffer]\n\n    var frms = []\n    if (out.frames[0].data == null) out.frames[0].data = out.data\n\n    var len = w * h * 4,\n      img = new Uint8Array(len),\n      empty = new Uint8Array(len),\n      prev = new Uint8Array(len)\n    for (var i = 0; i < out.frames.length; i++) {\n      var frm = out.frames[i]\n      var fx = frm.rect.x,\n        fy = frm.rect.y,\n        fw = frm.rect.width,\n        fh = frm.rect.height\n      var fdata = UPNG.toRGBA8.decodeImage(frm.data, fw, fh, out)\n\n      if (i != 0) for (var j = 0; j < len; j++) prev[j] = img[j]\n\n      if (frm.blend == 0) UPNG._copyTile(fdata, fw, fh, img, w, h, fx, fy, 0)\n      else if (frm.blend == 1) UPNG._copyTile(fdata, fw, fh, img, w, h, fx, fy, 1)\n\n      frms.push(img.buffer.slice(0))\n\n      if (frm.dispose == 1) UPNG._copyTile(empty, fw, fh, img, w, h, fx, fy, 0)\n      else if (frm.dispose == 2) for (var j = 0; j < len; j++) img[j] = prev[j]\n    }\n\n    return frms\n  }\n\n  UPNG.toRGBA8.decodeImage = function (data, w, h, out) {\n    var area = w * h,\n      bpp = UPNG.decode._getBPP(out)\n    var bpl = Math.ceil((w * bpp) / 8) // bytes per line\n\n    var bf = new Uint8Array(area * 4),\n      bf32 = new Uint32Array(bf.buffer)\n    var ctype = out.ctype,\n      depth = out.depth\n    var rs = UPNG._bin.readUshort\n\n    if (ctype == 6) {\n      // RGB + alpha\n\n      var qarea = area << 2\n      if (depth == 8) {\n        for (var i = 0; i < qarea; i += 4) {\n          bf[i] = data[i]\n          bf[i + 1] = data[i + 1]\n          bf[i + 2] = data[i + 2]\n          bf[i + 3] = data[i + 3]\n        }\n      }\n\n      if (depth == 16) {\n        for (var i = 0; i < qarea; i++) {\n          bf[i] = data[i << 1]\n        }\n      }\n    } else if (ctype == 2) {\n      // RGB\n\n      var ts = out.tabs['tRNS']\n      if (ts == null) {\n        if (depth == 8) {\n          for (var i = 0; i < area; i++) {\n            var ti = i * 3\n            bf32[i] = (255 << 24) | (data[ti + 2] << 16) | (data[ti + 1] << 8) | data[ti]\n          }\n        }\n\n        if (depth == 16) {\n          for (var i = 0; i < area; i++) {\n            var ti = i * 6\n            bf32[i] = (255 << 24) | (data[ti + 4] << 16) | (data[ti + 2] << 8) | data[ti]\n          }\n        }\n      } else {\n        var tr = ts[0],\n          tg = ts[1],\n          tb = ts[2]\n        if (depth == 8) {\n          for (var i = 0; i < area; i++) {\n            var qi = i << 2,\n              ti = i * 3\n            bf32[i] = (255 << 24) | (data[ti + 2] << 16) | (data[ti + 1] << 8) | data[ti]\n            if (data[ti] == tr && data[ti + 1] == tg && data[ti + 2] == tb) bf[qi + 3] = 0\n          }\n        }\n\n        if (depth == 16) {\n          for (var i = 0; i < area; i++) {\n            var qi = i << 2,\n              ti = i * 6\n            bf32[i] = (255 << 24) | (data[ti + 4] << 16) | (data[ti + 2] << 8) | data[ti]\n            if (rs(data, ti) == tr && rs(data, ti + 2) == tg && rs(data, ti + 4) == tb) bf[qi + 3] = 0\n          }\n        }\n      }\n    } else if (ctype == 3) {\n      // palette\n\n      var p = out.tabs['PLTE'],\n        ap = out.tabs['tRNS'],\n        tl = ap ? ap.length : 0\n      //console.log(p, ap);\n      if (depth == 1) {\n        for (var y = 0; y < h; y++) {\n          var s0 = y * bpl,\n            t0 = y * w\n          for (var i = 0; i < w; i++) {\n            var qi = (t0 + i) << 2,\n              j = (data[s0 + (i >> 3)] >> (7 - ((i & 7) << 0))) & 1,\n              cj = 3 * j\n            bf[qi] = p[cj]\n            bf[qi + 1] = p[cj + 1]\n            bf[qi + 2] = p[cj + 2]\n            bf[qi + 3] = j < tl ? ap[j] : 255\n          }\n        }\n      }\n\n      if (depth == 2) {\n        for (var y = 0; y < h; y++) {\n          var s0 = y * bpl,\n            t0 = y * w\n          for (var i = 0; i < w; i++) {\n            var qi = (t0 + i) << 2,\n              j = (data[s0 + (i >> 2)] >> (6 - ((i & 3) << 1))) & 3,\n              cj = 3 * j\n            bf[qi] = p[cj]\n            bf[qi + 1] = p[cj + 1]\n            bf[qi + 2] = p[cj + 2]\n            bf[qi + 3] = j < tl ? ap[j] : 255\n          }\n        }\n      }\n\n      if (depth == 4) {\n        for (var y = 0; y < h; y++) {\n          var s0 = y * bpl,\n            t0 = y * w\n          for (var i = 0; i < w; i++) {\n            var qi = (t0 + i) << 2,\n              j = (data[s0 + (i >> 1)] >> (4 - ((i & 1) << 2))) & 15,\n              cj = 3 * j\n            bf[qi] = p[cj]\n            bf[qi + 1] = p[cj + 1]\n            bf[qi + 2] = p[cj + 2]\n            bf[qi + 3] = j < tl ? ap[j] : 255\n          }\n        }\n      }\n\n      if (depth == 8) {\n        for (var i = 0; i < area; i++) {\n          var qi = i << 2,\n            j = data[i],\n            cj = 3 * j\n          bf[qi] = p[cj]\n          bf[qi + 1] = p[cj + 1]\n          bf[qi + 2] = p[cj + 2]\n          bf[qi + 3] = j < tl ? ap[j] : 255\n        }\n      }\n    } else if (ctype == 4) {\n      // gray + alpha\n\n      if (depth == 8) {\n        for (var i = 0; i < area; i++) {\n          var qi = i << 2,\n            di = i << 1,\n            gr = data[di]\n          bf[qi] = gr\n          bf[qi + 1] = gr\n          bf[qi + 2] = gr\n          bf[qi + 3] = data[di + 1]\n        }\n      }\n\n      if (depth == 16) {\n        for (var i = 0; i < area; i++) {\n          var qi = i << 2,\n            di = i << 2,\n            gr = data[di]\n          bf[qi] = gr\n          bf[qi + 1] = gr\n          bf[qi + 2] = gr\n          bf[qi + 3] = data[di + 2]\n        }\n      }\n    } else if (ctype == 0) {\n      // gray\n\n      var tr = out.tabs['tRNS'] ? out.tabs['tRNS'] : -1\n      for (var y = 0; y < h; y++) {\n        var off = y * bpl,\n          to = y * w\n        if (depth == 1) {\n          for (var x = 0; x < w; x++) {\n            var gr = 255 * ((data[off + (x >>> 3)] >>> (7 - (x & 7))) & 1),\n              al = gr == tr * 255 ? 0 : 255\n            bf32[to + x] = (al << 24) | (gr << 16) | (gr << 8) | gr\n          }\n        } else if (depth == 2) {\n          for (var x = 0; x < w; x++) {\n            var gr = 85 * ((data[off + (x >>> 2)] >>> (6 - ((x & 3) << 1))) & 3),\n              al = gr == tr * 85 ? 0 : 255\n            bf32[to + x] = (al << 24) | (gr << 16) | (gr << 8) | gr\n          }\n        } else if (depth == 4) {\n          for (var x = 0; x < w; x++) {\n            var gr = 17 * ((data[off + (x >>> 1)] >>> (4 - ((x & 1) << 2))) & 15),\n              al = gr == tr * 17 ? 0 : 255\n            bf32[to + x] = (al << 24) | (gr << 16) | (gr << 8) | gr\n          }\n        } else if (depth == 8) {\n          for (var x = 0; x < w; x++) {\n            var gr = data[off + x],\n              al = gr == tr ? 0 : 255\n            bf32[to + x] = (al << 24) | (gr << 16) | (gr << 8) | gr\n          }\n        } else if (depth == 16) {\n          for (var x = 0; x < w; x++) {\n            var gr = data[off + (x << 1)],\n              al = rs(data, off + (x << 1)) == tr ? 0 : 255\n            bf32[to + x] = (al << 24) | (gr << 16) | (gr << 8) | gr\n          }\n        }\n      }\n    }\n\n    //console.log(Date.now()-time);\n    return bf\n  }\n\n  UPNG.decode = function (buff) {\n    var data = new Uint8Array(buff),\n      offset = 8,\n      bin = UPNG._bin,\n      rUs = bin.readUshort,\n      rUi = bin.readUint\n    var out = { tabs: {}, frames: [] }\n    var dd = new Uint8Array(data.length),\n      doff = 0 // put all IDAT data into it\n    var fd,\n      foff = 0 // frames\n    var text, keyw, bfr\n\n    var mgck = [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]\n    for (var i = 0; i < 8; i++) if (data[i] != mgck[i]) throw new Error('The input is not a PNG file!')\n\n    while (offset < data.length) {\n      var len = bin.readUint(data, offset)\n      offset += 4\n      var type = bin.readASCII(data, offset, 4)\n      offset += 4\n      //console.log(type,len);\n\n      if (type == 'IHDR') {\n        UPNG.decode._IHDR(data, offset, out)\n      } else if (type == 'CgBI') {\n        out.tabs[type] = data.slice(offset, offset + 4)\n      } else if (type == 'IDAT') {\n        for (var i = 0; i < len; i++) dd[doff + i] = data[offset + i]\n        doff += len\n      } else if (type == 'acTL') {\n        out.tabs[type] = { num_frames: rUi(data, offset), num_plays: rUi(data, offset + 4) }\n        fd = new Uint8Array(data.length)\n      } else if (type == 'fcTL') {\n        if (foff != 0) {\n          var fr = out.frames[out.frames.length - 1]\n          fr.data = UPNG.decode._decompress(out, fd.slice(0, foff), fr.rect.width, fr.rect.height)\n          foff = 0\n        }\n\n        var rct = {\n          x: rUi(data, offset + 12),\n          y: rUi(data, offset + 16),\n          width: rUi(data, offset + 4),\n          height: rUi(data, offset + 8),\n        }\n        var del = rUs(data, offset + 22)\n        del = rUs(data, offset + 20) / (del == 0 ? 100 : del)\n        var frm = { rect: rct, delay: Math.round(del * 1000), dispose: data[offset + 24], blend: data[offset + 25] }\n        //console.log(frm);\n        out.frames.push(frm)\n      } else if (type == 'fdAT') {\n        for (var i = 0; i < len - 4; i++) fd[foff + i] = data[offset + i + 4]\n        foff += len - 4\n      } else if (type == 'pHYs') {\n        out.tabs[type] = [bin.readUint(data, offset), bin.readUint(data, offset + 4), data[offset + 8]]\n      } else if (type == 'cHRM') {\n        out.tabs[type] = []\n        for (var i = 0; i < 8; i++) out.tabs[type].push(bin.readUint(data, offset + i * 4))\n      } else if (type == 'tEXt' || type == 'zTXt') {\n        if (out.tabs[type] == null) out.tabs[type] = {}\n        var nz = bin.nextZero(data, offset)\n        keyw = bin.readASCII(data, offset, nz - offset)\n        var tl = offset + len - nz - 1\n        if (type == 'tEXt') {\n          text = bin.readASCII(data, nz + 1, tl)\n        } else {\n          bfr = UPNG.decode._inflate(data.slice(nz + 2, nz + 2 + tl))\n          text = bin.readUTF8(bfr, 0, bfr.length)\n        }\n\n        out.tabs[type][keyw] = text\n      } else if (type == 'iTXt') {\n        if (out.tabs[type] == null) out.tabs[type] = {}\n        var nz = 0,\n          off = offset\n        nz = bin.nextZero(data, off)\n        keyw = bin.readASCII(data, off, nz - off)\n        off = nz + 1\n        var cflag = data[off]\n        off += 2\n        nz = bin.nextZero(data, off)\n        bin.readASCII(data, off, nz - off)\n        off = nz + 1\n        nz = bin.nextZero(data, off)\n        bin.readUTF8(data, off, nz - off)\n        off = nz + 1\n        var tl = len - (off - offset)\n        if (cflag == 0) {\n          text = bin.readUTF8(data, off, tl)\n        } else {\n          bfr = UPNG.decode._inflate(data.slice(off, off + tl))\n          text = bin.readUTF8(bfr, 0, bfr.length)\n        }\n\n        out.tabs[type][keyw] = text\n      } else if (type == 'PLTE') {\n        out.tabs[type] = bin.readBytes(data, offset, len)\n      } else if (type == 'hIST') {\n        var pl = out.tabs['PLTE'].length / 3\n        out.tabs[type] = []\n        for (var i = 0; i < pl; i++) out.tabs[type].push(rUs(data, offset + i * 2))\n      } else if (type == 'tRNS') {\n        if (out.ctype == 3) out.tabs[type] = bin.readBytes(data, offset, len)\n        else if (out.ctype == 0) out.tabs[type] = rUs(data, offset)\n        else if (out.ctype == 2) out.tabs[type] = [rUs(data, offset), rUs(data, offset + 2), rUs(data, offset + 4)]\n        //else console.log(\"tRNS for unsupported color type\",out.ctype, len);\n      } else if (type == 'gAMA') {\n        out.tabs[type] = bin.readUint(data, offset) / 100000\n      } else if (type == 'sRGB') {\n        out.tabs[type] = data[offset]\n      } else if (type == 'bKGD') {\n        if (out.ctype == 0 || out.ctype == 4) {\n          out.tabs[type] = [rUs(data, offset)]\n        } else if (out.ctype == 2 || out.ctype == 6) {\n          out.tabs[type] = [rUs(data, offset), rUs(data, offset + 2), rUs(data, offset + 4)]\n        } else if (out.ctype == 3) {\n          out.tabs[type] = data[offset]\n        }\n      } else if (type == 'IEND') {\n        break\n      }\n\n      //else {  console.log(\"unknown chunk type\", type, len);  out.tabs[type]=data.slice(offset,offset+len);  }\n      offset += len\n      bin.readUint(data, offset)\n      offset += 4\n    }\n\n    if (foff != 0) {\n      var fr = out.frames[out.frames.length - 1]\n      fr.data = UPNG.decode._decompress(out, fd.slice(0, foff), fr.rect.width, fr.rect.height)\n    }\n\n    out.data = UPNG.decode._decompress(out, dd, out.width, out.height)\n\n    delete out.compress\n    delete out.interlace\n    delete out.filter\n    return out\n  }\n\n  UPNG.decode._decompress = function (out, dd, w, h) {\n    var bpp = UPNG.decode._getBPP(out),\n      bpl = Math.ceil((w * bpp) / 8),\n      buff = new Uint8Array((bpl + 1 + out.interlace) * h)\n    if (out.tabs['CgBI']) dd = UPNG.inflateRaw(dd, buff)\n    else dd = UPNG.decode._inflate(dd, buff)\n\n    if (out.interlace == 0) dd = UPNG.decode._filterZero(dd, out, 0, w, h)\n    else if (out.interlace == 1) dd = UPNG.decode._readInterlace(dd, out)\n\n    return dd\n  }\n\n  UPNG.decode._inflate = function (data, buff) {\n    var out = UPNG['inflateRaw'](new Uint8Array(data.buffer, 2, data.length - 6), buff)\n    return out\n  }\n\n  UPNG.inflateRaw = (function () {\n    var H = {}\n    H.H = {}\n    H.H.N = function (N, W) {\n      var R = Uint8Array,\n        i = 0,\n        m = 0,\n        J = 0,\n        h = 0,\n        Q = 0,\n        X = 0,\n        u = 0,\n        w = 0,\n        d = 0,\n        v,\n        C\n      if (N[0] == 3 && N[1] == 0) return W ? W : new R(0)\n      var V = H.H,\n        n = V.b,\n        A = V.e,\n        l = V.R,\n        M = V.n,\n        I = V.A,\n        e = V.Z,\n        b = V.m,\n        Z = W == null\n      if (Z) W = new R((N.length >>> 2) << 5)\n      while (i == 0) {\n        i = n(N, d, 1)\n        m = n(N, d + 1, 2)\n        d += 3\n        if (m == 0) {\n          if ((d & 7) != 0) d += 8 - (d & 7)\n          var D = (d >>> 3) + 4,\n            q = N[D - 4] | (N[D - 3] << 8)\n          if (Z) W = H.H.W(W, w + q)\n          W.set(new R(N.buffer, N.byteOffset + D, q), w)\n          d = (D + q) << 3\n          w += q\n          continue\n        }\n\n        if (Z) W = H.H.W(W, w + (1 << 17))\n        if (m == 1) {\n          v = b.J\n          C = b.h\n          X = (1 << 9) - 1\n          u = (1 << 5) - 1\n        }\n\n        if (m == 2) {\n          J = A(N, d, 5) + 257\n          h = A(N, d + 5, 5) + 1\n          Q = A(N, d + 10, 4) + 4\n          d += 14\n          var j = 1\n          for (var c = 0; c < 38; c += 2) {\n            b.Q[c] = 0\n            b.Q[c + 1] = 0\n          }\n\n          for (var c = 0; c < Q; c++) {\n            var K = A(N, d + c * 3, 3)\n            b.Q[(b.X[c] << 1) + 1] = K\n            if (K > j) j = K\n          }\n\n          d += 3 * Q\n          M(b.Q, j)\n          I(b.Q, j, b.u)\n          v = b.w\n          C = b.d\n          d = l(b.u, (1 << j) - 1, J + h, N, d, b.v)\n          var r = V.V(b.v, 0, J, b.C)\n          X = (1 << r) - 1\n          var S = V.V(b.v, J, h, b.D)\n          u = (1 << S) - 1\n          M(b.C, r)\n          I(b.C, r, v)\n          M(b.D, S)\n          I(b.D, S, C)\n        }\n\n        while (!0) {\n          var T = v[e(N, d) & X]\n          d += T & 15\n          var p = T >>> 4\n          if (p >>> 8 == 0) {\n            W[w++] = p\n          } else if (p == 256) {\n            break\n          } else {\n            var z = w + p - 254\n            if (p > 264) {\n              var _ = b.q[p - 257]\n              z = w + (_ >>> 3) + A(N, d, _ & 7)\n              d += _ & 7\n            }\n\n            var $ = C[e(N, d) & u]\n            d += $ & 15\n            var s = $ >>> 4,\n              Y = b.c[s],\n              a = (Y >>> 4) + n(N, d, Y & 15)\n            d += Y & 15\n            while (w < z) {\n              W[w] = W[w++ - a]\n              W[w] = W[w++ - a]\n              W[w] = W[w++ - a]\n              W[w] = W[w++ - a]\n            }\n\n            w = z\n          }\n        }\n      }\n\n      return W.length == w ? W : W.slice(0, w)\n    }\n\n    H.H.W = function (N, W) {\n      var R = N.length\n      if (W <= R) return N\n      var V = new Uint8Array(R << 1)\n      V.set(N, 0)\n      return V\n    }\n\n    H.H.R = function (N, W, R, V, n, A) {\n      var l = H.H.e,\n        M = H.H.Z,\n        I = 0\n      while (I < R) {\n        var e = N[M(V, n) & W]\n        n += e & 15\n        var b = e >>> 4\n        if (b <= 15) {\n          A[I] = b\n          I++\n        } else {\n          var Z = 0,\n            m = 0\n          if (b == 16) {\n            m = 3 + l(V, n, 2)\n            n += 2\n            Z = A[I - 1]\n          } else if (b == 17) {\n            m = 3 + l(V, n, 3)\n            n += 3\n          } else if (b == 18) {\n            m = 11 + l(V, n, 7)\n            n += 7\n          }\n\n          var J = I + m\n          while (I < J) {\n            A[I] = Z\n            I++\n          }\n        }\n      }\n\n      return n\n    }\n\n    H.H.V = function (N, W, R, V) {\n      var n = 0,\n        A = 0,\n        l = V.length >>> 1\n      while (A < R) {\n        var M = N[A + W]\n        V[A << 1] = 0\n        V[(A << 1) + 1] = M\n        if (M > n) n = M\n        A++\n      }\n\n      while (A < l) {\n        V[A << 1] = 0\n        V[(A << 1) + 1] = 0\n        A++\n      }\n\n      return n\n    }\n\n    H.H.n = function (N, W) {\n      var R = H.H.m,\n        V = N.length,\n        n,\n        A,\n        l,\n        M,\n        I,\n        e = R.j\n      for (var M = 0; M <= W; M++) e[M] = 0\n      for (M = 1; M < V; M += 2) e[N[M]]++\n      var b = R.K\n      n = 0\n      e[0] = 0\n      for (A = 1; A <= W; A++) {\n        n = (n + e[A - 1]) << 1\n        b[A] = n\n      }\n\n      for (l = 0; l < V; l += 2) {\n        I = N[l + 1]\n        if (I != 0) {\n          N[l] = b[I]\n          b[I]++\n        }\n      }\n    }\n\n    H.H.A = function (N, W, R) {\n      var V = N.length,\n        n = H.H.m,\n        A = n.r\n      for (var l = 0; l < V; l += 2) {\n        if (N[l + 1] != 0) {\n          var M = l >> 1,\n            I = N[l + 1],\n            e = (M << 4) | I,\n            b = W - I,\n            Z = N[l] << b,\n            m = Z + (1 << b)\n          while (Z != m) {\n            var J = A[Z] >>> (15 - W)\n            R[J] = e\n            Z++\n          }\n        }\n      }\n    }\n\n    H.H.l = function (N, W) {\n      var R = H.H.m.r,\n        V = 15 - W\n      for (var n = 0; n < N.length; n += 2) {\n        var A = N[n] << (W - N[n + 1])\n        N[n] = R[A] >>> V\n      }\n    }\n\n    H.H.M = function (N, W, R) {\n      R = R << (W & 7)\n      var V = W >>> 3\n      N[V] |= R\n      N[V + 1] |= R >>> 8\n    }\n\n    H.H.I = function (N, W, R) {\n      R = R << (W & 7)\n      var V = W >>> 3\n      N[V] |= R\n      N[V + 1] |= R >>> 8\n      N[V + 2] |= R >>> 16\n    }\n\n    H.H.e = function (N, W, R) {\n      return ((N[W >>> 3] | (N[(W >>> 3) + 1] << 8)) >>> (W & 7)) & ((1 << R) - 1)\n    }\n\n    H.H.b = function (N, W, R) {\n      return ((N[W >>> 3] | (N[(W >>> 3) + 1] << 8) | (N[(W >>> 3) + 2] << 16)) >>> (W & 7)) & ((1 << R) - 1)\n    }\n\n    H.H.Z = function (N, W) {\n      return (N[W >>> 3] | (N[(W >>> 3) + 1] << 8) | (N[(W >>> 3) + 2] << 16)) >>> (W & 7)\n    }\n\n    H.H.i = function (N, W) {\n      return (N[W >>> 3] | (N[(W >>> 3) + 1] << 8) | (N[(W >>> 3) + 2] << 16) | (N[(W >>> 3) + 3] << 24)) >>> (W & 7)\n    }\n\n    H.H.m = (function () {\n      var N = Uint16Array,\n        W = Uint32Array\n      return {\n        K: new N(16),\n        j: new N(16),\n        X: [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],\n        S: [\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          10,\n          11,\n          13,\n          15,\n          17,\n          19,\n          23,\n          27,\n          31,\n          35,\n          43,\n          51,\n          59,\n          67,\n          83,\n          99,\n          115,\n          131,\n          163,\n          195,\n          227,\n          258,\n          999,\n          999,\n          999,\n        ],\n        T: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0],\n        q: new N(32),\n        p: [\n          1,\n          2,\n          3,\n          4,\n          5,\n          7,\n          9,\n          13,\n          17,\n          25,\n          33,\n          49,\n          65,\n          97,\n          129,\n          193,\n          257,\n          385,\n          513,\n          769,\n          1025,\n          1537,\n          2049,\n          3073,\n          4097,\n          6145,\n          8193,\n          12289,\n          16385,\n          24577,\n          65535,\n          65535,\n        ],\n        z: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0],\n        c: new W(32),\n        J: new N(512),\n        _: [],\n        h: new N(32),\n        $: [],\n        w: new N(32768),\n        C: [],\n        v: [],\n        d: new N(32768),\n        D: [],\n        u: new N(512),\n        Q: [],\n        r: new N(1 << 15),\n        s: new W(286),\n        Y: new W(30),\n        a: new W(19),\n        t: new W(15e3),\n        k: new N(1 << 16),\n        g: new N(1 << 15),\n      }\n    })()\n    ;(function () {\n      var N = H.H.m,\n        W = 1 << 15\n      for (var R = 0; R < W; R++) {\n        var V = R\n        V = ((V & 2863311530) >>> 1) | ((V & 1431655765) << 1)\n        V = ((V & 3435973836) >>> 2) | ((V & 858993459) << 2)\n        V = ((V & 4042322160) >>> 4) | ((V & 252645135) << 4)\n        V = ((V & 4278255360) >>> 8) | ((V & 16711935) << 8)\n        N.r[R] = ((V >>> 16) | (V << 16)) >>> 17\n      }\n\n      function n(A, l, M) {\n        while (l-- != 0) A.push(0, M)\n      }\n\n      for (var R = 0; R < 32; R++) {\n        N.q[R] = (N.S[R] << 3) | N.T[R]\n        N.c[R] = (N.p[R] << 4) | N.z[R]\n      }\n\n      n(N._, 144, 8)\n      n(N._, 255 - 143, 9)\n      n(N._, 279 - 255, 7)\n      n(N._, 287 - 279, 8)\n      H.H.n(N._, 9)\n      H.H.A(N._, 9, N.J)\n      H.H.l(N._, 9)\n      n(N.$, 32, 5)\n      H.H.n(N.$, 5)\n      H.H.A(N.$, 5, N.h)\n      H.H.l(N.$, 5)\n      n(N.Q, 19, 0)\n      n(N.C, 286, 0)\n      n(N.D, 30, 0)\n      n(N.v, 320, 0)\n    })()\n\n    return H.H.N\n  })()\n\n  UPNG.decode._readInterlace = function (data, out) {\n    var w = out.width,\n      h = out.height\n    var bpp = UPNG.decode._getBPP(out),\n      cbpp = bpp >> 3,\n      bpl = Math.ceil((w * bpp) / 8)\n    var img = new Uint8Array(h * bpl)\n    var di = 0\n\n    var starting_row = [0, 0, 4, 0, 2, 0, 1]\n    var starting_col = [0, 4, 0, 2, 0, 1, 0]\n    var row_increment = [8, 8, 8, 4, 4, 2, 2]\n    var col_increment = [8, 8, 4, 4, 2, 2, 1]\n\n    var pass = 0\n    while (pass < 7) {\n      var ri = row_increment[pass],\n        ci = col_increment[pass]\n      var sw = 0,\n        sh = 0\n      var cr = starting_row[pass]\n      while (cr < h) {\n        cr += ri\n        sh++\n      }\n\n      var cc = starting_col[pass]\n      while (cc < w) {\n        cc += ci\n        sw++\n      }\n\n      var bpll = Math.ceil((sw * bpp) / 8)\n      UPNG.decode._filterZero(data, out, di, sw, sh)\n\n      var y = 0,\n        row = starting_row[pass]\n      var val\n\n      while (row < h) {\n        var col = starting_col[pass]\n        var cdi = (di + y * bpll) << 3\n\n        while (col < w) {\n          if (bpp == 1) {\n            val = data[cdi >> 3]\n            val = (val >> (7 - (cdi & 7))) & 1\n            img[row * bpl + (col >> 3)] |= val << (7 - ((col & 7) << 0))\n          }\n\n          if (bpp == 2) {\n            val = data[cdi >> 3]\n            val = (val >> (6 - (cdi & 7))) & 3\n            img[row * bpl + (col >> 2)] |= val << (6 - ((col & 3) << 1))\n          }\n\n          if (bpp == 4) {\n            val = data[cdi >> 3]\n            val = (val >> (4 - (cdi & 7))) & 15\n            img[row * bpl + (col >> 1)] |= val << (4 - ((col & 1) << 2))\n          }\n\n          if (bpp >= 8) {\n            var ii = row * bpl + col * cbpp\n            for (var j = 0; j < cbpp; j++) img[ii + j] = data[(cdi >> 3) + j]\n          }\n\n          cdi += bpp\n          col += ci\n        }\n\n        y++\n        row += ri\n      }\n\n      if (sw * sh != 0) di += sh * (1 + bpll)\n      pass = pass + 1\n    }\n\n    return img\n  }\n\n  UPNG.decode._getBPP = function (out) {\n    var noc = [1, null, 3, 1, 2, null, 4][out.ctype]\n    return noc * out.depth\n  }\n\n  UPNG.decode._filterZero = function (data, out, off, w, h) {\n    var bpp = UPNG.decode._getBPP(out),\n      bpl = Math.ceil((w * bpp) / 8),\n      paeth = UPNG.decode._paeth\n    bpp = Math.ceil(bpp / 8)\n\n    var i,\n      di,\n      type = data[off],\n      x = 0\n\n    if (type > 1) data[off] = [0, 0, 1][type - 2]\n    if (type == 3) for (x = bpp; x < bpl; x++) data[x + 1] = (data[x + 1] + (data[x + 1 - bpp] >>> 1)) & 255\n\n    for (var y = 0; y < h; y++) {\n      i = off + y * bpl\n      di = i + y + 1\n      type = data[di - 1]\n      x = 0\n\n      if (type == 0) {\n        for (; x < bpl; x++) data[i + x] = data[di + x]\n      } else if (type == 1) {\n        for (; x < bpp; x++) data[i + x] = data[di + x]\n        for (; x < bpl; x++) data[i + x] = data[di + x] + data[i + x - bpp]\n      } else if (type == 2) {\n        for (; x < bpl; x++) data[i + x] = data[di + x] + data[i + x - bpl]\n      } else if (type == 3) {\n        for (; x < bpp; x++) data[i + x] = data[di + x] + (data[i + x - bpl] >>> 1)\n        for (; x < bpl; x++) data[i + x] = data[di + x] + ((data[i + x - bpl] + data[i + x - bpp]) >>> 1)\n      } else {\n        for (; x < bpp; x++) data[i + x] = data[di + x] + paeth(0, data[i + x - bpl], 0)\n        for (; x < bpl; x++) {\n          data[i + x] = data[di + x] + paeth(data[i + x - bpp], data[i + x - bpl], data[i + x - bpp - bpl])\n        }\n      }\n    }\n\n    return data\n  }\n\n  UPNG.decode._paeth = function (a, b, c) {\n    var p = a + b - c,\n      pa = p - a,\n      pb = p - b,\n      pc = p - c\n    if (pa * pa <= pb * pb && pa * pa <= pc * pc) return a\n    else if (pb * pb <= pc * pc) return b\n    return c\n  }\n\n  UPNG.decode._IHDR = function (data, offset, out) {\n    var bin = UPNG._bin\n    out.width = bin.readUint(data, offset)\n    offset += 4\n    out.height = bin.readUint(data, offset)\n    offset += 4\n    out.depth = data[offset]\n    offset++\n    out.ctype = data[offset]\n    offset++\n    out.compress = data[offset]\n    offset++\n    out.filter = data[offset]\n    offset++\n    out.interlace = data[offset]\n    offset++\n  }\n\n  UPNG._bin = {\n    nextZero: function (data, p) {\n      while (data[p] != 0) p++\n      return p\n    },\n    readUshort: function (buff, p) {\n      return (buff[p] << 8) | buff[p + 1]\n    },\n    writeUshort: function (buff, p, n) {\n      buff[p] = (n >> 8) & 255\n      buff[p + 1] = n & 255\n    },\n    readUint: function (buff, p) {\n      return buff[p] * (256 * 256 * 256) + ((buff[p + 1] << 16) | (buff[p + 2] << 8) | buff[p + 3])\n    },\n    writeUint: function (buff, p, n) {\n      buff[p] = (n >> 24) & 255\n      buff[p + 1] = (n >> 16) & 255\n      buff[p + 2] = (n >> 8) & 255\n      buff[p + 3] = n & 255\n    },\n    readASCII: function (buff, p, l) {\n      var s = ''\n      for (var i = 0; i < l; i++) s += String.fromCharCode(buff[p + i])\n      return s\n    },\n    writeASCII: function (data, p, s) {\n      for (var i = 0; i < s.length; i++) data[p + i] = s.charCodeAt(i)\n    },\n    readBytes: function (buff, p, l) {\n      var arr = []\n      for (var i = 0; i < l; i++) arr.push(buff[p + i])\n      return arr\n    },\n    pad: function (n) {\n      return n.length < 2 ? '0' + n : n\n    },\n    readUTF8: function (buff, p, l) {\n      var s = '',\n        ns\n      for (var i = 0; i < l; i++) s += '%' + UPNG._bin.pad(buff[p + i].toString(16))\n      try {\n        ns = decodeURIComponent(s)\n      } catch (e) {\n        return UPNG._bin.readASCII(buff, p, l)\n      }\n\n      return ns\n    },\n  }\n  UPNG._copyTile = function (sb, sw, sh, tb, tw, th, xoff, yoff, mode) {\n    var w = Math.min(sw, tw),\n      h = Math.min(sh, th)\n    var si = 0,\n      ti = 0\n    for (var y = 0; y < h; y++) {\n      for (var x = 0; x < w; x++) {\n        if (xoff >= 0 && yoff >= 0) {\n          si = (y * sw + x) << 2\n          ti = ((yoff + y) * tw + xoff + x) << 2\n        } else {\n          si = ((-yoff + y) * sw - xoff + x) << 2\n          ti = (y * tw + x) << 2\n        }\n\n        if (mode == 0) {\n          tb[ti] = sb[si]\n          tb[ti + 1] = sb[si + 1]\n          tb[ti + 2] = sb[si + 2]\n          tb[ti + 3] = sb[si + 3]\n        } else if (mode == 1) {\n          var fa = sb[si + 3] * (1 / 255),\n            fr = sb[si] * fa,\n            fg = sb[si + 1] * fa,\n            fb = sb[si + 2] * fa\n          var ba = tb[ti + 3] * (1 / 255),\n            br = tb[ti] * ba,\n            bg = tb[ti + 1] * ba,\n            bb = tb[ti + 2] * ba\n\n          var ifa = 1 - fa,\n            oa = fa + ba * ifa,\n            ioa = oa == 0 ? 0 : 1 / oa\n          tb[ti + 3] = 255 * oa\n          tb[ti + 0] = (fr + br * ifa) * ioa\n          tb[ti + 1] = (fg + bg * ifa) * ioa\n          tb[ti + 2] = (fb + bb * ifa) * ioa\n        } else if (mode == 2) {\n          // copy only differences, otherwise zero\n\n          var fa = sb[si + 3],\n            fr = sb[si],\n            fg = sb[si + 1],\n            fb = sb[si + 2]\n          var ba = tb[ti + 3],\n            br = tb[ti],\n            bg = tb[ti + 1],\n            bb = tb[ti + 2]\n          if (fa == ba && fr == br && fg == bg && fb == bb) {\n            tb[ti] = 0\n            tb[ti + 1] = 0\n            tb[ti + 2] = 0\n            tb[ti + 3] = 0\n          } else {\n            tb[ti] = fr\n            tb[ti + 1] = fg\n            tb[ti + 2] = fb\n            tb[ti + 3] = fa\n          }\n        } else if (mode == 3) {\n          // check if can be blended\n\n          var fa = sb[si + 3],\n            fr = sb[si],\n            fg = sb[si + 1],\n            fb = sb[si + 2]\n          var ba = tb[ti + 3],\n            br = tb[ti],\n            bg = tb[ti + 1],\n            bb = tb[ti + 2]\n          if (fa == ba && fr == br && fg == bg && fb == bb) continue\n          //if(fa!=255 && ba!=0) return false;\n          if (fa < 220 && ba > 20) return false\n        }\n      }\n    }\n\n    return true\n  }\n}\n\nclass RGBMLoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager)\n\n    this.type = HalfFloatType\n    this.maxRange = 7 // more information about this property at https://iwasbeingirony.blogspot.com/2010/06/difference-between-rgbm-and-rgbd.html\n  }\n\n  setDataType(value) {\n    this.type = value\n    return this\n  }\n\n  setMaxRange(value) {\n    this.maxRange = value\n    return this\n  }\n\n  loadCubemap(urls, onLoad, onProgress, onError) {\n    const texture = new CubeTexture()\n\n    let loaded = 0\n\n    const scope = this\n\n    function loadTexture(i) {\n      scope.load(\n        urls[i],\n        function (image) {\n          texture.images[i] = image\n\n          loaded++\n\n          if (loaded === 6) {\n            texture.needsUpdate = true\n\n            if (onLoad) onLoad(texture)\n          }\n        },\n        undefined,\n        onError,\n      )\n    }\n\n    for (let i = 0; i < urls.length; ++i) {\n      loadTexture(i)\n    }\n\n    texture.type = this.type\n    texture.format = RGBAFormat\n    texture.minFilter = LinearFilter\n    texture.generateMipmaps = false\n\n    return texture\n  }\n\n  parse(buffer) {\n    init()\n    const img = UPNG.decode(buffer)\n    const rgba = UPNG.toRGBA8(img)[0]\n\n    const data = new Uint8Array(rgba)\n    const size = img.width * img.height * 4\n\n    const output = this.type === HalfFloatType ? new Uint16Array(size) : new Float32Array(size)\n\n    // decode RGBM\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i + 0] / 255\n      const g = data[i + 1] / 255\n      const b = data[i + 2] / 255\n      const a = data[i + 3] / 255\n\n      if (this.type === HalfFloatType) {\n        output[i + 0] = DataUtils.toHalfFloat(Math.min(r * a * this.maxRange, 65504))\n        output[i + 1] = DataUtils.toHalfFloat(Math.min(g * a * this.maxRange, 65504))\n        output[i + 2] = DataUtils.toHalfFloat(Math.min(b * a * this.maxRange, 65504))\n        output[i + 3] = DataUtils.toHalfFloat(1)\n      } else {\n        output[i + 0] = r * a * this.maxRange\n        output[i + 1] = g * a * this.maxRange\n        output[i + 2] = b * a * this.maxRange\n        output[i + 3] = 1\n      }\n    }\n\n    return {\n      width: img.width,\n      height: img.height,\n      data: output,\n      format: RGBAFormat,\n      type: this.type,\n      flipY: true,\n    }\n  }\n}\n\nexport { RGBMLoader }\n"]},"metadata":{},"sourceType":"module"}