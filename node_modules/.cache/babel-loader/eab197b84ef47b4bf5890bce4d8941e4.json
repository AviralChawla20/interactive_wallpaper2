{"ast":null,"code":"import { BufferAttribute, DynamicDrawUsage, BufferGeometry, MeshStandardMaterial, Mesh, Vector3, Color, Matrix4 } from \"three\";\nfunction TubePainter() {\n  const BUFFER_SIZE = 1e6 * 3;\n  const positions = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  positions.usage = DynamicDrawUsage;\n  const normals = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  normals.usage = DynamicDrawUsage;\n  const colors = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  colors.usage = DynamicDrawUsage;\n  const geometry = new BufferGeometry();\n  geometry.setAttribute(\"position\", positions);\n  geometry.setAttribute(\"normal\", normals);\n  geometry.setAttribute(\"color\", colors);\n  geometry.drawRange.count = 0;\n  const material = new MeshStandardMaterial({\n    vertexColors: true\n  });\n  const mesh = new Mesh(geometry, material);\n  mesh.frustumCulled = false;\n  function getPoints(size2) {\n    const PI2 = Math.PI * 2;\n    const sides = 10;\n    const array = [];\n    const radius = 0.01 * size2;\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * PI2;\n      array.push(new Vector3(Math.sin(angle) * radius, Math.cos(angle) * radius, 0));\n    }\n    return array;\n  }\n  const vector1 = new Vector3();\n  const vector2 = new Vector3();\n  const vector3 = new Vector3();\n  const vector4 = new Vector3();\n  const color = new Color(16777215);\n  let size = 1;\n  function stroke(position1, position2, matrix12, matrix22) {\n    if (position1.distanceToSquared(position2) === 0) return;\n    let count2 = geometry.drawRange.count;\n    const points = getPoints(size);\n    for (let i = 0, il = points.length; i < il; i++) {\n      const vertex1 = points[i];\n      const vertex2 = points[(i + 1) % il];\n      vector1.copy(vertex1).applyMatrix4(matrix22).add(position2);\n      vector2.copy(vertex2).applyMatrix4(matrix22).add(position2);\n      vector3.copy(vertex2).applyMatrix4(matrix12).add(position1);\n      vector4.copy(vertex1).applyMatrix4(matrix12).add(position1);\n      vector1.toArray(positions.array, (count2 + 0) * 3);\n      vector2.toArray(positions.array, (count2 + 1) * 3);\n      vector4.toArray(positions.array, (count2 + 2) * 3);\n      vector2.toArray(positions.array, (count2 + 3) * 3);\n      vector3.toArray(positions.array, (count2 + 4) * 3);\n      vector4.toArray(positions.array, (count2 + 5) * 3);\n      vector1.copy(vertex1).applyMatrix4(matrix22).normalize();\n      vector2.copy(vertex2).applyMatrix4(matrix22).normalize();\n      vector3.copy(vertex2).applyMatrix4(matrix12).normalize();\n      vector4.copy(vertex1).applyMatrix4(matrix12).normalize();\n      vector1.toArray(normals.array, (count2 + 0) * 3);\n      vector2.toArray(normals.array, (count2 + 1) * 3);\n      vector4.toArray(normals.array, (count2 + 2) * 3);\n      vector2.toArray(normals.array, (count2 + 3) * 3);\n      vector3.toArray(normals.array, (count2 + 4) * 3);\n      vector4.toArray(normals.array, (count2 + 5) * 3);\n      color.toArray(colors.array, (count2 + 0) * 3);\n      color.toArray(colors.array, (count2 + 1) * 3);\n      color.toArray(colors.array, (count2 + 2) * 3);\n      color.toArray(colors.array, (count2 + 3) * 3);\n      color.toArray(colors.array, (count2 + 4) * 3);\n      color.toArray(colors.array, (count2 + 5) * 3);\n      count2 += 6;\n    }\n    geometry.drawRange.count = count2;\n  }\n  const up = new Vector3(0, 1, 0);\n  const point1 = new Vector3();\n  const point2 = new Vector3();\n  const matrix1 = new Matrix4();\n  const matrix2 = new Matrix4();\n  function moveTo(position) {\n    point1.copy(position);\n    matrix1.lookAt(point2, point1, up);\n    point2.copy(position);\n    matrix2.copy(matrix1);\n  }\n  function lineTo(position) {\n    point1.copy(position);\n    matrix1.lookAt(point2, point1, up);\n    stroke(point1, point2, matrix1, matrix2);\n    point2.copy(point1);\n    matrix2.copy(matrix1);\n  }\n  function setSize(value) {\n    size = value;\n  }\n  let count = 0;\n  function update() {\n    const start = count;\n    const end = geometry.drawRange.count;\n    if (start === end) return;\n    positions.updateRange.offset = start * 3;\n    positions.updateRange.count = (end - start) * 3;\n    positions.needsUpdate = true;\n    normals.updateRange.offset = start * 3;\n    normals.updateRange.count = (end - start) * 3;\n    normals.needsUpdate = true;\n    colors.updateRange.offset = start * 3;\n    colors.updateRange.count = (end - start) * 3;\n    colors.needsUpdate = true;\n    count = geometry.drawRange.count;\n  }\n  return {\n    mesh,\n    moveTo,\n    lineTo,\n    setSize,\n    update\n  };\n}\nexport { TubePainter };","map":{"version":3,"sources":["../../src/misc/TubePainter.js"],"names":["size","matrix1","matrix2","count"],"mappings":"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","sourcesContent":["import {\n  BufferAttribute,\n  BufferGeometry,\n  Color,\n  DynamicDrawUsage,\n  Matrix4,\n  Mesh,\n  MeshStandardMaterial,\n  Vector3,\n} from 'three'\n\nfunction TubePainter() {\n  const BUFFER_SIZE = 1000000 * 3\n\n  const positions = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3)\n  positions.usage = DynamicDrawUsage\n\n  const normals = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3)\n  normals.usage = DynamicDrawUsage\n\n  const colors = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3)\n  colors.usage = DynamicDrawUsage\n\n  const geometry = new BufferGeometry()\n  geometry.setAttribute('position', positions)\n  geometry.setAttribute('normal', normals)\n  geometry.setAttribute('color', colors)\n  geometry.drawRange.count = 0\n\n  const material = new MeshStandardMaterial({\n    vertexColors: true,\n  })\n\n  const mesh = new Mesh(geometry, material)\n  mesh.frustumCulled = false\n\n  //\n\n  function getPoints(size) {\n    const PI2 = Math.PI * 2\n\n    const sides = 10\n    const array = []\n    const radius = 0.01 * size\n\n    for (let i = 0; i < sides; i++) {\n      const angle = (i / sides) * PI2\n      array.push(new Vector3(Math.sin(angle) * radius, Math.cos(angle) * radius, 0))\n    }\n\n    return array\n  }\n\n  //\n\n  const vector1 = new Vector3()\n  const vector2 = new Vector3()\n  const vector3 = new Vector3()\n  const vector4 = new Vector3()\n\n  const color = new Color(0xffffff)\n  let size = 1\n\n  function stroke(position1, position2, matrix1, matrix2) {\n    if (position1.distanceToSquared(position2) === 0) return\n\n    let count = geometry.drawRange.count\n\n    const points = getPoints(size)\n\n    for (let i = 0, il = points.length; i < il; i++) {\n      const vertex1 = points[i]\n      const vertex2 = points[(i + 1) % il]\n\n      // positions\n\n      vector1.copy(vertex1).applyMatrix4(matrix2).add(position2)\n      vector2.copy(vertex2).applyMatrix4(matrix2).add(position2)\n      vector3.copy(vertex2).applyMatrix4(matrix1).add(position1)\n      vector4.copy(vertex1).applyMatrix4(matrix1).add(position1)\n\n      vector1.toArray(positions.array, (count + 0) * 3)\n      vector2.toArray(positions.array, (count + 1) * 3)\n      vector4.toArray(positions.array, (count + 2) * 3)\n\n      vector2.toArray(positions.array, (count + 3) * 3)\n      vector3.toArray(positions.array, (count + 4) * 3)\n      vector4.toArray(positions.array, (count + 5) * 3)\n\n      // normals\n\n      vector1.copy(vertex1).applyMatrix4(matrix2).normalize()\n      vector2.copy(vertex2).applyMatrix4(matrix2).normalize()\n      vector3.copy(vertex2).applyMatrix4(matrix1).normalize()\n      vector4.copy(vertex1).applyMatrix4(matrix1).normalize()\n\n      vector1.toArray(normals.array, (count + 0) * 3)\n      vector2.toArray(normals.array, (count + 1) * 3)\n      vector4.toArray(normals.array, (count + 2) * 3)\n\n      vector2.toArray(normals.array, (count + 3) * 3)\n      vector3.toArray(normals.array, (count + 4) * 3)\n      vector4.toArray(normals.array, (count + 5) * 3)\n\n      // colors\n\n      color.toArray(colors.array, (count + 0) * 3)\n      color.toArray(colors.array, (count + 1) * 3)\n      color.toArray(colors.array, (count + 2) * 3)\n\n      color.toArray(colors.array, (count + 3) * 3)\n      color.toArray(colors.array, (count + 4) * 3)\n      color.toArray(colors.array, (count + 5) * 3)\n\n      count += 6\n    }\n\n    geometry.drawRange.count = count\n  }\n\n  //\n\n  const up = new Vector3(0, 1, 0)\n\n  const point1 = new Vector3()\n  const point2 = new Vector3()\n\n  const matrix1 = new Matrix4()\n  const matrix2 = new Matrix4()\n\n  function moveTo(position) {\n    point1.copy(position)\n    matrix1.lookAt(point2, point1, up)\n\n    point2.copy(position)\n    matrix2.copy(matrix1)\n  }\n\n  function lineTo(position) {\n    point1.copy(position)\n    matrix1.lookAt(point2, point1, up)\n\n    stroke(point1, point2, matrix1, matrix2)\n\n    point2.copy(point1)\n    matrix2.copy(matrix1)\n  }\n\n  function setSize(value) {\n    size = value\n  }\n\n  //\n\n  let count = 0\n\n  function update() {\n    const start = count\n    const end = geometry.drawRange.count\n\n    if (start === end) return\n\n    positions.updateRange.offset = start * 3\n    positions.updateRange.count = (end - start) * 3\n    positions.needsUpdate = true\n\n    normals.updateRange.offset = start * 3\n    normals.updateRange.count = (end - start) * 3\n    normals.needsUpdate = true\n\n    colors.updateRange.offset = start * 3\n    colors.updateRange.count = (end - start) * 3\n    colors.needsUpdate = true\n\n    count = geometry.drawRange.count\n  }\n\n  return {\n    mesh: mesh,\n    moveTo: moveTo,\n    lineTo: lineTo,\n    setSize: setSize,\n    update: update,\n  }\n}\n\nexport { TubePainter }\n"]},"metadata":{},"sourceType":"module"}