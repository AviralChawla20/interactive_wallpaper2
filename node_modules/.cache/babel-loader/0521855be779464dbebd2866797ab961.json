{"ast":null,"code":"import { Loader, FileLoader, BufferGeometry, Float32BufferAttribute } from \"three\";\nclass PDBLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  // Based on CanvasMol PDB parser\n  parse(text) {\n    function trim(text2) {\n      return text2.replace(/^\\s\\s*/, \"\").replace(/\\s\\s*$/, \"\");\n    }\n    function capitalize(text2) {\n      return text2.charAt(0).toUpperCase() + text2.substr(1).toLowerCase();\n    }\n    function hash(s, e) {\n      return \"s\" + Math.min(s, e) + \"e\" + Math.max(s, e);\n    }\n    function parseBond(start, length, satom, i) {\n      const eatom = parseInt(lines[i].substr(start, length));\n      if (eatom) {\n        const h = hash(satom, eatom);\n        if (_bhash[h] === void 0) {\n          _bonds.push([satom - 1, eatom - 1, 1]);\n          _bhash[h] = _bonds.length - 1;\n        }\n      }\n    }\n    function buildGeometry() {\n      const build = {\n        geometryAtoms: new BufferGeometry(),\n        geometryBonds: new BufferGeometry(),\n        json: {\n          atoms\n        }\n      };\n      const geometryAtoms = build.geometryAtoms;\n      const geometryBonds = build.geometryBonds;\n      const verticesAtoms = [];\n      const colorsAtoms = [];\n      const verticesBonds = [];\n      for (let i = 0, l = atoms.length; i < l; i++) {\n        const atom = atoms[i];\n        const x = atom[0];\n        const y = atom[1];\n        const z = atom[2];\n        verticesAtoms.push(x, y, z);\n        const r = atom[3][0] / 255;\n        const g = atom[3][1] / 255;\n        const b = atom[3][2] / 255;\n        colorsAtoms.push(r, g, b);\n      }\n      for (let i = 0, l = _bonds.length; i < l; i++) {\n        const bond = _bonds[i];\n        const start = bond[0];\n        const end = bond[1];\n        const startAtom = _atomMap[start];\n        const endAtom = _atomMap[end];\n        let x = startAtom[0];\n        let y = startAtom[1];\n        let z = startAtom[2];\n        verticesBonds.push(x, y, z);\n        x = endAtom[0];\n        y = endAtom[1];\n        z = endAtom[2];\n        verticesBonds.push(x, y, z);\n      }\n      geometryAtoms.setAttribute(\"position\", new Float32BufferAttribute(verticesAtoms, 3));\n      geometryAtoms.setAttribute(\"color\", new Float32BufferAttribute(colorsAtoms, 3));\n      geometryBonds.setAttribute(\"position\", new Float32BufferAttribute(verticesBonds, 3));\n      return build;\n    }\n    const CPK = {\n      h: [255, 255, 255],\n      he: [217, 255, 255],\n      li: [204, 128, 255],\n      be: [194, 255, 0],\n      b: [255, 181, 181],\n      c: [144, 144, 144],\n      n: [48, 80, 248],\n      o: [255, 13, 13],\n      f: [144, 224, 80],\n      ne: [179, 227, 245],\n      na: [171, 92, 242],\n      mg: [138, 255, 0],\n      al: [191, 166, 166],\n      si: [240, 200, 160],\n      p: [255, 128, 0],\n      s: [255, 255, 48],\n      cl: [31, 240, 31],\n      ar: [128, 209, 227],\n      k: [143, 64, 212],\n      ca: [61, 255, 0],\n      sc: [230, 230, 230],\n      ti: [191, 194, 199],\n      v: [166, 166, 171],\n      cr: [138, 153, 199],\n      mn: [156, 122, 199],\n      fe: [224, 102, 51],\n      co: [240, 144, 160],\n      ni: [80, 208, 80],\n      cu: [200, 128, 51],\n      zn: [125, 128, 176],\n      ga: [194, 143, 143],\n      ge: [102, 143, 143],\n      as: [189, 128, 227],\n      se: [255, 161, 0],\n      br: [166, 41, 41],\n      kr: [92, 184, 209],\n      rb: [112, 46, 176],\n      sr: [0, 255, 0],\n      y: [148, 255, 255],\n      zr: [148, 224, 224],\n      nb: [115, 194, 201],\n      mo: [84, 181, 181],\n      tc: [59, 158, 158],\n      ru: [36, 143, 143],\n      rh: [10, 125, 140],\n      pd: [0, 105, 133],\n      ag: [192, 192, 192],\n      cd: [255, 217, 143],\n      in: [166, 117, 115],\n      sn: [102, 128, 128],\n      sb: [158, 99, 181],\n      te: [212, 122, 0],\n      i: [148, 0, 148],\n      xe: [66, 158, 176],\n      cs: [87, 23, 143],\n      ba: [0, 201, 0],\n      la: [112, 212, 255],\n      ce: [255, 255, 199],\n      pr: [217, 255, 199],\n      nd: [199, 255, 199],\n      pm: [163, 255, 199],\n      sm: [143, 255, 199],\n      eu: [97, 255, 199],\n      gd: [69, 255, 199],\n      tb: [48, 255, 199],\n      dy: [31, 255, 199],\n      ho: [0, 255, 156],\n      er: [0, 230, 117],\n      tm: [0, 212, 82],\n      yb: [0, 191, 56],\n      lu: [0, 171, 36],\n      hf: [77, 194, 255],\n      ta: [77, 166, 255],\n      w: [33, 148, 214],\n      re: [38, 125, 171],\n      os: [38, 102, 150],\n      ir: [23, 84, 135],\n      pt: [208, 208, 224],\n      au: [255, 209, 35],\n      hg: [184, 184, 208],\n      tl: [166, 84, 77],\n      pb: [87, 89, 97],\n      bi: [158, 79, 181],\n      po: [171, 92, 0],\n      at: [117, 79, 69],\n      rn: [66, 130, 150],\n      fr: [66, 0, 102],\n      ra: [0, 125, 0],\n      ac: [112, 171, 250],\n      th: [0, 186, 255],\n      pa: [0, 161, 255],\n      u: [0, 143, 255],\n      np: [0, 128, 255],\n      pu: [0, 107, 255],\n      am: [84, 92, 242],\n      cm: [120, 92, 227],\n      bk: [138, 79, 227],\n      cf: [161, 54, 212],\n      es: [179, 31, 212],\n      fm: [179, 31, 186],\n      md: [179, 13, 166],\n      no: [189, 13, 135],\n      lr: [199, 0, 102],\n      rf: [204, 0, 89],\n      db: [209, 0, 79],\n      sg: [217, 0, 69],\n      bh: [224, 0, 56],\n      hs: [230, 0, 46],\n      mt: [235, 0, 38],\n      ds: [235, 0, 38],\n      rg: [235, 0, 38],\n      cn: [235, 0, 38],\n      uut: [235, 0, 38],\n      uuq: [235, 0, 38],\n      uup: [235, 0, 38],\n      uuh: [235, 0, 38],\n      uus: [235, 0, 38],\n      uuo: [235, 0, 38]\n    };\n    const atoms = [];\n    const _bonds = [];\n    const _bhash = {};\n    const _atomMap = {};\n    const lines = text.split(\"\\n\");\n    for (let i = 0, l = lines.length; i < l; i++) {\n      if (lines[i].substr(0, 4) === \"ATOM\" || lines[i].substr(0, 6) === \"HETATM\") {\n        const x = parseFloat(lines[i].substr(30, 7));\n        const y = parseFloat(lines[i].substr(38, 7));\n        const z = parseFloat(lines[i].substr(46, 7));\n        const index = parseInt(lines[i].substr(6, 5)) - 1;\n        let e = trim(lines[i].substr(76, 2)).toLowerCase();\n        if (e === \"\") {\n          e = trim(lines[i].substr(12, 2)).toLowerCase();\n        }\n        const atomData = [x, y, z, CPK[e], capitalize(e)];\n        atoms.push(atomData);\n        _atomMap[index] = atomData;\n      } else if (lines[i].substr(0, 6) === \"CONECT\") {\n        const satom = parseInt(lines[i].substr(6, 5));\n        parseBond(11, 5, satom, i);\n        parseBond(16, 5, satom, i);\n        parseBond(21, 5, satom, i);\n        parseBond(26, 5, satom, i);\n      }\n    }\n    return buildGeometry();\n  }\n}\nexport { PDBLoader };","map":{"version":3,"sources":["../../src/loaders/PDBLoader.js"],"names":["text"],"mappings":"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","sourcesContent":["import { BufferGeometry, FileLoader, Float32BufferAttribute, Loader } from 'three'\n\nclass PDBLoader extends Loader {\n  constructor(manager) {\n    super(manager)\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this\n\n    const loader = new FileLoader(scope.manager)\n    loader.setPath(scope.path)\n    loader.setRequestHeader(scope.requestHeader)\n    loader.setWithCredentials(scope.withCredentials)\n    loader.load(\n      url,\n      function (text) {\n        try {\n          onLoad(scope.parse(text))\n        } catch (e) {\n          if (onError) {\n            onError(e)\n          } else {\n            console.error(e)\n          }\n\n          scope.manager.itemError(url)\n        }\n      },\n      onProgress,\n      onError,\n    )\n  }\n\n  // Based on CanvasMol PDB parser\n\n  parse(text) {\n    function trim(text) {\n      return text.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '')\n    }\n\n    function capitalize(text) {\n      return text.charAt(0).toUpperCase() + text.substr(1).toLowerCase()\n    }\n\n    function hash(s, e) {\n      return 's' + Math.min(s, e) + 'e' + Math.max(s, e)\n    }\n\n    function parseBond(start, length, satom, i) {\n      const eatom = parseInt(lines[i].substr(start, length))\n\n      if (eatom) {\n        const h = hash(satom, eatom)\n\n        if (_bhash[h] === undefined) {\n          _bonds.push([satom - 1, eatom - 1, 1])\n          _bhash[h] = _bonds.length - 1\n        } else {\n          // doesn't really work as almost all PDBs\n          // have just normal bonds appearing multiple\n          // times instead of being double/triple bonds\n          // bonds[bhash[h]][2] += 1;\n        }\n      }\n    }\n\n    function buildGeometry() {\n      const build = {\n        geometryAtoms: new BufferGeometry(),\n        geometryBonds: new BufferGeometry(),\n        json: {\n          atoms: atoms,\n        },\n      }\n\n      const geometryAtoms = build.geometryAtoms\n      const geometryBonds = build.geometryBonds\n\n      const verticesAtoms = []\n      const colorsAtoms = []\n      const verticesBonds = []\n\n      // atoms\n\n      for (let i = 0, l = atoms.length; i < l; i++) {\n        const atom = atoms[i]\n\n        const x = atom[0]\n        const y = atom[1]\n        const z = atom[2]\n\n        verticesAtoms.push(x, y, z)\n\n        const r = atom[3][0] / 255\n        const g = atom[3][1] / 255\n        const b = atom[3][2] / 255\n\n        colorsAtoms.push(r, g, b)\n      }\n\n      // bonds\n\n      for (let i = 0, l = _bonds.length; i < l; i++) {\n        const bond = _bonds[i]\n\n        const start = bond[0]\n        const end = bond[1]\n\n        const startAtom = _atomMap[start]\n        const endAtom = _atomMap[end]\n\n        let x = startAtom[0]\n        let y = startAtom[1]\n        let z = startAtom[2]\n\n        verticesBonds.push(x, y, z)\n\n        x = endAtom[0]\n        y = endAtom[1]\n        z = endAtom[2]\n\n        verticesBonds.push(x, y, z)\n      }\n\n      // build geometry\n\n      geometryAtoms.setAttribute('position', new Float32BufferAttribute(verticesAtoms, 3))\n      geometryAtoms.setAttribute('color', new Float32BufferAttribute(colorsAtoms, 3))\n\n      geometryBonds.setAttribute('position', new Float32BufferAttribute(verticesBonds, 3))\n\n      return build\n    }\n\n    const CPK = {\n      h: [255, 255, 255],\n      he: [217, 255, 255],\n      li: [204, 128, 255],\n      be: [194, 255, 0],\n      b: [255, 181, 181],\n      c: [144, 144, 144],\n      n: [48, 80, 248],\n      o: [255, 13, 13],\n      f: [144, 224, 80],\n      ne: [179, 227, 245],\n      na: [171, 92, 242],\n      mg: [138, 255, 0],\n      al: [191, 166, 166],\n      si: [240, 200, 160],\n      p: [255, 128, 0],\n      s: [255, 255, 48],\n      cl: [31, 240, 31],\n      ar: [128, 209, 227],\n      k: [143, 64, 212],\n      ca: [61, 255, 0],\n      sc: [230, 230, 230],\n      ti: [191, 194, 199],\n      v: [166, 166, 171],\n      cr: [138, 153, 199],\n      mn: [156, 122, 199],\n      fe: [224, 102, 51],\n      co: [240, 144, 160],\n      ni: [80, 208, 80],\n      cu: [200, 128, 51],\n      zn: [125, 128, 176],\n      ga: [194, 143, 143],\n      ge: [102, 143, 143],\n      as: [189, 128, 227],\n      se: [255, 161, 0],\n      br: [166, 41, 41],\n      kr: [92, 184, 209],\n      rb: [112, 46, 176],\n      sr: [0, 255, 0],\n      y: [148, 255, 255],\n      zr: [148, 224, 224],\n      nb: [115, 194, 201],\n      mo: [84, 181, 181],\n      tc: [59, 158, 158],\n      ru: [36, 143, 143],\n      rh: [10, 125, 140],\n      pd: [0, 105, 133],\n      ag: [192, 192, 192],\n      cd: [255, 217, 143],\n      in: [166, 117, 115],\n      sn: [102, 128, 128],\n      sb: [158, 99, 181],\n      te: [212, 122, 0],\n      i: [148, 0, 148],\n      xe: [66, 158, 176],\n      cs: [87, 23, 143],\n      ba: [0, 201, 0],\n      la: [112, 212, 255],\n      ce: [255, 255, 199],\n      pr: [217, 255, 199],\n      nd: [199, 255, 199],\n      pm: [163, 255, 199],\n      sm: [143, 255, 199],\n      eu: [97, 255, 199],\n      gd: [69, 255, 199],\n      tb: [48, 255, 199],\n      dy: [31, 255, 199],\n      ho: [0, 255, 156],\n      er: [0, 230, 117],\n      tm: [0, 212, 82],\n      yb: [0, 191, 56],\n      lu: [0, 171, 36],\n      hf: [77, 194, 255],\n      ta: [77, 166, 255],\n      w: [33, 148, 214],\n      re: [38, 125, 171],\n      os: [38, 102, 150],\n      ir: [23, 84, 135],\n      pt: [208, 208, 224],\n      au: [255, 209, 35],\n      hg: [184, 184, 208],\n      tl: [166, 84, 77],\n      pb: [87, 89, 97],\n      bi: [158, 79, 181],\n      po: [171, 92, 0],\n      at: [117, 79, 69],\n      rn: [66, 130, 150],\n      fr: [66, 0, 102],\n      ra: [0, 125, 0],\n      ac: [112, 171, 250],\n      th: [0, 186, 255],\n      pa: [0, 161, 255],\n      u: [0, 143, 255],\n      np: [0, 128, 255],\n      pu: [0, 107, 255],\n      am: [84, 92, 242],\n      cm: [120, 92, 227],\n      bk: [138, 79, 227],\n      cf: [161, 54, 212],\n      es: [179, 31, 212],\n      fm: [179, 31, 186],\n      md: [179, 13, 166],\n      no: [189, 13, 135],\n      lr: [199, 0, 102],\n      rf: [204, 0, 89],\n      db: [209, 0, 79],\n      sg: [217, 0, 69],\n      bh: [224, 0, 56],\n      hs: [230, 0, 46],\n      mt: [235, 0, 38],\n      ds: [235, 0, 38],\n      rg: [235, 0, 38],\n      cn: [235, 0, 38],\n      uut: [235, 0, 38],\n      uuq: [235, 0, 38],\n      uup: [235, 0, 38],\n      uuh: [235, 0, 38],\n      uus: [235, 0, 38],\n      uuo: [235, 0, 38],\n    }\n\n    const atoms = []\n\n    const _bonds = []\n    const _bhash = {}\n    const _atomMap = {}\n\n    // parse\n\n    const lines = text.split('\\n')\n\n    for (let i = 0, l = lines.length; i < l; i++) {\n      if (lines[i].substr(0, 4) === 'ATOM' || lines[i].substr(0, 6) === 'HETATM') {\n        const x = parseFloat(lines[i].substr(30, 7))\n        const y = parseFloat(lines[i].substr(38, 7))\n        const z = parseFloat(lines[i].substr(46, 7))\n        const index = parseInt(lines[i].substr(6, 5)) - 1\n\n        let e = trim(lines[i].substr(76, 2)).toLowerCase()\n\n        if (e === '') {\n          e = trim(lines[i].substr(12, 2)).toLowerCase()\n        }\n\n        const atomData = [x, y, z, CPK[e], capitalize(e)]\n\n        atoms.push(atomData)\n        _atomMap[index] = atomData\n      } else if (lines[i].substr(0, 6) === 'CONECT') {\n        const satom = parseInt(lines[i].substr(6, 5))\n\n        parseBond(11, 5, satom, i)\n        parseBond(16, 5, satom, i)\n        parseBond(21, 5, satom, i)\n        parseBond(26, 5, satom, i)\n      }\n    }\n\n    // build and return geometry\n\n    return buildGeometry()\n  }\n}\n\nexport { PDBLoader }\n"]},"metadata":{},"sourceType":"module"}