{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Object3D, Mesh, SphereGeometry, MeshBasicMaterial } from \"three\";\nimport { GLTFLoader } from \"../loaders/GLTFLoader.js\";\nimport { MotionControllerConstants, fetchProfile, MotionController } from \"../libs/MotionControllers.js\";\nconst DEFAULT_PROFILES_PATH = \"https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles\";\nconst DEFAULT_PROFILE = \"generic-trigger\";\nconst applyEnvironmentMap = (envMap, obj) => {\n  obj.traverse(child => {\n    if (child instanceof Mesh && \"envMap\" in child.material) {\n      child.material.envMap = envMap;\n      child.material.needsUpdate = true;\n    }\n  });\n};\nclass XRControllerModel extends Object3D {\n  constructor() {\n    super();\n    __publicField(this, \"envMap\");\n    __publicField(this, \"motionController\");\n    this.motionController = null;\n    this.envMap = null;\n  }\n  setEnvironmentMap(envMap) {\n    if (this.envMap == envMap) {\n      return this;\n    }\n    this.envMap = envMap;\n    applyEnvironmentMap(this.envMap, this);\n    return this;\n  }\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (!this.motionController) return;\n    this.motionController.updateFromGamepad();\n    Object.values(this.motionController.components).forEach(component => {\n      Object.values(component.visualResponses).forEach(visualResponse => {\n        const {\n          valueNode,\n          minNode,\n          maxNode,\n          value,\n          valueNodeProperty\n        } = visualResponse;\n        if (!valueNode) return;\n        if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY && typeof value === \"boolean\") {\n          valueNode.visible = value;\n        } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNode && maxNode && typeof value === \"number\") {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n        }\n      });\n    });\n  }\n}\nfunction findNodes(motionController, scene) {\n  Object.values(motionController.components).forEach(component => {\n    const {\n      type,\n      touchPointNodeName,\n      visualResponses\n    } = component;\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD && touchPointNodeName) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n      if (component.touchPointNode) {\n        const sphereGeometry = new SphereGeometry(1e-3);\n        const material = new MeshBasicMaterial({\n          color: 255\n        });\n        const sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`);\n      }\n    }\n    Object.values(visualResponses).forEach(visualResponse => {\n      const {\n        valueNodeName,\n        minNodeName,\n        maxNodeName,\n        valueNodeProperty\n      } = visualResponse;\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNodeName && maxNodeName) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName);\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`);\n          return;\n        }\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`);\n          return;\n        }\n      }\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`);\n      }\n    });\n  });\n}\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  findNodes(controllerModel.motionController, scene);\n  if (controllerModel.envMap) {\n    applyEnvironmentMap(controllerModel.envMap, scene);\n  }\n  controllerModel.add(scene);\n}\nclass XRControllerModelFactory {\n  constructor(gltfLoader = null) {\n    __publicField(this, \"gltfLoader\");\n    __publicField(this, \"path\");\n    __publicField(this, \"_assetCache\");\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {};\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n  createControllerModel(controller) {\n    const controllerModel = new XRControllerModel();\n    let scene = null;\n    const onConnected = event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.targetRayMode !== \"tracked-pointer\" || !xrInputSource.gamepad) return;\n      fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE).then(({\n        profile,\n        assetPath\n      }) => {\n        if (!assetPath) {\n          throw new Error(\"no asset path\");\n        }\n        controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n        const assetUrl = controllerModel.motionController.assetUrl;\n        const cachedAsset = this._assetCache[assetUrl];\n        if (cachedAsset) {\n          scene = cachedAsset.scene.clone();\n          addAssetSceneToControllerModel(controllerModel, scene);\n        } else {\n          if (!this.gltfLoader) {\n            throw new Error(\"GLTFLoader not set.\");\n          }\n          this.gltfLoader.setPath(\"\");\n          this.gltfLoader.load(controllerModel.motionController.assetUrl, asset => {\n            if (!controllerModel.motionController) {\n              console.warn(\"motionController gone while gltf load, bailing...\");\n              return;\n            }\n            this._assetCache[assetUrl] = asset;\n            scene = asset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n          }, () => {}, () => {\n            throw new Error(`Asset ${assetUrl} missing or malformed.`);\n          });\n        }\n      }).catch(err => {\n        console.warn(err);\n      });\n    };\n    controller.addEventListener(\"connected\", onConnected);\n    const onDisconnected = () => {\n      controller.removeEventListener(\"connected\", onConnected);\n      controller.removeEventListener(\"disconnected\", onDisconnected);\n      controllerModel.motionController = null;\n      if (scene) {\n        controllerModel.remove(scene);\n      }\n      scene = null;\n    };\n    controller.addEventListener(\"disconnected\", onDisconnected);\n    return controllerModel;\n  }\n}\nexport { XRControllerModelFactory };","map":{"version":3,"sources":["../../src/webxr/XRControllerModelFactory.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAKA,MAAM,qBAAA,GAAwB,6EAAA;AAC9B,MAAM,eAAA,GAAkB,iBAAA;AAExB,MAAM,mBAAA,GAAsB,CAAC,MAAA,EAAiB,GAAA,KAAwB;EAChE,GAAA,CAAA,QAAA,CAAU,KAAA,IAAU;IACtB,IAAI,KAAA,YAAiB,IAAA,IAAQ,QAAA,IAAY,KAAA,CAAM,QAAA,EAAU;MACvD,KAAA,CAAM,QAAA,CAAS,MAAA,GAAS,MAAA;MACxB,KAAA,CAAM,QAAA,CAAS,WAAA,GAAc,IAAA;IAC/B;EAAA,CACD,CAAA;AACH,CAAA;AAEA,MAAM,iBAAA,SAA0B,QAAA,CAAS;EAGvC,WAAA,CAAA,EAAc;IACN,KAAA,CAAA,CAAA;IAHR,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;IACA,aAAA,CAAA,IAAA,EAAA,kBAAA,CAAA;IAIE,IAAA,CAAK,gBAAA,GAAmB,IAAA;IACxB,IAAA,CAAK,MAAA,GAAS,IAAA;EAChB;EAEA,iBAAA,CAAkB,MAAA,EAAoC;IAChD,IAAA,IAAA,CAAK,MAAA,IAAU,MAAA,EAAQ;MAClB,OAAA,IAAA;IACT;IAEA,IAAA,CAAK,MAAA,GAAS,MAAA;IACM,mBAAA,CAAA,IAAA,CAAK,MAAA,EAAQ,IAAI,CAAA;IAE9B,OAAA,IAAA;EACT;EAAA;AAAA;AAAA;AAAA;EAMA,iBAAA,CAAkB,KAAA,EAAsB;IACtC,KAAA,CAAM,iBAAA,CAAkB,KAAK,CAAA;IAE7B,IAAI,CAAC,IAAA,CAAK,gBAAA,EAAkB;IAG5B,IAAA,CAAK,gBAAA,CAAiB,iBAAA,CAAA,CAAA;IAGtB,MAAA,CAAO,MAAA,CAAO,IAAA,CAAK,gBAAA,CAAiB,UAAU,CAAA,CAAE,OAAA,CAAS,SAAA,IAAc;MAErE,MAAA,CAAO,MAAA,CAAO,SAAA,CAAU,eAAe,CAAA,CAAE,OAAA,CAAS,cAAA,IAAmB;QACnE,MAAM;UAAE,SAAA;UAAW,OAAA;UAAS,OAAA;UAAS,KAAA;UAAO;QAAsB,CAAA,GAAA,cAAA;QAIlE,IAAI,CAAC,SAAA,EAAW;QAGhB,IACE,iBAAA,KAAsB,yBAAA,CAA0B,sBAAA,CAAuB,UAAA,IACvE,OAAO,KAAA,KAAU,SAAA,EACjB;UACA,SAAA,CAAU,OAAA,GAAU,KAAA;QAAA,CAAA,MAAA,IAEpB,iBAAA,KAAsB,yBAAA,CAA0B,sBAAA,CAAuB,SAAA,IACvE,OAAA,IACA,OAAA,IACA,OAAO,KAAA,KAAU,QAAA,EACjB;UACA,SAAA,CAAU,UAAA,CAAW,gBAAA,CAAiB,OAAA,CAAQ,UAAA,EAAY,OAAA,CAAQ,UAAA,EAAY,KAAK,CAAA;UAEnF,SAAA,CAAU,QAAA,CAAS,WAAA,CAAY,OAAA,CAAQ,QAAA,EAAU,OAAA,CAAQ,QAAA,EAAU,KAAK,CAAA;QAC1E;MAAA,CACD,CAAA;IAAA,CACF,CAAA;EACH;AACF;AAOA,SAAS,SAAA,CAAU,gBAAA,EAAoC,KAAA,EAAuB;EAE5E,MAAA,CAAO,MAAA,CAAO,gBAAA,CAAiB,UAAU,CAAA,CAAE,OAAA,CAAS,SAAA,IAAc;IAChE,MAAM;MAAE,IAAA;MAAM,kBAAA;MAAoB;IAAA,CAAA,GAAoB,SAAA;IAEtD,IAAI,IAAA,KAAS,yBAAA,CAA0B,aAAA,CAAc,QAAA,IAAY,kBAAA,EAAoB;MACzE,SAAA,CAAA,cAAA,GAAiB,KAAA,CAAM,eAAA,CAAgB,kBAAkB,CAAA;MACnE,IAAI,SAAA,CAAU,cAAA,EAAgB;QAEtB,MAAA,cAAA,GAAiB,IAAI,cAAA,CAAe,IAAK,CAAA;QAC/C,MAAM,QAAA,GAAW,IAAI,iBAAA,CAAkB;UAAE,KAAA,EAAO;QAAU,CAAA,CAAA;QAC1D,MAAM,MAAA,GAAS,IAAI,IAAA,CAAK,cAAA,EAAgB,QAAQ,CAAA;QACtC,SAAA,CAAA,cAAA,CAAe,GAAA,CAAI,MAAM,CAAA;MAAA,CAAA,MAC9B;QACL,OAAA,CAAQ,IAAA,CAAK,6BAA6B,SAAA,CAAU,kBAAA,2BAA6C,SAAA,CAAU,EAAA,EAAI,CAAA;MACjH;IACF;IAGA,MAAA,CAAO,MAAA,CAAO,eAAe,CAAA,CAAE,OAAA,CAAS,cAAA,IAAmB;MACzD,MAAM;QAAE,aAAA;QAAe,WAAA;QAAa,WAAA;QAAa;MAAA,CAAA,GAAsB,cAAA;MAGvE,IACE,iBAAA,KAAsB,yBAAA,CAA0B,sBAAA,CAAuB,SAAA,IACvE,WAAA,IACA,WAAA,EACA;QACe,cAAA,CAAA,OAAA,GAAU,KAAA,CAAM,eAAA,CAAgB,WAAW,CAAA;QAC3C,cAAA,CAAA,OAAA,GAAU,KAAA,CAAM,eAAA,CAAgB,WAAW,CAAA;QAGtD,IAAA,CAAC,cAAA,CAAe,OAAA,EAAS;UACnB,OAAA,CAAA,IAAA,CAAK,kBAAkB,WAAA,eAA0B,CAAA;UACzD;QACF;QAEI,IAAA,CAAC,cAAA,CAAe,OAAA,EAAS;UACnB,OAAA,CAAA,IAAA,CAAK,kBAAkB,WAAA,eAA0B,CAAA;UACzD;QACF;MACF;MAGe,cAAA,CAAA,SAAA,GAAY,KAAA,CAAM,eAAA,CAAgB,aAAa,CAAA;MAC1D,IAAA,CAAC,cAAA,CAAe,SAAA,EAAW;QACrB,OAAA,CAAA,IAAA,CAAK,kBAAkB,aAAA,eAA4B,CAAA;MAC7D;IAAA,CACD,CAAA;EAAA,CACF,CAAA;AACH;AAEA,SAAS,8BAAA,CAA+B,eAAA,EAAoC,KAAA,EAAuB;EAEvF,SAAA,CAAA,eAAA,CAAgB,gBAAA,EAAmB,KAAK,CAAA;EAGlD,IAAI,eAAA,CAAgB,MAAA,EAAQ;IACN,mBAAA,CAAA,eAAA,CAAgB,MAAA,EAAQ,KAAK,CAAA;EACnD;EAGA,eAAA,CAAgB,GAAA,CAAI,KAAK,CAAA;AAC3B;AAEA,MAAM,wBAAA,CAAyB;EAI7B,WAAA,CAAY,UAAA,GAAyB,IAAA,EAAO;IAH5C,aAAA,CAAA,IAAA,EAAA,YAAA,CAAA;IACA,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA;IACQ,aAAA,CAAA,IAAA,EAAA,aAAA,CAAA;IAEN,IAAA,CAAK,UAAA,GAAa,UAAA;IAClB,IAAA,CAAK,IAAA,GAAO,qBAAA;IACZ,IAAA,CAAK,WAAA,GAAc,CAAA,CAAA;IAGf,IAAA,CAAC,IAAA,CAAK,UAAA,EAAY;MACf,IAAA,CAAA,UAAA,GAAa,IAAI,UAAA,CAAA,CAAA;IACxB;EACF;EAEA,qBAAA,CAAsB,UAAA,EAAsC;IACpD,MAAA,eAAA,GAAkB,IAAI,iBAAA,CAAA,CAAA;IAC5B,IAAI,KAAA,GAAyB,IAAA;IAEvB,MAAA,WAAA,GAAe,KAAA,IAAqB;MACxC,MAAM,aAAA,GAAgB,KAAA,CAAM,IAAA;MAE5B,IAAI,aAAA,CAAc,aAAA,KAAkB,iBAAA,IAAqB,CAAC,aAAA,CAAc,OAAA,EAAS;MAEpE,YAAA,CAAA,aAAA,EAAe,IAAA,CAAK,IAAA,EAAM,eAAe,CAAA,CACnD,IAAA,CAAK,CAAC;QAAE,OAAA;QAAS;MAAA,CAAA,KAAgB;QAChC,IAAI,CAAC,SAAA,EAAW;UACR,MAAA,IAAI,KAAA,CAAM,eAAe,CAAA;QACjC;QAEA,eAAA,CAAgB,gBAAA,GAAmB,IAAI,gBAAA,CAAiB,aAAA,EAAe,OAAA,EAAS,SAAS,CAAA;QAEnF,MAAA,QAAA,GAAW,eAAA,CAAgB,gBAAA,CAAiB,QAAA;QAE5C,MAAA,WAAA,GAAc,IAAA,CAAK,WAAA,CAAY,QAAQ,CAAA;QAC7C,IAAI,WAAA,EAAa;UACP,KAAA,GAAA,WAAA,CAAY,KAAA,CAAM,KAAA,CAAA,CAAA;UAE1B,8BAAA,CAA+B,eAAA,EAAiB,KAAK,CAAA;QAAA,CAAA,MAChD;UACD,IAAA,CAAC,IAAA,CAAK,UAAA,EAAY;YACd,MAAA,IAAI,KAAA,CAAM,qBAAqB,CAAA;UACvC;UAEK,IAAA,CAAA,UAAA,CAAW,OAAA,CAAQ,EAAE,CAAA;UAC1B,IAAA,CAAK,UAAA,CAAW,IAAA,CACd,eAAA,CAAgB,gBAAA,CAAiB,QAAA,EAChC,KAAA,IAA+B;YAC1B,IAAA,CAAC,eAAA,CAAgB,gBAAA,EAAkB;cACrC,OAAA,CAAQ,IAAA,CAAK,mDAAmD,CAAA;cAChE;YACF;YAEK,IAAA,CAAA,WAAA,CAAY,QAAQ,CAAA,GAAI,KAAA;YAErB,KAAA,GAAA,KAAA,CAAM,KAAA,CAAM,KAAA,CAAA,CAAA;YAEpB,8BAAA,CAA+B,eAAA,EAAiB,KAAK,CAAA;UACvD,CAAA,EACA,MAAM,CAAC,CAAA,EACP,MAAM;YACE,MAAA,IAAI,KAAA,CAAM,SAAS,QAAA,wBAAgC,CAAA;UAC3D,CAAA,CAAA;QAEJ;MAAA,CACD,CAAA,CACA,KAAA,CAAO,GAAA,IAAQ;QACd,OAAA,CAAQ,IAAA,CAAK,GAAG,CAAA;MAAA,CACjB,CAAA;IAAA,CAAA;IAGM,UAAA,CAAA,gBAAA,CAAiB,WAAA,EAAa,WAAW,CAAA;IAEpD,MAAM,cAAA,GAAiB,CAAA,KAAY;MACtB,UAAA,CAAA,mBAAA,CAAoB,WAAA,EAAa,WAAW,CAAA;MAC5C,UAAA,CAAA,mBAAA,CAAoB,cAAA,EAAgB,cAAc,CAAA;MAC7D,eAAA,CAAgB,gBAAA,GAAmB,IAAA;MACnC,IAAI,KAAA,EAAO;QACT,eAAA,CAAgB,MAAA,CAAO,KAAK,CAAA;MAC9B;MACQ,KAAA,GAAA,IAAA;IAAA,CAAA;IAGC,UAAA,CAAA,gBAAA,CAAiB,cAAA,EAAgB,cAAc,CAAA;IAEnD,OAAA,eAAA;EACT;AACF","sourcesContent":["import { Mesh, Object3D, SphereGeometry, MeshBasicMaterial } from 'three'\nimport type { Texture, Group } from 'three'\nimport { GLTFLoader } from '../loaders/GLTFLoader'\nimport { fetchProfile, MotionController, MotionControllerConstants } from '../libs/MotionControllers'\n\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles'\nconst DEFAULT_PROFILE = 'generic-trigger'\n\nconst applyEnvironmentMap = (envMap: Texture, obj: Object3D): void => {\n  obj.traverse((child) => {\n    if (child instanceof Mesh && 'envMap' in child.material) {\n      child.material.envMap = envMap\n      child.material.needsUpdate = true\n    }\n  })\n}\n\nclass XRControllerModel extends Object3D {\n  envMap: Texture | null\n  motionController: MotionController | null\n  constructor() {\n    super()\n\n    this.motionController = null\n    this.envMap = null\n  }\n\n  setEnvironmentMap(envMap: Texture): XRControllerModel {\n    if (this.envMap == envMap) {\n      return this\n    }\n\n    this.envMap = envMap\n    applyEnvironmentMap(this.envMap, this)\n\n    return this\n  }\n\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n  updateMatrixWorld(force: boolean): void {\n    super.updateMatrixWorld(force)\n\n    if (!this.motionController) return\n\n    // Cause the MotionController to poll the Gamepad for data\n    this.motionController.updateFromGamepad()\n\n    // Update the 3D model to reflect the button, thumbstick, and touchpad state\n    Object.values(this.motionController.components).forEach((component) => {\n      // Update node data based on the visual responses' current states\n      Object.values(component.visualResponses).forEach((visualResponse) => {\n        const { valueNode, minNode, maxNode, value, valueNodeProperty } = visualResponse\n\n        // Skip if the visual response node is not found. No error is needed,\n        // because it will have been reported at load time.\n        if (!valueNode) return\n\n        // Calculate the new properties based on the weight supplied\n        if (\n          valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY &&\n          typeof value === 'boolean'\n        ) {\n          valueNode.visible = value\n        } else if (\n          valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM &&\n          minNode &&\n          maxNode &&\n          typeof value === 'number'\n        ) {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value)\n\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value)\n        }\n      })\n    })\n  }\n}\n\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\nfunction findNodes(motionController: MotionController, scene: Object3D): void {\n  // Loop through the components and find the nodes needed for each components' visual responses\n  Object.values(motionController.components).forEach((component) => {\n    const { type, touchPointNodeName, visualResponses } = component\n\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD && touchPointNodeName) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName)\n      if (component.touchPointNode) {\n        // Attach a touch dot to the touchpad.\n        const sphereGeometry = new SphereGeometry(0.001)\n        const material = new MeshBasicMaterial({ color: 0x0000ff })\n        const sphere = new Mesh(sphereGeometry, material)\n        component.touchPointNode.add(sphere)\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`)\n      }\n    }\n\n    // Loop through all the visual responses to be applied to this component\n    Object.values(visualResponses).forEach((visualResponse) => {\n      const { valueNodeName, minNodeName, maxNodeName, valueNodeProperty } = visualResponse\n\n      // If animating a transform, find the two nodes to be interpolated between.\n      if (\n        valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM &&\n        minNodeName &&\n        maxNodeName\n      ) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName)\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName)\n\n        // If the extents cannot be found, skip this animation\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`)\n          return\n        }\n\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`)\n          return\n        }\n      }\n\n      // If the target node cannot be found, skip this animation\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName)\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`)\n      }\n    })\n  })\n}\n\nfunction addAssetSceneToControllerModel(controllerModel: XRControllerModel, scene: Object3D): void {\n  // Find the nodes needed for animation and cache them on the motionController.\n  findNodes(controllerModel.motionController!, scene)\n\n  // Apply any environment map that the mesh already has set.\n  if (controllerModel.envMap) {\n    applyEnvironmentMap(controllerModel.envMap, scene)\n  }\n\n  // Add the glTF scene to the controllerModel.\n  controllerModel.add(scene)\n}\n\nclass XRControllerModelFactory {\n  gltfLoader: GLTFLoader\n  path: string\n  private _assetCache: Record<string, { scene: Object3D } | undefined>\n  constructor(gltfLoader: GLTFLoader = null!) {\n    this.gltfLoader = gltfLoader\n    this.path = DEFAULT_PROFILES_PATH\n    this._assetCache = {}\n\n    // If a GLTFLoader wasn't supplied to the constructor create a new one.\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader()\n    }\n  }\n\n  createControllerModel(controller: Group): XRControllerModel {\n    const controllerModel = new XRControllerModel()\n    let scene: Object3D | null = null\n\n    const onConnected = (event: any): void => {\n      const xrInputSource = event.data\n\n      if (xrInputSource.targetRayMode !== 'tracked-pointer' || !xrInputSource.gamepad) return\n\n      fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE)\n        .then(({ profile, assetPath }) => {\n          if (!assetPath) {\n            throw new Error('no asset path')\n          }\n\n          controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath)\n\n          const assetUrl = controllerModel.motionController.assetUrl\n\n          const cachedAsset = this._assetCache[assetUrl]\n          if (cachedAsset) {\n            scene = cachedAsset.scene.clone()\n\n            addAssetSceneToControllerModel(controllerModel, scene)\n          } else {\n            if (!this.gltfLoader) {\n              throw new Error('GLTFLoader not set.')\n            }\n\n            this.gltfLoader.setPath('')\n            this.gltfLoader.load(\n              controllerModel.motionController.assetUrl,\n              (asset: { scene: Object3D }) => {\n                if (!controllerModel.motionController) {\n                  console.warn('motionController gone while gltf load, bailing...')\n                  return\n                }\n\n                this._assetCache[assetUrl] = asset\n\n                scene = asset.scene.clone()\n\n                addAssetSceneToControllerModel(controllerModel, scene)\n              },\n              () => {},\n              () => {\n                throw new Error(`Asset ${assetUrl} missing or malformed.`)\n              },\n            )\n          }\n        })\n        .catch((err) => {\n          console.warn(err)\n        })\n    }\n\n    controller.addEventListener('connected', onConnected)\n\n    const onDisconnected = (): void => {\n      controller.removeEventListener('connected', onConnected)\n      controller.removeEventListener('disconnected', onDisconnected)\n      controllerModel.motionController = null\n      if (scene) {\n        controllerModel.remove(scene)\n      }\n      scene = null\n    }\n\n    controller.addEventListener('disconnected', onDisconnected)\n\n    return controllerModel\n  }\n}\n\nexport { XRControllerModelFactory }\n"]},"metadata":{},"sourceType":"module"}