{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nclass SimplexNoise {\n  /**\n   * You can pass in a random number generator object if you like.\n   * It is assumed to have a random() method.\n   */\n  constructor(r = Math) {\n    __publicField(this, \"grad3\", [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]]);\n    __publicField(this, \"grad4\", [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, -1, 0]]);\n    __publicField(this, \"p\", []);\n    // To remove the need for index wrapping, double the permutation table length\n    __publicField(this, \"perm\", []);\n    // A lookup table to traverse the simplex around a given point in 4D.\n    // Details can be found where this table is used, in the 4D noise method.\n    __publicField(this, \"simplex\", [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]]);\n    __publicField(this, \"dot\", (g, x, y) => {\n      return g[0] * x + g[1] * y;\n    });\n    __publicField(this, \"dot3\", (g, x, y, z) => {\n      return g[0] * x + g[1] * y + g[2] * z;\n    });\n    __publicField(this, \"dot4\", (g, x, y, z, w) => {\n      return g[0] * x + g[1] * y + g[2] * z + g[3] * w;\n    });\n    __publicField(this, \"noise\", (xin, yin) => {\n      let n0;\n      let n1;\n      let n2;\n      const F2 = 0.5 * (Math.sqrt(3) - 1);\n      const s = (xin + yin) * F2;\n      const i = Math.floor(xin + s);\n      const j = Math.floor(yin + s);\n      const G2 = (3 - Math.sqrt(3)) / 6;\n      const t = (i + j) * G2;\n      const X0 = i - t;\n      const Y0 = j - t;\n      const x0 = xin - X0;\n      const y0 = yin - Y0;\n      let i1 = 0;\n      let j1 = 1;\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      }\n      const x1 = x0 - i1 + G2;\n      const y1 = y0 - j1 + G2;\n      const x2 = x0 - 1 + 2 * G2;\n      const y2 = y0 - 1 + 2 * G2;\n      const ii = i & 255;\n      const jj = j & 255;\n      const gi0 = this.perm[ii + this.perm[jj]] % 12;\n      const gi1 = this.perm[ii + i1 + this.perm[jj + j1]] % 12;\n      const gi2 = this.perm[ii + 1 + this.perm[jj + 1]] % 12;\n      let t0 = 0.5 - x0 * x0 - y0 * y0;\n      if (t0 < 0) {\n        n0 = 0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot(this.grad3[gi0], x0, y0);\n      }\n      let t1 = 0.5 - x1 * x1 - y1 * y1;\n      if (t1 < 0) {\n        n1 = 0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot(this.grad3[gi1], x1, y1);\n      }\n      let t2 = 0.5 - x2 * x2 - y2 * y2;\n      if (t2 < 0) {\n        n2 = 0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot(this.grad3[gi2], x2, y2);\n      }\n      return 70 * (n0 + n1 + n2);\n    });\n    // 3D simplex noise\n    __publicField(this, \"noise3d\", (xin, yin, zin) => {\n      let n0;\n      let n1;\n      let n2;\n      let n3;\n      const F3 = 1 / 3;\n      const s = (xin + yin + zin) * F3;\n      const i = Math.floor(xin + s);\n      const j = Math.floor(yin + s);\n      const k = Math.floor(zin + s);\n      const G3 = 1 / 6;\n      const t = (i + j + k) * G3;\n      const X0 = i - t;\n      const Y0 = j - t;\n      const Z0 = k - t;\n      const x0 = xin - X0;\n      const y0 = yin - Y0;\n      const z0 = zin - Z0;\n      let i1;\n      let j1;\n      let k1;\n      let i2;\n      let j2;\n      let k2;\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        }\n      } else {\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        }\n      }\n      const x1 = x0 - i1 + G3;\n      const y1 = y0 - j1 + G3;\n      const z1 = z0 - k1 + G3;\n      const x2 = x0 - i2 + 2 * G3;\n      const y2 = y0 - j2 + 2 * G3;\n      const z2 = z0 - k2 + 2 * G3;\n      const x3 = x0 - 1 + 3 * G3;\n      const y3 = y0 - 1 + 3 * G3;\n      const z3 = z0 - 1 + 3 * G3;\n      const ii = i & 255;\n      const jj = j & 255;\n      const kk = k & 255;\n      const gi0 = this.perm[ii + this.perm[jj + this.perm[kk]]] % 12;\n      const gi1 = this.perm[ii + i1 + this.perm[jj + j1 + this.perm[kk + k1]]] % 12;\n      const gi2 = this.perm[ii + i2 + this.perm[jj + j2 + this.perm[kk + k2]]] % 12;\n      const gi3 = this.perm[ii + 1 + this.perm[jj + 1 + this.perm[kk + 1]]] % 12;\n      let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n      if (t0 < 0) {\n        n0 = 0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot3(this.grad3[gi0], x0, y0, z0);\n      }\n      let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n      if (t1 < 0) {\n        n1 = 0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot3(this.grad3[gi1], x1, y1, z1);\n      }\n      let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n      if (t2 < 0) {\n        n2 = 0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot3(this.grad3[gi2], x2, y2, z2);\n      }\n      let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n      if (t3 < 0) {\n        n3 = 0;\n      } else {\n        t3 *= t3;\n        n3 = t3 * t3 * this.dot3(this.grad3[gi3], x3, y3, z3);\n      }\n      return 32 * (n0 + n1 + n2 + n3);\n    });\n    // 4D simplex noise\n    __publicField(this, \"noise4d\", (x, y, z, w) => {\n      const grad4 = this.grad4;\n      const simplex = this.simplex;\n      const perm = this.perm;\n      const F4 = (Math.sqrt(5) - 1) / 4;\n      const G4 = (5 - Math.sqrt(5)) / 20;\n      let n0;\n      let n1;\n      let n2;\n      let n3;\n      let n4;\n      const s = (x + y + z + w) * F4;\n      const i = Math.floor(x + s);\n      const j = Math.floor(y + s);\n      const k = Math.floor(z + s);\n      const l = Math.floor(w + s);\n      const t = (i + j + k + l) * G4;\n      const X0 = i - t;\n      const Y0 = j - t;\n      const Z0 = k - t;\n      const W0 = l - t;\n      const x0 = x - X0;\n      const y0 = y - Y0;\n      const z0 = z - Z0;\n      const w0 = w - W0;\n      const c1 = x0 > y0 ? 32 : 0;\n      const c2 = x0 > z0 ? 16 : 0;\n      const c3 = y0 > z0 ? 8 : 0;\n      const c4 = x0 > w0 ? 4 : 0;\n      const c5 = y0 > w0 ? 2 : 0;\n      const c6 = z0 > w0 ? 1 : 0;\n      const c = c1 + c2 + c3 + c4 + c5 + c6;\n      let i1;\n      let j1;\n      let k1;\n      let l1;\n      let i2;\n      let j2;\n      let k2;\n      let l2;\n      let i3;\n      let j3;\n      let k3;\n      let l3;\n      i1 = simplex[c][0] >= 3 ? 1 : 0;\n      j1 = simplex[c][1] >= 3 ? 1 : 0;\n      k1 = simplex[c][2] >= 3 ? 1 : 0;\n      l1 = simplex[c][3] >= 3 ? 1 : 0;\n      i2 = simplex[c][0] >= 2 ? 1 : 0;\n      j2 = simplex[c][1] >= 2 ? 1 : 0;\n      k2 = simplex[c][2] >= 2 ? 1 : 0;\n      l2 = simplex[c][3] >= 2 ? 1 : 0;\n      i3 = simplex[c][0] >= 1 ? 1 : 0;\n      j3 = simplex[c][1] >= 1 ? 1 : 0;\n      k3 = simplex[c][2] >= 1 ? 1 : 0;\n      l3 = simplex[c][3] >= 1 ? 1 : 0;\n      const x1 = x0 - i1 + G4;\n      const y1 = y0 - j1 + G4;\n      const z1 = z0 - k1 + G4;\n      const w1 = w0 - l1 + G4;\n      const x2 = x0 - i2 + 2 * G4;\n      const y2 = y0 - j2 + 2 * G4;\n      const z2 = z0 - k2 + 2 * G4;\n      const w2 = w0 - l2 + 2 * G4;\n      const x3 = x0 - i3 + 3 * G4;\n      const y3 = y0 - j3 + 3 * G4;\n      const z3 = z0 - k3 + 3 * G4;\n      const w3 = w0 - l3 + 3 * G4;\n      const x4 = x0 - 1 + 4 * G4;\n      const y4 = y0 - 1 + 4 * G4;\n      const z4 = z0 - 1 + 4 * G4;\n      const w4 = w0 - 1 + 4 * G4;\n      const ii = i & 255;\n      const jj = j & 255;\n      const kk = k & 255;\n      const ll = l & 255;\n      const gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;\n      const gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;\n      const gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;\n      const gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;\n      const gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32;\n      let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n      if (t0 < 0) {\n        n0 = 0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot4(grad4[gi0], x0, y0, z0, w0);\n      }\n      let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n      if (t1 < 0) {\n        n1 = 0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot4(grad4[gi1], x1, y1, z1, w1);\n      }\n      let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n      if (t2 < 0) {\n        n2 = 0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot4(grad4[gi2], x2, y2, z2, w2);\n      }\n      let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n      if (t3 < 0) {\n        n3 = 0;\n      } else {\n        t3 *= t3;\n        n3 = t3 * t3 * this.dot4(grad4[gi3], x3, y3, z3, w3);\n      }\n      let t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n      if (t4 < 0) {\n        n4 = 0;\n      } else {\n        t4 *= t4;\n        n4 = t4 * t4 * this.dot4(grad4[gi4], x4, y4, z4, w4);\n      }\n      return 27 * (n0 + n1 + n2 + n3 + n4);\n    });\n    for (let i = 0; i < 256; i++) {\n      this.p[i] = Math.floor(r.random() * 256);\n    }\n    for (let i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n    }\n  }\n}\nexport { SimplexNoise };","map":{"version":3,"sources":["../../src/math/SimplexNoise.ts"],"names":[],"mappings":"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","sourcesContent":["// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n\nexport interface NumberGenerator {\n  random: () => number\n}\n\n// Added 4D noise\nexport class SimplexNoise {\n  private grad3 = [\n    [1, 1, 0],\n    [-1, 1, 0],\n    [1, -1, 0],\n    [-1, -1, 0],\n    [1, 0, 1],\n    [-1, 0, 1],\n    [1, 0, -1],\n    [-1, 0, -1],\n    [0, 1, 1],\n    [0, -1, 1],\n    [0, 1, -1],\n    [0, -1, -1],\n  ]\n\n  private grad4 = [\n    [0, 1, 1, 1],\n    [0, 1, 1, -1],\n    [0, 1, -1, 1],\n    [0, 1, -1, -1],\n    [0, -1, 1, 1],\n    [0, -1, 1, -1],\n    [0, -1, -1, 1],\n    [0, -1, -1, -1],\n    [1, 0, 1, 1],\n    [1, 0, 1, -1],\n    [1, 0, -1, 1],\n    [1, 0, -1, -1],\n    [-1, 0, 1, 1],\n    [-1, 0, 1, -1],\n    [-1, 0, -1, 1],\n    [-1, 0, -1, -1],\n    [1, 1, 0, 1],\n    [1, 1, 0, -1],\n    [1, -1, 0, 1],\n    [1, -1, 0, -1],\n    [-1, 1, 0, 1],\n    [-1, 1, 0, -1],\n    [-1, -1, 0, 1],\n    [-1, -1, 0, -1],\n    [1, 1, 1, 0],\n    [1, 1, -1, 0],\n    [1, -1, 1, 0],\n    [1, -1, -1, 0],\n    [-1, 1, 1, 0],\n    [-1, 1, -1, 0],\n    [-1, -1, 1, 0],\n    [-1, -1, -1, 0],\n  ]\n\n  private p: number[] = []\n\n  // To remove the need for index wrapping, double the permutation table length\n  private perm: number[] = []\n\n  // A lookup table to traverse the simplex around a given point in 4D.\n  // Details can be found where this table is used, in the 4D noise method.\n  private simplex = [\n    [0, 1, 2, 3],\n    [0, 1, 3, 2],\n    [0, 0, 0, 0],\n    [0, 2, 3, 1],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [1, 2, 3, 0],\n    [0, 2, 1, 3],\n    [0, 0, 0, 0],\n    [0, 3, 1, 2],\n    [0, 3, 2, 1],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [1, 3, 2, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [1, 2, 0, 3],\n    [0, 0, 0, 0],\n    [1, 3, 0, 2],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [2, 3, 0, 1],\n    [2, 3, 1, 0],\n    [1, 0, 2, 3],\n    [1, 0, 3, 2],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [2, 0, 3, 1],\n    [0, 0, 0, 0],\n    [2, 1, 3, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [2, 0, 1, 3],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [3, 0, 1, 2],\n    [3, 0, 2, 1],\n    [0, 0, 0, 0],\n    [3, 1, 2, 0],\n    [2, 1, 0, 3],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [3, 1, 0, 2],\n    [0, 0, 0, 0],\n    [3, 2, 0, 1],\n    [3, 2, 1, 0],\n  ]\n\n  /**\n   * You can pass in a random number generator object if you like.\n   * It is assumed to have a random() method.\n   */\n  constructor(r: NumberGenerator = Math) {\n    for (let i = 0; i < 256; i++) {\n      this.p[i] = Math.floor(r.random() * 256)\n    }\n\n    for (let i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255]\n    }\n  }\n\n  public dot = (g: number[], x: number, y: number): number => {\n    return g[0] * x + g[1] * y\n  }\n\n  public dot3 = (g: number[], x: number, y: number, z: number): number => {\n    return g[0] * x + g[1] * y + g[2] * z\n  }\n\n  public dot4 = (g: number[], x: number, y: number, z: number, w: number): number => {\n    return g[0] * x + g[1] * y + g[2] * z + g[3] * w\n  }\n\n  public noise = (xin: number, yin: number): number => {\n    let n0\n    let n1\n    let n2 // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n    const F2 = 0.5 * (Math.sqrt(3.0) - 1.0)\n    const s = (xin + yin) * F2 // Hairy factor for 2D\n    const i = Math.floor(xin + s)\n    const j = Math.floor(yin + s)\n    const G2 = (3.0 - Math.sqrt(3.0)) / 6.0\n    const t = (i + j) * G2\n    const X0 = i - t // Unskew the cell origin back to (x,y) space\n    const Y0 = j - t\n    const x0 = xin - X0 // The x,y distances from the cell origin\n    const y0 = yin - Y0\n    // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n    let i1 = 0\n    // Offsets for second (middle) corner of simplex in (i,j) coords\n    let j1 = 1\n    if (x0 > y0) {\n      i1 = 1\n      j1 = 0\n    }\n\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n    const x1 = x0 - i1 + G2 // Offsets for middle corner in (x,y) unskewed coords\n    const y1 = y0 - j1 + G2\n    const x2 = x0 - 1.0 + 2.0 * G2 // Offsets for last corner in (x,y) unskewed coords\n    const y2 = y0 - 1.0 + 2.0 * G2\n    // Work out the hashed gradient indices of the three simplex corners\n    const ii = i & 255\n    const jj = j & 255\n    const gi0 = this.perm[ii + this.perm[jj]] % 12\n    const gi1 = this.perm[ii + i1 + this.perm[jj + j1]] % 12\n    const gi2 = this.perm[ii + 1 + this.perm[jj + 1]] % 12\n    // Calculate the contribution from the three corners\n    let t0 = 0.5 - x0 * x0 - y0 * y0\n    if (t0 < 0) {\n      n0 = 0.0\n    } else {\n      t0 *= t0\n      n0 = t0 * t0 * this.dot(this.grad3[gi0], x0, y0) // (x,y) of grad3 used for 2D gradient\n    }\n\n    let t1 = 0.5 - x1 * x1 - y1 * y1\n    if (t1 < 0) {\n      n1 = 0.0\n    } else {\n      t1 *= t1\n      n1 = t1 * t1 * this.dot(this.grad3[gi1], x1, y1)\n    }\n\n    let t2 = 0.5 - x2 * x2 - y2 * y2\n    if (t2 < 0) {\n      n2 = 0.0\n    } else {\n      t2 *= t2\n      n2 = t2 * t2 * this.dot(this.grad3[gi2], x2, y2)\n    }\n\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 70.0 * (n0 + n1 + n2)\n  }\n\n  // 3D simplex noise\n  private noise3d = (xin: number, yin: number, zin: number): number => {\n    // Noise contributions from the four corners\n    let n0\n    let n1\n    let n2\n    let n3\n    // Skew the input space to determine which simplex cell we're in\n    const F3 = 1.0 / 3.0\n    const s = (xin + yin + zin) * F3 // Very nice and simple skew factor for 3D\n    const i = Math.floor(xin + s)\n    const j = Math.floor(yin + s)\n    const k = Math.floor(zin + s)\n    const G3 = 1.0 / 6.0 // Very nice and simple unskew factor, too\n    const t = (i + j + k) * G3\n    const X0 = i - t // Unskew the cell origin back to (x,y,z) space\n    const Y0 = j - t\n    const Z0 = k - t\n    const x0 = xin - X0 // The x,y,z distances from the cell origin\n    const y0 = yin - Y0\n    const z0 = zin - Z0\n    // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n    let i1\n    let j1\n    let k1 // Offsets for second corner of simplex in (i,j,k) coords\n    let i2\n    let j2\n    let k2 // Offsets for third corner of simplex in (i,j,k) coords\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = 1\n        j1 = 0\n        k1 = 0\n        i2 = 1\n        j2 = 1\n        k2 = 0\n\n        // X Y Z order\n      } else if (x0 >= z0) {\n        i1 = 1\n        j1 = 0\n        k1 = 0\n        i2 = 1\n        j2 = 0\n        k2 = 1\n\n        // X Z Y order\n      } else {\n        i1 = 0\n        j1 = 0\n        k1 = 1\n        i2 = 1\n        j2 = 0\n        k2 = 1\n      } // Z X Y order\n    } else {\n      // x0<y0\n\n      if (y0 < z0) {\n        i1 = 0\n        j1 = 0\n        k1 = 1\n        i2 = 0\n        j2 = 1\n        k2 = 1\n\n        // Z Y X order\n      } else if (x0 < z0) {\n        i1 = 0\n        j1 = 1\n        k1 = 0\n        i2 = 0\n        j2 = 1\n        k2 = 1\n\n        // Y Z X order\n      } else {\n        i1 = 0\n        j1 = 1\n        k1 = 0\n        i2 = 1\n        j2 = 1\n        k2 = 0\n      } // Y X Z order\n    }\n\n    // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n    const x1 = x0 - i1 + G3 // Offsets for second corner in (x,y,z) coords\n    const y1 = y0 - j1 + G3\n    const z1 = z0 - k1 + G3\n    const x2 = x0 - i2 + 2.0 * G3 // Offsets for third corner in (x,y,z) coords\n    const y2 = y0 - j2 + 2.0 * G3\n    const z2 = z0 - k2 + 2.0 * G3\n    const x3 = x0 - 1.0 + 3.0 * G3 // Offsets for last corner in (x,y,z) coords\n    const y3 = y0 - 1.0 + 3.0 * G3\n    const z3 = z0 - 1.0 + 3.0 * G3\n    // Work out the hashed gradient indices of the four simplex corners\n    const ii = i & 255\n    const jj = j & 255\n    const kk = k & 255\n    const gi0 = this.perm[ii + this.perm[jj + this.perm[kk]]] % 12\n    const gi1 = this.perm[ii + i1 + this.perm[jj + j1 + this.perm[kk + k1]]] % 12\n    const gi2 = this.perm[ii + i2 + this.perm[jj + j2 + this.perm[kk + k2]]] % 12\n    const gi3 = this.perm[ii + 1 + this.perm[jj + 1 + this.perm[kk + 1]]] % 12\n    // Calculate the contribution from the four corners\n    let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0\n    if (t0 < 0) {\n      n0 = 0.0\n    } else {\n      t0 *= t0\n      n0 = t0 * t0 * this.dot3(this.grad3[gi0], x0, y0, z0)\n    }\n\n    let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1\n    if (t1 < 0) {\n      n1 = 0.0\n    } else {\n      t1 *= t1\n      n1 = t1 * t1 * this.dot3(this.grad3[gi1], x1, y1, z1)\n    }\n\n    let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2\n    if (t2 < 0) {\n      n2 = 0.0\n    } else {\n      t2 *= t2\n      n2 = t2 * t2 * this.dot3(this.grad3[gi2], x2, y2, z2)\n    }\n\n    let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3\n    if (t3 < 0) {\n      n3 = 0.0\n    } else {\n      t3 *= t3\n      n3 = t3 * t3 * this.dot3(this.grad3[gi3], x3, y3, z3)\n    }\n\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to stay just inside [-1,1]\n    return 32.0 * (n0 + n1 + n2 + n3)\n  }\n\n  // 4D simplex noise\n  public noise4d = (x: number, y: number, z: number, w: number): number => {\n    // For faster and easier lookups\n    const grad4 = this.grad4\n    const simplex = this.simplex\n    const perm = this.perm\n\n    // The skewing and unskewing factors are hairy again for the 4D case\n    const F4 = (Math.sqrt(5.0) - 1.0) / 4.0\n    const G4 = (5.0 - Math.sqrt(5.0)) / 20.0\n    let n0\n    let n1\n    let n2\n    let n3\n    let n4 // Noise contributions from the five corners\n    // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n    const s = (x + y + z + w) * F4 // Factor for 4D skewing\n    const i = Math.floor(x + s)\n    const j = Math.floor(y + s)\n    const k = Math.floor(z + s)\n    const l = Math.floor(w + s)\n    const t = (i + j + k + l) * G4 // Factor for 4D unskewing\n    const X0 = i - t // Unskew the cell origin back to (x,y,z,w) space\n    const Y0 = j - t\n    const Z0 = k - t\n    const W0 = l - t\n    const x0 = x - X0 // The x,y,z,w distances from the cell origin\n    const y0 = y - Y0\n    const z0 = z - Z0\n    const w0 = w - W0\n\n    // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n    // To find out which of the 24 possible simplices we're in, we need to\n    // determine the magnitude ordering of x0, y0, z0 and w0.\n    // The method below is a good way of finding the ordering of x,y,z,w and\n    // then find the correct traversal order for the simplex we’re in.\n    // First, six pair-wise comparisons are performed between each possible pair\n    // of the four coordinates, and the results are used to add up binary bits\n    // for an integer index.\n    const c1 = x0 > y0 ? 32 : 0\n    const c2 = x0 > z0 ? 16 : 0\n    const c3 = y0 > z0 ? 8 : 0\n    const c4 = x0 > w0 ? 4 : 0\n    const c5 = y0 > w0 ? 2 : 0\n    const c6 = z0 > w0 ? 1 : 0\n    const c = c1 + c2 + c3 + c4 + c5 + c6\n    // The integer offsets for the second simplex corner\n    let i1\n    let j1\n    let k1\n    let l1\n\n    // The integer offsets for the third simplex corner\n    let i2\n    let j2\n    let k2\n    let l2\n\n    // The integer offsets for the fourth simplex corner\n    let i3\n    let j3\n    let k3\n    let l3\n    // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n    // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n    // impossible. Only the 24 indices which have non-zero entries make any sense.\n    // We use a thresholding to set the coordinates in turn from the largest magnitude.\n    // The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n    i1 = simplex[c][0] >= 3 ? 1 : 0\n    j1 = simplex[c][1] >= 3 ? 1 : 0\n    k1 = simplex[c][2] >= 3 ? 1 : 0\n    l1 = simplex[c][3] >= 3 ? 1 : 0\n    // The number 2 in the \"simplex\" array is at the second largest coordinate.\n    i2 = simplex[c][0] >= 2 ? 1 : 0\n    j2 = simplex[c][1] >= 2 ? 1 : 0\n    k2 = simplex[c][2] >= 2 ? 1 : 0\n    l2 = simplex[c][3] >= 2 ? 1 : 0\n    // The number 1 in the \"simplex\" array is at the second smallest coordinate.\n    i3 = simplex[c][0] >= 1 ? 1 : 0\n    j3 = simplex[c][1] >= 1 ? 1 : 0\n    k3 = simplex[c][2] >= 1 ? 1 : 0\n    l3 = simplex[c][3] >= 1 ? 1 : 0\n    // The fifth corner has all coordinate offsets = 1, so no need to look that up.\n    const x1 = x0 - i1 + G4 // Offsets for second corner in (x,y,z,w) coords\n    const y1 = y0 - j1 + G4\n    const z1 = z0 - k1 + G4\n    const w1 = w0 - l1 + G4\n    const x2 = x0 - i2 + 2.0 * G4 // Offsets for third corner in (x,y,z,w) coords\n    const y2 = y0 - j2 + 2.0 * G4\n    const z2 = z0 - k2 + 2.0 * G4\n    const w2 = w0 - l2 + 2.0 * G4\n    const x3 = x0 - i3 + 3.0 * G4 // Offsets for fourth corner in (x,y,z,w) coords\n    const y3 = y0 - j3 + 3.0 * G4\n    const z3 = z0 - k3 + 3.0 * G4\n    const w3 = w0 - l3 + 3.0 * G4\n    const x4 = x0 - 1.0 + 4.0 * G4 // Offsets for last corner in (x,y,z,w) coords\n    const y4 = y0 - 1.0 + 4.0 * G4\n    const z4 = z0 - 1.0 + 4.0 * G4\n    const w4 = w0 - 1.0 + 4.0 * G4\n    // Work out the hashed gradient indices of the five simplex corners\n    const ii = i & 255\n    const jj = j & 255\n    const kk = k & 255\n    const ll = l & 255\n    const gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32\n    const gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32\n    const gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32\n    const gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32\n    const gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32\n    // Calculate the contribution from the five corners\n    let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0\n    if (t0 < 0) {\n      n0 = 0.0\n    } else {\n      t0 *= t0\n      n0 = t0 * t0 * this.dot4(grad4[gi0], x0, y0, z0, w0)\n    }\n\n    let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1\n    if (t1 < 0) {\n      n1 = 0.0\n    } else {\n      t1 *= t1\n      n1 = t1 * t1 * this.dot4(grad4[gi1], x1, y1, z1, w1)\n    }\n\n    let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2\n    if (t2 < 0) {\n      n2 = 0.0\n    } else {\n      t2 *= t2\n      n2 = t2 * t2 * this.dot4(grad4[gi2], x2, y2, z2, w2)\n    }\n\n    let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3\n    if (t3 < 0) {\n      n3 = 0.0\n    } else {\n      t3 *= t3\n      n3 = t3 * t3 * this.dot4(grad4[gi3], x3, y3, z3, w3)\n    }\n\n    let t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4\n    if (t4 < 0) {\n      n4 = 0.0\n    } else {\n      t4 *= t4\n      n4 = t4 * t4 * this.dot4(grad4[gi4], x4, y4, z4, w4)\n    }\n\n    // Sum up and scale the result to cover the range [-1,1]\n    return 27.0 * (n0 + n1 + n2 + n3 + n4)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}