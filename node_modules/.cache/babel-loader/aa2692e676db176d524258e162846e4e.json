{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { EventDispatcher, Vector3, TOUCH, Spherical, Vector2, Quaternion, MOUSE, PerspectiveCamera, OrthographicCamera } from \"three\";\nconst STATE = {\n  NONE: -1,\n  ROTATE: 0,\n  DOLLY: 1,\n  PAN: 2,\n  TOUCH_ROTATE: 3,\n  TOUCH_PAN: 4,\n  TOUCH_DOLLY_PAN: 5,\n  TOUCH_DOLLY_ROTATE: 6\n};\nclass CameraControls extends EventDispatcher {\n  constructor(object, domElement) {\n    super();\n    __publicField(this, \"object\");\n    __publicField(this, \"domElement\");\n    /** Set to false to disable this control */\n    __publicField(this, \"enabled\", true);\n    /** \"target\" sets the location of focus, where the object orbits around */\n    __publicField(this, \"target\", new Vector3());\n    /** Set to true to enable trackball behavior */\n    __publicField(this, \"trackball\", false);\n    /** How far you can dolly in ( PerspectiveCamera only ) */\n    __publicField(this, \"minDistance\", 0);\n    /** How far you can dolly out ( PerspectiveCamera only ) */\n    __publicField(this, \"maxDistance\", Infinity);\n    // How far you can zoom in and out ( OrthographicCamera only )\n    __publicField(this, \"minZoom\", 0);\n    __publicField(this, \"maxZoom\", Infinity);\n    // How far you can orbit vertically, upper and lower limits.\n    // Range is 0 to Math.PI radians.\n    __publicField(this, \"minPolarAngle\", 0);\n    __publicField(this, \"maxPolarAngle\", Math.PI);\n    // How far you can orbit horizontally, upper and lower limits.\n    // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n    __publicField(this, \"minAzimuthAngle\", -Infinity);\n    // radians\n    __publicField(this, \"maxAzimuthAngle\", Infinity);\n    // radians\n    // Set to true to enable damping (inertia)\n    // If damping is enabled, you must call controls.update() in your animation loop\n    __publicField(this, \"enableDamping\", false);\n    __publicField(this, \"dampingFactor\", 0.05);\n    /**\n     * This option enables dollying in and out; property named as \"zoom\" for backwards compatibility\n     * Set to false to disable zooming\n     */\n    __publicField(this, \"enableZoom\", true);\n    __publicField(this, \"zoomSpeed\", 1);\n    /** Set to false to disable rotating */\n    __publicField(this, \"enableRotate\", true);\n    __publicField(this, \"rotateSpeed\", 1);\n    /** Set to false to disable panning */\n    __publicField(this, \"enablePan\", true);\n    __publicField(this, \"panSpeed\", 1);\n    /** if true, pan in screen-space */\n    __publicField(this, \"screenSpacePanning\", false);\n    /** pixels moved per arrow key push */\n    __publicField(this, \"keyPanSpeed\", 7);\n    /**\n     * Set to true to automatically rotate around the target\n     * If auto-rotate is enabled, you must call controls.update() in your animation loop\n     * auto-rotate is not supported for trackball behavior\n     */\n    __publicField(this, \"autoRotate\", false);\n    __publicField(this, \"autoRotateSpeed\", 2);\n    // 30 seconds per round when fps is 60\n    /** Set to false to disable use of the keys */\n    __publicField(this, \"enableKeys\", true);\n    /** The four arrow keys */\n    __publicField(this, \"keys\", {\n      LEFT: \"ArrowLeft\",\n      UP: \"ArrowUp\",\n      RIGHT: \"ArrowRight\",\n      BOTTOM: \"ArrowDown\"\n    });\n    __publicField(this, \"mouseButtons\");\n    /** Touch fingers */\n    __publicField(this, \"touches\", {\n      ONE: TOUCH.ROTATE,\n      TWO: TOUCH.DOLLY_PAN\n    });\n    // for reset\n    __publicField(this, \"target0\");\n    __publicField(this, \"position0\");\n    __publicField(this, \"quaternion0\");\n    __publicField(this, \"zoom0\");\n    // current position in spherical coordinates\n    __publicField(this, \"spherical\", new Spherical());\n    __publicField(this, \"sphericalDelta\", new Spherical());\n    __publicField(this, \"changeEvent\", {\n      type: \"change\"\n    });\n    __publicField(this, \"startEvent\", {\n      type: \"start\"\n    });\n    __publicField(this, \"endEvent\", {\n      type: \"end\"\n    });\n    __publicField(this, \"state\", STATE.NONE);\n    __publicField(this, \"EPS\", 1e-6);\n    __publicField(this, \"scale\", 1);\n    __publicField(this, \"panOffset\", new Vector3());\n    __publicField(this, \"zoomChanged\", false);\n    __publicField(this, \"rotateStart\", new Vector2());\n    __publicField(this, \"rotateEnd\", new Vector2());\n    __publicField(this, \"rotateDelta\", new Vector2());\n    __publicField(this, \"panStart\", new Vector2());\n    __publicField(this, \"panEnd\", new Vector2());\n    __publicField(this, \"panDelta\", new Vector2());\n    __publicField(this, \"dollyStart\", new Vector2());\n    __publicField(this, \"dollyEnd\", new Vector2());\n    __publicField(this, \"dollyDelta\", new Vector2());\n    __publicField(this, \"offset\", new Vector3());\n    __publicField(this, \"lastPosition\", new Vector3());\n    __publicField(this, \"lastQuaternion\", new Quaternion());\n    __publicField(this, \"q\", new Quaternion());\n    __publicField(this, \"v\", new Vector3());\n    __publicField(this, \"vec\", new Vector3());\n    __publicField(this, \"quat\");\n    __publicField(this, \"quatInverse\");\n    __publicField(this, \"getPolarAngle\", () => this.spherical.phi);\n    __publicField(this, \"getAzimuthalAngle\", () => this.spherical.theta);\n    __publicField(this, \"saveState\", () => {\n      this.target0.copy(this.target);\n      this.position0.copy(this.object.position);\n      this.quaternion0.copy(this.object.quaternion);\n      this.zoom0 = this.object.zoom;\n    });\n    __publicField(this, \"reset\", () => {\n      this.target.copy(this.target0);\n      this.object.position.copy(this.position0);\n      this.object.quaternion.copy(this.quaternion0);\n      this.object.zoom = this.zoom0;\n      this.object.updateProjectionMatrix();\n      this.dispatchEvent(this.changeEvent);\n      this.update();\n      this.state = STATE.NONE;\n    });\n    __publicField(this, \"dispose\", () => {\n      this.domElement.removeEventListener(\"contextmenu\", this.onContextMenu, false);\n      this.domElement.removeEventListener(\"mousedown\", this.onMouseDown, false);\n      this.domElement.removeEventListener(\"wheel\", this.onMouseWheel, false);\n      this.domElement.removeEventListener(\"touchstart\", this.onTouchStart, false);\n      this.domElement.removeEventListener(\"touchend\", this.onTouchEnd, false);\n      this.domElement.removeEventListener(\"touchmove\", this.onTouchMove, false);\n      document.removeEventListener(\"mousemove\", this.onMouseMove, false);\n      document.removeEventListener(\"mouseup\", this.onMouseUp, false);\n      this.domElement.removeEventListener(\"keydown\", this.onKeyDown, false);\n    });\n    __publicField(this, \"update\", () => {\n      const position = this.object.position;\n      this.offset.copy(position).sub(this.target);\n      if (this.trackball) {\n        if (this.sphericalDelta.theta) {\n          this.vec.set(0, 1, 0).applyQuaternion(this.object.quaternion);\n          const factor = this.enableDamping ? this.dampingFactor : 1;\n          this.q.setFromAxisAngle(this.vec, this.sphericalDelta.theta * factor);\n          this.object.quaternion.premultiply(this.q);\n          this.offset.applyQuaternion(this.q);\n        }\n        if (this.sphericalDelta.phi) {\n          this.vec.set(1, 0, 0).applyQuaternion(this.object.quaternion);\n          const factor = this.enableDamping ? this.dampingFactor : 1;\n          this.q.setFromAxisAngle(this.vec, this.sphericalDelta.phi * factor);\n          this.object.quaternion.premultiply(this.q);\n          this.offset.applyQuaternion(this.q);\n        }\n        this.offset.multiplyScalar(this.scale);\n        this.offset.clampLength(this.minDistance, this.maxDistance);\n      } else {\n        this.offset.applyQuaternion(this.quat);\n        if (this.autoRotate && this.state === STATE.NONE) {\n          this.rotateLeft(this.getAutoRotationAngle());\n        }\n        this.spherical.setFromVector3(this.offset);\n        if (this.enableDamping) {\n          this.spherical.theta += this.sphericalDelta.theta * this.dampingFactor;\n          this.spherical.phi += this.sphericalDelta.phi * this.dampingFactor;\n        } else {\n          this.spherical.theta += this.sphericalDelta.theta;\n          this.spherical.phi += this.sphericalDelta.phi;\n        }\n        this.spherical.theta = Math.max(this.minAzimuthAngle, Math.min(this.maxAzimuthAngle, this.spherical.theta));\n        this.spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, this.spherical.phi));\n        this.spherical.makeSafe();\n        this.spherical.radius *= this.scale;\n        this.spherical.radius = Math.max(this.minDistance, Math.min(this.maxDistance, this.spherical.radius));\n        this.offset.setFromSpherical(this.spherical);\n        this.offset.applyQuaternion(this.quatInverse);\n      }\n      if (this.enableDamping === true) {\n        this.target.addScaledVector(this.panOffset, this.dampingFactor);\n      } else {\n        this.target.add(this.panOffset);\n      }\n      position.copy(this.target).add(this.offset);\n      if (this.trackball === false) {\n        this.object.lookAt(this.target);\n      }\n      if (this.enableDamping === true) {\n        this.sphericalDelta.theta *= 1 - this.dampingFactor;\n        this.sphericalDelta.phi *= 1 - this.dampingFactor;\n        this.panOffset.multiplyScalar(1 - this.dampingFactor);\n      } else {\n        this.sphericalDelta.set(0, 0, 0);\n        this.panOffset.set(0, 0, 0);\n      }\n      this.scale = 1;\n      if (this.zoomChanged || this.lastPosition.distanceToSquared(this.object.position) > this.EPS || 8 * (1 - this.lastQuaternion.dot(this.object.quaternion)) > this.EPS) {\n        this.dispatchEvent(this.changeEvent);\n        this.lastPosition.copy(this.object.position);\n        this.lastQuaternion.copy(this.object.quaternion);\n        this.zoomChanged = false;\n        return true;\n      }\n      return false;\n    });\n    __publicField(this, \"getAutoRotationAngle\", () => 2 * Math.PI / 60 / 60 * this.autoRotateSpeed);\n    __publicField(this, \"getZoomScale\", () => Math.pow(0.95, this.zoomSpeed));\n    __publicField(this, \"rotateLeft\", angle => {\n      this.sphericalDelta.theta -= angle;\n    });\n    __publicField(this, \"rotateUp\", angle => {\n      this.sphericalDelta.phi -= angle;\n    });\n    __publicField(this, \"panLeft\", (distance, objectMatrix) => {\n      this.v.setFromMatrixColumn(objectMatrix, 0);\n      this.v.multiplyScalar(-distance);\n      this.panOffset.add(this.v);\n    });\n    __publicField(this, \"panUp\", (distance, objectMatrix) => {\n      if (this.screenSpacePanning === true) {\n        this.v.setFromMatrixColumn(objectMatrix, 1);\n      } else {\n        this.v.setFromMatrixColumn(objectMatrix, 0);\n        this.v.crossVectors(this.object.up, this.v);\n      }\n      this.v.multiplyScalar(distance);\n      this.panOffset.add(this.v);\n    });\n    // deltaX and deltaY are in pixels; right and down are positive\n    __publicField(this, \"pan\", (deltaX, deltaY) => {\n      const element = this.domElement;\n      if (this.object instanceof PerspectiveCamera) {\n        const position = this.object.position;\n        this.offset.copy(position).sub(this.target);\n        let targetDistance = this.offset.length();\n        targetDistance *= Math.tan(this.object.fov / 2 * Math.PI / 180);\n        this.panLeft(2 * deltaX * targetDistance / element.clientHeight, this.object.matrix);\n        this.panUp(2 * deltaY * targetDistance / element.clientHeight, this.object.matrix);\n      } else if (this.object.isOrthographicCamera) {\n        this.panLeft(deltaX * (this.object.right - this.object.left) / this.object.zoom / element.clientWidth, this.object.matrix);\n        this.panUp(deltaY * (this.object.top - this.object.bottom) / this.object.zoom / element.clientHeight, this.object.matrix);\n      } else {\n        console.warn(\"WARNING: CameraControls.js encountered an unknown camera type - pan disabled.\");\n        this.enablePan = false;\n      }\n    });\n    __publicField(this, \"dollyIn\", dollyScale => {\n      if (this.object instanceof PerspectiveCamera) {\n        this.scale /= dollyScale;\n      } else if (this.object instanceof OrthographicCamera) {\n        this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom * dollyScale));\n        this.object.updateProjectionMatrix();\n        this.zoomChanged = true;\n      } else {\n        console.warn(\"WARNING: CameraControls.js encountered an unknown camera type - dolly/zoom disabled.\");\n        this.enableZoom = false;\n      }\n    });\n    __publicField(this, \"dollyOut\", dollyScale => {\n      if (this.object instanceof PerspectiveCamera) {\n        this.scale *= dollyScale;\n      } else if (this.object instanceof OrthographicCamera) {\n        this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / dollyScale));\n        this.object.updateProjectionMatrix();\n        this.zoomChanged = true;\n      } else {\n        console.warn(\"WARNING: CameraControls.js encountered an unknown camera type - dolly/zoom disabled.\");\n        this.enableZoom = false;\n      }\n    });\n    // event callbacks - update the object state\n    __publicField(this, \"handleMouseDownRotate\", event => {\n      this.rotateStart.set(event.clientX, event.clientY);\n    });\n    // TODO: confirm if worthwhile to return the Vector2 instead of void\n    __publicField(this, \"handleMouseDownDolly\", event => {\n      this.dollyStart.set(event.clientX, event.clientY);\n    });\n    __publicField(this, \"handleMouseDownPan\", event => {\n      this.panStart.set(event.clientX, event.clientY);\n    });\n    __publicField(this, \"handleMouseMoveRotate\", event => {\n      this.rotateEnd.set(event.clientX, event.clientY);\n      this.rotateDelta.subVectors(this.rotateEnd, this.rotateStart).multiplyScalar(this.rotateSpeed);\n      const element = this.domElement;\n      this.rotateLeft(2 * Math.PI * this.rotateDelta.x / element.clientHeight);\n      this.rotateUp(2 * Math.PI * this.rotateDelta.y / element.clientHeight);\n      this.rotateStart.copy(this.rotateEnd);\n      this.update();\n    });\n    __publicField(this, \"handleMouseMoveDolly\", event => {\n      this.dollyEnd.set(event.clientX, event.clientY);\n      this.dollyDelta.subVectors(this.dollyEnd, this.dollyStart);\n      if (this.dollyDelta.y > 0) {\n        this.dollyIn(this.getZoomScale());\n      } else if (this.dollyDelta.y < 0) {\n        this.dollyOut(this.getZoomScale());\n      }\n      this.dollyStart.copy(this.dollyEnd);\n      this.update();\n    });\n    __publicField(this, \"handleMouseMovePan\", event => {\n      this.panEnd.set(event.clientX, event.clientY);\n      this.panDelta.subVectors(this.panEnd, this.panStart).multiplyScalar(this.panSpeed);\n      this.pan(this.panDelta.x, this.panDelta.y);\n      this.panStart.copy(this.panEnd);\n      this.update();\n    });\n    __publicField(this, \"handleMouseWheel\", event => {\n      if (event.deltaY < 0) {\n        this.dollyOut(this.getZoomScale());\n      } else if (event.deltaY > 0) {\n        this.dollyIn(this.getZoomScale());\n      }\n      this.update();\n    });\n    __publicField(this, \"handleKeyDown\", event => {\n      let needsUpdate = false;\n      switch (event.code) {\n        case this.keys.UP:\n          this.pan(0, this.keyPanSpeed);\n          needsUpdate = true;\n          break;\n        case this.keys.BOTTOM:\n          this.pan(0, -this.keyPanSpeed);\n          needsUpdate = true;\n          break;\n        case this.keys.LEFT:\n          this.pan(this.keyPanSpeed, 0);\n          needsUpdate = true;\n          break;\n        case this.keys.RIGHT:\n          this.pan(-this.keyPanSpeed, 0);\n          needsUpdate = true;\n          break;\n      }\n      if (needsUpdate) {\n        event.preventDefault();\n        this.update();\n      }\n    });\n    __publicField(this, \"handleTouchStartRotate\", event => {\n      if (event.touches.length == 1) {\n        this.rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\n      } else {\n        const x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);\n        const y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);\n        this.rotateStart.set(x, y);\n      }\n    });\n    __publicField(this, \"handleTouchStartPan\", event => {\n      if (event.touches.length == 1) {\n        this.panStart.set(event.touches[0].pageX, event.touches[0].pageY);\n      } else {\n        const x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);\n        const y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);\n        this.panStart.set(x, y);\n      }\n    });\n    __publicField(this, \"handleTouchStartDolly\", event => {\n      const dx = event.touches[0].pageX - event.touches[1].pageX;\n      const dy = event.touches[0].pageY - event.touches[1].pageY;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      this.dollyStart.set(0, distance);\n    });\n    __publicField(this, \"handleTouchStartDollyPan\", event => {\n      if (this.enableZoom) this.handleTouchStartDolly(event);\n      if (this.enablePan) this.handleTouchStartPan(event);\n    });\n    __publicField(this, \"handleTouchStartDollyRotate\", event => {\n      if (this.enableZoom) this.handleTouchStartDolly(event);\n      if (this.enableRotate) this.handleTouchStartRotate(event);\n    });\n    __publicField(this, \"handleTouchMoveRotate\", event => {\n      if (event.touches.length == 1) {\n        this.rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n      } else {\n        const x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);\n        const y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);\n        this.rotateEnd.set(x, y);\n      }\n      this.rotateDelta.subVectors(this.rotateEnd, this.rotateStart).multiplyScalar(this.rotateSpeed);\n      const element = this.domElement;\n      this.rotateLeft(2 * Math.PI * this.rotateDelta.x / element.clientHeight);\n      this.rotateUp(2 * Math.PI * this.rotateDelta.y / element.clientHeight);\n      this.rotateStart.copy(this.rotateEnd);\n    });\n    __publicField(this, \"handleTouchMovePan\", event => {\n      if (event.touches.length == 1) {\n        this.panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n      } else {\n        const x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);\n        const y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);\n        this.panEnd.set(x, y);\n      }\n      this.panDelta.subVectors(this.panEnd, this.panStart).multiplyScalar(this.panSpeed);\n      this.pan(this.panDelta.x, this.panDelta.y);\n      this.panStart.copy(this.panEnd);\n    });\n    __publicField(this, \"handleTouchMoveDolly\", event => {\n      const dx = event.touches[0].pageX - event.touches[1].pageX;\n      const dy = event.touches[0].pageY - event.touches[1].pageY;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      this.dollyEnd.set(0, distance);\n      this.dollyDelta.set(0, Math.pow(this.dollyEnd.y / this.dollyStart.y, this.zoomSpeed));\n      this.dollyIn(this.dollyDelta.y);\n      this.dollyStart.copy(this.dollyEnd);\n    });\n    __publicField(this, \"handleTouchMoveDollyPan\", event => {\n      if (this.enableZoom) this.handleTouchMoveDolly(event);\n      if (this.enablePan) this.handleTouchMovePan(event);\n    });\n    __publicField(this, \"handleTouchMoveDollyRotate\", event => {\n      if (this.enableZoom) this.handleTouchMoveDolly(event);\n      if (this.enableRotate) this.handleTouchMoveRotate(event);\n    });\n    //\n    // event handlers - FSM: listen for events and reset state\n    //\n    __publicField(this, \"onMouseDown\", event => {\n      if (this.enabled === false) return;\n      event.preventDefault();\n      this.domElement.focus ? this.domElement.focus() : window.focus();\n      let mouseAction;\n      switch (event.button) {\n        case 0:\n          mouseAction = this.mouseButtons.LEFT;\n          break;\n        case 1:\n          mouseAction = this.mouseButtons.MIDDLE;\n          break;\n        case 2:\n          mouseAction = this.mouseButtons.RIGHT;\n          break;\n        default:\n          mouseAction = -1;\n      }\n      switch (mouseAction) {\n        case MOUSE.DOLLY:\n          if (this.enableZoom === false) return;\n          this.handleMouseDownDolly(event);\n          this.state = STATE.DOLLY;\n          break;\n        case MOUSE.ROTATE:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (this.enablePan === false) return;\n            this.handleMouseDownPan(event);\n            this.state = STATE.PAN;\n          } else {\n            if (this.enableRotate === false) return;\n            this.handleMouseDownRotate(event);\n            this.state = STATE.ROTATE;\n          }\n          break;\n        case MOUSE.PAN:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (this.enableRotate === false) return;\n            this.handleMouseDownRotate(event);\n            this.state = STATE.ROTATE;\n          } else {\n            if (this.enablePan === false) return;\n            this.handleMouseDownPan(event);\n            this.state = STATE.PAN;\n          }\n          break;\n        default:\n          this.state = STATE.NONE;\n      }\n      if (this.state !== STATE.NONE) {\n        document.addEventListener(\"mousemove\", this.onMouseMove, false);\n        document.addEventListener(\"mouseup\", this.onMouseUp, false);\n        this.dispatchEvent(this.startEvent);\n      }\n    });\n    __publicField(this, \"onMouseMove\", event => {\n      if (this.enabled === false) return;\n      event.preventDefault();\n      switch (this.state) {\n        case STATE.ROTATE:\n          if (this.enableRotate === false) return;\n          this.handleMouseMoveRotate(event);\n          break;\n        case STATE.DOLLY:\n          if (this.enableZoom === false) return;\n          this.handleMouseMoveDolly(event);\n          break;\n        case STATE.PAN:\n          if (this.enablePan === false) return;\n          this.handleMouseMovePan(event);\n          break;\n      }\n    });\n    __publicField(this, \"onMouseUp\", () => {\n      if (this.enabled === false) return;\n      document.removeEventListener(\"mousemove\", this.onMouseMove, false);\n      document.removeEventListener(\"mouseup\", this.onMouseUp, false);\n      this.dispatchEvent(this.endEvent);\n      this.state = STATE.NONE;\n    });\n    __publicField(this, \"onMouseWheel\", event => {\n      if (this.enabled === false || this.enableZoom === false || this.state !== STATE.NONE && this.state !== STATE.ROTATE) {\n        return;\n      }\n      event.preventDefault();\n      this.dispatchEvent(this.startEvent);\n      this.handleMouseWheel(event);\n      this.dispatchEvent(this.endEvent);\n    });\n    __publicField(this, \"onKeyDown\", event => {\n      if (this.enabled === false || this.enableKeys === false || this.enablePan === false) return;\n      this.handleKeyDown(event);\n    });\n    __publicField(this, \"onTouchStart\", event => {\n      if (this.enabled === false) return;\n      event.preventDefault();\n      switch (event.touches.length) {\n        case 1:\n          switch (this.touches.ONE) {\n            case TOUCH.ROTATE:\n              if (this.enableRotate === false) return;\n              this.handleTouchStartRotate(event);\n              this.state = STATE.TOUCH_ROTATE;\n              break;\n            case TOUCH.PAN:\n              if (this.enablePan === false) return;\n              this.handleTouchStartPan(event);\n              this.state = STATE.TOUCH_PAN;\n              break;\n            default:\n              this.state = STATE.NONE;\n          }\n          break;\n        case 2:\n          switch (this.touches.TWO) {\n            case TOUCH.DOLLY_PAN:\n              if (this.enableZoom === false && this.enablePan === false) return;\n              this.handleTouchStartDollyPan(event);\n              this.state = STATE.TOUCH_DOLLY_PAN;\n              break;\n            case TOUCH.DOLLY_ROTATE:\n              if (this.enableZoom === false && this.enableRotate === false) return;\n              this.handleTouchStartDollyRotate(event);\n              this.state = STATE.TOUCH_DOLLY_ROTATE;\n              break;\n            default:\n              this.state = STATE.NONE;\n          }\n          break;\n        default:\n          this.state = STATE.NONE;\n      }\n      if (this.state !== STATE.NONE) {\n        this.dispatchEvent(this.startEvent);\n      }\n    });\n    __publicField(this, \"onTouchMove\", event => {\n      if (this.enabled === false) return;\n      event.preventDefault();\n      switch (this.state) {\n        case STATE.TOUCH_ROTATE:\n          if (this.enableRotate === false) return;\n          this.handleTouchMoveRotate(event);\n          this.update();\n          break;\n        case STATE.TOUCH_PAN:\n          if (this.enablePan === false) return;\n          this.handleTouchMovePan(event);\n          this.update();\n          break;\n        case STATE.TOUCH_DOLLY_PAN:\n          if (this.enableZoom === false && this.enablePan === false) return;\n          this.handleTouchMoveDollyPan(event);\n          this.update();\n          break;\n        case STATE.TOUCH_DOLLY_ROTATE:\n          if (this.enableZoom === false && this.enableRotate === false) return;\n          this.handleTouchMoveDollyRotate(event);\n          this.update();\n          break;\n        default:\n          this.state = STATE.NONE;\n      }\n    });\n    __publicField(this, \"onTouchEnd\", () => {\n      if (this.enabled === false) return;\n      this.dispatchEvent(this.endEvent);\n      this.state = STATE.NONE;\n    });\n    __publicField(this, \"onContextMenu\", event => {\n      if (this.enabled === false) return;\n      event.preventDefault();\n    });\n    if (domElement === void 0) {\n      console.warn('THREE.CameraControls: The second parameter \"domElement\" is now mandatory.');\n    }\n    if (domElement instanceof Document) {\n      console.error('THREE.CameraControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n    }\n    this.object = object;\n    this.domElement = domElement;\n    this.mouseButtons = {\n      LEFT: MOUSE.ROTATE,\n      MIDDLE: MOUSE.DOLLY,\n      RIGHT: MOUSE.PAN\n    };\n    this.target0 = this.target.clone();\n    this.position0 = this.object.position.clone();\n    this.quaternion0 = this.object.quaternion.clone();\n    this.zoom0 = this.object.zoom;\n    this.quat = new Quaternion().setFromUnitVectors(this.object.up, new Vector3(0, 1, 0));\n    this.quatInverse = this.quat.clone().invert();\n    this.lastPosition = new Vector3();\n    this.lastQuaternion = new Quaternion();\n    this.domElement.addEventListener(\"contextmenu\", this.onContextMenu, false);\n    this.domElement.addEventListener(\"mousedown\", this.onMouseDown, false);\n    this.domElement.addEventListener(\"wheel\", this.onMouseWheel, false);\n    this.domElement.addEventListener(\"touchstart\", this.onTouchStart, false);\n    this.domElement.addEventListener(\"touchend\", this.onTouchEnd, false);\n    this.domElement.addEventListener(\"touchmove\", this.onTouchMove, false);\n    this.domElement.addEventListener(\"keydown\", this.onKeyDown, false);\n    if (this.domElement.tabIndex === -1) {\n      this.domElement.tabIndex = 0;\n    }\n    this.object.lookAt(this.target);\n    this.update();\n    this.saveState();\n  }\n  handleMouseUp() {}\n  handleTouchEnd() {}\n}\nclass OrbitControlsExp extends CameraControls {\n  constructor(object, domElement) {\n    super(object, domElement);\n    __publicField(this, \"mouseButtons\");\n    __publicField(this, \"touches\");\n    this.mouseButtons = {\n      LEFT: MOUSE.ROTATE,\n      RIGHT: MOUSE.PAN\n    };\n    this.touches = {\n      ONE: TOUCH.ROTATE,\n      TWO: TOUCH.DOLLY_PAN\n    };\n  }\n}\nclass MapControlsExp extends CameraControls {\n  constructor(object, domElement) {\n    super(object, domElement);\n    __publicField(this, \"mouseButtons\");\n    __publicField(this, \"touches\");\n    this.mouseButtons = {\n      LEFT: MOUSE.PAN,\n      RIGHT: MOUSE.ROTATE\n    };\n    this.touches = {\n      ONE: TOUCH.PAN,\n      TWO: TOUCH.DOLLY_ROTATE\n    };\n  }\n}\nclass TrackballControlsExp extends CameraControls {\n  constructor(object, domElement) {\n    super(object, domElement);\n    __publicField(this, \"trackball\");\n    __publicField(this, \"screenSpacePanning\");\n    __publicField(this, \"autoRotate\");\n    __publicField(this, \"mouseButtons\");\n    __publicField(this, \"touches\");\n    this.trackball = true;\n    this.screenSpacePanning = true;\n    this.autoRotate = false;\n    this.mouseButtons = {\n      LEFT: MOUSE.ROTATE,\n      RIGHT: MOUSE.PAN\n    };\n    this.touches = {\n      ONE: TOUCH.ROTATE,\n      TWO: TOUCH.DOLLY_PAN\n    };\n  }\n}\nexport { CameraControls, MapControlsExp, OrbitControlsExp, STATE, TrackballControlsExp };","map":{"version":3,"sources":["../../../src/controls/experimental/CameraControls.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  EventDispatcher,\n  MOUSE,\n  Matrix4,\n  OrthographicCamera,\n  PerspectiveCamera,\n  Quaternion,\n  Spherical,\n  TOUCH,\n  Vector2,\n  Vector3,\n} from 'three'\n\nexport type CHANGE_EVENT = {\n  type: 'change' | 'start' | 'end'\n}\n\nexport const STATE = {\n  NONE: -1,\n  ROTATE: 0,\n  DOLLY: 1,\n  PAN: 2,\n  TOUCH_ROTATE: 3,\n  TOUCH_PAN: 4,\n  TOUCH_DOLLY_PAN: 5,\n  TOUCH_DOLLY_ROTATE: 6,\n}\n\nclass CameraControls extends EventDispatcher {\n  object: PerspectiveCamera | OrthographicCamera\n  domElement: HTMLElement\n\n  /** Set to false to disable this control */\n  enabled = true\n\n  /** \"target\" sets the location of focus, where the object orbits around */\n  target = new Vector3()\n\n  /** Set to true to enable trackball behavior */\n  trackball = false\n\n  /** How far you can dolly in ( PerspectiveCamera only ) */\n  minDistance = 0\n  /** How far you can dolly out ( PerspectiveCamera only ) */\n  maxDistance = Infinity\n\n  // How far you can zoom in and out ( OrthographicCamera only )\n  minZoom = 0\n  maxZoom = Infinity\n\n  // How far you can orbit vertically, upper and lower limits.\n  // Range is 0 to Math.PI radians.\n  minPolarAngle = 0\n  maxPolarAngle = Math.PI\n\n  // How far you can orbit horizontally, upper and lower limits.\n  // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n  minAzimuthAngle = -Infinity // radians\n  maxAzimuthAngle = Infinity // radians\n\n  // Set to true to enable damping (inertia)\n  // If damping is enabled, you must call controls.update() in your animation loop\n  enableDamping = false\n  dampingFactor = 0.05\n\n  /**\n   * This option enables dollying in and out; property named as \"zoom\" for backwards compatibility\n   * Set to false to disable zooming\n   */\n  enableZoom = true\n  zoomSpeed = 1.0\n\n  /** Set to false to disable rotating */\n  enableRotate = true\n  rotateSpeed = 1.0\n\n  /** Set to false to disable panning */\n  enablePan = true\n  panSpeed = 1.0\n  /** if true, pan in screen-space */\n  screenSpacePanning = false\n  /** pixels moved per arrow key push */\n  keyPanSpeed = 7.0\n\n  /**\n   * Set to true to automatically rotate around the target\n   * If auto-rotate is enabled, you must call controls.update() in your animation loop\n   * auto-rotate is not supported for trackball behavior\n   */\n  autoRotate = false\n  autoRotateSpeed = 2.0 // 30 seconds per round when fps is 60\n\n  /** Set to false to disable use of the keys */\n  enableKeys = true\n\n  /** The four arrow keys */\n  keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' }\n\n  mouseButtons: {\n    LEFT: MOUSE\n    MIDDLE?: MOUSE\n    RIGHT: MOUSE\n  }\n\n  /** Touch fingers */\n  touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN }\n\n  // for reset\n  target0: Vector3\n  position0: Vector3\n  quaternion0: Quaternion\n  zoom0: number\n\n  // current position in spherical coordinates\n  spherical = new Spherical()\n  sphericalDelta = new Spherical()\n\n  private changeEvent = { type: 'change' }\n  private startEvent = { type: 'start' }\n  private endEvent = { type: 'end' }\n  private state = STATE.NONE\n\n  private EPS = 0.000001\n\n  private scale = 1\n  private panOffset = new Vector3()\n  private zoomChanged = false\n\n  private rotateStart = new Vector2()\n  private rotateEnd = new Vector2()\n  private rotateDelta = new Vector2()\n\n  private panStart = new Vector2()\n  private panEnd = new Vector2()\n  private panDelta = new Vector2()\n\n  private dollyStart = new Vector2()\n  private dollyEnd = new Vector2()\n  private dollyDelta = new Vector2()\n\n  private offset = new Vector3()\n\n  private lastPosition = new Vector3()\n  private lastQuaternion = new Quaternion()\n\n  private q = new Quaternion()\n  private v = new Vector3()\n  private vec = new Vector3()\n\n  private quat: Quaternion\n  private quatInverse: Quaternion\n\n  constructor(object: PerspectiveCamera | OrthographicCamera, domElement: HTMLElement) {\n    super()\n\n    if (domElement === undefined) {\n      console.warn('THREE.CameraControls: The second parameter \"domElement\" is now mandatory.')\n    }\n    if (domElement instanceof Document) {\n      console.error(\n        'THREE.CameraControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.',\n      )\n    }\n\n    this.object = object\n    this.domElement = domElement\n\n    this.mouseButtons = {\n      LEFT: MOUSE.ROTATE,\n      MIDDLE: MOUSE.DOLLY,\n      RIGHT: MOUSE.PAN,\n    }\n\n    // for reset\n    this.target0 = this.target.clone()\n    this.position0 = this.object.position.clone()\n    this.quaternion0 = this.object.quaternion.clone()\n    this.zoom0 = this.object.zoom\n\n    //\n    // internals\n    //\n\n    // so camera.up is the orbit axis\n    this.quat = new Quaternion().setFromUnitVectors(this.object.up, new Vector3(0, 1, 0))\n    this.quatInverse = this.quat.clone().invert()\n\n    this.lastPosition = new Vector3()\n    this.lastQuaternion = new Quaternion()\n\n    this.domElement.addEventListener('contextmenu', this.onContextMenu, false)\n\n    this.domElement.addEventListener('mousedown', this.onMouseDown, false)\n    this.domElement.addEventListener('wheel', this.onMouseWheel, false)\n\n    this.domElement.addEventListener('touchstart', this.onTouchStart, false)\n    this.domElement.addEventListener('touchend', this.onTouchEnd, false)\n    this.domElement.addEventListener('touchmove', this.onTouchMove, false)\n\n    this.domElement.addEventListener('keydown', this.onKeyDown, false)\n\n    // make sure element can receive keys.\n\n    if (this.domElement.tabIndex === -1) {\n      this.domElement.tabIndex = 0\n    }\n\n    // force an update at start\n\n    this.object.lookAt(this.target)\n    this.update()\n    this.saveState()\n  }\n\n  getPolarAngle = (): number => this.spherical.phi\n\n  getAzimuthalAngle = (): number => this.spherical.theta\n\n  saveState = (): void => {\n    this.target0.copy(this.target)\n    this.position0.copy(this.object.position)\n    this.quaternion0.copy(this.object.quaternion)\n    this.zoom0 = this.object.zoom\n  }\n\n  reset = (): void => {\n    this.target.copy(this.target0)\n    this.object.position.copy(this.position0)\n    this.object.quaternion.copy(this.quaternion0)\n    this.object.zoom = this.zoom0\n\n    this.object.updateProjectionMatrix()\n    // @ts-ignore\n    this.dispatchEvent(this.changeEvent)\n\n    this.update()\n\n    this.state = STATE.NONE\n  }\n\n  dispose = (): void => {\n    this.domElement.removeEventListener('contextmenu', this.onContextMenu, false)\n    this.domElement.removeEventListener('mousedown', this.onMouseDown, false)\n    this.domElement.removeEventListener('wheel', this.onMouseWheel, false)\n\n    this.domElement.removeEventListener('touchstart', this.onTouchStart, false)\n    this.domElement.removeEventListener('touchend', this.onTouchEnd, false)\n    this.domElement.removeEventListener('touchmove', this.onTouchMove, false)\n\n    document.removeEventListener('mousemove', this.onMouseMove, false)\n    document.removeEventListener('mouseup', this.onMouseUp, false)\n\n    this.domElement.removeEventListener('keydown', this.onKeyDown, false)\n\n    //this.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n  }\n\n  private update = (): boolean => {\n    const position = this.object.position\n\n    this.offset.copy(position).sub(this.target)\n\n    if (this.trackball) {\n      // rotate around screen-space y-axis\n\n      if (this.sphericalDelta.theta) {\n        this.vec.set(0, 1, 0).applyQuaternion(this.object.quaternion)\n\n        const factor = this.enableDamping ? this.dampingFactor : 1\n\n        this.q.setFromAxisAngle(this.vec, this.sphericalDelta.theta * factor)\n\n        this.object.quaternion.premultiply(this.q)\n        this.offset.applyQuaternion(this.q)\n      }\n\n      // rotate around screen-space x-axis\n\n      if (this.sphericalDelta.phi) {\n        this.vec.set(1, 0, 0).applyQuaternion(this.object.quaternion)\n\n        const factor = this.enableDamping ? this.dampingFactor : 1\n\n        this.q.setFromAxisAngle(this.vec, this.sphericalDelta.phi * factor)\n\n        this.object.quaternion.premultiply(this.q)\n        this.offset.applyQuaternion(this.q)\n      }\n\n      this.offset.multiplyScalar(this.scale)\n      this.offset.clampLength(this.minDistance, this.maxDistance)\n    } else {\n      // rotate offset to \"y-axis-is-up\" space\n      this.offset.applyQuaternion(this.quat)\n\n      if (this.autoRotate && this.state === STATE.NONE) {\n        this.rotateLeft(this.getAutoRotationAngle())\n      }\n\n      this.spherical.setFromVector3(this.offset)\n\n      if (this.enableDamping) {\n        this.spherical.theta += this.sphericalDelta.theta * this.dampingFactor\n        this.spherical.phi += this.sphericalDelta.phi * this.dampingFactor\n      } else {\n        this.spherical.theta += this.sphericalDelta.theta\n        this.spherical.phi += this.sphericalDelta.phi\n      }\n\n      // restrict theta to be between desired limits\n      this.spherical.theta = Math.max(this.minAzimuthAngle, Math.min(this.maxAzimuthAngle, this.spherical.theta))\n\n      // restrict phi to be between desired limits\n      this.spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, this.spherical.phi))\n\n      this.spherical.makeSafe()\n\n      this.spherical.radius *= this.scale\n\n      // restrict radius to be between desired limits\n      this.spherical.radius = Math.max(this.minDistance, Math.min(this.maxDistance, this.spherical.radius))\n\n      this.offset.setFromSpherical(this.spherical)\n\n      // rotate offset back to \"camera-up-vector-is-up\" space\n      this.offset.applyQuaternion(this.quatInverse)\n    }\n\n    // move target to panned location\n\n    if (this.enableDamping === true) {\n      this.target.addScaledVector(this.panOffset, this.dampingFactor)\n    } else {\n      this.target.add(this.panOffset)\n    }\n\n    position.copy(this.target).add(this.offset)\n\n    if (this.trackball === false) {\n      this.object.lookAt(this.target)\n    }\n\n    if (this.enableDamping === true) {\n      this.sphericalDelta.theta *= 1 - this.dampingFactor\n      this.sphericalDelta.phi *= 1 - this.dampingFactor\n\n      this.panOffset.multiplyScalar(1 - this.dampingFactor)\n    } else {\n      this.sphericalDelta.set(0, 0, 0)\n\n      this.panOffset.set(0, 0, 0)\n    }\n\n    this.scale = 1\n\n    // update condition is:\n    // min(camera displacement, camera rotation in radians)^2 > EPS\n    // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n    if (\n      this.zoomChanged ||\n      this.lastPosition.distanceToSquared(this.object.position) > this.EPS ||\n      8 * (1 - this.lastQuaternion.dot(this.object.quaternion)) > this.EPS\n    ) {\n      // @ts-ignore\n      this.dispatchEvent(this.changeEvent)\n\n      this.lastPosition.copy(this.object.position)\n      this.lastQuaternion.copy(this.object.quaternion)\n      this.zoomChanged = false\n\n      return true\n    }\n\n    return false\n  }\n\n  private getAutoRotationAngle = (): number => ((2 * Math.PI) / 60 / 60) * this.autoRotateSpeed\n\n  private getZoomScale = (): number => Math.pow(0.95, this.zoomSpeed)\n\n  private rotateLeft = (angle: number): void => {\n    this.sphericalDelta.theta -= angle\n  }\n\n  private rotateUp = (angle: number): void => {\n    this.sphericalDelta.phi -= angle\n  }\n\n  private panLeft = (distance: number, objectMatrix: Matrix4): void => {\n    this.v.setFromMatrixColumn(objectMatrix, 0) // get X column of objectMatrix\n    this.v.multiplyScalar(-distance)\n\n    this.panOffset.add(this.v)\n  }\n\n  private panUp = (distance: number, objectMatrix: Matrix4): void => {\n    if (this.screenSpacePanning === true) {\n      this.v.setFromMatrixColumn(objectMatrix, 1)\n    } else {\n      this.v.setFromMatrixColumn(objectMatrix, 0)\n      this.v.crossVectors(this.object.up, this.v)\n    }\n\n    this.v.multiplyScalar(distance)\n\n    this.panOffset.add(this.v)\n  }\n\n  // deltaX and deltaY are in pixels; right and down are positive\n  private pan = (deltaX: number, deltaY: number): void => {\n    const element = this.domElement\n\n    if (this.object instanceof PerspectiveCamera) {\n      // perspective\n      const position = this.object.position\n      this.offset.copy(position).sub(this.target)\n      let targetDistance = this.offset.length()\n\n      // half of the fov is center to top of screen\n      targetDistance *= Math.tan(((this.object.fov / 2) * Math.PI) / 180.0)\n\n      // we use only clientHeight here so aspect ratio does not distort speed\n      this.panLeft((2 * deltaX * targetDistance) / element.clientHeight, this.object.matrix)\n      this.panUp((2 * deltaY * targetDistance) / element.clientHeight, this.object.matrix)\n    } else if (this.object.isOrthographicCamera) {\n      // orthographic\n      this.panLeft(\n        (deltaX * (this.object.right - this.object.left)) / this.object.zoom / element.clientWidth,\n        this.object.matrix,\n      )\n      this.panUp(\n        (deltaY * (this.object.top - this.object.bottom)) / this.object.zoom / element.clientHeight,\n        this.object.matrix,\n      )\n    } else {\n      // camera neither orthographic nor perspective\n      console.warn('WARNING: CameraControls.js encountered an unknown camera type - pan disabled.')\n      this.enablePan = false\n    }\n  }\n\n  private dollyIn = (dollyScale: number): void => {\n    // TODO: replace w/.isPerspectiveCamera ?\n    if (this.object instanceof PerspectiveCamera) {\n      this.scale /= dollyScale\n      // TODO: replace w/.isOrthographicCamera ?\n    } else if (this.object instanceof OrthographicCamera) {\n      this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom * dollyScale))\n      this.object.updateProjectionMatrix()\n      this.zoomChanged = true\n    } else {\n      console.warn('WARNING: CameraControls.js encountered an unknown camera type - dolly/zoom disabled.')\n      this.enableZoom = false\n    }\n  }\n\n  private dollyOut = (dollyScale: number): void => {\n    // TODO: replace w/.isPerspectiveCamera ?\n    if (this.object instanceof PerspectiveCamera) {\n      this.scale *= dollyScale\n      // TODO: replace w/.isOrthographicCamera ?\n    } else if (this.object instanceof OrthographicCamera) {\n      this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / dollyScale))\n      this.object.updateProjectionMatrix()\n      this.zoomChanged = true\n    } else {\n      console.warn('WARNING: CameraControls.js encountered an unknown camera type - dolly/zoom disabled.')\n      this.enableZoom = false\n    }\n  }\n\n  // event callbacks - update the object state\n\n  private handleMouseDownRotate = (event: MouseEvent): void => {\n    this.rotateStart.set(event.clientX, event.clientY)\n  }\n\n  // TODO: confirm if worthwhile to return the Vector2 instead of void\n  private handleMouseDownDolly = (event: MouseEvent): void => {\n    this.dollyStart.set(event.clientX, event.clientY)\n  }\n\n  private handleMouseDownPan = (event: MouseEvent): void => {\n    this.panStart.set(event.clientX, event.clientY)\n  }\n\n  private handleMouseMoveRotate = (event: MouseEvent): void => {\n    this.rotateEnd.set(event.clientX, event.clientY)\n\n    this.rotateDelta.subVectors(this.rotateEnd, this.rotateStart).multiplyScalar(this.rotateSpeed)\n\n    const element = this.domElement\n\n    this.rotateLeft((2 * Math.PI * this.rotateDelta.x) / element.clientHeight) // yes, height\n\n    this.rotateUp((2 * Math.PI * this.rotateDelta.y) / element.clientHeight)\n\n    this.rotateStart.copy(this.rotateEnd)\n\n    this.update()\n  }\n\n  private handleMouseMoveDolly = (event: MouseEvent): void => {\n    this.dollyEnd.set(event.clientX, event.clientY)\n\n    this.dollyDelta.subVectors(this.dollyEnd, this.dollyStart)\n\n    if (this.dollyDelta.y > 0) {\n      this.dollyIn(this.getZoomScale())\n    } else if (this.dollyDelta.y < 0) {\n      this.dollyOut(this.getZoomScale())\n    }\n\n    this.dollyStart.copy(this.dollyEnd)\n\n    this.update()\n  }\n\n  private handleMouseMovePan = (event: MouseEvent): void => {\n    this.panEnd.set(event.clientX, event.clientY)\n\n    this.panDelta.subVectors(this.panEnd, this.panStart).multiplyScalar(this.panSpeed)\n\n    this.pan(this.panDelta.x, this.panDelta.y)\n\n    this.panStart.copy(this.panEnd)\n\n    this.update()\n  }\n\n  private handleMouseUp(/*event*/): void {\n    // no-op\n  }\n\n  private handleMouseWheel = (event: WheelEvent): void => {\n    if (event.deltaY < 0) {\n      this.dollyOut(this.getZoomScale())\n    } else if (event.deltaY > 0) {\n      this.dollyIn(this.getZoomScale())\n    }\n\n    this.update()\n  }\n\n  private handleKeyDown = (event: KeyboardEvent): void => {\n    let needsUpdate = false\n\n    switch (event.code) {\n      case this.keys.UP:\n        this.pan(0, this.keyPanSpeed)\n        needsUpdate = true\n        break\n\n      case this.keys.BOTTOM:\n        this.pan(0, -this.keyPanSpeed)\n        needsUpdate = true\n        break\n\n      case this.keys.LEFT:\n        this.pan(this.keyPanSpeed, 0)\n        needsUpdate = true\n        break\n\n      case this.keys.RIGHT:\n        this.pan(-this.keyPanSpeed, 0)\n        needsUpdate = true\n        break\n    }\n\n    if (needsUpdate) {\n      // prevent the browser from scrolling on cursor keys\n      event.preventDefault()\n\n      this.update()\n    }\n  }\n\n  private handleTouchStartRotate = (event: TouchEvent): void => {\n    if (event.touches.length == 1) {\n      this.rotateStart.set(event.touches[0].pageX, event.touches[0].pageY)\n    } else {\n      const x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX)\n      const y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY)\n\n      this.rotateStart.set(x, y)\n    }\n  }\n\n  private handleTouchStartPan = (event: TouchEvent): void => {\n    if (event.touches.length == 1) {\n      this.panStart.set(event.touches[0].pageX, event.touches[0].pageY)\n    } else {\n      const x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX)\n      const y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY)\n\n      this.panStart.set(x, y)\n    }\n  }\n\n  private handleTouchStartDolly = (event: TouchEvent): void => {\n    const dx = event.touches[0].pageX - event.touches[1].pageX\n    const dy = event.touches[0].pageY - event.touches[1].pageY\n\n    const distance = Math.sqrt(dx * dx + dy * dy)\n\n    this.dollyStart.set(0, distance)\n  }\n\n  private handleTouchStartDollyPan = (event: TouchEvent): void => {\n    if (this.enableZoom) this.handleTouchStartDolly(event)\n\n    if (this.enablePan) this.handleTouchStartPan(event)\n  }\n\n  private handleTouchStartDollyRotate = (event: TouchEvent): void => {\n    if (this.enableZoom) this.handleTouchStartDolly(event)\n\n    if (this.enableRotate) this.handleTouchStartRotate(event)\n  }\n\n  private handleTouchMoveRotate = (event: TouchEvent): void => {\n    if (event.touches.length == 1) {\n      this.rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY)\n    } else {\n      const x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX)\n      const y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY)\n\n      this.rotateEnd.set(x, y)\n    }\n\n    this.rotateDelta.subVectors(this.rotateEnd, this.rotateStart).multiplyScalar(this.rotateSpeed)\n\n    const element = this.domElement\n\n    this.rotateLeft((2 * Math.PI * this.rotateDelta.x) / element.clientHeight) // yes, height\n\n    this.rotateUp((2 * Math.PI * this.rotateDelta.y) / element.clientHeight)\n\n    this.rotateStart.copy(this.rotateEnd)\n  }\n\n  private handleTouchMovePan = (event: TouchEvent): void => {\n    if (event.touches.length == 1) {\n      this.panEnd.set(event.touches[0].pageX, event.touches[0].pageY)\n    } else {\n      const x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX)\n      const y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY)\n\n      this.panEnd.set(x, y)\n    }\n\n    this.panDelta.subVectors(this.panEnd, this.panStart).multiplyScalar(this.panSpeed)\n\n    this.pan(this.panDelta.x, this.panDelta.y)\n\n    this.panStart.copy(this.panEnd)\n  }\n\n  private handleTouchMoveDolly = (event: TouchEvent): void => {\n    const dx = event.touches[0].pageX - event.touches[1].pageX\n    const dy = event.touches[0].pageY - event.touches[1].pageY\n\n    const distance = Math.sqrt(dx * dx + dy * dy)\n\n    this.dollyEnd.set(0, distance)\n\n    this.dollyDelta.set(0, Math.pow(this.dollyEnd.y / this.dollyStart.y, this.zoomSpeed))\n\n    this.dollyIn(this.dollyDelta.y)\n\n    this.dollyStart.copy(this.dollyEnd)\n  }\n\n  private handleTouchMoveDollyPan = (event: TouchEvent): void => {\n    if (this.enableZoom) this.handleTouchMoveDolly(event)\n\n    if (this.enablePan) this.handleTouchMovePan(event)\n  }\n\n  private handleTouchMoveDollyRotate = (event: TouchEvent): void => {\n    if (this.enableZoom) this.handleTouchMoveDolly(event)\n\n    if (this.enableRotate) this.handleTouchMoveRotate(event)\n  }\n\n  private handleTouchEnd(/*event*/): void {\n    // no-op\n  }\n\n  //\n  // event handlers - FSM: listen for events and reset state\n  //\n\n  private onMouseDown = (event: MouseEvent): void => {\n    if (this.enabled === false) return\n\n    // Prevent the browser from scrolling.\n\n    event.preventDefault()\n\n    // Manually set the focus since calling preventDefault above\n    // prevents the browser from setting it automatically.\n\n    this.domElement.focus ? this.domElement.focus() : window.focus()\n\n    let mouseAction\n\n    switch (event.button) {\n      case 0:\n        mouseAction = this.mouseButtons.LEFT\n        break\n\n      case 1:\n        mouseAction = this.mouseButtons.MIDDLE\n        break\n\n      case 2:\n        mouseAction = this.mouseButtons.RIGHT\n        break\n\n      default:\n        mouseAction = -1\n    }\n\n    switch (mouseAction) {\n      case MOUSE.DOLLY:\n        if (this.enableZoom === false) return\n\n        this.handleMouseDownDolly(event)\n\n        this.state = STATE.DOLLY\n\n        break\n\n      case MOUSE.ROTATE:\n        if (event.ctrlKey || event.metaKey || event.shiftKey) {\n          if (this.enablePan === false) return\n\n          this.handleMouseDownPan(event)\n\n          this.state = STATE.PAN\n        } else {\n          if (this.enableRotate === false) return\n\n          this.handleMouseDownRotate(event)\n\n          this.state = STATE.ROTATE\n        }\n\n        break\n\n      case MOUSE.PAN:\n        if (event.ctrlKey || event.metaKey || event.shiftKey) {\n          if (this.enableRotate === false) return\n\n          this.handleMouseDownRotate(event)\n\n          this.state = STATE.ROTATE\n        } else {\n          if (this.enablePan === false) return\n\n          this.handleMouseDownPan(event)\n\n          this.state = STATE.PAN\n        }\n\n        break\n\n      default:\n        this.state = STATE.NONE\n    }\n\n    if (this.state !== STATE.NONE) {\n      document.addEventListener('mousemove', this.onMouseMove, false)\n      document.addEventListener('mouseup', this.onMouseUp, false)\n\n      // @ts-ignore\n      this.dispatchEvent(this.startEvent)\n    }\n  }\n\n  private onMouseMove = (event: MouseEvent): void => {\n    if (this.enabled === false) return\n\n    event.preventDefault()\n\n    switch (this.state) {\n      case STATE.ROTATE:\n        if (this.enableRotate === false) return\n\n        this.handleMouseMoveRotate(event)\n\n        break\n\n      case STATE.DOLLY:\n        if (this.enableZoom === false) return\n\n        this.handleMouseMoveDolly(event)\n\n        break\n\n      case STATE.PAN:\n        if (this.enablePan === false) return\n\n        this.handleMouseMovePan(event)\n\n        break\n    }\n  }\n\n  private onMouseUp = (): void => {\n    if (this.enabled === false) return\n\n    // this.handleMouseUp()\n\n    document.removeEventListener('mousemove', this.onMouseMove, false)\n    document.removeEventListener('mouseup', this.onMouseUp, false)\n\n    // @ts-ignore\n    this.dispatchEvent(this.endEvent)\n\n    this.state = STATE.NONE\n  }\n\n  private onMouseWheel = (event: WheelEvent): void => {\n    if (\n      this.enabled === false ||\n      this.enableZoom === false ||\n      (this.state !== STATE.NONE && this.state !== STATE.ROTATE)\n    ) {\n      return\n    }\n\n    event.preventDefault()\n\n    // @ts-ignore\n    this.dispatchEvent(this.startEvent)\n\n    this.handleMouseWheel(event)\n\n    // @ts-ignore\n    this.dispatchEvent(this.endEvent)\n  }\n\n  private onKeyDown = (event: KeyboardEvent): void => {\n    if (this.enabled === false || this.enableKeys === false || this.enablePan === false) return\n\n    this.handleKeyDown(event)\n  }\n\n  private onTouchStart = (event: TouchEvent): void => {\n    if (this.enabled === false) return\n\n    event.preventDefault()\n\n    switch (event.touches.length) {\n      case 1:\n        switch (this.touches.ONE) {\n          case TOUCH.ROTATE:\n            if (this.enableRotate === false) return\n\n            this.handleTouchStartRotate(event)\n\n            this.state = STATE.TOUCH_ROTATE\n\n            break\n\n          case TOUCH.PAN:\n            if (this.enablePan === false) return\n\n            this.handleTouchStartPan(event)\n\n            this.state = STATE.TOUCH_PAN\n\n            break\n\n          default:\n            this.state = STATE.NONE\n        }\n\n        break\n\n      case 2:\n        switch (this.touches.TWO) {\n          case TOUCH.DOLLY_PAN:\n            if (this.enableZoom === false && this.enablePan === false) return\n\n            this.handleTouchStartDollyPan(event)\n\n            this.state = STATE.TOUCH_DOLLY_PAN\n\n            break\n\n          case TOUCH.DOLLY_ROTATE:\n            if (this.enableZoom === false && this.enableRotate === false) return\n\n            this.handleTouchStartDollyRotate(event)\n\n            this.state = STATE.TOUCH_DOLLY_ROTATE\n\n            break\n\n          default:\n            this.state = STATE.NONE\n        }\n\n        break\n\n      default:\n        this.state = STATE.NONE\n    }\n\n    if (this.state !== STATE.NONE) {\n      // @ts-ignore\n      this.dispatchEvent(this.startEvent)\n    }\n  }\n\n  private onTouchMove = (event: TouchEvent): void => {\n    if (this.enabled === false) return\n\n    event.preventDefault()\n\n    switch (this.state) {\n      case STATE.TOUCH_ROTATE:\n        if (this.enableRotate === false) return\n\n        this.handleTouchMoveRotate(event)\n\n        this.update()\n\n        break\n\n      case STATE.TOUCH_PAN:\n        if (this.enablePan === false) return\n\n        this.handleTouchMovePan(event)\n\n        this.update()\n\n        break\n\n      case STATE.TOUCH_DOLLY_PAN:\n        if (this.enableZoom === false && this.enablePan === false) return\n\n        this.handleTouchMoveDollyPan(event)\n\n        this.update()\n\n        break\n\n      case STATE.TOUCH_DOLLY_ROTATE:\n        if (this.enableZoom === false && this.enableRotate === false) return\n\n        this.handleTouchMoveDollyRotate(event)\n\n        this.update()\n\n        break\n\n      default:\n        this.state = STATE.NONE\n    }\n  }\n\n  private onTouchEnd = (): void => {\n    if (this.enabled === false) return\n\n    // this.handleTouchEnd()\n\n    // @ts-ignore\n    this.dispatchEvent(this.endEvent)\n\n    this.state = STATE.NONE\n  }\n\n  private onContextMenu = (event: Event): void => {\n    if (this.enabled === false) return\n\n    event.preventDefault()\n  }\n}\n\n/**\n * OrbitControls maintains the \"up\" direction, camera.up (+Y by default).\n *\n * @event Orbit - left mouse / touch: one-finger move\n * @event Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n * @event Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n */\nclass OrbitControlsExp extends CameraControls {\n  mouseButtons: {\n    LEFT: MOUSE\n    RIGHT: MOUSE\n  }\n  touches: {\n    ONE: TOUCH\n    TWO: TOUCH\n  }\n\n  constructor(object: PerspectiveCamera | OrthographicCamera, domElement: HTMLElement) {\n    super(object, domElement)\n\n    this.mouseButtons = {\n      LEFT: MOUSE.ROTATE,\n      RIGHT: MOUSE.PAN,\n    }\n    this.touches = {\n      ONE: TOUCH.ROTATE,\n      TWO: TOUCH.DOLLY_PAN,\n    }\n  }\n}\n\n/**\n * MapControls maintains the \"up\" direction, camera.up (+Y by default)\n *\n * @event Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n * @event Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n * @event Pan - left mouse, or left right + ctrl/meta/shiftKey, or arrow keys / touch: one-finger move\n */\nclass MapControlsExp extends CameraControls {\n  mouseButtons: {\n    LEFT: MOUSE\n    RIGHT: MOUSE\n  }\n  touches: {\n    ONE: TOUCH\n    TWO: TOUCH\n  }\n\n  constructor(object: PerspectiveCamera | OrthographicCamera, domElement: HTMLElement) {\n    super(object, domElement)\n\n    this.mouseButtons = {\n      LEFT: MOUSE.PAN,\n      RIGHT: MOUSE.ROTATE,\n    }\n    this.touches = {\n      ONE: TOUCH.PAN,\n      TWO: TOUCH.DOLLY_ROTATE,\n    }\n  }\n}\n\n/**\n * TrackballControls allows the camera to rotate over the polls and does not maintain camera.up\n *\n * @event Orbit - left mouse / touch: one-finger move\n * @event Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n * @event Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n */\nclass TrackballControlsExp extends CameraControls {\n  trackball: boolean\n  screenSpacePanning: boolean\n  autoRotate: boolean\n  mouseButtons: {\n    LEFT: MOUSE\n    RIGHT: MOUSE\n  }\n  touches: {\n    ONE: TOUCH\n    TWO: TOUCH\n  }\n\n  constructor(object: PerspectiveCamera | OrthographicCamera, domElement: HTMLElement) {\n    super(object, domElement)\n\n    this.trackball = true\n    this.screenSpacePanning = true\n    this.autoRotate = false\n\n    this.mouseButtons = {\n      LEFT: MOUSE.ROTATE,\n      RIGHT: MOUSE.PAN,\n    }\n\n    this.touches = {\n      ONE: TOUCH.ROTATE,\n      TWO: TOUCH.DOLLY_PAN,\n    }\n  }\n}\n\nexport { CameraControls, OrbitControlsExp, MapControlsExp, TrackballControlsExp }\n"]},"metadata":{},"sourceType":"module"}