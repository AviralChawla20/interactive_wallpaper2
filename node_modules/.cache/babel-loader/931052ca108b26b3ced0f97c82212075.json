{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { UniformsUtils, ShaderMaterial, LuminanceFormat, MathUtils, DataTexture, RedFormat, FloatType } from \"three\";\nimport { DigitalGlitch } from \"../shaders/DigitalGlitch.js\";\nclass GlitchPass extends Pass {\n  constructor(dt_size = 64) {\n    super();\n    __publicField(this, \"material\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"goWild\");\n    __publicField(this, \"curF\");\n    __publicField(this, \"randX\");\n    __publicField(this, \"uniforms\");\n    this.uniforms = UniformsUtils.clone(DigitalGlitch.uniforms);\n    this.uniforms[\"tDisp\"].value = this.generateHeightmap(dt_size);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: DigitalGlitch.vertexShader,\n      fragmentShader: DigitalGlitch.fragmentShader\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n    this.goWild = false;\n    this.curF = 0;\n    this.generateTrigger();\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    if (renderer.capabilities.isWebGL2 === false) this.uniforms[\"tDisp\"].value.format = LuminanceFormat;\n    this.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.uniforms[\"seed\"].value = Math.random();\n    this.uniforms[\"byp\"].value = 0;\n    if (this.curF % this.randX == 0 || this.goWild == true) {\n      this.uniforms[\"amount\"].value = Math.random() / 30;\n      this.uniforms[\"angle\"].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms[\"seed_x\"].value = MathUtils.randFloat(-1, 1);\n      this.uniforms[\"seed_y\"].value = MathUtils.randFloat(-1, 1);\n      this.uniforms[\"distortion_x\"].value = MathUtils.randFloat(0, 1);\n      this.uniforms[\"distortion_y\"].value = MathUtils.randFloat(0, 1);\n      this.curF = 0;\n      this.generateTrigger();\n    } else if (this.curF % this.randX < this.randX / 5) {\n      this.uniforms[\"amount\"].value = Math.random() / 90;\n      this.uniforms[\"angle\"].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms[\"distortion_x\"].value = MathUtils.randFloat(0, 1);\n      this.uniforms[\"distortion_y\"].value = MathUtils.randFloat(0, 1);\n      this.uniforms[\"seed_x\"].value = MathUtils.randFloat(-0.3, 0.3);\n      this.uniforms[\"seed_y\"].value = MathUtils.randFloat(-0.3, 0.3);\n    } else if (this.goWild == false) {\n      this.uniforms[\"byp\"].value = 1;\n    }\n    this.curF++;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n  generateTrigger() {\n    this.randX = MathUtils.randInt(120, 240);\n  }\n  generateHeightmap(dt_size) {\n    const data_arr = new Float32Array(dt_size * dt_size);\n    const length = dt_size * dt_size;\n    for (let i = 0; i < length; i++) {\n      const val = MathUtils.randFloat(0, 1);\n      data_arr[i] = val;\n    }\n    const texture = new DataTexture(data_arr, dt_size, dt_size, RedFormat, FloatType);\n    texture.needsUpdate = true;\n    return texture;\n  }\n}\nexport { GlitchPass };","map":{"version":3,"sources":["../../src/postprocessing/GlitchPass.ts"],"names":[],"mappings":"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","sourcesContent":["import { Pass, FullScreenQuad } from './Pass'\nimport {\n  DataTexture,\n  FloatType,\n  MathUtils,\n  RedFormat,\n  LuminanceFormat,\n  ShaderMaterial,\n  UniformsUtils,\n  WebGLRenderTarget,\n  WebGLRenderer,\n  IUniform,\n} from 'three'\nimport { DigitalGlitch } from '../shaders/DigitalGlitch'\n\nclass GlitchPass extends Pass {\n  public material: ShaderMaterial\n  public fsQuad: FullScreenQuad\n  public goWild: boolean\n  public curF: number\n  public randX!: number\n\n  public uniforms: Record<keyof typeof DigitalGlitch['uniforms'], IUniform<any>>\n\n  constructor(dt_size = 64) {\n    super()\n    this.uniforms = UniformsUtils.clone(DigitalGlitch.uniforms)\n    this.uniforms['tDisp'].value = this.generateHeightmap(dt_size)\n\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: DigitalGlitch.vertexShader,\n      fragmentShader: DigitalGlitch.fragmentShader,\n    })\n\n    this.fsQuad = new FullScreenQuad(this.material)\n    this.goWild = false\n    this.curF = 0\n    this.generateTrigger()\n  }\n\n  public render(\n    renderer: WebGLRenderer,\n    writeBuffer: WebGLRenderTarget,\n    readBuffer: WebGLRenderTarget,\n    /*, deltaTime, maskActive */\n  ): void {\n    if (renderer.capabilities.isWebGL2 === false) this.uniforms['tDisp'].value.format = LuminanceFormat\n\n    this.uniforms['tDiffuse'].value = readBuffer.texture\n    this.uniforms['seed'].value = Math.random() //default seeding\n    this.uniforms['byp'].value = 0\n\n    if (this.curF % this.randX == 0 || this.goWild == true) {\n      this.uniforms['amount'].value = Math.random() / 30\n      this.uniforms['angle'].value = MathUtils.randFloat(-Math.PI, Math.PI)\n      this.uniforms['seed_x'].value = MathUtils.randFloat(-1, 1)\n      this.uniforms['seed_y'].value = MathUtils.randFloat(-1, 1)\n      this.uniforms['distortion_x'].value = MathUtils.randFloat(0, 1)\n      this.uniforms['distortion_y'].value = MathUtils.randFloat(0, 1)\n      this.curF = 0\n      this.generateTrigger()\n    } else if (this.curF % this.randX < this.randX / 5) {\n      this.uniforms['amount'].value = Math.random() / 90\n      this.uniforms['angle'].value = MathUtils.randFloat(-Math.PI, Math.PI)\n      this.uniforms['distortion_x'].value = MathUtils.randFloat(0, 1)\n      this.uniforms['distortion_y'].value = MathUtils.randFloat(0, 1)\n      this.uniforms['seed_x'].value = MathUtils.randFloat(-0.3, 0.3)\n      this.uniforms['seed_y'].value = MathUtils.randFloat(-0.3, 0.3)\n    } else if (this.goWild == false) {\n      this.uniforms['byp'].value = 1\n    }\n\n    this.curF++\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null)\n      this.fsQuad.render(renderer)\n    } else {\n      renderer.setRenderTarget(writeBuffer)\n      if (this.clear) renderer.clear()\n      this.fsQuad.render(renderer)\n    }\n  }\n\n  generateTrigger(): void {\n    this.randX = MathUtils.randInt(120, 240)\n  }\n\n  generateHeightmap(dt_size: number): DataTexture {\n    const data_arr = new Float32Array(dt_size * dt_size)\n    const length = dt_size * dt_size\n\n    for (let i = 0; i < length; i++) {\n      const val = MathUtils.randFloat(0, 1)\n      data_arr[i] = val\n    }\n\n    const texture = new DataTexture(data_arr, dt_size, dt_size, RedFormat, FloatType)\n    texture.needsUpdate = true\n    return texture\n  }\n}\n\nexport { GlitchPass }\n"]},"metadata":{},"sourceType":"module"}