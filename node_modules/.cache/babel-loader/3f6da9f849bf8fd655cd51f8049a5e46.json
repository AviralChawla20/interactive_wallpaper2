{"ast":null,"code":"import { Vector3 } from \"three\";\nconst ColorCorrectionShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    powRGB: {\n      value: new Vector3(2, 2, 2)\n    },\n    mulRGB: {\n      value: new Vector3(1, 1, 1)\n    },\n    addRGB: {\n      value: new Vector3(0, 0, 0)\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform vec3 powRGB;\", \"uniform vec3 mulRGB;\", \"uniform vec3 addRGB;\", \"varying vec2 vUv;\", \"void main() {\", \"\tgl_FragColor = texture2D( tDiffuse, vUv );\", \"\tgl_FragColor.rgb = mulRGB * pow( ( gl_FragColor.rgb + addRGB ), powRGB );\", \"}\"].join(\"\\n\")\n};\nexport { ColorCorrectionShader };","map":{"version":3,"sources":["../../src/shaders/ColorCorrectionShader.ts"],"names":[],"mappings":";AAMO,MAAM,qBAAA,GAAwB;EACnC,QAAA,EAAU;IACR,QAAA,EAAU;MAAE,KAAA,EAAO;IAAK,CAAA;IACxB,MAAA,EAAQ;MAAE,KAAA,EAAO,IAAI,OAAA,CAAQ,CAAA,EAAG,CAAA,EAAG,CAAC;IAAE,CAAA;IACtC,MAAA,EAAQ;MAAE,KAAA,EAAO,IAAI,OAAA,CAAQ,CAAA,EAAG,CAAA,EAAG,CAAC;IAAE,CAAA;IACtC,MAAA,EAAQ;MAAE,KAAA,EAAO,IAAI,OAAA,CAAQ,CAAA,EAAG,CAAA,EAAG,CAAC;IAAE;EACxC,CAAA;EAEA,YAAA,EAAc,CACZ,mBAAA,EAEA,eAAA,EAEA,YAAA,EAEA,4EAAA,EAEA,GAAA,CAAA,CACA,IAAA,CAAK,IAAI,CAAA;EAEX,cAAA,EAAgB,CACd,6BAAA,EACA,sBAAA,EACA,sBAAA,EACA,sBAAA,EAEA,mBAAA,EAEA,eAAA,EAEA,6CAAA,EACA,4EAAA,EAEA,GAAA,CAAA,CACA,IAAA,CAAK,IAAI;AACb,CAAA","sourcesContent":["import { Vector3 } from 'three'\n\n/**\n * Color correction\n */\n\nexport const ColorCorrectionShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    powRGB: { value: new Vector3(2, 2, 2) },\n    mulRGB: { value: new Vector3(1, 1, 1) },\n    addRGB: { value: new Vector3(0, 0, 0) },\n  },\n\n  vertexShader: [\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvUv = uv;',\n\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    'uniform sampler2D tDiffuse;',\n    'uniform vec3 powRGB;',\n    'uniform vec3 mulRGB;',\n    'uniform vec3 addRGB;',\n\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tgl_FragColor = texture2D( tDiffuse, vUv );',\n    '\tgl_FragColor.rgb = mulRGB * pow( ( gl_FragColor.rgb + addRGB ), powRGB );',\n\n    '}',\n  ].join('\\n'),\n}\n"]},"metadata":{},"sourceType":"module"}