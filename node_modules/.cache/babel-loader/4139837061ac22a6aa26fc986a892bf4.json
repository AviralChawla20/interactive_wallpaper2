{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { UniformsUtils, ShaderMaterial } from \"three\";\nimport { DotScreenShader } from \"../shaders/DotScreenShader.js\";\nclass DotScreenPass extends Pass {\n  constructor(center, angle, scale) {\n    super();\n    __publicField(this, \"material\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"uniforms\");\n    if (DotScreenShader === void 0) console.error(\"THREE.DotScreenPass relies on THREE.DotScreenShader\");\n    const shader = DotScreenShader;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    if (center !== void 0) this.uniforms[\"center\"].value.copy(center);\n    if (angle !== void 0) this.uniforms[\"angle\"].value = angle;\n    if (scale !== void 0) this.uniforms[\"scale\"].value = scale;\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    this.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.uniforms[\"tSize\"].value.set(readBuffer.width, readBuffer.height);\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n}\nexport { DotScreenPass };","map":{"version":3,"sources":["../../src/postprocessing/DotScreenPass.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAIA,MAAM,aAAA,SAAsB,IAAA,CAAK;EAM/B,WAAA,CAAY,MAAA,EAAkB,KAAA,EAAgB,KAAA,EAAgB;IACtD,KAAA,CAAA,CAAA;IAND,aAAA,CAAA,IAAA,EAAA,UAAA,CAAA;IACA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;IAEA,aAAA,CAAA,IAAA,EAAA,UAAA,CAAA;IAIL,IAAI,eAAA,KAAoB,KAAA,CAAA,EAAW,OAAA,CAAQ,KAAA,CAAM,qDAAqD,CAAA;IACtG,MAAM,MAAA,GAAS,eAAA;IACf,IAAA,CAAK,QAAA,GAAW,aAAA,CAAc,KAAA,CAAM,MAAA,CAAO,QAAQ,CAAA;IACnD,IAAI,MAAA,KAAW,KAAA,CAAA,EAAW,IAAA,CAAK,QAAA,CAAS,QAAQ,CAAA,CAAE,KAAA,CAAM,IAAA,CAAK,MAAM,CAAA;IACnE,IAAI,KAAA,KAAU,KAAA,CAAA,EAAgB,IAAA,CAAA,QAAA,CAAS,OAAO,CAAA,CAAE,KAAA,GAAQ,KAAA;IACxD,IAAI,KAAA,KAAU,KAAA,CAAA,EAAgB,IAAA,CAAA,QAAA,CAAS,OAAO,CAAA,CAAE,KAAA,GAAQ,KAAA;IACnD,IAAA,CAAA,QAAA,GAAW,IAAI,cAAA,CAAe;MACjC,QAAA,EAAU,IAAA,CAAK,QAAA;MACf,YAAA,EAAc,MAAA,CAAO,YAAA;MACrB,cAAA,EAAgB,MAAA,CAAO;IAAA,CACxB,CAAA;IACD,IAAA,CAAK,MAAA,GAAS,IAAI,cAAA,CAAe,IAAA,CAAK,QAAQ,CAAA;EAChD;EAEO,MAAA,CACL,QAAA,EACA,WAAA,EACA,UAAA,EAEM;IACN,IAAA,CAAK,QAAA,CAAS,UAAU,CAAA,CAAE,KAAA,GAAQ,UAAA,CAAW,OAAA;IACxC,IAAA,CAAA,QAAA,CAAS,OAAO,CAAA,CAAE,KAAA,CAAM,GAAA,CAAI,UAAA,CAAW,KAAA,EAAO,UAAA,CAAW,MAAM,CAAA;IAEpE,IAAI,IAAA,CAAK,cAAA,EAAgB;MACvB,QAAA,CAAS,eAAA,CAAgB,IAAI,CAAA;MACxB,IAAA,CAAA,MAAA,CAAO,MAAA,CAAO,QAAQ,CAAA;IAAA,CAAA,MACtB;MACL,QAAA,CAAS,eAAA,CAAgB,WAAW,CAAA;MACpC,IAAI,IAAA,CAAK,KAAA,EAAO,QAAA,CAAS,KAAA,CAAM,CAAA;MAC1B,IAAA,CAAA,MAAA,CAAO,MAAA,CAAO,QAAQ,CAAA;IAC7B;EACF;AACF","sourcesContent":["import { Pass, FullScreenQuad } from './Pass'\nimport { IUniform, ShaderMaterial, UniformsUtils, Vector2, WebGLRenderer, WebGLRenderTarget } from 'three'\nimport { DotScreenShader } from '../shaders/DotScreenShader'\n\nclass DotScreenPass extends Pass {\n  public material: ShaderMaterial\n  public fsQuad: FullScreenQuad\n\n  public uniforms: Record<keyof typeof DotScreenShader['uniforms'], IUniform<any>>\n\n  constructor(center?: Vector2, angle?: number, scale?: number) {\n    super()\n    if (DotScreenShader === undefined) console.error('THREE.DotScreenPass relies on THREE.DotScreenShader')\n    const shader = DotScreenShader\n    this.uniforms = UniformsUtils.clone(shader.uniforms)\n    if (center !== undefined) this.uniforms['center'].value.copy(center)\n    if (angle !== undefined) this.uniforms['angle'].value = angle\n    if (scale !== undefined) this.uniforms['scale'].value = scale\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n    })\n    this.fsQuad = new FullScreenQuad(this.material)\n  }\n\n  public render(\n    renderer: WebGLRenderer,\n    writeBuffer: WebGLRenderTarget,\n    readBuffer: WebGLRenderTarget,\n    /*, deltaTime, maskActive */\n  ): void {\n    this.uniforms['tDiffuse'].value = readBuffer.texture\n    this.uniforms['tSize'].value.set(readBuffer.width, readBuffer.height)\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null)\n      this.fsQuad.render(renderer)\n    } else {\n      renderer.setRenderTarget(writeBuffer)\n      if (this.clear) renderer.clear()\n      this.fsQuad.render(renderer)\n    }\n  }\n}\n\nexport { DotScreenPass }\n"]},"metadata":{},"sourceType":"module"}