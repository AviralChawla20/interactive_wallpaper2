{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { UniformsUtils, ShaderMaterial } from \"three\";\nimport { HalftoneShader } from \"../shaders/HalftoneShader.js\";\nclass HalftonePass extends Pass {\n  constructor(width, height, params) {\n    super();\n    __publicField(this, \"material\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"uniforms\");\n    if (HalftoneShader === void 0) {\n      console.error(\"THREE.HalftonePass requires HalftoneShader\");\n    }\n    this.uniforms = UniformsUtils.clone(HalftoneShader.uniforms);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      fragmentShader: HalftoneShader.fragmentShader,\n      vertexShader: HalftoneShader.vertexShader\n    });\n    this.uniforms.width.value = width;\n    this.uniforms.height.value = height;\n    for (const key in params) {\n      if (params.hasOwnProperty(key) && this.uniforms.hasOwnProperty(key)) {\n        this.uniforms[key].value = params[key];\n      }\n    }\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    this.material.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n  setSize(width, height) {\n    this.uniforms.width.value = width;\n    this.uniforms.height.value = height;\n  }\n}\nexport { HalftonePass };","map":{"version":3,"sources":["../../src/postprocessing/HalftonePass.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAqBA,MAAM,YAAA,SAAqB,IAAA,CAAK;EAM9B,WAAA,CAAY,KAAA,EAAe,MAAA,EAAgB,MAAA,EAA4B;IAC/D,KAAA,CAAA,CAAA;IAND,aAAA,CAAA,IAAA,EAAA,UAAA,CAAA;IACA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;IAEA,aAAA,CAAA,IAAA,EAAA,UAAA,CAAA;IAKL,IAAI,cAAA,KAAmB,KAAA,CAAA,EAAW;MAChC,OAAA,CAAQ,KAAA,CAAM,4CAA4C,CAAA;IAC5D;IAEA,IAAA,CAAK,QAAA,GAAW,aAAA,CAAc,KAAA,CAAM,cAAA,CAAe,QAAQ,CAAA;IACtD,IAAA,CAAA,QAAA,GAAW,IAAI,cAAA,CAAe;MACjC,QAAA,EAAU,IAAA,CAAK,QAAA;MACf,cAAA,EAAgB,cAAA,CAAe,cAAA;MAC/B,YAAA,EAAc,cAAA,CAAe;IAAA,CAC9B,CAAA;IAGI,IAAA,CAAA,QAAA,CAAS,KAAA,CAAM,KAAA,GAAQ,KAAA;IACvB,IAAA,CAAA,QAAA,CAAS,MAAA,CAAO,KAAA,GAAQ,MAAA;IAE7B,KAAA,MAAW,GAAA,IAAO,MAAA,EAAQ;MACpB,IAAA,MAAA,CAAO,cAAA,CAAe,GAAG,CAAA,IAAK,IAAA,CAAK,QAAA,CAAS,cAAA,CAAe,GAAG,CAAA,EAAG;QACnE,IAAA,CAAK,QAAA,CAAS,GAAG,CAAA,CAAE,KAAA,GAAQ,MAAA,CAAO,GAA+B,CAAA;MACnE;IACF;IAEA,IAAA,CAAK,MAAA,GAAS,IAAI,cAAA,CAAe,IAAA,CAAK,QAAQ,CAAA;EAChD;EAEO,MAAA,CACL,QAAA,EACA,WAAA,EACA,UAAA,EAEM;IACN,IAAA,CAAK,QAAA,CAAS,QAAA,CAAS,UAAU,CAAA,CAAE,KAAA,GAAQ,UAAA,CAAW,OAAA;IAEtD,IAAI,IAAA,CAAK,cAAA,EAAgB;MACvB,QAAA,CAAS,eAAA,CAAgB,IAAI,CAAA;MACxB,IAAA,CAAA,MAAA,CAAO,MAAA,CAAO,QAAQ,CAAA;IAAA,CAAA,MACtB;MACL,QAAA,CAAS,eAAA,CAAgB,WAAW,CAAA;MACpC,IAAI,IAAA,CAAK,KAAA,EAAO,QAAA,CAAS,KAAA,CAAM,CAAA;MAC1B,IAAA,CAAA,MAAA,CAAO,MAAA,CAAO,QAAQ,CAAA;IAC7B;EACF;EAEO,OAAA,CAAQ,KAAA,EAAe,MAAA,EAAsB;IAC7C,IAAA,CAAA,QAAA,CAAS,KAAA,CAAM,KAAA,GAAQ,KAAA;IACvB,IAAA,CAAA,QAAA,CAAS,MAAA,CAAO,KAAA,GAAQ,MAAA;EAC/B;AACF","sourcesContent":["import { Pass, FullScreenQuad } from './Pass'\nimport { ShaderMaterial, UniformsUtils, WebGLRenderer, WebGLRenderTarget } from 'three'\nimport { HalftoneShader } from '../shaders/HalftoneShader'\n\ntype HalftonePassParams = {\n  shape?: number\n  radius?: number\n  rotateR?: number\n  rotateB?: number\n  rotateG?: number\n  scatter?: number\n  blending?: number\n  blendingMode?: number\n  greyscale?: number\n  disable?: number\n}\n\n/**\n * RGB Halftone pass for three.js effects composer. Requires HalftoneShader.\n */\n\nclass HalftonePass extends Pass {\n  public material: ShaderMaterial\n  public fsQuad: FullScreenQuad\n\n  public uniforms: any\n\n  constructor(width: number, height: number, params: HalftonePassParams) {\n    super()\n\n    if (HalftoneShader === undefined) {\n      console.error('THREE.HalftonePass requires HalftoneShader')\n    }\n\n    this.uniforms = UniformsUtils.clone(HalftoneShader.uniforms)\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      fragmentShader: HalftoneShader.fragmentShader,\n      vertexShader: HalftoneShader.vertexShader,\n    })\n\n    // set params\n    this.uniforms.width.value = width\n    this.uniforms.height.value = height\n\n    for (const key in params) {\n      if (params.hasOwnProperty(key) && this.uniforms.hasOwnProperty(key)) {\n        this.uniforms[key].value = params[key as keyof HalftonePassParams]\n      }\n    }\n\n    this.fsQuad = new FullScreenQuad(this.material)\n  }\n\n  public render(\n    renderer: WebGLRenderer,\n    writeBuffer: WebGLRenderTarget,\n    readBuffer: WebGLRenderTarget,\n    /*, deltaTime, maskActive */\n  ): void {\n    this.material.uniforms['tDiffuse'].value = readBuffer.texture\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null)\n      this.fsQuad.render(renderer)\n    } else {\n      renderer.setRenderTarget(writeBuffer)\n      if (this.clear) renderer.clear()\n      this.fsQuad.render(renderer)\n    }\n  }\n\n  public setSize(width: number, height: number): void {\n    this.uniforms.width.value = width\n    this.uniforms.height.value = height\n  }\n}\n\nexport { HalftonePass }\n"]},"metadata":{},"sourceType":"module"}