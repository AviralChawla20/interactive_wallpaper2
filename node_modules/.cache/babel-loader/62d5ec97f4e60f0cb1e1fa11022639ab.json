{"ast":null,"code":"import { BufferGeometry, Vector3, Matrix4, Float32BufferAttribute } from \"three\";\nclass DecalGeometry extends BufferGeometry {\n  constructor(mesh, position, orientation, size) {\n    super();\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const plane = new Vector3();\n    const projectorMatrix = new Matrix4();\n    projectorMatrix.makeRotationFromEuler(orientation);\n    projectorMatrix.setPosition(position);\n    const projectorMatrixInverse = new Matrix4();\n    projectorMatrixInverse.copy(projectorMatrix).invert();\n    generate();\n    this.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    this.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    function generate() {\n      let i;\n      let decalVertices = [];\n      const vertex = new Vector3();\n      const normal = new Vector3();\n      if (mesh.geometry.isGeometry === true) {\n        console.error(\"THREE.DecalGeometry no longer supports THREE.Geometry. Use BufferGeometry instead.\");\n        return;\n      }\n      const geometry = mesh.geometry;\n      const positionAttribute = geometry.attributes.position;\n      const normalAttribute = geometry.attributes.normal;\n      if (geometry.index !== null) {\n        const index = geometry.index;\n        for (i = 0; i < index.count; i++) {\n          vertex.fromBufferAttribute(positionAttribute, index.getX(i));\n          normal.fromBufferAttribute(normalAttribute, index.getX(i));\n          pushDecalVertex(decalVertices, vertex, normal);\n        }\n      } else {\n        for (i = 0; i < positionAttribute.count; i++) {\n          vertex.fromBufferAttribute(positionAttribute, i);\n          normal.fromBufferAttribute(normalAttribute, i);\n          pushDecalVertex(decalVertices, vertex, normal);\n        }\n      }\n      decalVertices = clipGeometry(decalVertices, plane.set(1, 0, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(-1, 0, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 1, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, -1, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 0, 1));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 0, -1));\n      for (i = 0; i < decalVertices.length; i++) {\n        const decalVertex = decalVertices[i];\n        uvs.push(0.5 + decalVertex.position.x / size.x, 0.5 + decalVertex.position.y / size.y);\n        decalVertex.position.applyMatrix4(projectorMatrix);\n        vertices.push(decalVertex.position.x, decalVertex.position.y, decalVertex.position.z);\n        normals.push(decalVertex.normal.x, decalVertex.normal.y, decalVertex.normal.z);\n      }\n    }\n    function pushDecalVertex(decalVertices, vertex, normal) {\n      vertex.applyMatrix4(mesh.matrixWorld);\n      vertex.applyMatrix4(projectorMatrixInverse);\n      normal.transformDirection(mesh.matrixWorld);\n      decalVertices.push(new DecalVertex(vertex.clone(), normal.clone()));\n    }\n    function clipGeometry(inVertices, plane2) {\n      const outVertices = [];\n      const s = 0.5 * Math.abs(size.dot(plane2));\n      for (let i = 0; i < inVertices.length; i += 3) {\n        let v1Out,\n          v2Out,\n          v3Out,\n          total = 0;\n        let nV1, nV2, nV3, nV4;\n        const d1 = inVertices[i + 0].position.dot(plane2) - s;\n        const d2 = inVertices[i + 1].position.dot(plane2) - s;\n        const d3 = inVertices[i + 2].position.dot(plane2) - s;\n        v1Out = d1 > 0;\n        v2Out = d2 > 0;\n        v3Out = d3 > 0;\n        total = (v1Out ? 1 : 0) + (v2Out ? 1 : 0) + (v3Out ? 1 : 0);\n        switch (total) {\n          case 0:\n            {\n              outVertices.push(inVertices[i]);\n              outVertices.push(inVertices[i + 1]);\n              outVertices.push(inVertices[i + 2]);\n              break;\n            }\n          case 1:\n            {\n              if (v1Out) {\n                nV1 = inVertices[i + 1];\n                nV2 = inVertices[i + 2];\n                nV3 = clip(inVertices[i], nV1, plane2, s);\n                nV4 = clip(inVertices[i], nV2, plane2, s);\n              }\n              if (v2Out) {\n                nV1 = inVertices[i];\n                nV2 = inVertices[i + 2];\n                nV3 = clip(inVertices[i + 1], nV1, plane2, s);\n                nV4 = clip(inVertices[i + 1], nV2, plane2, s);\n                outVertices.push(nV3);\n                outVertices.push(nV2.clone());\n                outVertices.push(nV1.clone());\n                outVertices.push(nV2.clone());\n                outVertices.push(nV3.clone());\n                outVertices.push(nV4);\n                break;\n              }\n              if (v3Out) {\n                nV1 = inVertices[i];\n                nV2 = inVertices[i + 1];\n                nV3 = clip(inVertices[i + 2], nV1, plane2, s);\n                nV4 = clip(inVertices[i + 2], nV2, plane2, s);\n              }\n              outVertices.push(nV1.clone());\n              outVertices.push(nV2.clone());\n              outVertices.push(nV3);\n              outVertices.push(nV4);\n              outVertices.push(nV3.clone());\n              outVertices.push(nV2.clone());\n              break;\n            }\n          case 2:\n            {\n              if (!v1Out) {\n                nV1 = inVertices[i].clone();\n                nV2 = clip(nV1, inVertices[i + 1], plane2, s);\n                nV3 = clip(nV1, inVertices[i + 2], plane2, s);\n                outVertices.push(nV1);\n                outVertices.push(nV2);\n                outVertices.push(nV3);\n              }\n              if (!v2Out) {\n                nV1 = inVertices[i + 1].clone();\n                nV2 = clip(nV1, inVertices[i + 2], plane2, s);\n                nV3 = clip(nV1, inVertices[i], plane2, s);\n                outVertices.push(nV1);\n                outVertices.push(nV2);\n                outVertices.push(nV3);\n              }\n              if (!v3Out) {\n                nV1 = inVertices[i + 2].clone();\n                nV2 = clip(nV1, inVertices[i], plane2, s);\n                nV3 = clip(nV1, inVertices[i + 1], plane2, s);\n                outVertices.push(nV1);\n                outVertices.push(nV2);\n                outVertices.push(nV3);\n              }\n              break;\n            }\n        }\n      }\n      return outVertices;\n    }\n    function clip(v0, v1, p, s) {\n      const d0 = v0.position.dot(p) - s;\n      const d1 = v1.position.dot(p) - s;\n      const s0 = d0 / (d0 - d1);\n      const v = new DecalVertex(new Vector3(v0.position.x + s0 * (v1.position.x - v0.position.x), v0.position.y + s0 * (v1.position.y - v0.position.y), v0.position.z + s0 * (v1.position.z - v0.position.z)), new Vector3(v0.normal.x + s0 * (v1.normal.x - v0.normal.x), v0.normal.y + s0 * (v1.normal.y - v0.normal.y), v0.normal.z + s0 * (v1.normal.z - v0.normal.z)));\n      return v;\n    }\n  }\n}\nclass DecalVertex {\n  constructor(position, normal) {\n    this.position = position;\n    this.normal = normal;\n  }\n  clone() {\n    return new this.constructor(this.position.clone(), this.normal.clone());\n  }\n}\nexport { DecalGeometry, DecalVertex };","map":{"version":3,"sources":["../../src/geometries/DecalGeometry.js"],"names":["plane"],"mappings":"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","sourcesContent":["import { BufferGeometry, Float32BufferAttribute, Matrix4, Vector3 } from 'three'\n\n/**\n * You can use this geometry to create a decal mesh, that serves different kinds of purposes.\n * e.g. adding unique details to models, performing dynamic visual environmental changes or covering seams.\n *\n * Constructor parameter:\n *\n * mesh — Any mesh object\n * position — Position of the decal projector\n * orientation — Orientation of the decal projector\n * size — Size of the decal projector\n *\n * reference: http://blog.wolfire.com/2009/06/how-to-project-decals/\n *\n */\n\nclass DecalGeometry extends BufferGeometry {\n  constructor(mesh, position, orientation, size) {\n    super()\n\n    // buffers\n\n    const vertices = []\n    const normals = []\n    const uvs = []\n\n    // helpers\n\n    const plane = new Vector3()\n\n    // this matrix represents the transformation of the decal projector\n\n    const projectorMatrix = new Matrix4()\n    projectorMatrix.makeRotationFromEuler(orientation)\n    projectorMatrix.setPosition(position)\n\n    const projectorMatrixInverse = new Matrix4()\n    projectorMatrixInverse.copy(projectorMatrix).invert()\n\n    // generate buffers\n\n    generate()\n\n    // build geometry\n\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3))\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3))\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2))\n\n    function generate() {\n      let i\n\n      let decalVertices = []\n\n      const vertex = new Vector3()\n      const normal = new Vector3()\n\n      // handle different geometry types\n\n      if (mesh.geometry.isGeometry === true) {\n        console.error('THREE.DecalGeometry no longer supports THREE.Geometry. Use BufferGeometry instead.')\n        return\n      }\n\n      const geometry = mesh.geometry\n\n      const positionAttribute = geometry.attributes.position\n      const normalAttribute = geometry.attributes.normal\n\n      // first, create an array of 'DecalVertex' objects\n      // three consecutive 'DecalVertex' objects represent a single face\n      //\n      // this data structure will be later used to perform the clipping\n\n      if (geometry.index !== null) {\n        // indexed BufferGeometry\n\n        const index = geometry.index\n\n        for (i = 0; i < index.count; i++) {\n          vertex.fromBufferAttribute(positionAttribute, index.getX(i))\n          normal.fromBufferAttribute(normalAttribute, index.getX(i))\n\n          pushDecalVertex(decalVertices, vertex, normal)\n        }\n      } else {\n        // non-indexed BufferGeometry\n\n        for (i = 0; i < positionAttribute.count; i++) {\n          vertex.fromBufferAttribute(positionAttribute, i)\n          normal.fromBufferAttribute(normalAttribute, i)\n\n          pushDecalVertex(decalVertices, vertex, normal)\n        }\n      }\n\n      // second, clip the geometry so that it doesn't extend out from the projector\n\n      decalVertices = clipGeometry(decalVertices, plane.set(1, 0, 0))\n      decalVertices = clipGeometry(decalVertices, plane.set(-1, 0, 0))\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 1, 0))\n      decalVertices = clipGeometry(decalVertices, plane.set(0, -1, 0))\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 0, 1))\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 0, -1))\n\n      // third, generate final vertices, normals and uvs\n\n      for (i = 0; i < decalVertices.length; i++) {\n        const decalVertex = decalVertices[i]\n\n        // create texture coordinates (we are still in projector space)\n\n        uvs.push(0.5 + decalVertex.position.x / size.x, 0.5 + decalVertex.position.y / size.y)\n\n        // transform the vertex back to world space\n\n        decalVertex.position.applyMatrix4(projectorMatrix)\n\n        // now create vertex and normal buffer data\n\n        vertices.push(decalVertex.position.x, decalVertex.position.y, decalVertex.position.z)\n        normals.push(decalVertex.normal.x, decalVertex.normal.y, decalVertex.normal.z)\n      }\n    }\n\n    function pushDecalVertex(decalVertices, vertex, normal) {\n      // transform the vertex to world space, then to projector space\n\n      vertex.applyMatrix4(mesh.matrixWorld)\n      vertex.applyMatrix4(projectorMatrixInverse)\n\n      normal.transformDirection(mesh.matrixWorld)\n\n      decalVertices.push(new DecalVertex(vertex.clone(), normal.clone()))\n    }\n\n    function clipGeometry(inVertices, plane) {\n      const outVertices = []\n\n      const s = 0.5 * Math.abs(size.dot(plane))\n\n      // a single iteration clips one face,\n      // which consists of three consecutive 'DecalVertex' objects\n\n      for (let i = 0; i < inVertices.length; i += 3) {\n        let v1Out,\n          v2Out,\n          v3Out,\n          total = 0\n        let nV1, nV2, nV3, nV4\n\n        const d1 = inVertices[i + 0].position.dot(plane) - s\n        const d2 = inVertices[i + 1].position.dot(plane) - s\n        const d3 = inVertices[i + 2].position.dot(plane) - s\n\n        v1Out = d1 > 0\n        v2Out = d2 > 0\n        v3Out = d3 > 0\n\n        // calculate, how many vertices of the face lie outside of the clipping plane\n\n        total = (v1Out ? 1 : 0) + (v2Out ? 1 : 0) + (v3Out ? 1 : 0)\n\n        switch (total) {\n          case 0: {\n            // the entire face lies inside of the plane, no clipping needed\n\n            outVertices.push(inVertices[i])\n            outVertices.push(inVertices[i + 1])\n            outVertices.push(inVertices[i + 2])\n            break\n          }\n\n          case 1: {\n            // one vertex lies outside of the plane, perform clipping\n\n            if (v1Out) {\n              nV1 = inVertices[i + 1]\n              nV2 = inVertices[i + 2]\n              nV3 = clip(inVertices[i], nV1, plane, s)\n              nV4 = clip(inVertices[i], nV2, plane, s)\n            }\n\n            if (v2Out) {\n              nV1 = inVertices[i]\n              nV2 = inVertices[i + 2]\n              nV3 = clip(inVertices[i + 1], nV1, plane, s)\n              nV4 = clip(inVertices[i + 1], nV2, plane, s)\n\n              outVertices.push(nV3)\n              outVertices.push(nV2.clone())\n              outVertices.push(nV1.clone())\n\n              outVertices.push(nV2.clone())\n              outVertices.push(nV3.clone())\n              outVertices.push(nV4)\n              break\n            }\n\n            if (v3Out) {\n              nV1 = inVertices[i]\n              nV2 = inVertices[i + 1]\n              nV3 = clip(inVertices[i + 2], nV1, plane, s)\n              nV4 = clip(inVertices[i + 2], nV2, plane, s)\n            }\n\n            outVertices.push(nV1.clone())\n            outVertices.push(nV2.clone())\n            outVertices.push(nV3)\n\n            outVertices.push(nV4)\n            outVertices.push(nV3.clone())\n            outVertices.push(nV2.clone())\n\n            break\n          }\n\n          case 2: {\n            // two vertices lies outside of the plane, perform clipping\n\n            if (!v1Out) {\n              nV1 = inVertices[i].clone()\n              nV2 = clip(nV1, inVertices[i + 1], plane, s)\n              nV3 = clip(nV1, inVertices[i + 2], plane, s)\n              outVertices.push(nV1)\n              outVertices.push(nV2)\n              outVertices.push(nV3)\n            }\n\n            if (!v2Out) {\n              nV1 = inVertices[i + 1].clone()\n              nV2 = clip(nV1, inVertices[i + 2], plane, s)\n              nV3 = clip(nV1, inVertices[i], plane, s)\n              outVertices.push(nV1)\n              outVertices.push(nV2)\n              outVertices.push(nV3)\n            }\n\n            if (!v3Out) {\n              nV1 = inVertices[i + 2].clone()\n              nV2 = clip(nV1, inVertices[i], plane, s)\n              nV3 = clip(nV1, inVertices[i + 1], plane, s)\n              outVertices.push(nV1)\n              outVertices.push(nV2)\n              outVertices.push(nV3)\n            }\n\n            break\n          }\n\n          case 3: {\n            // the entire face lies outside of the plane, so let's discard the corresponding vertices\n\n            break\n          }\n        }\n      }\n\n      return outVertices\n    }\n\n    function clip(v0, v1, p, s) {\n      const d0 = v0.position.dot(p) - s\n      const d1 = v1.position.dot(p) - s\n\n      const s0 = d0 / (d0 - d1)\n\n      const v = new DecalVertex(\n        new Vector3(\n          v0.position.x + s0 * (v1.position.x - v0.position.x),\n          v0.position.y + s0 * (v1.position.y - v0.position.y),\n          v0.position.z + s0 * (v1.position.z - v0.position.z),\n        ),\n        new Vector3(\n          v0.normal.x + s0 * (v1.normal.x - v0.normal.x),\n          v0.normal.y + s0 * (v1.normal.y - v0.normal.y),\n          v0.normal.z + s0 * (v1.normal.z - v0.normal.z),\n        ),\n      )\n\n      // need to clip more values (texture coordinates)? do it this way:\n      // intersectpoint.value = a.value + s * ( b.value - a.value );\n\n      return v\n    }\n  }\n}\n\n// helper\n\nclass DecalVertex {\n  constructor(position, normal) {\n    this.position = position\n    this.normal = normal\n  }\n\n  clone() {\n    return new this.constructor(this.position.clone(), this.normal.clone())\n  }\n}\n\nexport { DecalGeometry, DecalVertex }\n"]},"metadata":{},"sourceType":"module"}