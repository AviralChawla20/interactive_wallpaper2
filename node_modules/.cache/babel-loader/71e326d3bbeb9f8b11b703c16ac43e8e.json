{"ast":null,"code":"import { Vector2, Matrix4 } from \"three\";\nconst SAOShader = {\n  defines: {\n    NUM_SAMPLES: 7,\n    NUM_RINGS: 4,\n    NORMAL_TEXTURE: 0,\n    DIFFUSE_TEXTURE: 0,\n    DEPTH_PACKING: 1,\n    PERSPECTIVE_CAMERA: 1\n  },\n  uniforms: {\n    tDepth: {\n      value: null\n    },\n    tDiffuse: {\n      value: null\n    },\n    tNormal: {\n      value: null\n    },\n    size: {\n      value: new Vector2(512, 512)\n    },\n    cameraNear: {\n      value: 1\n    },\n    cameraFar: {\n      value: 100\n    },\n    cameraProjectionMatrix: {\n      value: new Matrix4()\n    },\n    cameraInverseProjectionMatrix: {\n      value: new Matrix4()\n    },\n    scale: {\n      value: 1\n    },\n    intensity: {\n      value: 0.1\n    },\n    bias: {\n      value: 0.5\n    },\n    minResolution: {\n      value: 0\n    },\n    kernelRadius: {\n      value: 100\n    },\n    randomSeed: {\n      value: 0\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"#include <common>\", \"varying vec2 vUv;\", \"#if DIFFUSE_TEXTURE == 1\", \"uniform sampler2D tDiffuse;\", \"#endif\", \"uniform sampler2D tDepth;\", \"#if NORMAL_TEXTURE == 1\", \"uniform sampler2D tNormal;\", \"#endif\", \"uniform float cameraNear;\", \"uniform float cameraFar;\", \"uniform mat4 cameraProjectionMatrix;\", \"uniform mat4 cameraInverseProjectionMatrix;\", \"uniform float scale;\", \"uniform float intensity;\", \"uniform float bias;\", \"uniform float kernelRadius;\", \"uniform float minResolution;\", \"uniform vec2 size;\", \"uniform float randomSeed;\", \"// RGBA depth\", \"#include <packing>\", \"vec4 getDefaultColor( const in vec2 screenPosition ) {\", \"\t#if DIFFUSE_TEXTURE == 1\", \"\treturn texture2D( tDiffuse, vUv );\", \"\t#else\", \"\treturn vec4( 1.0 );\", \"\t#endif\", \"}\", \"float getDepth( const in vec2 screenPosition ) {\", \"\t#if DEPTH_PACKING == 1\", \"\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\", \"\t#else\", \"\treturn texture2D( tDepth, screenPosition ).x;\", \"\t#endif\", \"}\", \"float getViewZ( const in float depth ) {\", \"\t#if PERSPECTIVE_CAMERA == 1\", \"\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\", \"\t#else\", \"\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\", \"\t#endif\", \"}\", \"vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {\", \"\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];\", \"\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );\", \"\tclipPosition *= clipW; // unprojection.\", \"\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;\", \"}\", \"vec3 getViewNormal( const in vec3 viewPosition, const in vec2 screenPosition ) {\", \"\t#if NORMAL_TEXTURE == 1\", \"\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );\", \"\t#else\", \"\treturn normalize( cross( dFdx( viewPosition ), dFdy( viewPosition ) ) );\", \"\t#endif\", \"}\", \"float scaleDividedByCameraFar;\", \"float minResolutionMultipliedByCameraFar;\", \"float getOcclusion( const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition ) {\", \"\tvec3 viewDelta = sampleViewPosition - centerViewPosition;\", \"\tfloat viewDistance = length( viewDelta );\", \"\tfloat scaledScreenDistance = scaleDividedByCameraFar * viewDistance;\", \"\treturn max(0.0, (dot(centerViewNormal, viewDelta) - minResolutionMultipliedByCameraFar) / scaledScreenDistance - bias) / (1.0 + pow2( scaledScreenDistance ) );\", \"}\", \"// moving costly divides into consts\", \"const float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );\", \"const float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );\", \"float getAmbientOcclusion( const in vec3 centerViewPosition ) {\", \"\t// precompute some variables require in getOcclusion.\", \"\tscaleDividedByCameraFar = scale / cameraFar;\", \"\tminResolutionMultipliedByCameraFar = minResolution * cameraFar;\", \"\tvec3 centerViewNormal = getViewNormal( centerViewPosition, vUv );\", \"\t// jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/\", \"\tfloat angle = rand( vUv + randomSeed ) * PI2;\", \"\tvec2 radius = vec2( kernelRadius * INV_NUM_SAMPLES ) / size;\", \"\tvec2 radiusStep = radius;\", \"\tfloat occlusionSum = 0.0;\", \"\tfloat weightSum = 0.0;\", \"\tfor( int i = 0; i < NUM_SAMPLES; i ++ ) {\", \"\t\tvec2 sampleUv = vUv + vec2( cos( angle ), sin( angle ) ) * radius;\", \"\t\tradius += radiusStep;\", \"\t\tangle += ANGLE_STEP;\", \"\t\tfloat sampleDepth = getDepth( sampleUv );\", \"\t\tif( sampleDepth >= ( 1.0 - EPSILON ) ) {\", \"\t\t\tcontinue;\", \"\t\t}\", \"\t\tfloat sampleViewZ = getViewZ( sampleDepth );\", \"\t\tvec3 sampleViewPosition = getViewPosition( sampleUv, sampleDepth, sampleViewZ );\", \"\t\tocclusionSum += getOcclusion( centerViewPosition, centerViewNormal, sampleViewPosition );\", \"\t\tweightSum += 1.0;\", \"\t}\", \"\tif( weightSum == 0.0 ) discard;\", \"\treturn occlusionSum * ( intensity / weightSum );\", \"}\", \"void main() {\", \"\tfloat centerDepth = getDepth( vUv );\", \"\tif( centerDepth >= ( 1.0 - EPSILON ) ) {\", \"\t\tdiscard;\", \"\t}\", \"\tfloat centerViewZ = getViewZ( centerDepth );\", \"\tvec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );\", \"\tfloat ambientOcclusion = getAmbientOcclusion( viewPosition );\", \"\tgl_FragColor = getDefaultColor( vUv );\", \"\tgl_FragColor.xyz *=  1.0 - ambientOcclusion;\", \"}\"].join(\"\\n\")\n};\nexport { SAOShader };","map":{"version":3,"sources":["../../src/shaders/SAOShader.ts"],"names":[],"mappings":"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","sourcesContent":["import { Matrix4, Vector2 } from 'three'\n\nimport type { IUniform, Texture } from 'three'\nimport type { IShader } from './types'\n\nexport type SAOShaderDefines = Record<\n  'DEPTH_PACKING' | 'DIFFUSE_TEXTURE' | 'NORMAL_TEXTURE' | 'NUM_RINGS' | 'NUM_SAMPLES' | 'PERSPECTIVE_CAMERA',\n  number\n>\n\nexport type SAOShaderUniforms = {\n  bias: IUniform<number>\n  cameraFar: IUniform<number>\n  cameraInverseProjectionMatrix: IUniform<Matrix4>\n  cameraNear: IUniform<number>\n  cameraProjectionMatrix: IUniform<Matrix4>\n  intensity: IUniform<number>\n  kernelRadius: IUniform<number>\n  minResolution: IUniform<number>\n  randomSeed: IUniform<number>\n  scale: IUniform<number>\n  size: IUniform<Vector2>\n  tDepth: IUniform<Texture | null>\n  tDiffuse: IUniform<Texture | null>\n  tNormal: IUniform<Texture | null>\n}\n\nexport interface ISAOShader extends IShader<SAOShaderUniforms, SAOShaderDefines> {\n  defines: SAOShaderDefines\n  needsUpdate?: boolean\n}\n\nexport const SAOShader: ISAOShader = {\n  defines: {\n    NUM_SAMPLES: 7,\n    NUM_RINGS: 4,\n    NORMAL_TEXTURE: 0,\n    DIFFUSE_TEXTURE: 0,\n    DEPTH_PACKING: 1,\n    PERSPECTIVE_CAMERA: 1,\n  },\n  uniforms: {\n    tDepth: { value: null },\n    tDiffuse: { value: null },\n    tNormal: { value: null },\n    size: { value: new Vector2(512, 512) },\n\n    cameraNear: { value: 1 },\n    cameraFar: { value: 100 },\n    cameraProjectionMatrix: { value: new Matrix4() },\n    cameraInverseProjectionMatrix: { value: new Matrix4() },\n\n    scale: { value: 1.0 },\n    intensity: { value: 0.1 },\n    bias: { value: 0.5 },\n\n    minResolution: { value: 0.0 },\n    kernelRadius: { value: 100.0 },\n    randomSeed: { value: 0.0 },\n  },\n  vertexShader: [\n    'varying vec2 vUv;',\n\n    'void main() {',\n    '\tvUv = uv;',\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n    '}',\n  ].join('\\n'),\n  fragmentShader: [\n    '#include <common>',\n\n    'varying vec2 vUv;',\n\n    '#if DIFFUSE_TEXTURE == 1',\n    'uniform sampler2D tDiffuse;',\n    '#endif',\n\n    'uniform sampler2D tDepth;',\n\n    '#if NORMAL_TEXTURE == 1',\n    'uniform sampler2D tNormal;',\n    '#endif',\n\n    'uniform float cameraNear;',\n    'uniform float cameraFar;',\n    'uniform mat4 cameraProjectionMatrix;',\n    'uniform mat4 cameraInverseProjectionMatrix;',\n\n    'uniform float scale;',\n    'uniform float intensity;',\n    'uniform float bias;',\n    'uniform float kernelRadius;',\n    'uniform float minResolution;',\n    'uniform vec2 size;',\n    'uniform float randomSeed;',\n\n    '// RGBA depth',\n\n    '#include <packing>',\n\n    'vec4 getDefaultColor( const in vec2 screenPosition ) {',\n    '\t#if DIFFUSE_TEXTURE == 1',\n    '\treturn texture2D( tDiffuse, vUv );',\n    '\t#else',\n    '\treturn vec4( 1.0 );',\n    '\t#endif',\n    '}',\n\n    'float getDepth( const in vec2 screenPosition ) {',\n    '\t#if DEPTH_PACKING == 1',\n    '\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );',\n    '\t#else',\n    '\treturn texture2D( tDepth, screenPosition ).x;',\n    '\t#endif',\n    '}',\n\n    'float getViewZ( const in float depth ) {',\n    '\t#if PERSPECTIVE_CAMERA == 1',\n    '\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );',\n    '\t#else',\n    '\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );',\n    '\t#endif',\n    '}',\n\n    'vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {',\n    '\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];',\n    '\tvec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );',\n    '\tclipPosition *= clipW; // unprojection.',\n\n    '\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;',\n    '}',\n\n    'vec3 getViewNormal( const in vec3 viewPosition, const in vec2 screenPosition ) {',\n    '\t#if NORMAL_TEXTURE == 1',\n    '\treturn unpackRGBToNormal( texture2D( tNormal, screenPosition ).xyz );',\n    '\t#else',\n    '\treturn normalize( cross( dFdx( viewPosition ), dFdy( viewPosition ) ) );',\n    '\t#endif',\n    '}',\n\n    'float scaleDividedByCameraFar;',\n    'float minResolutionMultipliedByCameraFar;',\n\n    'float getOcclusion( const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition ) {',\n    '\tvec3 viewDelta = sampleViewPosition - centerViewPosition;',\n    '\tfloat viewDistance = length( viewDelta );',\n    '\tfloat scaledScreenDistance = scaleDividedByCameraFar * viewDistance;',\n\n    '\treturn max(0.0, (dot(centerViewNormal, viewDelta) - minResolutionMultipliedByCameraFar) / scaledScreenDistance - bias) / (1.0 + pow2( scaledScreenDistance ) );',\n    '}',\n\n    '// moving costly divides into consts',\n    'const float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );',\n    'const float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );',\n\n    'float getAmbientOcclusion( const in vec3 centerViewPosition ) {',\n    '\t// precompute some variables require in getOcclusion.',\n    '\tscaleDividedByCameraFar = scale / cameraFar;',\n    '\tminResolutionMultipliedByCameraFar = minResolution * cameraFar;',\n    '\tvec3 centerViewNormal = getViewNormal( centerViewPosition, vUv );',\n\n    '\t// jsfiddle that shows sample pattern: https://jsfiddle.net/a16ff1p7/',\n    '\tfloat angle = rand( vUv + randomSeed ) * PI2;',\n    '\tvec2 radius = vec2( kernelRadius * INV_NUM_SAMPLES ) / size;',\n    '\tvec2 radiusStep = radius;',\n\n    '\tfloat occlusionSum = 0.0;',\n    '\tfloat weightSum = 0.0;',\n\n    '\tfor( int i = 0; i < NUM_SAMPLES; i ++ ) {',\n    '\t\tvec2 sampleUv = vUv + vec2( cos( angle ), sin( angle ) ) * radius;',\n    '\t\tradius += radiusStep;',\n    '\t\tangle += ANGLE_STEP;',\n\n    '\t\tfloat sampleDepth = getDepth( sampleUv );',\n    '\t\tif( sampleDepth >= ( 1.0 - EPSILON ) ) {',\n    '\t\t\tcontinue;',\n    '\t\t}',\n\n    '\t\tfloat sampleViewZ = getViewZ( sampleDepth );',\n    '\t\tvec3 sampleViewPosition = getViewPosition( sampleUv, sampleDepth, sampleViewZ );',\n    '\t\tocclusionSum += getOcclusion( centerViewPosition, centerViewNormal, sampleViewPosition );',\n    '\t\tweightSum += 1.0;',\n    '\t}',\n\n    '\tif( weightSum == 0.0 ) discard;',\n\n    '\treturn occlusionSum * ( intensity / weightSum );',\n    '}',\n\n    'void main() {',\n    '\tfloat centerDepth = getDepth( vUv );',\n    '\tif( centerDepth >= ( 1.0 - EPSILON ) ) {',\n    '\t\tdiscard;',\n    '\t}',\n\n    '\tfloat centerViewZ = getViewZ( centerDepth );',\n    '\tvec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );',\n\n    '\tfloat ambientOcclusion = getAmbientOcclusion( viewPosition );',\n\n    '\tgl_FragColor = getDefaultColor( vUv );',\n    '\tgl_FragColor.xyz *=  1.0 - ambientOcclusion;',\n    '}',\n  ].join('\\n'),\n}\n"]},"metadata":{},"sourceType":"module"}