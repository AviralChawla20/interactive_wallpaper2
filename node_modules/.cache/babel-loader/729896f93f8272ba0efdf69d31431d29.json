{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color, DepthTexture, UnsignedShortType, NearestFilter, WebGLRenderTarget, HalfFloatType, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, MeshBasicMaterial, SrcAlphaFactor, OneMinusSrcAlphaFactor, AddEquation, NormalBlending } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SSRShader, SSRBlurShader, SSRDepthShader } from \"../shaders/SSRShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nconst _SSRPass = class extends Pass {\n  constructor({\n    renderer,\n    scene,\n    camera,\n    width,\n    height,\n    selects,\n    bouncing = false,\n    groundReflector\n  }) {\n    super();\n    this.width = width !== void 0 ? width : 512;\n    this.height = height !== void 0 ? height : 512;\n    this.clear = true;\n    this.renderer = renderer;\n    this.scene = scene;\n    this.camera = camera;\n    this.groundReflector = groundReflector;\n    this.opacity = SSRShader.uniforms.opacity.value;\n    this.output = 0;\n    this.maxDistance = SSRShader.uniforms.maxDistance.value;\n    this.thickness = SSRShader.uniforms.thickness.value;\n    this.tempColor = new Color();\n    this._selects = selects;\n    this.selective = Array.isArray(this._selects);\n    Object.defineProperty(this, \"selects\", {\n      get() {\n        return this._selects;\n      },\n      set(val) {\n        if (this._selects === val) return;\n        this._selects = val;\n        if (Array.isArray(val)) {\n          this.selective = true;\n          this.ssrMaterial.defines.SELECTIVE = true;\n          this.ssrMaterial.needsUpdate = true;\n        } else {\n          this.selective = false;\n          this.ssrMaterial.defines.SELECTIVE = false;\n          this.ssrMaterial.needsUpdate = true;\n        }\n      }\n    });\n    this._bouncing = bouncing;\n    Object.defineProperty(this, \"bouncing\", {\n      get() {\n        return this._bouncing;\n      },\n      set(val) {\n        if (this._bouncing === val) return;\n        this._bouncing = val;\n        if (val) {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n        } else {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        }\n      }\n    });\n    this.blur = true;\n    this._distanceAttenuation = SSRShader.defines.DISTANCE_ATTENUATION;\n    Object.defineProperty(this, \"distanceAttenuation\", {\n      get() {\n        return this._distanceAttenuation;\n      },\n      set(val) {\n        if (this._distanceAttenuation === val) return;\n        this._distanceAttenuation = val;\n        this.ssrMaterial.defines.DISTANCE_ATTENUATION = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    this._fresnel = SSRShader.defines.FRESNEL;\n    Object.defineProperty(this, \"fresnel\", {\n      get() {\n        return this._fresnel;\n      },\n      set(val) {\n        if (this._fresnel === val) return;\n        this._fresnel = val;\n        this.ssrMaterial.defines.FRESNEL = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    this._infiniteThick = SSRShader.defines.INFINITE_THICK;\n    Object.defineProperty(this, \"infiniteThick\", {\n      get() {\n        return this._infiniteThick;\n      },\n      set(val) {\n        if (this._infiniteThick === val) return;\n        this._infiniteThick = val;\n        this.ssrMaterial.defines.INFINITE_THICK = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    const depthTexture = new DepthTexture();\n    depthTexture.type = UnsignedShortType;\n    depthTexture.minFilter = NearestFilter;\n    depthTexture.magFilter = NearestFilter;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n      depthTexture,\n      depthBuffer: true\n    });\n    this.prevRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.metalnessRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.ssrRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    this.blurRenderTarget = this.ssrRenderTarget.clone();\n    this.blurRenderTarget2 = this.ssrRenderTarget.clone();\n    this.ssrMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRShader.defines, {\n        MAX_STEP: Math.sqrt(this.width * this.width + this.height * this.height)\n      }),\n      uniforms: UniformsUtils.clone(SSRShader.uniforms),\n      vertexShader: SSRShader.vertexShader,\n      fragmentShader: SSRShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n    this.ssrMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.ssrMaterial.defines.SELECTIVE = this.selective;\n    this.ssrMaterial.needsUpdate = true;\n    this.ssrMaterial.uniforms[\"tMetalness\"].value = this.metalnessRenderTarget.texture;\n    this.ssrMaterial.uniforms[\"tDepth\"].value = this.beautyRenderTarget.depthTexture;\n    this.ssrMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.ssrMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.ssrMaterial.uniforms[\"thickness\"].value = this.thickness;\n    this.ssrMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.metalnessOnMaterial = new MeshBasicMaterial({\n      color: \"white\"\n    });\n    this.metalnessOffMaterial = new MeshBasicMaterial({\n      color: \"black\"\n    });\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n    this.blurMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.blurMaterial2 = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    this.blurMaterial2.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n    this.blurMaterial2.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRDepthShader.defines),\n      uniforms: UniformsUtils.clone(SSRDepthShader.uniforms),\n      vertexShader: SSRDepthShader.vertexShader,\n      fragmentShader: SSRDepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms[\"tDepth\"].value = this.beautyRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.depthRenderMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: SrcAlphaFactor,\n      blendDst: OneMinusSrcAlphaFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: SrcAlphaFactor,\n      blendDstAlpha: OneMinusSrcAlphaFactor,\n      blendEquationAlpha: AddEquation\n      // premultipliedAlpha:true,\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n  dispose() {\n    this.beautyRenderTarget.dispose();\n    this.prevRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.metalnessRenderTarget.dispose();\n    this.ssrRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.blurRenderTarget2.dispose();\n    this.normalMaterial.dispose();\n    this.metalnessOnMaterial.dispose();\n    this.metalnessOffMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.blurMaterial2.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n  render(renderer, writeBuffer) {\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    if (this.groundReflector) {\n      this.groundReflector.visible = false;\n      this.groundReflector.doRender(this.renderer, this.scene, this.camera);\n      this.groundReflector.visible = true;\n    }\n    renderer.render(this.scene, this.camera);\n    if (this.groundReflector) this.groundReflector.visible = false;\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0);\n    if (this.selective) {\n      this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0);\n    }\n    this.ssrMaterial.uniforms[\"opacity\"].value = this.opacity;\n    this.ssrMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n    this.ssrMaterial.uniforms[\"thickness\"].value = this.thickness;\n    this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget);\n    if (this.blur) {\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n      this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2);\n    }\n    switch (this.output) {\n      case _SSRPass.OUTPUT.Default:\n        if (this.bouncing) {\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        } else {\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        }\n        break;\n      case _SSRPass.OUTPUT.SSR:\n        if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        if (this.bouncing) {\n          if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n        }\n        break;\n      case _SSRPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Metalness:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.metalnessRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn(\"THREE.SSRPass: Unknown output type.\");\n    }\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderMetalness(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.traverseVisible(child => {\n      child._SSRPassBackupMaterial = child.material;\n      if (this._selects.includes(child)) {\n        child.material = this.metalnessOnMaterial;\n      } else {\n        child.material = this.metalnessOffMaterial;\n      }\n    });\n    renderer.render(this.scene, this.camera);\n    this.scene.traverseVisible(child => {\n      child.material = child._SSRPassBackupMaterial;\n    });\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height);\n    this.ssrMaterial.needsUpdate = true;\n    this.beautyRenderTarget.setSize(width, height);\n    this.prevRenderTarget.setSize(width, height);\n    this.ssrRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.metalnessRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.blurRenderTarget2.setSize(width, height);\n    this.ssrMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.blurMaterial2.uniforms[\"resolution\"].value.set(width, height);\n  }\n};\nlet SSRPass = _SSRPass;\n__publicField(SSRPass, \"OUTPUT\", {\n  Default: 0,\n  SSR: 1,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5,\n  Metalness: 7\n});\nexport { SSRPass };","map":{"version":3,"sources":["../../src/postprocessing/SSRPass.js"],"names":[],"mappings":"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","sourcesContent":["import {\n  AddEquation,\n  Color,\n  NormalBlending,\n  DepthTexture,\n  SrcAlphaFactor,\n  OneMinusSrcAlphaFactor,\n  MeshNormalMaterial,\n  MeshBasicMaterial,\n  NearestFilter,\n  NoBlending,\n  ShaderMaterial,\n  UniformsUtils,\n  UnsignedShortType,\n  WebGLRenderTarget,\n  HalfFloatType,\n} from 'three'\nimport { Pass, FullScreenQuad } from './Pass'\nimport { SSRShader } from '../shaders/SSRShader'\nimport { SSRBlurShader } from '../shaders/SSRShader'\nimport { SSRDepthShader } from '../shaders/SSRShader'\nimport { CopyShader } from '../shaders/CopyShader'\n\nclass SSRPass extends Pass {\n  static OUTPUT = {\n    Default: 0,\n    SSR: 1,\n    Beauty: 3,\n    Depth: 4,\n    Normal: 5,\n    Metalness: 7,\n  }\n  constructor({ renderer, scene, camera, width, height, selects, bouncing = false, groundReflector }) {\n    super()\n\n    this.width = width !== undefined ? width : 512\n    this.height = height !== undefined ? height : 512\n\n    this.clear = true\n\n    this.renderer = renderer\n    this.scene = scene\n    this.camera = camera\n    this.groundReflector = groundReflector\n\n    this.opacity = SSRShader.uniforms.opacity.value\n    this.output = 0\n\n    this.maxDistance = SSRShader.uniforms.maxDistance.value\n    this.thickness = SSRShader.uniforms.thickness.value\n\n    this.tempColor = new Color()\n\n    this._selects = selects\n    this.selective = Array.isArray(this._selects)\n    Object.defineProperty(this, 'selects', {\n      get() {\n        return this._selects\n      },\n      set(val) {\n        if (this._selects === val) return\n        this._selects = val\n        if (Array.isArray(val)) {\n          this.selective = true\n          this.ssrMaterial.defines.SELECTIVE = true\n          this.ssrMaterial.needsUpdate = true\n        } else {\n          this.selective = false\n          this.ssrMaterial.defines.SELECTIVE = false\n          this.ssrMaterial.needsUpdate = true\n        }\n      },\n    })\n\n    this._bouncing = bouncing\n    Object.defineProperty(this, 'bouncing', {\n      get() {\n        return this._bouncing\n      },\n      set(val) {\n        if (this._bouncing === val) return\n        this._bouncing = val\n        if (val) {\n          this.ssrMaterial.uniforms['tDiffuse'].value = this.prevRenderTarget.texture\n        } else {\n          this.ssrMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n        }\n      },\n    })\n\n    this.blur = true\n\n    this._distanceAttenuation = SSRShader.defines.DISTANCE_ATTENUATION\n    Object.defineProperty(this, 'distanceAttenuation', {\n      get() {\n        return this._distanceAttenuation\n      },\n      set(val) {\n        if (this._distanceAttenuation === val) return\n        this._distanceAttenuation = val\n        this.ssrMaterial.defines.DISTANCE_ATTENUATION = val\n        this.ssrMaterial.needsUpdate = true\n      },\n    })\n\n    this._fresnel = SSRShader.defines.FRESNEL\n    Object.defineProperty(this, 'fresnel', {\n      get() {\n        return this._fresnel\n      },\n      set(val) {\n        if (this._fresnel === val) return\n        this._fresnel = val\n        this.ssrMaterial.defines.FRESNEL = val\n        this.ssrMaterial.needsUpdate = true\n      },\n    })\n\n    this._infiniteThick = SSRShader.defines.INFINITE_THICK\n    Object.defineProperty(this, 'infiniteThick', {\n      get() {\n        return this._infiniteThick\n      },\n      set(val) {\n        if (this._infiniteThick === val) return\n        this._infiniteThick = val\n        this.ssrMaterial.defines.INFINITE_THICK = val\n        this.ssrMaterial.needsUpdate = true\n      },\n    })\n\n    // beauty render target with depth buffer\n\n    const depthTexture = new DepthTexture()\n    depthTexture.type = UnsignedShortType\n    depthTexture.minFilter = NearestFilter\n    depthTexture.magFilter = NearestFilter\n\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n      depthTexture: depthTexture,\n      depthBuffer: true,\n    })\n\n    //for bouncing\n    this.prevRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n    })\n\n    // normal render target\n\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n    })\n\n    // metalness render target\n\n    this.metalnessRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n    })\n\n    // ssr render target\n\n    this.ssrRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n    })\n\n    this.blurRenderTarget = this.ssrRenderTarget.clone()\n    this.blurRenderTarget2 = this.ssrRenderTarget.clone()\n    // this.blurRenderTarget3 = this.ssrRenderTarget.clone();\n\n    // ssr material\n\n    this.ssrMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRShader.defines, {\n        MAX_STEP: Math.sqrt(this.width * this.width + this.height * this.height),\n      }),\n      uniforms: UniformsUtils.clone(SSRShader.uniforms),\n      vertexShader: SSRShader.vertexShader,\n      fragmentShader: SSRShader.fragmentShader,\n      blending: NoBlending,\n    })\n\n    this.ssrMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n    this.ssrMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture\n    this.ssrMaterial.defines.SELECTIVE = this.selective\n    this.ssrMaterial.needsUpdate = true\n    this.ssrMaterial.uniforms['tMetalness'].value = this.metalnessRenderTarget.texture\n    this.ssrMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture\n    this.ssrMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.ssrMaterial.uniforms['cameraFar'].value = this.camera.far\n    this.ssrMaterial.uniforms['thickness'].value = this.thickness\n    this.ssrMaterial.uniforms['resolution'].value.set(this.width, this.height)\n    this.ssrMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix)\n    this.ssrMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse)\n\n    // normal material\n\n    this.normalMaterial = new MeshNormalMaterial()\n    this.normalMaterial.blending = NoBlending\n\n    // metalnessOn material\n\n    this.metalnessOnMaterial = new MeshBasicMaterial({\n      color: 'white',\n    })\n\n    // metalnessOff material\n\n    this.metalnessOffMaterial = new MeshBasicMaterial({\n      color: 'black',\n    })\n\n    // blur material\n\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader,\n    })\n    this.blurMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture\n    this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height)\n\n    // blur material 2\n\n    this.blurMaterial2 = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader,\n    })\n    this.blurMaterial2.uniforms['tDiffuse'].value = this.blurRenderTarget.texture\n    this.blurMaterial2.uniforms['resolution'].value.set(this.width, this.height)\n\n    // // blur material 3\n\n    // this.blurMaterial3 = new ShaderMaterial({\n    //   defines: Object.assign({}, SSRBlurShader.defines),\n    //   uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n    //   vertexShader: SSRBlurShader.vertexShader,\n    //   fragmentShader: SSRBlurShader.fragmentShader\n    // });\n    // this.blurMaterial3.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;\n    // this.blurMaterial3.uniforms['resolution'].value.set(this.width, this.height);\n\n    // material for rendering the depth\n\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRDepthShader.defines),\n      uniforms: UniformsUtils.clone(SSRDepthShader.uniforms),\n      vertexShader: SSRDepthShader.vertexShader,\n      fragmentShader: SSRDepthShader.fragmentShader,\n      blending: NoBlending,\n    })\n    this.depthRenderMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture\n    this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near\n    this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far\n\n    // material for rendering the content of a render target\n\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: SrcAlphaFactor,\n      blendDst: OneMinusSrcAlphaFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: SrcAlphaFactor,\n      blendDstAlpha: OneMinusSrcAlphaFactor,\n      blendEquationAlpha: AddEquation,\n      // premultipliedAlpha:true,\n    })\n\n    this.fsQuad = new FullScreenQuad(null)\n\n    this.originalClearColor = new Color()\n  }\n\n  dispose() {\n    // dispose render targets\n\n    this.beautyRenderTarget.dispose()\n    this.prevRenderTarget.dispose()\n    this.normalRenderTarget.dispose()\n    this.metalnessRenderTarget.dispose()\n    this.ssrRenderTarget.dispose()\n    this.blurRenderTarget.dispose()\n    this.blurRenderTarget2.dispose()\n    // this.blurRenderTarget3.dispose();\n\n    // dispose materials\n\n    this.normalMaterial.dispose()\n    this.metalnessOnMaterial.dispose()\n    this.metalnessOffMaterial.dispose()\n    this.blurMaterial.dispose()\n    this.blurMaterial2.dispose()\n    this.copyMaterial.dispose()\n    this.depthRenderMaterial.dispose()\n\n    // dipsose full screen quad\n\n    this.fsQuad.dispose()\n  }\n\n  render(renderer, writeBuffer /*, readBuffer, deltaTime, maskActive */) {\n    // render beauty and depth\n\n    renderer.setRenderTarget(this.beautyRenderTarget)\n    renderer.clear()\n    if (this.groundReflector) {\n      this.groundReflector.visible = false\n      this.groundReflector.doRender(this.renderer, this.scene, this.camera)\n      this.groundReflector.visible = true\n    }\n\n    renderer.render(this.scene, this.camera)\n    if (this.groundReflector) this.groundReflector.visible = false\n\n    // render normals\n\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0)\n\n    // render metalnesses\n\n    if (this.selective) {\n      this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0)\n    }\n\n    // render SSR\n\n    this.ssrMaterial.uniforms['opacity'].value = this.opacity\n    this.ssrMaterial.uniforms['maxDistance'].value = this.maxDistance\n    this.ssrMaterial.uniforms['thickness'].value = this.thickness\n    this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget)\n\n    // render blur\n\n    if (this.blur) {\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget)\n      this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2)\n      // this.renderPass(renderer, this.blurMaterial3, this.blurRenderTarget3);\n    }\n\n    // output result to screen\n\n    switch (this.output) {\n      case SSRPass.OUTPUT.Default:\n        if (this.bouncing) {\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n          this.copyMaterial.blending = NoBlending\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget)\n\n          if (this.blur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture\n          else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture\n          this.copyMaterial.blending = NormalBlending\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget)\n\n          this.copyMaterial.uniforms['tDiffuse'].value = this.prevRenderTarget.texture\n          this.copyMaterial.blending = NoBlending\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n        } else {\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n          this.copyMaterial.blending = NoBlending\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n          if (this.blur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture\n          else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture\n          this.copyMaterial.blending = NormalBlending\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n        }\n\n        break\n      case SSRPass.OUTPUT.SSR:\n        if (this.blur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture\n        else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        if (this.bouncing) {\n          if (this.blur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture\n          else this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n          this.copyMaterial.blending = NoBlending\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget)\n\n          this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture\n          this.copyMaterial.blending = NormalBlending\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget)\n        }\n\n        break\n\n      case SSRPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSRPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSRPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      case SSRPass.OUTPUT.Metalness:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.metalnessRenderTarget.texture\n        this.copyMaterial.blending = NoBlending\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer)\n\n        break\n\n      default:\n        console.warn('THREE.SSRPass: Unknown output type.')\n    }\n  }\n\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor))\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor)\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n\n    // setup pass state\n    renderer.autoClear = false\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.fsQuad.material = passMaterial\n    this.fsQuad.render(renderer)\n\n    // restore original state\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor))\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor)\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n    renderer.autoClear = false\n\n    clearColor = overrideMaterial.clearColor || clearColor\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.scene.overrideMaterial = overrideMaterial\n    renderer.render(this.scene, this.camera)\n    this.scene.overrideMaterial = null\n\n    // restore original state\n\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  renderMetalness(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor))\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor)\n    const originalAutoClear = renderer.autoClear\n\n    renderer.setRenderTarget(renderTarget)\n    renderer.autoClear = false\n\n    clearColor = overrideMaterial.clearColor || clearColor\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor)\n      renderer.setClearAlpha(clearAlpha || 0.0)\n      renderer.clear()\n    }\n\n    this.scene.traverseVisible((child) => {\n      child._SSRPassBackupMaterial = child.material\n      if (this._selects.includes(child)) {\n        child.material = this.metalnessOnMaterial\n      } else {\n        child.material = this.metalnessOffMaterial\n      }\n    })\n    renderer.render(this.scene, this.camera)\n    this.scene.traverseVisible((child) => {\n      child.material = child._SSRPassBackupMaterial\n    })\n\n    // restore original state\n\n    renderer.autoClear = originalAutoClear\n    renderer.setClearColor(this.originalClearColor)\n    renderer.setClearAlpha(originalClearAlpha)\n  }\n\n  setSize(width, height) {\n    this.width = width\n    this.height = height\n\n    this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height)\n    this.ssrMaterial.needsUpdate = true\n    this.beautyRenderTarget.setSize(width, height)\n    this.prevRenderTarget.setSize(width, height)\n    this.ssrRenderTarget.setSize(width, height)\n    this.normalRenderTarget.setSize(width, height)\n    this.metalnessRenderTarget.setSize(width, height)\n    this.blurRenderTarget.setSize(width, height)\n    this.blurRenderTarget2.setSize(width, height)\n    // this.blurRenderTarget3.setSize(width, height);\n\n    this.ssrMaterial.uniforms['resolution'].value.set(width, height)\n    this.ssrMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix)\n    this.ssrMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse)\n\n    this.blurMaterial.uniforms['resolution'].value.set(width, height)\n    this.blurMaterial2.uniforms['resolution'].value.set(width, height)\n  }\n}\n\nexport { SSRPass }\n"]},"metadata":{},"sourceType":"module"}