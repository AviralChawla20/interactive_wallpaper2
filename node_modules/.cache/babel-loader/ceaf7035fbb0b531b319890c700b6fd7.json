{"ast":null,"code":"import { BufferGeometry, Float32BufferAttribute } from \"three\";\nimport { ConvexHull } from \"../math/ConvexHull.js\";\nclass ConvexGeometry extends BufferGeometry {\n  constructor(points = []) {\n    super();\n    const vertices = [];\n    const normals = [];\n    const convexHull = new ConvexHull().setFromPoints(points);\n    const faces = convexHull.faces;\n    for (let i = 0; i < faces.length; i++) {\n      const face = faces[i];\n      let edge = face.edge;\n      do {\n        const point = edge.head().point;\n        vertices.push(point.x, point.y, point.z);\n        normals.push(face.normal.x, face.normal.y, face.normal.z);\n        edge = edge.next;\n      } while (edge !== face.edge);\n    }\n    this.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n  }\n}\nexport { ConvexGeometry };","map":{"version":3,"sources":["../../src/geometries/ConvexGeometry.js"],"names":[],"mappings":";;AAGA,MAAM,cAAA,SAAuB,cAAA,CAAe;EAC1C,WAAA,CAAY,MAAA,GAAS,EAAA,EAAI;IACvB,KAAA,CAAO,CAAA;IAIP,MAAM,QAAA,GAAW,EAAE;IACnB,MAAM,OAAA,GAAU,EAAE;IAElB,MAAM,UAAA,GAAa,IAAI,UAAA,CAAA,CAAA,CAAa,aAAA,CAAc,MAAM,CAAA;IAIxD,MAAM,KAAA,GAAQ,UAAA,CAAW,KAAA;IAEzB,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,KAAA,CAAM,MAAA,EAAQ,CAAA,EAAA,EAAK;MACrC,MAAM,IAAA,GAAO,KAAA,CAAM,CAAC,CAAA;MACpB,IAAI,IAAA,GAAO,IAAA,CAAK,IAAA;MAIhB,GAAG;QACD,MAAM,KAAA,GAAQ,IAAA,CAAK,IAAA,CAAI,CAAA,CAAG,KAAA;QAE1B,QAAA,CAAS,IAAA,CAAK,KAAA,CAAM,CAAA,EAAG,KAAA,CAAM,CAAA,EAAG,KAAA,CAAM,CAAC,CAAA;QACvC,OAAA,CAAQ,IAAA,CAAK,IAAA,CAAK,MAAA,CAAO,CAAA,EAAG,IAAA,CAAK,MAAA,CAAO,CAAA,EAAG,IAAA,CAAK,MAAA,CAAO,CAAC,CAAA;QAExD,IAAA,GAAO,IAAA,CAAK,IAAA;MACpB,CAAA,QAAe,IAAA,KAAS,IAAA,CAAK,IAAA;IACxB;IAID,IAAA,CAAK,YAAA,CAAa,UAAA,EAAY,IAAI,sBAAA,CAAuB,QAAA,EAAU,CAAC,CAAC,CAAA;IACrE,IAAA,CAAK,YAAA,CAAa,QAAA,EAAU,IAAI,sBAAA,CAAuB,OAAA,EAAS,CAAC,CAAC,CAAA;EACnE;AACH","sourcesContent":["import { BufferGeometry, Float32BufferAttribute } from 'three'\nimport { ConvexHull } from '../math/ConvexHull'\n\nclass ConvexGeometry extends BufferGeometry {\n  constructor(points = []) {\n    super()\n\n    // buffers\n\n    const vertices = []\n    const normals = []\n\n    const convexHull = new ConvexHull().setFromPoints(points)\n\n    // generate vertices and normals\n\n    const faces = convexHull.faces\n\n    for (let i = 0; i < faces.length; i++) {\n      const face = faces[i]\n      let edge = face.edge\n\n      // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\n\n      do {\n        const point = edge.head().point\n\n        vertices.push(point.x, point.y, point.z)\n        normals.push(face.normal.x, face.normal.y, face.normal.z)\n\n        edge = edge.next\n      } while (edge !== face.edge)\n    }\n\n    // build geometry\n\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3))\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3))\n  }\n}\n\nexport { ConvexGeometry }\n"]},"metadata":{},"sourceType":"module"}