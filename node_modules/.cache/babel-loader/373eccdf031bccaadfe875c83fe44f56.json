{"ast":null,"code":"import { Mesh, BufferGeometry, BufferAttribute, DynamicDrawUsage, Sphere, Vector3, Color } from \"three\";\nclass MarchingCubes extends Mesh {\n  constructor(resolution, material, enableUvs = false, enableColors = false, maxPolyCount = 1e4) {\n    const geometry = new BufferGeometry();\n    super(geometry, material);\n    this.isMarchingCubes = true;\n    const scope = this;\n    const vlist = new Float32Array(12 * 3);\n    const nlist = new Float32Array(12 * 3);\n    const clist = new Float32Array(12 * 3);\n    this.enableUvs = enableUvs;\n    this.enableColors = enableColors;\n    this.init = function (resolution2) {\n      this.resolution = resolution2;\n      this.isolation = 80;\n      this.size = resolution2;\n      this.size2 = this.size * this.size;\n      this.size3 = this.size2 * this.size;\n      this.halfsize = this.size / 2;\n      this.delta = 2 / this.size;\n      this.yd = this.size;\n      this.zd = this.size2;\n      this.field = new Float32Array(this.size3);\n      this.normal_cache = new Float32Array(this.size3 * 3);\n      this.palette = new Float32Array(this.size3 * 3);\n      this.count = 0;\n      const maxVertexCount = maxPolyCount * 3;\n      this.positionArray = new Float32Array(maxVertexCount * 3);\n      const positionAttribute = new BufferAttribute(this.positionArray, 3);\n      positionAttribute.setUsage(DynamicDrawUsage);\n      geometry.setAttribute(\"position\", positionAttribute);\n      this.normalArray = new Float32Array(maxVertexCount * 3);\n      const normalAttribute = new BufferAttribute(this.normalArray, 3);\n      normalAttribute.setUsage(DynamicDrawUsage);\n      geometry.setAttribute(\"normal\", normalAttribute);\n      if (this.enableUvs) {\n        this.uvArray = new Float32Array(maxVertexCount * 2);\n        const uvAttribute = new BufferAttribute(this.uvArray, 2);\n        uvAttribute.setUsage(DynamicDrawUsage);\n        geometry.setAttribute(\"uv\", uvAttribute);\n      }\n      if (this.enableColors) {\n        this.colorArray = new Float32Array(maxVertexCount * 3);\n        const colorAttribute = new BufferAttribute(this.colorArray, 3);\n        colorAttribute.setUsage(DynamicDrawUsage);\n        geometry.setAttribute(\"color\", colorAttribute);\n      }\n      geometry.boundingSphere = new Sphere(new Vector3(), 1);\n    };\n    function lerp(a, b, t) {\n      return a + (b - a) * t;\n    }\n    function VIntX(q, offset, isol, x, y, z, valp1, valp2, c_offset1, c_offset2) {\n      const mu = (isol - valp1) / (valp2 - valp1),\n        nc = scope.normal_cache;\n      vlist[offset + 0] = x + mu * scope.delta;\n      vlist[offset + 1] = y;\n      vlist[offset + 2] = z;\n      nlist[offset + 0] = lerp(nc[q + 0], nc[q + 3], mu);\n      nlist[offset + 1] = lerp(nc[q + 1], nc[q + 4], mu);\n      nlist[offset + 2] = lerp(nc[q + 2], nc[q + 5], mu);\n      clist[offset + 0] = lerp(scope.palette[c_offset1 * 3 + 0], scope.palette[c_offset2 * 3 + 0], mu);\n      clist[offset + 1] = lerp(scope.palette[c_offset1 * 3 + 1], scope.palette[c_offset2 * 3 + 1], mu);\n      clist[offset + 2] = lerp(scope.palette[c_offset1 * 3 + 2], scope.palette[c_offset2 * 3 + 2], mu);\n    }\n    function VIntY(q, offset, isol, x, y, z, valp1, valp2, c_offset1, c_offset2) {\n      const mu = (isol - valp1) / (valp2 - valp1),\n        nc = scope.normal_cache;\n      vlist[offset + 0] = x;\n      vlist[offset + 1] = y + mu * scope.delta;\n      vlist[offset + 2] = z;\n      const q2 = q + scope.yd * 3;\n      nlist[offset + 0] = lerp(nc[q + 0], nc[q2 + 0], mu);\n      nlist[offset + 1] = lerp(nc[q + 1], nc[q2 + 1], mu);\n      nlist[offset + 2] = lerp(nc[q + 2], nc[q2 + 2], mu);\n      clist[offset + 0] = lerp(scope.palette[c_offset1 * 3 + 0], scope.palette[c_offset2 * 3 + 0], mu);\n      clist[offset + 1] = lerp(scope.palette[c_offset1 * 3 + 1], scope.palette[c_offset2 * 3 + 1], mu);\n      clist[offset + 2] = lerp(scope.palette[c_offset1 * 3 + 2], scope.palette[c_offset2 * 3 + 2], mu);\n    }\n    function VIntZ(q, offset, isol, x, y, z, valp1, valp2, c_offset1, c_offset2) {\n      const mu = (isol - valp1) / (valp2 - valp1),\n        nc = scope.normal_cache;\n      vlist[offset + 0] = x;\n      vlist[offset + 1] = y;\n      vlist[offset + 2] = z + mu * scope.delta;\n      const q2 = q + scope.zd * 3;\n      nlist[offset + 0] = lerp(nc[q + 0], nc[q2 + 0], mu);\n      nlist[offset + 1] = lerp(nc[q + 1], nc[q2 + 1], mu);\n      nlist[offset + 2] = lerp(nc[q + 2], nc[q2 + 2], mu);\n      clist[offset + 0] = lerp(scope.palette[c_offset1 * 3 + 0], scope.palette[c_offset2 * 3 + 0], mu);\n      clist[offset + 1] = lerp(scope.palette[c_offset1 * 3 + 1], scope.palette[c_offset2 * 3 + 1], mu);\n      clist[offset + 2] = lerp(scope.palette[c_offset1 * 3 + 2], scope.palette[c_offset2 * 3 + 2], mu);\n    }\n    function compNorm(q) {\n      const q3 = q * 3;\n      if (scope.normal_cache[q3] === 0) {\n        scope.normal_cache[q3 + 0] = scope.field[q - 1] - scope.field[q + 1];\n        scope.normal_cache[q3 + 1] = scope.field[q - scope.yd] - scope.field[q + scope.yd];\n        scope.normal_cache[q3 + 2] = scope.field[q - scope.zd] - scope.field[q + scope.zd];\n      }\n    }\n    function polygonize(fx, fy, fz, q, isol) {\n      const q1 = q + 1,\n        qy = q + scope.yd,\n        qz = q + scope.zd,\n        q1y = q1 + scope.yd,\n        q1z = q1 + scope.zd,\n        qyz = q + scope.yd + scope.zd,\n        q1yz = q1 + scope.yd + scope.zd;\n      let cubeindex = 0;\n      const field0 = scope.field[q],\n        field1 = scope.field[q1],\n        field2 = scope.field[qy],\n        field3 = scope.field[q1y],\n        field4 = scope.field[qz],\n        field5 = scope.field[q1z],\n        field6 = scope.field[qyz],\n        field7 = scope.field[q1yz];\n      if (field0 < isol) cubeindex |= 1;\n      if (field1 < isol) cubeindex |= 2;\n      if (field2 < isol) cubeindex |= 8;\n      if (field3 < isol) cubeindex |= 4;\n      if (field4 < isol) cubeindex |= 16;\n      if (field5 < isol) cubeindex |= 32;\n      if (field6 < isol) cubeindex |= 128;\n      if (field7 < isol) cubeindex |= 64;\n      const bits = edgeTable[cubeindex];\n      if (bits === 0) return 0;\n      const d = scope.delta,\n        fx2 = fx + d,\n        fy2 = fy + d,\n        fz2 = fz + d;\n      if (bits & 1) {\n        compNorm(q);\n        compNorm(q1);\n        VIntX(q * 3, 0, isol, fx, fy, fz, field0, field1, q, q1);\n      }\n      if (bits & 2) {\n        compNorm(q1);\n        compNorm(q1y);\n        VIntY(q1 * 3, 3, isol, fx2, fy, fz, field1, field3, q1, q1y);\n      }\n      if (bits & 4) {\n        compNorm(qy);\n        compNorm(q1y);\n        VIntX(qy * 3, 6, isol, fx, fy2, fz, field2, field3, qy, q1y);\n      }\n      if (bits & 8) {\n        compNorm(q);\n        compNorm(qy);\n        VIntY(q * 3, 9, isol, fx, fy, fz, field0, field2, q, qy);\n      }\n      if (bits & 16) {\n        compNorm(qz);\n        compNorm(q1z);\n        VIntX(qz * 3, 12, isol, fx, fy, fz2, field4, field5, qz, q1z);\n      }\n      if (bits & 32) {\n        compNorm(q1z);\n        compNorm(q1yz);\n        VIntY(q1z * 3, 15, isol, fx2, fy, fz2, field5, field7, q1z, q1yz);\n      }\n      if (bits & 64) {\n        compNorm(qyz);\n        compNorm(q1yz);\n        VIntX(qyz * 3, 18, isol, fx, fy2, fz2, field6, field7, qyz, q1yz);\n      }\n      if (bits & 128) {\n        compNorm(qz);\n        compNorm(qyz);\n        VIntY(qz * 3, 21, isol, fx, fy, fz2, field4, field6, qz, qyz);\n      }\n      if (bits & 256) {\n        compNorm(q);\n        compNorm(qz);\n        VIntZ(q * 3, 24, isol, fx, fy, fz, field0, field4, q, qz);\n      }\n      if (bits & 512) {\n        compNorm(q1);\n        compNorm(q1z);\n        VIntZ(q1 * 3, 27, isol, fx2, fy, fz, field1, field5, q1, q1z);\n      }\n      if (bits & 1024) {\n        compNorm(q1y);\n        compNorm(q1yz);\n        VIntZ(q1y * 3, 30, isol, fx2, fy2, fz, field3, field7, q1y, q1yz);\n      }\n      if (bits & 2048) {\n        compNorm(qy);\n        compNorm(qyz);\n        VIntZ(qy * 3, 33, isol, fx, fy2, fz, field2, field6, qy, qyz);\n      }\n      cubeindex <<= 4;\n      let o1,\n        o2,\n        o3,\n        numtris = 0,\n        i = 0;\n      while (triTable[cubeindex + i] != -1) {\n        o1 = cubeindex + i;\n        o2 = o1 + 1;\n        o3 = o1 + 2;\n        posnormtriv(vlist, nlist, clist, 3 * triTable[o1], 3 * triTable[o2], 3 * triTable[o3]);\n        i += 3;\n        numtris++;\n      }\n      return numtris;\n    }\n    function posnormtriv(pos, norm, colors, o1, o2, o3) {\n      const c = scope.count * 3;\n      scope.positionArray[c + 0] = pos[o1];\n      scope.positionArray[c + 1] = pos[o1 + 1];\n      scope.positionArray[c + 2] = pos[o1 + 2];\n      scope.positionArray[c + 3] = pos[o2];\n      scope.positionArray[c + 4] = pos[o2 + 1];\n      scope.positionArray[c + 5] = pos[o2 + 2];\n      scope.positionArray[c + 6] = pos[o3];\n      scope.positionArray[c + 7] = pos[o3 + 1];\n      scope.positionArray[c + 8] = pos[o3 + 2];\n      if (scope.material.flatShading === true) {\n        const nx = (norm[o1 + 0] + norm[o2 + 0] + norm[o3 + 0]) / 3;\n        const ny = (norm[o1 + 1] + norm[o2 + 1] + norm[o3 + 1]) / 3;\n        const nz = (norm[o1 + 2] + norm[o2 + 2] + norm[o3 + 2]) / 3;\n        scope.normalArray[c + 0] = nx;\n        scope.normalArray[c + 1] = ny;\n        scope.normalArray[c + 2] = nz;\n        scope.normalArray[c + 3] = nx;\n        scope.normalArray[c + 4] = ny;\n        scope.normalArray[c + 5] = nz;\n        scope.normalArray[c + 6] = nx;\n        scope.normalArray[c + 7] = ny;\n        scope.normalArray[c + 8] = nz;\n      } else {\n        scope.normalArray[c + 0] = norm[o1 + 0];\n        scope.normalArray[c + 1] = norm[o1 + 1];\n        scope.normalArray[c + 2] = norm[o1 + 2];\n        scope.normalArray[c + 3] = norm[o2 + 0];\n        scope.normalArray[c + 4] = norm[o2 + 1];\n        scope.normalArray[c + 5] = norm[o2 + 2];\n        scope.normalArray[c + 6] = norm[o3 + 0];\n        scope.normalArray[c + 7] = norm[o3 + 1];\n        scope.normalArray[c + 8] = norm[o3 + 2];\n      }\n      if (scope.enableUvs) {\n        const d = scope.count * 2;\n        scope.uvArray[d + 0] = pos[o1 + 0];\n        scope.uvArray[d + 1] = pos[o1 + 2];\n        scope.uvArray[d + 2] = pos[o2 + 0];\n        scope.uvArray[d + 3] = pos[o2 + 2];\n        scope.uvArray[d + 4] = pos[o3 + 0];\n        scope.uvArray[d + 5] = pos[o3 + 2];\n      }\n      if (scope.enableColors) {\n        scope.colorArray[c + 0] = colors[o1 + 0];\n        scope.colorArray[c + 1] = colors[o1 + 1];\n        scope.colorArray[c + 2] = colors[o1 + 2];\n        scope.colorArray[c + 3] = colors[o2 + 0];\n        scope.colorArray[c + 4] = colors[o2 + 1];\n        scope.colorArray[c + 5] = colors[o2 + 2];\n        scope.colorArray[c + 6] = colors[o3 + 0];\n        scope.colorArray[c + 7] = colors[o3 + 1];\n        scope.colorArray[c + 8] = colors[o3 + 2];\n      }\n      scope.count += 3;\n    }\n    this.addBall = function (ballx, bally, ballz, strength, subtract, colors) {\n      const sign = Math.sign(strength);\n      strength = Math.abs(strength);\n      const userDefineColor = !(colors === void 0 || colors === null);\n      let ballColor = new Color(ballx, bally, ballz);\n      if (userDefineColor) {\n        try {\n          ballColor = colors instanceof Color ? colors : Array.isArray(colors) ? new Color(Math.min(Math.abs(colors[0]), 1), Math.min(Math.abs(colors[1]), 1), Math.min(Math.abs(colors[2]), 1)) : new Color(colors);\n        } catch (err) {\n          ballColor = new Color(ballx, bally, ballz);\n        }\n      }\n      const radius = this.size * Math.sqrt(strength / subtract),\n        zs = ballz * this.size,\n        ys = bally * this.size,\n        xs = ballx * this.size;\n      let min_z = Math.floor(zs - radius);\n      if (min_z < 1) min_z = 1;\n      let max_z = Math.floor(zs + radius);\n      if (max_z > this.size - 1) max_z = this.size - 1;\n      let min_y = Math.floor(ys - radius);\n      if (min_y < 1) min_y = 1;\n      let max_y = Math.floor(ys + radius);\n      if (max_y > this.size - 1) max_y = this.size - 1;\n      let min_x = Math.floor(xs - radius);\n      if (min_x < 1) min_x = 1;\n      let max_x = Math.floor(xs + radius);\n      if (max_x > this.size - 1) max_x = this.size - 1;\n      let x, y, z, y_offset, z_offset, fx, fy, fz, fz2, fy2, val;\n      for (z = min_z; z < max_z; z++) {\n        z_offset = this.size2 * z;\n        fz = z / this.size - ballz;\n        fz2 = fz * fz;\n        for (y = min_y; y < max_y; y++) {\n          y_offset = z_offset + this.size * y;\n          fy = y / this.size - bally;\n          fy2 = fy * fy;\n          for (x = min_x; x < max_x; x++) {\n            fx = x / this.size - ballx;\n            val = strength / (1e-6 + fx * fx + fy2 + fz2) - subtract;\n            if (val > 0) {\n              this.field[y_offset + x] += val * sign;\n              const ratio = Math.sqrt((x - xs) * (x - xs) + (y - ys) * (y - ys) + (z - zs) * (z - zs)) / radius;\n              const contrib = 1 - ratio * ratio * ratio * (ratio * (ratio * 6 - 15) + 10);\n              this.palette[(y_offset + x) * 3 + 0] += ballColor.r * contrib;\n              this.palette[(y_offset + x) * 3 + 1] += ballColor.g * contrib;\n              this.palette[(y_offset + x) * 3 + 2] += ballColor.b * contrib;\n            }\n          }\n        }\n      }\n    };\n    this.addPlaneX = function (strength, subtract) {\n      const size = this.size,\n        yd = this.yd,\n        zd = this.zd,\n        field = this.field;\n      let x,\n        y,\n        z,\n        xx,\n        val,\n        xdiv,\n        cxy,\n        dist = size * Math.sqrt(strength / subtract);\n      if (dist > size) dist = size;\n      for (x = 0; x < dist; x++) {\n        xdiv = x / size;\n        xx = xdiv * xdiv;\n        val = strength / (1e-4 + xx) - subtract;\n        if (val > 0) {\n          for (y = 0; y < size; y++) {\n            cxy = x + y * yd;\n            for (z = 0; z < size; z++) {\n              field[zd * z + cxy] += val;\n            }\n          }\n        }\n      }\n    };\n    this.addPlaneY = function (strength, subtract) {\n      const size = this.size,\n        yd = this.yd,\n        zd = this.zd,\n        field = this.field;\n      let x,\n        y,\n        z,\n        yy,\n        val,\n        ydiv,\n        cy,\n        cxy,\n        dist = size * Math.sqrt(strength / subtract);\n      if (dist > size) dist = size;\n      for (y = 0; y < dist; y++) {\n        ydiv = y / size;\n        yy = ydiv * ydiv;\n        val = strength / (1e-4 + yy) - subtract;\n        if (val > 0) {\n          cy = y * yd;\n          for (x = 0; x < size; x++) {\n            cxy = cy + x;\n            for (z = 0; z < size; z++) field[zd * z + cxy] += val;\n          }\n        }\n      }\n    };\n    this.addPlaneZ = function (strength, subtract) {\n      const size = this.size,\n        yd = this.yd,\n        zd = this.zd,\n        field = this.field;\n      let x,\n        y,\n        z,\n        zz,\n        val,\n        zdiv,\n        cz,\n        cyz,\n        dist = size * Math.sqrt(strength / subtract);\n      if (dist > size) dist = size;\n      for (z = 0; z < dist; z++) {\n        zdiv = z / size;\n        zz = zdiv * zdiv;\n        val = strength / (1e-4 + zz) - subtract;\n        if (val > 0) {\n          cz = zd * z;\n          for (y = 0; y < size; y++) {\n            cyz = cz + y * yd;\n            for (x = 0; x < size; x++) field[cyz + x] += val;\n          }\n        }\n      }\n    };\n    this.setCell = function (x, y, z, value) {\n      const index = this.size2 * z + this.size * y + x;\n      this.field[index] = value;\n    };\n    this.getCell = function (x, y, z) {\n      const index = this.size2 * z + this.size * y + x;\n      return this.field[index];\n    };\n    this.blur = function (intensity = 1) {\n      const field = this.field;\n      const fieldCopy = field.slice();\n      const size = this.size;\n      const size2 = this.size2;\n      for (let x = 0; x < size; x++) {\n        for (let y = 0; y < size; y++) {\n          for (let z = 0; z < size; z++) {\n            const index = size2 * z + size * y + x;\n            let val = fieldCopy[index];\n            let count = 1;\n            for (let x2 = -1; x2 <= 1; x2 += 2) {\n              const x3 = x2 + x;\n              if (x3 < 0 || x3 >= size) continue;\n              for (let y2 = -1; y2 <= 1; y2 += 2) {\n                const y3 = y2 + y;\n                if (y3 < 0 || y3 >= size) continue;\n                for (let z2 = -1; z2 <= 1; z2 += 2) {\n                  const z3 = z2 + z;\n                  if (z3 < 0 || z3 >= size) continue;\n                  const index2 = size2 * z3 + size * y3 + x3;\n                  const val2 = fieldCopy[index2];\n                  count++;\n                  val += intensity * (val2 - val) / count;\n                }\n              }\n            }\n            field[index] = val;\n          }\n        }\n      }\n    };\n    this.reset = function () {\n      for (let i = 0; i < this.size3; i++) {\n        this.normal_cache[i * 3] = 0;\n        this.field[i] = 0;\n        this.palette[i * 3] = this.palette[i * 3 + 1] = this.palette[i * 3 + 2] = 0;\n      }\n    };\n    this.update = function () {\n      this.count = 0;\n      const smin2 = this.size - 2;\n      for (let z = 1; z < smin2; z++) {\n        const z_offset = this.size2 * z;\n        const fz = (z - this.halfsize) / this.halfsize;\n        for (let y = 1; y < smin2; y++) {\n          const y_offset = z_offset + this.size * y;\n          const fy = (y - this.halfsize) / this.halfsize;\n          for (let x = 1; x < smin2; x++) {\n            const fx = (x - this.halfsize) / this.halfsize;\n            const q = y_offset + x;\n            polygonize(fx, fy, fz, q, this.isolation);\n          }\n        }\n      }\n      this.geometry.setDrawRange(0, this.count);\n      geometry.getAttribute(\"position\").needsUpdate = true;\n      geometry.getAttribute(\"normal\").needsUpdate = true;\n      if (this.enableUvs) geometry.getAttribute(\"uv\").needsUpdate = true;\n      if (this.enableColors) geometry.getAttribute(\"color\").needsUpdate = true;\n      if (this.count / 3 > maxPolyCount) console.warn(\"THREE.MarchingCubes: Geometry buffers too small for rendering. Please create an instance with a higher poly count.\");\n    };\n    this.init(resolution);\n  }\n}\nconst edgeTable = new Int32Array([0, 265, 515, 778, 1030, 1295, 1541, 1804, 2060, 2309, 2575, 2822, 3082, 3331, 3593, 3840, 400, 153, 915, 666, 1430, 1183, 1941, 1692, 2460, 2197, 2975, 2710, 3482, 3219, 3993, 3728, 560, 825, 51, 314, 1590, 1855, 1077, 1340, 2620, 2869, 2111, 2358, 3642, 3891, 3129, 3376, 928, 681, 419, 170, 1958, 1711, 1445, 1196, 2988, 2725, 2479, 2214, 4010, 3747, 3497, 3232, 1120, 1385, 1635, 1898, 102, 367, 613, 876, 3180, 3429, 3695, 3942, 2154, 2403, 2665, 2912, 1520, 1273, 2035, 1786, 502, 255, 1013, 764, 3580, 3317, 4095, 3830, 2554, 2291, 3065, 2800, 1616, 1881, 1107, 1370, 598, 863, 85, 348, 3676, 3925, 3167, 3414, 2650, 2899, 2137, 2384, 1984, 1737, 1475, 1226, 966, 719, 453, 204, 4044, 3781, 3535, 3270, 3018, 2755, 2505, 2240, 2240, 2505, 2755, 3018, 3270, 3535, 3781, 4044, 204, 453, 719, 966, 1226, 1475, 1737, 1984, 2384, 2137, 2899, 2650, 3414, 3167, 3925, 3676, 348, 85, 863, 598, 1370, 1107, 1881, 1616, 2800, 3065, 2291, 2554, 3830, 4095, 3317, 3580, 764, 1013, 255, 502, 1786, 2035, 1273, 1520, 2912, 2665, 2403, 2154, 3942, 3695, 3429, 3180, 876, 613, 367, 102, 1898, 1635, 1385, 1120, 3232, 3497, 3747, 4010, 2214, 2479, 2725, 2988, 1196, 1445, 1711, 1958, 170, 419, 681, 928, 3376, 3129, 3891, 3642, 2358, 2111, 2869, 2620, 1340, 1077, 1855, 1590, 314, 51, 825, 560, 3728, 3993, 3219, 3482, 2710, 2975, 2197, 2460, 1692, 1941, 1183, 1430, 666, 915, 153, 400, 3840, 3593, 3331, 3082, 2822, 2575, 2309, 2060, 1804, 1541, 1295, 1030, 778, 515, 265, 0]);\nconst triTable = new Int32Array([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1, 3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1, 3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1, 9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, 9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, 2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1, 8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1, 9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, 4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1, 3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1, 1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1, 4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1, 4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1, 5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1, 2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1, 9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1, 0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, 2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1, 10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, 4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1, 5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1, 5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, 9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1, 0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1, 1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1, 10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1, 8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1, 2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, 7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, 9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1, 2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1, 11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1, 9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1, 5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1, 11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1, 11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, 1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1, 9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1, 5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1, 2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, 5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1, 6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1, 0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1, 3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1, 6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1, 5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, 10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1, 6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, 1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1, 8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1, 7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1, 3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, 5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1, 0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, 9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1, 8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1, 5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1, 0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1, 6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1, 10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, 10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1, 8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1, 1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1, 0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, 10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1, 0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1, 3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1, 6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1, 9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1, 8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1, 3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, 6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1, 0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1, 10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1, 10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1, 1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1, 2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1, 7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1, 7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1, 2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1, 1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1, 11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1, 8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1, 0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1, 7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, 10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, 2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, 6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1, 7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1, 2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1, 1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1, 10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1, 10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1, 0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1, 7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1, 6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, 8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1, 9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1, 6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1, 4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1, 10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1, 8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, 0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1, 1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1, 8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1, 10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1, 4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1, 10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, 5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, 11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1, 9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, 6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1, 7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1, 3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1, 7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1, 9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1, 3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1, 6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1, 9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1, 1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1, 4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1, 7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1, 6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1, 3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1, 0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1, 6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1, 0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1, 11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1, 6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1, 5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1, 9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1, 1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1, 1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1, 10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1, 0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1, 5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1, 10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1, 11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1, 9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1, 7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1, 2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, 8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1, 9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1, 9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1, 1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1, 9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1, 9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, 5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1, 0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1, 10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1, 2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1, 0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1, 0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1, 9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1, 5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1, 3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1, 5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1, 8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1, 0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1, 9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1, 1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1, 3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1, 4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1, 9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1, 11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1, 11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1, 2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1, 9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1, 3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1, 1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1, 4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1, 4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1, 0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1, 3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1, 3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1, 0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1, 9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1, 1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]);\nexport { MarchingCubes, edgeTable, triTable };","map":{"version":3,"sources":["../../src/objects/MarchingCubes.js"],"names":["resolution"],"mappings":"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AAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,GAAA,EAAO,GAAA,EAAM,IAAA,EAAO,GAAA,EAChD,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EACjD,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,GAAA,EAAO,GAAA,EAAO,EAAA,EAAM,GAAA,EAChD,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EACjD,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,GAAA,EAAO,GAAA,EAAO,GAAA,EAAO,GAAA,EACjD,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EACjD,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EACjD,GAAA,EAAM,GAAA,EAAO,GAAA,EAAO,GAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAChD,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EACjD,GAAA,EAAO,EAAA,EAAM,GAAA,EAAO,GAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAChD,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EACjD,GAAA,EAAO,IAAA,EAAO,GAAA,EAAM,GAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAChD,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EACjD,GAAA,EAAO,GAAA,EAAO,GAAA,EAAO,GAAA,EAAM,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAChD,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IAAA,EAAO,IA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CAAA,EAC1D,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAC1D,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EACpD,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAChE,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAC3D,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAC1D,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EACpD,EAAA,EAAI,CAAA,EAAG,EAAA,EAA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,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAChE,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAChE,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAC1D,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAC/D,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EACzD,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EACzD,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EACnD,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EACjE,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAC5D,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAC3D,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EACtD,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAC1D,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EACtD,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EACpD,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAC3D,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAChE,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAC1D,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAC1D,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EACpD,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,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CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAChE,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAChE,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAC1D,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EACjE,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAC3D,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAC3D,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG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,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EACzD,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EACzD,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAC/D,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,EAAA,EAAI,EAAA,EAAI,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAC5D,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EACvD,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EAAK,CAAA,CAAA,EACvD,EAAA,EAAI,EAAA,EAAI,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAA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","sourcesContent":["import { BufferAttribute, BufferGeometry, Color, DynamicDrawUsage, Mesh, Sphere, Vector3 } from 'three'\n\n/**\n * Port of http://webglsamples.org/blob/blob.html\n */\n\nclass MarchingCubes extends Mesh {\n  constructor(resolution, material, enableUvs = false, enableColors = false, maxPolyCount = 10000) {\n    const geometry = new BufferGeometry()\n\n    super(geometry, material)\n\n    this.isMarchingCubes = true\n\n    const scope = this\n\n    // temp buffers used in polygonize\n\n    const vlist = new Float32Array(12 * 3)\n    const nlist = new Float32Array(12 * 3)\n    const clist = new Float32Array(12 * 3)\n\n    this.enableUvs = enableUvs\n    this.enableColors = enableColors\n\n    // functions have to be object properties\n    // prototype functions kill performance\n    // (tested and it was 4x slower !!!)\n\n    this.init = function (resolution) {\n      this.resolution = resolution\n\n      // parameters\n\n      this.isolation = 80.0\n\n      // size of field, 32 is pushing it in Javascript :)\n\n      this.size = resolution\n      this.size2 = this.size * this.size\n      this.size3 = this.size2 * this.size\n      this.halfsize = this.size / 2.0\n\n      // deltas\n\n      this.delta = 2.0 / this.size\n      this.yd = this.size\n      this.zd = this.size2\n\n      this.field = new Float32Array(this.size3)\n      this.normal_cache = new Float32Array(this.size3 * 3)\n      this.palette = new Float32Array(this.size3 * 3)\n\n      //\n\n      this.count = 0\n\n      const maxVertexCount = maxPolyCount * 3\n\n      this.positionArray = new Float32Array(maxVertexCount * 3)\n      const positionAttribute = new BufferAttribute(this.positionArray, 3)\n      positionAttribute.setUsage(DynamicDrawUsage)\n      geometry.setAttribute('position', positionAttribute)\n\n      this.normalArray = new Float32Array(maxVertexCount * 3)\n      const normalAttribute = new BufferAttribute(this.normalArray, 3)\n      normalAttribute.setUsage(DynamicDrawUsage)\n      geometry.setAttribute('normal', normalAttribute)\n\n      if (this.enableUvs) {\n        this.uvArray = new Float32Array(maxVertexCount * 2)\n        const uvAttribute = new BufferAttribute(this.uvArray, 2)\n        uvAttribute.setUsage(DynamicDrawUsage)\n        geometry.setAttribute('uv', uvAttribute)\n      }\n\n      if (this.enableColors) {\n        this.colorArray = new Float32Array(maxVertexCount * 3)\n        const colorAttribute = new BufferAttribute(this.colorArray, 3)\n        colorAttribute.setUsage(DynamicDrawUsage)\n        geometry.setAttribute('color', colorAttribute)\n      }\n\n      geometry.boundingSphere = new Sphere(new Vector3(), 1)\n    }\n\n    ///////////////////////\n    // Polygonization\n    ///////////////////////\n\n    function lerp(a, b, t) {\n      return a + (b - a) * t\n    }\n\n    function VIntX(q, offset, isol, x, y, z, valp1, valp2, c_offset1, c_offset2) {\n      const mu = (isol - valp1) / (valp2 - valp1),\n        nc = scope.normal_cache\n\n      vlist[offset + 0] = x + mu * scope.delta\n      vlist[offset + 1] = y\n      vlist[offset + 2] = z\n\n      nlist[offset + 0] = lerp(nc[q + 0], nc[q + 3], mu)\n      nlist[offset + 1] = lerp(nc[q + 1], nc[q + 4], mu)\n      nlist[offset + 2] = lerp(nc[q + 2], nc[q + 5], mu)\n\n      clist[offset + 0] = lerp(scope.palette[c_offset1 * 3 + 0], scope.palette[c_offset2 * 3 + 0], mu)\n      clist[offset + 1] = lerp(scope.palette[c_offset1 * 3 + 1], scope.palette[c_offset2 * 3 + 1], mu)\n      clist[offset + 2] = lerp(scope.palette[c_offset1 * 3 + 2], scope.palette[c_offset2 * 3 + 2], mu)\n    }\n\n    function VIntY(q, offset, isol, x, y, z, valp1, valp2, c_offset1, c_offset2) {\n      const mu = (isol - valp1) / (valp2 - valp1),\n        nc = scope.normal_cache\n\n      vlist[offset + 0] = x\n      vlist[offset + 1] = y + mu * scope.delta\n      vlist[offset + 2] = z\n\n      const q2 = q + scope.yd * 3\n\n      nlist[offset + 0] = lerp(nc[q + 0], nc[q2 + 0], mu)\n      nlist[offset + 1] = lerp(nc[q + 1], nc[q2 + 1], mu)\n      nlist[offset + 2] = lerp(nc[q + 2], nc[q2 + 2], mu)\n\n      clist[offset + 0] = lerp(scope.palette[c_offset1 * 3 + 0], scope.palette[c_offset2 * 3 + 0], mu)\n      clist[offset + 1] = lerp(scope.palette[c_offset1 * 3 + 1], scope.palette[c_offset2 * 3 + 1], mu)\n      clist[offset + 2] = lerp(scope.palette[c_offset1 * 3 + 2], scope.palette[c_offset2 * 3 + 2], mu)\n    }\n\n    function VIntZ(q, offset, isol, x, y, z, valp1, valp2, c_offset1, c_offset2) {\n      const mu = (isol - valp1) / (valp2 - valp1),\n        nc = scope.normal_cache\n\n      vlist[offset + 0] = x\n      vlist[offset + 1] = y\n      vlist[offset + 2] = z + mu * scope.delta\n\n      const q2 = q + scope.zd * 3\n\n      nlist[offset + 0] = lerp(nc[q + 0], nc[q2 + 0], mu)\n      nlist[offset + 1] = lerp(nc[q + 1], nc[q2 + 1], mu)\n      nlist[offset + 2] = lerp(nc[q + 2], nc[q2 + 2], mu)\n\n      clist[offset + 0] = lerp(scope.palette[c_offset1 * 3 + 0], scope.palette[c_offset2 * 3 + 0], mu)\n      clist[offset + 1] = lerp(scope.palette[c_offset1 * 3 + 1], scope.palette[c_offset2 * 3 + 1], mu)\n      clist[offset + 2] = lerp(scope.palette[c_offset1 * 3 + 2], scope.palette[c_offset2 * 3 + 2], mu)\n    }\n\n    function compNorm(q) {\n      const q3 = q * 3\n\n      if (scope.normal_cache[q3] === 0.0) {\n        scope.normal_cache[q3 + 0] = scope.field[q - 1] - scope.field[q + 1]\n        scope.normal_cache[q3 + 1] = scope.field[q - scope.yd] - scope.field[q + scope.yd]\n        scope.normal_cache[q3 + 2] = scope.field[q - scope.zd] - scope.field[q + scope.zd]\n      }\n    }\n\n    // Returns total number of triangles. Fills triangles.\n    // (this is where most of time is spent - it's inner work of O(n3) loop )\n\n    function polygonize(fx, fy, fz, q, isol) {\n      // cache indices\n      const q1 = q + 1,\n        qy = q + scope.yd,\n        qz = q + scope.zd,\n        q1y = q1 + scope.yd,\n        q1z = q1 + scope.zd,\n        qyz = q + scope.yd + scope.zd,\n        q1yz = q1 + scope.yd + scope.zd\n\n      let cubeindex = 0\n      const field0 = scope.field[q],\n        field1 = scope.field[q1],\n        field2 = scope.field[qy],\n        field3 = scope.field[q1y],\n        field4 = scope.field[qz],\n        field5 = scope.field[q1z],\n        field6 = scope.field[qyz],\n        field7 = scope.field[q1yz]\n\n      if (field0 < isol) cubeindex |= 1\n      if (field1 < isol) cubeindex |= 2\n      if (field2 < isol) cubeindex |= 8\n      if (field3 < isol) cubeindex |= 4\n      if (field4 < isol) cubeindex |= 16\n      if (field5 < isol) cubeindex |= 32\n      if (field6 < isol) cubeindex |= 128\n      if (field7 < isol) cubeindex |= 64\n\n      // if cube is entirely in/out of the surface - bail, nothing to draw\n\n      const bits = edgeTable[cubeindex]\n      if (bits === 0) return 0\n\n      const d = scope.delta,\n        fx2 = fx + d,\n        fy2 = fy + d,\n        fz2 = fz + d\n\n      // top of the cube\n\n      if (bits & 1) {\n        compNorm(q)\n        compNorm(q1)\n        VIntX(q * 3, 0, isol, fx, fy, fz, field0, field1, q, q1)\n      }\n\n      if (bits & 2) {\n        compNorm(q1)\n        compNorm(q1y)\n        VIntY(q1 * 3, 3, isol, fx2, fy, fz, field1, field3, q1, q1y)\n      }\n\n      if (bits & 4) {\n        compNorm(qy)\n        compNorm(q1y)\n        VIntX(qy * 3, 6, isol, fx, fy2, fz, field2, field3, qy, q1y)\n      }\n\n      if (bits & 8) {\n        compNorm(q)\n        compNorm(qy)\n        VIntY(q * 3, 9, isol, fx, fy, fz, field0, field2, q, qy)\n      }\n\n      // bottom of the cube\n\n      if (bits & 16) {\n        compNorm(qz)\n        compNorm(q1z)\n        VIntX(qz * 3, 12, isol, fx, fy, fz2, field4, field5, qz, q1z)\n      }\n\n      if (bits & 32) {\n        compNorm(q1z)\n        compNorm(q1yz)\n        VIntY(q1z * 3, 15, isol, fx2, fy, fz2, field5, field7, q1z, q1yz)\n      }\n\n      if (bits & 64) {\n        compNorm(qyz)\n        compNorm(q1yz)\n        VIntX(qyz * 3, 18, isol, fx, fy2, fz2, field6, field7, qyz, q1yz)\n      }\n\n      if (bits & 128) {\n        compNorm(qz)\n        compNorm(qyz)\n        VIntY(qz * 3, 21, isol, fx, fy, fz2, field4, field6, qz, qyz)\n      }\n\n      // vertical lines of the cube\n      if (bits & 256) {\n        compNorm(q)\n        compNorm(qz)\n        VIntZ(q * 3, 24, isol, fx, fy, fz, field0, field4, q, qz)\n      }\n\n      if (bits & 512) {\n        compNorm(q1)\n        compNorm(q1z)\n        VIntZ(q1 * 3, 27, isol, fx2, fy, fz, field1, field5, q1, q1z)\n      }\n\n      if (bits & 1024) {\n        compNorm(q1y)\n        compNorm(q1yz)\n        VIntZ(q1y * 3, 30, isol, fx2, fy2, fz, field3, field7, q1y, q1yz)\n      }\n\n      if (bits & 2048) {\n        compNorm(qy)\n        compNorm(qyz)\n        VIntZ(qy * 3, 33, isol, fx, fy2, fz, field2, field6, qy, qyz)\n      }\n\n      cubeindex <<= 4 // re-purpose cubeindex into an offset into triTable\n\n      let o1,\n        o2,\n        o3,\n        numtris = 0,\n        i = 0\n\n      // here is where triangles are created\n\n      while (triTable[cubeindex + i] != -1) {\n        o1 = cubeindex + i\n        o2 = o1 + 1\n        o3 = o1 + 2\n\n        posnormtriv(vlist, nlist, clist, 3 * triTable[o1], 3 * triTable[o2], 3 * triTable[o3])\n\n        i += 3\n        numtris++\n      }\n\n      return numtris\n    }\n\n    function posnormtriv(pos, norm, colors, o1, o2, o3) {\n      const c = scope.count * 3\n\n      // positions\n\n      scope.positionArray[c + 0] = pos[o1]\n      scope.positionArray[c + 1] = pos[o1 + 1]\n      scope.positionArray[c + 2] = pos[o1 + 2]\n\n      scope.positionArray[c + 3] = pos[o2]\n      scope.positionArray[c + 4] = pos[o2 + 1]\n      scope.positionArray[c + 5] = pos[o2 + 2]\n\n      scope.positionArray[c + 6] = pos[o3]\n      scope.positionArray[c + 7] = pos[o3 + 1]\n      scope.positionArray[c + 8] = pos[o3 + 2]\n\n      // normals\n\n      if (scope.material.flatShading === true) {\n        const nx = (norm[o1 + 0] + norm[o2 + 0] + norm[o3 + 0]) / 3\n        const ny = (norm[o1 + 1] + norm[o2 + 1] + norm[o3 + 1]) / 3\n        const nz = (norm[o1 + 2] + norm[o2 + 2] + norm[o3 + 2]) / 3\n\n        scope.normalArray[c + 0] = nx\n        scope.normalArray[c + 1] = ny\n        scope.normalArray[c + 2] = nz\n\n        scope.normalArray[c + 3] = nx\n        scope.normalArray[c + 4] = ny\n        scope.normalArray[c + 5] = nz\n\n        scope.normalArray[c + 6] = nx\n        scope.normalArray[c + 7] = ny\n        scope.normalArray[c + 8] = nz\n      } else {\n        scope.normalArray[c + 0] = norm[o1 + 0]\n        scope.normalArray[c + 1] = norm[o1 + 1]\n        scope.normalArray[c + 2] = norm[o1 + 2]\n\n        scope.normalArray[c + 3] = norm[o2 + 0]\n        scope.normalArray[c + 4] = norm[o2 + 1]\n        scope.normalArray[c + 5] = norm[o2 + 2]\n\n        scope.normalArray[c + 6] = norm[o3 + 0]\n        scope.normalArray[c + 7] = norm[o3 + 1]\n        scope.normalArray[c + 8] = norm[o3 + 2]\n      }\n\n      // uvs\n\n      if (scope.enableUvs) {\n        const d = scope.count * 2\n\n        scope.uvArray[d + 0] = pos[o1 + 0]\n        scope.uvArray[d + 1] = pos[o1 + 2]\n\n        scope.uvArray[d + 2] = pos[o2 + 0]\n        scope.uvArray[d + 3] = pos[o2 + 2]\n\n        scope.uvArray[d + 4] = pos[o3 + 0]\n        scope.uvArray[d + 5] = pos[o3 + 2]\n      }\n\n      // colors\n\n      if (scope.enableColors) {\n        scope.colorArray[c + 0] = colors[o1 + 0]\n        scope.colorArray[c + 1] = colors[o1 + 1]\n        scope.colorArray[c + 2] = colors[o1 + 2]\n\n        scope.colorArray[c + 3] = colors[o2 + 0]\n        scope.colorArray[c + 4] = colors[o2 + 1]\n        scope.colorArray[c + 5] = colors[o2 + 2]\n\n        scope.colorArray[c + 6] = colors[o3 + 0]\n        scope.colorArray[c + 7] = colors[o3 + 1]\n        scope.colorArray[c + 8] = colors[o3 + 2]\n      }\n\n      scope.count += 3\n    }\n\n    /////////////////////////////////////\n    // Metaballs\n    /////////////////////////////////////\n\n    // Adds a reciprocal ball (nice and blobby) that, to be fast, fades to zero after\n    // a fixed distance, determined by strength and subtract.\n\n    this.addBall = function (ballx, bally, ballz, strength, subtract, colors) {\n      const sign = Math.sign(strength)\n      strength = Math.abs(strength)\n      const userDefineColor = !(colors === undefined || colors === null)\n      let ballColor = new Color(ballx, bally, ballz)\n\n      if (userDefineColor) {\n        try {\n          ballColor =\n            colors instanceof Color\n              ? colors\n              : Array.isArray(colors)\n              ? new Color(\n                  Math.min(Math.abs(colors[0]), 1),\n                  Math.min(Math.abs(colors[1]), 1),\n                  Math.min(Math.abs(colors[2]), 1),\n                )\n              : new Color(colors)\n        } catch (err) {\n          ballColor = new Color(ballx, bally, ballz)\n        }\n      }\n\n      // Let's solve the equation to find the radius:\n      // 1.0 / (0.000001 + radius^2) * strength - subtract = 0\n      // strength / (radius^2) = subtract\n      // strength = subtract * radius^2\n      // radius^2 = strength / subtract\n      // radius = sqrt(strength / subtract)\n\n      const radius = this.size * Math.sqrt(strength / subtract),\n        zs = ballz * this.size,\n        ys = bally * this.size,\n        xs = ballx * this.size\n\n      let min_z = Math.floor(zs - radius)\n      if (min_z < 1) min_z = 1\n      let max_z = Math.floor(zs + radius)\n      if (max_z > this.size - 1) max_z = this.size - 1\n      let min_y = Math.floor(ys - radius)\n      if (min_y < 1) min_y = 1\n      let max_y = Math.floor(ys + radius)\n      if (max_y > this.size - 1) max_y = this.size - 1\n      let min_x = Math.floor(xs - radius)\n      if (min_x < 1) min_x = 1\n      let max_x = Math.floor(xs + radius)\n      if (max_x > this.size - 1) max_x = this.size - 1\n\n      // Don't polygonize in the outer layer because normals aren't\n      // well-defined there.\n\n      let x, y, z, y_offset, z_offset, fx, fy, fz, fz2, fy2, val\n\n      for (z = min_z; z < max_z; z++) {\n        z_offset = this.size2 * z\n        fz = z / this.size - ballz\n        fz2 = fz * fz\n\n        for (y = min_y; y < max_y; y++) {\n          y_offset = z_offset + this.size * y\n          fy = y / this.size - bally\n          fy2 = fy * fy\n\n          for (x = min_x; x < max_x; x++) {\n            fx = x / this.size - ballx\n            val = strength / (0.000001 + fx * fx + fy2 + fz2) - subtract\n            if (val > 0.0) {\n              this.field[y_offset + x] += val * sign\n\n              // optimization\n              // http://www.geisswerks.com/ryan/BLOBS/blobs.html\n              const ratio = Math.sqrt((x - xs) * (x - xs) + (y - ys) * (y - ys) + (z - zs) * (z - zs)) / radius\n              const contrib = 1 - ratio * ratio * ratio * (ratio * (ratio * 6 - 15) + 10)\n              this.palette[(y_offset + x) * 3 + 0] += ballColor.r * contrib\n              this.palette[(y_offset + x) * 3 + 1] += ballColor.g * contrib\n              this.palette[(y_offset + x) * 3 + 2] += ballColor.b * contrib\n            }\n          }\n        }\n      }\n    }\n\n    this.addPlaneX = function (strength, subtract) {\n      // cache attribute lookups\n      const size = this.size,\n        yd = this.yd,\n        zd = this.zd,\n        field = this.field\n\n      let x,\n        y,\n        z,\n        xx,\n        val,\n        xdiv,\n        cxy,\n        dist = size * Math.sqrt(strength / subtract)\n\n      if (dist > size) dist = size\n\n      for (x = 0; x < dist; x++) {\n        xdiv = x / size\n        xx = xdiv * xdiv\n        val = strength / (0.0001 + xx) - subtract\n\n        if (val > 0.0) {\n          for (y = 0; y < size; y++) {\n            cxy = x + y * yd\n\n            for (z = 0; z < size; z++) {\n              field[zd * z + cxy] += val\n            }\n          }\n        }\n      }\n    }\n\n    this.addPlaneY = function (strength, subtract) {\n      // cache attribute lookups\n      const size = this.size,\n        yd = this.yd,\n        zd = this.zd,\n        field = this.field\n\n      let x,\n        y,\n        z,\n        yy,\n        val,\n        ydiv,\n        cy,\n        cxy,\n        dist = size * Math.sqrt(strength / subtract)\n\n      if (dist > size) dist = size\n\n      for (y = 0; y < dist; y++) {\n        ydiv = y / size\n        yy = ydiv * ydiv\n        val = strength / (0.0001 + yy) - subtract\n\n        if (val > 0.0) {\n          cy = y * yd\n\n          for (x = 0; x < size; x++) {\n            cxy = cy + x\n\n            for (z = 0; z < size; z++) field[zd * z + cxy] += val\n          }\n        }\n      }\n    }\n\n    this.addPlaneZ = function (strength, subtract) {\n      // cache attribute lookups\n\n      const size = this.size,\n        yd = this.yd,\n        zd = this.zd,\n        field = this.field\n\n      let x,\n        y,\n        z,\n        zz,\n        val,\n        zdiv,\n        cz,\n        cyz,\n        dist = size * Math.sqrt(strength / subtract)\n\n      if (dist > size) dist = size\n\n      for (z = 0; z < dist; z++) {\n        zdiv = z / size\n        zz = zdiv * zdiv\n        val = strength / (0.0001 + zz) - subtract\n        if (val > 0.0) {\n          cz = zd * z\n\n          for (y = 0; y < size; y++) {\n            cyz = cz + y * yd\n\n            for (x = 0; x < size; x++) field[cyz + x] += val\n          }\n        }\n      }\n    }\n\n    /////////////////////////////////////\n    // Updates\n    /////////////////////////////////////\n\n    this.setCell = function (x, y, z, value) {\n      const index = this.size2 * z + this.size * y + x\n      this.field[index] = value\n    }\n\n    this.getCell = function (x, y, z) {\n      const index = this.size2 * z + this.size * y + x\n      return this.field[index]\n    }\n\n    this.blur = function (intensity = 1) {\n      const field = this.field\n      const fieldCopy = field.slice()\n      const size = this.size\n      const size2 = this.size2\n      for (let x = 0; x < size; x++) {\n        for (let y = 0; y < size; y++) {\n          for (let z = 0; z < size; z++) {\n            const index = size2 * z + size * y + x\n            let val = fieldCopy[index]\n            let count = 1\n\n            for (let x2 = -1; x2 <= 1; x2 += 2) {\n              const x3 = x2 + x\n              if (x3 < 0 || x3 >= size) continue\n\n              for (let y2 = -1; y2 <= 1; y2 += 2) {\n                const y3 = y2 + y\n                if (y3 < 0 || y3 >= size) continue\n\n                for (let z2 = -1; z2 <= 1; z2 += 2) {\n                  const z3 = z2 + z\n                  if (z3 < 0 || z3 >= size) continue\n\n                  const index2 = size2 * z3 + size * y3 + x3\n                  const val2 = fieldCopy[index2]\n\n                  count++\n                  val += (intensity * (val2 - val)) / count\n                }\n              }\n            }\n\n            field[index] = val\n          }\n        }\n      }\n    }\n\n    this.reset = function () {\n      // wipe the normal cache\n\n      for (let i = 0; i < this.size3; i++) {\n        this.normal_cache[i * 3] = 0.0\n        this.field[i] = 0.0\n        this.palette[i * 3] = this.palette[i * 3 + 1] = this.palette[i * 3 + 2] = 0.0\n      }\n    }\n\n    this.update = function () {\n      this.count = 0\n\n      // Triangulate. Yeah, this is slow.\n\n      const smin2 = this.size - 2\n\n      for (let z = 1; z < smin2; z++) {\n        const z_offset = this.size2 * z\n        const fz = (z - this.halfsize) / this.halfsize //+ 1\n\n        for (let y = 1; y < smin2; y++) {\n          const y_offset = z_offset + this.size * y\n          const fy = (y - this.halfsize) / this.halfsize //+ 1\n\n          for (let x = 1; x < smin2; x++) {\n            const fx = (x - this.halfsize) / this.halfsize //+ 1\n            const q = y_offset + x\n\n            polygonize(fx, fy, fz, q, this.isolation)\n          }\n        }\n      }\n\n      // set the draw range to only the processed triangles\n\n      this.geometry.setDrawRange(0, this.count)\n\n      // update geometry data\n\n      geometry.getAttribute('position').needsUpdate = true\n      geometry.getAttribute('normal').needsUpdate = true\n\n      if (this.enableUvs) geometry.getAttribute('uv').needsUpdate = true\n      if (this.enableColors) geometry.getAttribute('color').needsUpdate = true\n\n      // safety check\n\n      if (this.count / 3 > maxPolyCount)\n        console.warn(\n          'THREE.MarchingCubes: Geometry buffers too small for rendering. Please create an instance with a higher poly count.',\n        )\n    }\n\n    this.init(resolution)\n  }\n}\n\n/////////////////////////////////////\n// Marching cubes lookup tables\n/////////////////////////////////////\n\n// These tables are straight from Paul Bourke's page:\n// http://paulbourke.net/geometry/polygonise/\n// who in turn got them from Cory Gene Bloyd.\n\n// prettier-ignore\nconst edgeTable = new Int32Array( [\n\t0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,\n\t0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,\n\t0x190, 0x99, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,\n\t0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,\n\t0x230, 0x339, 0x33, 0x13a, 0x636, 0x73f, 0x435, 0x53c,\n\t0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,\n\t0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac,\n\t0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,\n\t0x460, 0x569, 0x663, 0x76a, 0x66, 0x16f, 0x265, 0x36c,\n\t0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,\n\t0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc,\n\t0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,\n\t0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c,\n\t0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,\n\t0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc,\n\t0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,\n\t0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,\n\t0xcc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,\n\t0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,\n\t0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,\n\t0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,\n\t0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,\n\t0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,\n\t0x36c, 0x265, 0x16f, 0x66, 0x76a, 0x663, 0x569, 0x460,\n\t0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,\n\t0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0,\n\t0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,\n\t0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33, 0x339, 0x230,\n\t0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,\n\t0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99, 0x190,\n\t0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,\n\t0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0 ] );\n\n// prettier-ignore\nconst triTable = new Int32Array( [\n\t- 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 1, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 8, 3, 9, 8, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 3, 1, 2, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 2, 10, 0, 2, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 8, 3, 2, 10, 8, 10, 9, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 11, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 11, 2, 8, 11, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 9, 0, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 11, 2, 1, 9, 11, 9, 8, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 10, 1, 11, 10, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 10, 1, 0, 8, 10, 8, 11, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 9, 0, 3, 11, 9, 11, 10, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 8, 10, 10, 8, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 7, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 3, 0, 7, 3, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 1, 9, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 1, 9, 4, 7, 1, 7, 3, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 10, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 4, 7, 3, 0, 4, 1, 2, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 2, 10, 9, 0, 2, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, - 1, - 1, - 1, - 1,\n\t8, 4, 7, 3, 11, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t11, 4, 7, 11, 2, 4, 2, 0, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 0, 1, 8, 4, 7, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, - 1, - 1, - 1, - 1,\n\t3, 10, 1, 3, 11, 10, 7, 8, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, - 1, - 1, - 1, - 1,\n\t4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, - 1, - 1, - 1, - 1,\n\t4, 7, 11, 4, 11, 9, 9, 11, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 5, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 5, 4, 0, 8, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 5, 4, 1, 5, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 5, 4, 8, 3, 5, 3, 1, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 10, 9, 5, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 0, 8, 1, 2, 10, 4, 9, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 2, 10, 5, 4, 2, 4, 0, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, - 1, - 1, - 1, - 1,\n\t9, 5, 4, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 11, 2, 0, 8, 11, 4, 9, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 5, 4, 0, 1, 5, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, - 1, - 1, - 1, - 1,\n\t10, 3, 11, 10, 1, 3, 9, 5, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, - 1, - 1, - 1, - 1,\n\t5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, - 1, - 1, - 1, - 1,\n\t5, 4, 8, 5, 8, 10, 10, 8, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 7, 8, 5, 7, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 3, 0, 9, 5, 3, 5, 7, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 7, 8, 0, 1, 7, 1, 5, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 5, 3, 3, 5, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 7, 8, 9, 5, 7, 10, 1, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, - 1, - 1, - 1, - 1,\n\t8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, - 1, - 1, - 1, - 1,\n\t2, 10, 5, 2, 5, 3, 3, 5, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t7, 9, 5, 7, 8, 9, 3, 11, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, - 1, - 1, - 1, - 1,\n\t2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, - 1, - 1, - 1, - 1,\n\t11, 2, 1, 11, 1, 7, 7, 1, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, - 1, - 1, - 1, - 1,\n\t5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, - 1,\n\t11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, - 1,\n\t11, 10, 5, 7, 11, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 3, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 0, 1, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 8, 3, 1, 9, 8, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 6, 5, 2, 6, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 6, 5, 1, 2, 6, 3, 0, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 6, 5, 9, 0, 6, 0, 2, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, - 1, - 1, - 1, - 1,\n\t2, 3, 11, 10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t11, 0, 8, 11, 2, 0, 10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 1, 9, 2, 3, 11, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, - 1, - 1, - 1, - 1,\n\t6, 3, 11, 6, 5, 3, 5, 1, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, - 1, - 1, - 1, - 1,\n\t3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, - 1, - 1, - 1, - 1,\n\t6, 5, 9, 6, 9, 11, 11, 9, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 10, 6, 4, 7, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 3, 0, 4, 7, 3, 6, 5, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 9, 0, 5, 10, 6, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, - 1, - 1, - 1, - 1,\n\t6, 1, 2, 6, 5, 1, 4, 7, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, - 1, - 1, - 1, - 1,\n\t8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, - 1, - 1, - 1, - 1,\n\t7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, - 1,\n\t3, 11, 2, 7, 8, 4, 10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, - 1, - 1, - 1, - 1,\n\t0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, - 1, - 1, - 1, - 1,\n\t9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, - 1,\n\t8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, - 1, - 1, - 1, - 1,\n\t5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, - 1,\n\t0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, - 1,\n\t6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, - 1, - 1, - 1, - 1,\n\t10, 4, 9, 6, 4, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 10, 6, 4, 9, 10, 0, 8, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 0, 1, 10, 6, 0, 6, 4, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, - 1, - 1, - 1, - 1,\n\t1, 4, 9, 1, 2, 4, 2, 6, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, - 1, - 1, - 1, - 1,\n\t0, 2, 4, 4, 2, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 3, 2, 8, 2, 4, 4, 2, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 4, 9, 10, 6, 4, 11, 2, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, - 1, - 1, - 1, - 1,\n\t3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, - 1, - 1, - 1, - 1,\n\t6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, - 1,\n\t9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, - 1, - 1, - 1, - 1,\n\t8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, - 1,\n\t3, 11, 6, 3, 6, 0, 0, 6, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t6, 4, 8, 11, 6, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t7, 10, 6, 7, 8, 10, 8, 9, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, - 1, - 1, - 1, - 1,\n\t10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, - 1, - 1, - 1, - 1,\n\t10, 6, 7, 10, 7, 1, 1, 7, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, - 1, - 1, - 1, - 1,\n\t2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, - 1,\n\t7, 8, 0, 7, 0, 6, 6, 0, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t7, 3, 2, 6, 7, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, - 1, - 1, - 1, - 1,\n\t2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, - 1,\n\t1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, - 1,\n\t11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, - 1, - 1, - 1, - 1,\n\t8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, - 1,\n\t0, 9, 1, 11, 6, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, - 1, - 1, - 1, - 1,\n\t7, 11, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 0, 8, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 1, 9, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 1, 9, 8, 3, 1, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 1, 2, 6, 11, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 10, 3, 0, 8, 6, 11, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 9, 0, 2, 10, 9, 6, 11, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, - 1, - 1, - 1, - 1,\n\t7, 2, 3, 6, 2, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t7, 0, 8, 7, 6, 0, 6, 2, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 7, 6, 2, 3, 7, 0, 1, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, - 1, - 1, - 1, - 1,\n\t10, 7, 6, 10, 1, 7, 1, 3, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, - 1, - 1, - 1, - 1,\n\t0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, - 1, - 1, - 1, - 1,\n\t7, 6, 10, 7, 10, 8, 8, 10, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t6, 8, 4, 11, 8, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 6, 11, 3, 0, 6, 0, 4, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 6, 11, 8, 4, 6, 9, 0, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, - 1, - 1, - 1, - 1,\n\t6, 8, 4, 6, 11, 8, 2, 10, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, - 1, - 1, - 1, - 1,\n\t4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, - 1, - 1, - 1, - 1,\n\t10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, - 1,\n\t8, 2, 3, 8, 4, 2, 4, 6, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 4, 2, 4, 6, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, - 1, - 1, - 1, - 1,\n\t1, 9, 4, 1, 4, 2, 2, 4, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, - 1, - 1, - 1, - 1,\n\t10, 1, 0, 10, 0, 6, 6, 0, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, - 1,\n\t10, 9, 4, 6, 10, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 9, 5, 7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 3, 4, 9, 5, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 0, 1, 5, 4, 0, 7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, - 1, - 1, - 1, - 1,\n\t9, 5, 4, 10, 1, 2, 7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, - 1, - 1, - 1, - 1,\n\t7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, - 1, - 1, - 1, - 1,\n\t3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, - 1,\n\t7, 2, 3, 7, 6, 2, 5, 4, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, - 1, - 1, - 1, - 1,\n\t3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, - 1, - 1, - 1, - 1,\n\t6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, - 1,\n\t9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, - 1, - 1, - 1, - 1,\n\t1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, - 1,\n\t4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, - 1,\n\t7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, - 1, - 1, - 1, - 1,\n\t6, 9, 5, 6, 11, 9, 11, 8, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, - 1, - 1, - 1, - 1,\n\t0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, - 1, - 1, - 1, - 1,\n\t6, 11, 3, 6, 3, 5, 5, 3, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, - 1, - 1, - 1, - 1,\n\t0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, - 1,\n\t11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, - 1,\n\t6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, - 1, - 1, - 1, - 1,\n\t5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, - 1, - 1, - 1, - 1,\n\t9, 5, 6, 9, 6, 0, 0, 6, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, - 1,\n\t1, 5, 6, 2, 1, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, - 1,\n\t10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, - 1, - 1, - 1, - 1,\n\t0, 3, 8, 5, 6, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 5, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t11, 5, 10, 7, 5, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t11, 5, 10, 11, 7, 5, 8, 3, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 11, 7, 5, 10, 11, 1, 9, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, - 1, - 1, - 1, - 1,\n\t11, 1, 2, 11, 7, 1, 7, 5, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, - 1, - 1, - 1, - 1,\n\t9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, - 1, - 1, - 1, - 1,\n\t7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, - 1,\n\t2, 5, 10, 2, 3, 5, 3, 7, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, - 1, - 1, - 1, - 1,\n\t9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, - 1, - 1, - 1, - 1,\n\t9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, - 1,\n\t1, 3, 5, 3, 7, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 7, 0, 7, 1, 1, 7, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 0, 3, 9, 3, 5, 5, 3, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 8, 7, 5, 9, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 8, 4, 5, 10, 8, 10, 11, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, - 1, - 1, - 1, - 1,\n\t0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, - 1, - 1, - 1, - 1,\n\t10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, - 1,\n\t2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, - 1, - 1, - 1, - 1,\n\t0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, - 1,\n\t0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, - 1,\n\t9, 4, 5, 2, 11, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, - 1, - 1, - 1, - 1,\n\t5, 10, 2, 5, 2, 4, 4, 2, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, - 1,\n\t5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, - 1, - 1, - 1, - 1,\n\t8, 4, 5, 8, 5, 3, 3, 5, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 4, 5, 1, 0, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, - 1, - 1, - 1, - 1,\n\t9, 4, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 11, 7, 4, 9, 11, 9, 10, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, - 1, - 1, - 1, - 1,\n\t1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, - 1, - 1, - 1, - 1,\n\t3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, - 1,\n\t4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, - 1, - 1, - 1, - 1,\n\t9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, - 1,\n\t11, 7, 4, 11, 4, 2, 2, 4, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, - 1, - 1, - 1, - 1,\n\t2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, - 1, - 1, - 1, - 1,\n\t9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, - 1,\n\t3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, - 1,\n\t1, 10, 2, 8, 7, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 9, 1, 4, 1, 7, 7, 1, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, - 1, - 1, - 1, - 1,\n\t4, 0, 3, 7, 4, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 8, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 10, 8, 10, 11, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 0, 9, 3, 9, 11, 11, 9, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 1, 10, 0, 10, 8, 8, 10, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 1, 10, 11, 3, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 11, 1, 11, 9, 9, 11, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, - 1, - 1, - 1, - 1,\n\t0, 2, 11, 8, 0, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 2, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 3, 8, 2, 8, 10, 10, 8, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 10, 2, 0, 9, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, - 1, - 1, - 1, - 1,\n\t1, 10, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 3, 8, 9, 1, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 9, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 3, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t- 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1 ] );\n\nexport { MarchingCubes, edgeTable, triTable }\n"]},"metadata":{},"sourceType":"module"}