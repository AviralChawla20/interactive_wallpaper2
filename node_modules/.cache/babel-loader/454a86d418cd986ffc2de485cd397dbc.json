{"ast":null,"code":"import { Matrix4, Vector3, SphereGeometry, BoxGeometry, MeshStandardMaterial, InstancedMesh, DynamicDrawUsage } from \"three\";\nconst _matrix = new Matrix4();\nconst _vector = new Vector3();\nclass XRHandPrimitiveModel {\n  constructor(handModel, controller, path, handedness, options) {\n    this.controller = controller;\n    this.handModel = handModel;\n    this.envMap = null;\n    let geometry;\n    if (!options || !options.primitive || options.primitive === \"sphere\") {\n      geometry = new SphereGeometry(1, 10, 10);\n    } else if (options.primitive === \"box\") {\n      geometry = new BoxGeometry(1, 1, 1);\n    }\n    const material = new MeshStandardMaterial();\n    this.handMesh = new InstancedMesh(geometry, material, 30);\n    this.handMesh.instanceMatrix.setUsage(DynamicDrawUsage);\n    this.handMesh.castShadow = true;\n    this.handMesh.receiveShadow = true;\n    this.handModel.add(this.handMesh);\n    this.joints = [\"wrist\", \"thumb-metacarpal\", \"thumb-phalanx-proximal\", \"thumb-phalanx-distal\", \"thumb-tip\", \"index-finger-metacarpal\", \"index-finger-phalanx-proximal\", \"index-finger-phalanx-intermediate\", \"index-finger-phalanx-distal\", \"index-finger-tip\", \"middle-finger-metacarpal\", \"middle-finger-phalanx-proximal\", \"middle-finger-phalanx-intermediate\", \"middle-finger-phalanx-distal\", \"middle-finger-tip\", \"ring-finger-metacarpal\", \"ring-finger-phalanx-proximal\", \"ring-finger-phalanx-intermediate\", \"ring-finger-phalanx-distal\", \"ring-finger-tip\", \"pinky-finger-metacarpal\", \"pinky-finger-phalanx-proximal\", \"pinky-finger-phalanx-intermediate\", \"pinky-finger-phalanx-distal\", \"pinky-finger-tip\"];\n  }\n  updateMesh() {\n    const defaultRadius = 8e-3;\n    const joints = this.controller.joints;\n    let count = 0;\n    for (let i = 0; i < this.joints.length; i++) {\n      const joint = joints[this.joints[i]];\n      if (joint.visible) {\n        _vector.setScalar(joint.jointRadius || defaultRadius);\n        _matrix.compose(joint.position, joint.quaternion, _vector);\n        this.handMesh.setMatrixAt(i, _matrix);\n        count++;\n      }\n    }\n    this.handMesh.count = count;\n    this.handMesh.instanceMatrix.needsUpdate = true;\n  }\n}\nexport { XRHandPrimitiveModel };","map":{"version":3,"sources":["../../src/webxr/XRHandPrimitiveModel.js"],"names":[],"mappings":";AAUA,MAAM,OAAA,GAAU,IAAI,OAAA,CAAS,CAAA;AAC7B,MAAM,OAAA,GAAU,IAAI,OAAA,CAAS,CAAA;AAE7B,MAAM,oBAAA,CAAqB;EACzB,WAAA,CAAY,SAAA,EAAW,UAAA,EAAY,IAAA,EAAM,UAAA,EAAY,OAAA,EAAS;IAC5D,IAAA,CAAK,UAAA,GAAa,UAAA;IAClB,IAAA,CAAK,SAAA,GAAY,SAAA;IACjB,IAAA,CAAK,MAAA,GAAS,IAAA;IAEd,IAAI,QAAA;IAEJ,IAAI,CAAC,OAAA,IAAW,CAAC,OAAA,CAAQ,SAAA,IAAa,OAAA,CAAQ,SAAA,KAAc,QAAA,EAAU;MACpE,QAAA,GAAW,IAAI,cAAA,CAAe,CAAA,EAAG,EAAA,EAAI,EAAE,CAAA;IAC7C,CAAA,MAAA,IAAe,OAAA,CAAQ,SAAA,KAAc,KAAA,EAAO;MACtC,QAAA,GAAW,IAAI,WAAA,CAAY,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;IACnC;IAED,MAAM,QAAA,GAAW,IAAI,oBAAA,CAAsB,CAAA;IAE3C,IAAA,CAAK,QAAA,GAAW,IAAI,aAAA,CAAc,QAAA,EAAU,QAAA,EAAU,EAAE,CAAA;IACxD,IAAA,CAAK,QAAA,CAAS,cAAA,CAAe,QAAA,CAAS,gBAAgB,CAAA;IACtD,IAAA,CAAK,QAAA,CAAS,UAAA,GAAa,IAAA;IAC3B,IAAA,CAAK,QAAA,CAAS,aAAA,GAAgB,IAAA;IAC9B,IAAA,CAAK,SAAA,CAAU,GAAA,CAAI,IAAA,CAAK,QAAQ,CAAA;IAEhC,IAAA,CAAK,MAAA,GAAS,CACZ,OAAA,EACA,kBAAA,EACA,wBAAA,EACA,sBAAA,EACA,WAAA,EACA,yBAAA,EACA,+BAAA,EACA,mCAAA,EACA,6BAAA,EACA,kBAAA,EACA,0BAAA,EACA,gCAAA,EACA,oCAAA,EACA,8BAAA,EACA,mBAAA,EACA,wBAAA,EACA,8BAAA,EACA,kCAAA,EACA,4BAAA,EACA,iBAAA,EACA,yBAAA,EACA,+BAAA,EACA,mCAAA,EACA,6BAAA,EACA,kBAAA,CACD;EACF;EAED,UAAA,CAAA,EAAa;IACX,MAAM,aAAA,GAAgB,IAAA;IACtB,MAAM,MAAA,GAAS,IAAA,CAAK,UAAA,CAAW,MAAA;IAE/B,IAAI,KAAA,GAAQ,CAAA;IAEZ,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,IAAA,CAAK,MAAA,CAAO,MAAA,EAAQ,CAAA,EAAA,EAAK;MAC3C,MAAM,KAAA,GAAQ,MAAA,CAAO,IAAA,CAAK,MAAA,CAAO,CAAC,CAAC,CAAA;MAEnC,IAAI,KAAA,CAAM,OAAA,EAAS;QACjB,OAAA,CAAQ,SAAA,CAAU,KAAA,CAAM,WAAA,IAAe,aAAa,CAAA;QACpD,OAAA,CAAQ,OAAA,CAAQ,KAAA,CAAM,QAAA,EAAU,KAAA,CAAM,UAAA,EAAY,OAAO,CAAA;QACzD,IAAA,CAAK,QAAA,CAAS,WAAA,CAAY,CAAA,EAAG,OAAO,CAAA;QAEpC,KAAA,EAAA;MACD;IACF;IAED,IAAA,CAAK,QAAA,CAAS,KAAA,GAAQ,KAAA;IACtB,IAAA,CAAK,QAAA,CAAS,cAAA,CAAe,WAAA,GAAc,IAAA;EAC5C;AACH","sourcesContent":["import {\n  DynamicDrawUsage,\n  SphereGeometry,\n  BoxGeometry,\n  MeshStandardMaterial,\n  InstancedMesh,\n  Matrix4,\n  Vector3,\n} from 'three'\n\nconst _matrix = new Matrix4()\nconst _vector = new Vector3()\n\nclass XRHandPrimitiveModel {\n  constructor(handModel, controller, path, handedness, options) {\n    this.controller = controller\n    this.handModel = handModel\n    this.envMap = null\n\n    let geometry\n\n    if (!options || !options.primitive || options.primitive === 'sphere') {\n      geometry = new SphereGeometry(1, 10, 10)\n    } else if (options.primitive === 'box') {\n      geometry = new BoxGeometry(1, 1, 1)\n    }\n\n    const material = new MeshStandardMaterial()\n\n    this.handMesh = new InstancedMesh(geometry, material, 30)\n    this.handMesh.instanceMatrix.setUsage(DynamicDrawUsage) // will be updated every frame\n    this.handMesh.castShadow = true\n    this.handMesh.receiveShadow = true\n    this.handModel.add(this.handMesh)\n\n    this.joints = [\n      'wrist',\n      'thumb-metacarpal',\n      'thumb-phalanx-proximal',\n      'thumb-phalanx-distal',\n      'thumb-tip',\n      'index-finger-metacarpal',\n      'index-finger-phalanx-proximal',\n      'index-finger-phalanx-intermediate',\n      'index-finger-phalanx-distal',\n      'index-finger-tip',\n      'middle-finger-metacarpal',\n      'middle-finger-phalanx-proximal',\n      'middle-finger-phalanx-intermediate',\n      'middle-finger-phalanx-distal',\n      'middle-finger-tip',\n      'ring-finger-metacarpal',\n      'ring-finger-phalanx-proximal',\n      'ring-finger-phalanx-intermediate',\n      'ring-finger-phalanx-distal',\n      'ring-finger-tip',\n      'pinky-finger-metacarpal',\n      'pinky-finger-phalanx-proximal',\n      'pinky-finger-phalanx-intermediate',\n      'pinky-finger-phalanx-distal',\n      'pinky-finger-tip',\n    ]\n  }\n\n  updateMesh() {\n    const defaultRadius = 0.008\n    const joints = this.controller.joints\n\n    let count = 0\n\n    for (let i = 0; i < this.joints.length; i++) {\n      const joint = joints[this.joints[i]]\n\n      if (joint.visible) {\n        _vector.setScalar(joint.jointRadius || defaultRadius)\n        _matrix.compose(joint.position, joint.quaternion, _vector)\n        this.handMesh.setMatrixAt(i, _matrix)\n\n        count++\n      }\n    }\n\n    this.handMesh.count = count\n    this.handMesh.instanceMatrix.needsUpdate = true\n  }\n}\n\nexport { XRHandPrimitiveModel }\n"]},"metadata":{},"sourceType":"module"}