{"ast":null,"code":"import { Vector3, Curve } from \"three\";\nimport { ParametricGeometry } from \"./ParametricGeometry.js\";\nclass TubeGeometry extends ParametricGeometry {\n  constructor(path, segments = 64, radius = 1, segmentsRadius = 8, closed = false) {\n    const numpoints = segments + 1;\n    const frames = path.computeFrenetFrames(segments, closed),\n      tangents = frames.tangents,\n      normals = frames.normals,\n      binormals = frames.binormals;\n    const position = new Vector3();\n    function ParametricTube(u, v, target) {\n      v *= 2 * Math.PI;\n      const i = Math.floor(u * (numpoints - 1));\n      path.getPointAt(u, position);\n      const normal = normals[i];\n      const binormal = binormals[i];\n      const cx = -radius * Math.cos(v);\n      const cy = radius * Math.sin(v);\n      position.x += cx * normal.x + cy * binormal.x;\n      position.y += cx * normal.y + cy * binormal.y;\n      position.z += cx * normal.z + cy * binormal.z;\n      target.copy(position);\n    }\n    super(ParametricTube, segments, segmentsRadius);\n    this.tangents = tangents;\n    this.normals = normals;\n    this.binormals = binormals;\n    this.path = path;\n    this.segments = segments;\n    this.radius = radius;\n    this.segmentsRadius = segmentsRadius;\n    this.closed = closed;\n  }\n}\nconst ParametricGeometries = {\n  klein: function (v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    let x, z;\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n    const y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function (width, height) {\n    return function (u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function (u, t, target) {\n    u = u - 0.5;\n    const v = 2 * Math.PI * t;\n    const a = 2;\n    const x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    const y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    const z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function (u, t, target) {\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    const phi = u / 2;\n    const major = 2.25,\n      a = 0.125,\n      b = 0.65;\n    let x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    const z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    const y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  },\n  TubeGeometry,\n  TorusKnotGeometry: class TorusKnotGeometry extends TubeGeometry {\n    constructor(radius = 200, tube = 40, segmentsT = 64, segmentsR = 8, p = 2, q = 3) {\n      class TorusKnotCurve extends Curve {\n        getPoint(t, optionalTarget = new Vector3()) {\n          const point = optionalTarget;\n          t *= Math.PI * 2;\n          const r = 0.5;\n          const x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n          const y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n          const z = r * Math.sin(q * t);\n          return point.set(x, y, z).multiplyScalar(radius);\n        }\n      }\n      const segments = segmentsT;\n      const radiusSegments = segmentsR;\n      const extrudePath = new TorusKnotCurve();\n      super(extrudePath, segments, tube, radiusSegments, true, false);\n      this.radius = radius;\n      this.tube = tube;\n      this.segmentsT = segmentsT;\n      this.segmentsR = segmentsR;\n      this.p = p;\n      this.q = q;\n    }\n  },\n  SphereGeometry: class SphereGeometry extends ParametricGeometry {\n    constructor(size, u, v) {\n      function sphere(u2, v2, target) {\n        u2 *= Math.PI;\n        v2 *= 2 * Math.PI;\n        const x = size * Math.sin(u2) * Math.cos(v2);\n        const y = size * Math.sin(u2) * Math.sin(v2);\n        const z = size * Math.cos(u2);\n        target.set(x, y, z);\n      }\n      super(sphere, u, v);\n    }\n  },\n  PlaneGeometry: class PlaneGeometry extends ParametricGeometry {\n    constructor(width, depth, segmentsWidth, segmentsDepth) {\n      function plane(u, v, target) {\n        const x = u * width;\n        const y = 0;\n        const z = v * depth;\n        target.set(x, y, z);\n      }\n      super(plane, segmentsWidth, segmentsDepth);\n    }\n  }\n};\nexport { ParametricGeometries };","map":{"version":3,"sources":["../../src/geometries/ParametricGeometries.js"],"names":["u","v"],"mappings":"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","sourcesContent":["import { Curve, Vector3 } from 'three'\nimport { ParametricGeometry } from './ParametricGeometry'\n\nclass TubeGeometry extends ParametricGeometry {\n  constructor(path, segments = 64, radius = 1, segmentsRadius = 8, closed = false) {\n    const numpoints = segments + 1\n\n    const frames = path.computeFrenetFrames(segments, closed),\n      tangents = frames.tangents,\n      normals = frames.normals,\n      binormals = frames.binormals\n\n    const position = new Vector3()\n\n    function ParametricTube(u, v, target) {\n      v *= 2 * Math.PI\n\n      const i = Math.floor(u * (numpoints - 1))\n\n      path.getPointAt(u, position)\n\n      const normal = normals[i]\n      const binormal = binormals[i]\n\n      const cx = -radius * Math.cos(v) // TODO: Hack: Negating it so it faces outside.\n      const cy = radius * Math.sin(v)\n\n      position.x += cx * normal.x + cy * binormal.x\n      position.y += cx * normal.y + cy * binormal.y\n      position.z += cx * normal.z + cy * binormal.z\n\n      target.copy(position)\n    }\n\n    super(ParametricTube, segments, segmentsRadius)\n\n    // proxy internals\n\n    this.tangents = tangents\n    this.normals = normals\n    this.binormals = binormals\n\n    this.path = path\n    this.segments = segments\n    this.radius = radius\n    this.segmentsRadius = segmentsRadius\n    this.closed = closed\n  }\n}\n\n/**\n * Experimental primitive geometry creation using Surface Parametric equations\n */\nconst ParametricGeometries = {\n  klein: function (v, u, target) {\n    u *= Math.PI\n    v *= 2 * Math.PI\n\n    u = u * 2\n    let x, z\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v)\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v)\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI)\n      z = -8 * Math.sin(u)\n    }\n\n    const y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v)\n\n    target.set(x, y, z)\n  },\n\n  plane: function (width, height) {\n    return function (u, v, target) {\n      const x = u * width\n      const y = 0\n      const z = v * height\n\n      target.set(x, y, z)\n    }\n  },\n\n  mobius: function (u, t, target) {\n    // flat mobius strip\n    // http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n    u = u - 0.5\n    const v = 2 * Math.PI * t\n\n    const a = 2\n\n    const x = Math.cos(v) * (a + u * Math.cos(v / 2))\n    const y = Math.sin(v) * (a + u * Math.cos(v / 2))\n    const z = u * Math.sin(v / 2)\n\n    target.set(x, y, z)\n  },\n\n  mobius3d: function (u, t, target) {\n    // volumetric mobius strip\n\n    u *= Math.PI\n    t *= 2 * Math.PI\n\n    u = u * 2\n    const phi = u / 2\n    const major = 2.25,\n      a = 0.125,\n      b = 0.65\n\n    let x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi)\n    const z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi)\n    const y = (major + x) * Math.sin(u)\n    x = (major + x) * Math.cos(u)\n\n    target.set(x, y, z)\n  },\n  TubeGeometry,\n  TorusKnotGeometry: class TorusKnotGeometry extends TubeGeometry {\n    constructor(radius = 200, tube = 40, segmentsT = 64, segmentsR = 8, p = 2, q = 3) {\n      class TorusKnotCurve extends Curve {\n        getPoint(t, optionalTarget = new Vector3()) {\n          const point = optionalTarget\n\n          t *= Math.PI * 2\n\n          const r = 0.5\n\n          const x = (1 + r * Math.cos(q * t)) * Math.cos(p * t)\n          const y = (1 + r * Math.cos(q * t)) * Math.sin(p * t)\n          const z = r * Math.sin(q * t)\n\n          return point.set(x, y, z).multiplyScalar(radius)\n        }\n      }\n\n      const segments = segmentsT\n      const radiusSegments = segmentsR\n      const extrudePath = new TorusKnotCurve()\n\n      super(extrudePath, segments, tube, radiusSegments, true, false)\n\n      this.radius = radius\n      this.tube = tube\n      this.segmentsT = segmentsT\n      this.segmentsR = segmentsR\n      this.p = p\n      this.q = q\n    }\n  },\n  SphereGeometry: class SphereGeometry extends ParametricGeometry {\n    constructor(size, u, v) {\n      function sphere(u, v, target) {\n        u *= Math.PI\n        v *= 2 * Math.PI\n\n        const x = size * Math.sin(u) * Math.cos(v)\n        const y = size * Math.sin(u) * Math.sin(v)\n        const z = size * Math.cos(u)\n\n        target.set(x, y, z)\n      }\n\n      super(sphere, u, v)\n    }\n  },\n  PlaneGeometry: class PlaneGeometry extends ParametricGeometry {\n    constructor(width, depth, segmentsWidth, segmentsDepth) {\n      function plane(u, v, target) {\n        const x = u * width\n        const y = 0\n        const z = v * depth\n\n        target.set(x, y, z)\n      }\n\n      super(plane, segmentsWidth, segmentsDepth)\n    }\n  },\n}\n\nexport { ParametricGeometries }\n"]},"metadata":{},"sourceType":"module"}