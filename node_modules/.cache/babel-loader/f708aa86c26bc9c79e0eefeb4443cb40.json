{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { GLTFLoader } from \"../loaders/GLTFLoader.js\";\nconst DEFAULT_HAND_PROFILE_PATH = \"https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles/generic-hand/\";\nclass XRHandMeshModel {\n  constructor(handModel, controller, path = DEFAULT_HAND_PROFILE_PATH, handedness, customModelPath) {\n    __publicField(this, \"controller\");\n    __publicField(this, \"handModel\");\n    __publicField(this, \"bones\");\n    this.controller = controller;\n    this.handModel = handModel;\n    this.bones = [];\n    const loader = new GLTFLoader();\n    if (!customModelPath) loader.setPath(path);\n    loader.load(customModelPath != null ? customModelPath : `${handedness}.glb`, gltf => {\n      const object = gltf.scene.children[0];\n      this.handModel.add(object);\n      const mesh = object.getObjectByProperty(\"type\", \"SkinnedMesh\");\n      mesh.frustumCulled = false;\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      const joints = [\"wrist\", \"thumb-metacarpal\", \"thumb-phalanx-proximal\", \"thumb-phalanx-distal\", \"thumb-tip\", \"index-finger-metacarpal\", \"index-finger-phalanx-proximal\", \"index-finger-phalanx-intermediate\", \"index-finger-phalanx-distal\", \"index-finger-tip\", \"middle-finger-metacarpal\", \"middle-finger-phalanx-proximal\", \"middle-finger-phalanx-intermediate\", \"middle-finger-phalanx-distal\", \"middle-finger-tip\", \"ring-finger-metacarpal\", \"ring-finger-phalanx-proximal\", \"ring-finger-phalanx-intermediate\", \"ring-finger-phalanx-distal\", \"ring-finger-tip\", \"pinky-finger-metacarpal\", \"pinky-finger-phalanx-proximal\", \"pinky-finger-phalanx-intermediate\", \"pinky-finger-phalanx-distal\", \"pinky-finger-tip\"];\n      joints.forEach(jointName => {\n        const bone = object.getObjectByName(jointName);\n        if (bone !== void 0) {\n          bone.jointName = jointName;\n        } else {\n          console.warn(`Couldn't find ${jointName} in ${handedness} hand mesh`);\n        }\n        this.bones.push(bone);\n      });\n    });\n  }\n  updateMesh() {\n    const XRJoints = this.controller.joints;\n    for (let i = 0; i < this.bones.length; i++) {\n      const bone = this.bones[i];\n      if (bone) {\n        const XRJoint = XRJoints[bone.jointName];\n        if (XRJoint.visible) {\n          const position = XRJoint.position;\n          bone.position.copy(position);\n          bone.quaternion.copy(XRJoint.quaternion);\n        }\n      }\n    }\n  }\n}\nexport { XRHandMeshModel };","map":{"version":3,"sources":["../../src/webxr/XRHandMeshModel.ts"],"names":[],"mappings":";;;;;;;;;;;;AAGA,MAAM,yBAAA,GACJ,2FAAA;AAEF,MAAM,eAAA,CAAgB;EAKpB,WAAA,CACE,SAAA,EACA,UAAA,EACA,IAAA,GAAe,yBAAA,EACf,UAAA,EACA,eAAA,EACA;IAVF,aAAA,CAAA,IAAA,EAAA,YAAA,CAAA;IACA,aAAA,CAAA,IAAA,EAAA,WAAA,CAAA;IACA,aAAA,CAAA,IAAA,EAAA,OAAA,CAAA;IASE,IAAA,CAAK,UAAA,GAAa,UAAA;IAClB,IAAA,CAAK,SAAA,GAAY,SAAA;IAEjB,IAAA,CAAK,KAAA,GAAQ,EAAA;IAEP,MAAA,MAAA,GAAS,IAAI,UAAA,CAAA,CAAA;IACnB,IAAI,CAAC,eAAA,EAAiB,MAAA,CAAO,OAAA,CAAQ,IAAI,CAAA;IACzC,MAAA,CAAO,IAAA,CAAK,eAAA,IAAA,IAAA,GAAA,eAAA,GAAmB,GAAG,UAAA,MAAA,EAAmB,IAAA,IAA8B;MACjF,MAAM,MAAA,GAAS,IAAA,CAAK,KAAA,CAAM,QAAA,CAAS,CAAC,CAAA;MAC/B,IAAA,CAAA,SAAA,CAAU,GAAA,CAAI,MAAM,CAAA;MAEzB,MAAM,IAAA,GAAO,MAAA,CAAO,mBAAA,CAAoB,MAAA,EAAQ,aAAa,CAAA;MAC7D,IAAA,CAAK,aAAA,GAAgB,KAAA;MACrB,IAAA,CAAK,UAAA,GAAa,IAAA;MAClB,IAAA,CAAK,aAAA,GAAgB,IAAA;MAErB,MAAM,MAAA,GAAS,CACb,OAAA,EACA,kBAAA,EACA,wBAAA,EACA,sBAAA,EACA,WAAA,EACA,yBAAA,EACA,+BAAA,EACA,mCAAA,EACA,6BAAA,EACA,kBAAA,EACA,0BAAA,EACA,gCAAA,EACA,oCAAA,EACA,8BAAA,EACA,mBAAA,EACA,wBAAA,EACA,8BAAA,EACA,kCAAA,EACA,4BAAA,EACA,iBAAA,EACA,yBAAA,EACA,+BAAA,EACA,mCAAA,EACA,6BAAA,EACA,kBAAA,CAAA;MAGK,MAAA,CAAA,OAAA,CAAS,SAAA,IAAc;QACtB,MAAA,IAAA,GAAO,MAAA,CAAO,eAAA,CAAgB,SAAS,CAAA;QAE7C,IAAI,IAAA,KAAS,KAAA,CAAA,EAAW;UACtB,IAAA,CAAK,SAAA,GAAY,SAAA;QAAA,CAAA,MACZ;UACG,OAAA,CAAA,IAAA,CAAK,iBAAiB,SAAA,OAAgB,UAAA,YAAsB,CAAA;QACtE;QAEK,IAAA,CAAA,KAAA,CAAM,IAAA,CAAK,IAAI,CAAA;MAAA,CACrB,CAAA;IAAA,CACF,CAAA;EACH;EAEA,UAAA,CAAA,EAAmB;IAEX,MAAA,QAAA,GAAY,IAAA,CAAK,UAAA,CAAmB,MAAA;IAE1C,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,IAAA,CAAK,KAAA,CAAM,MAAA,EAAQ,CAAA,EAAA,EAAK;MACpC,MAAA,IAAA,GAAO,IAAA,CAAK,KAAA,CAAM,CAAC,CAAA;MAEzB,IAAI,IAAA,EAAM;QACF,MAAA,OAAA,GAAU,QAAA,CAAU,IAAA,CAAa,SAAS,CAAA;QAEhD,IAAI,OAAA,CAAQ,OAAA,EAAS;UACnB,MAAM,QAAA,GAAW,OAAA,CAAQ,QAAA;UAEpB,IAAA,CAAA,QAAA,CAAS,IAAA,CAAK,QAAQ,CAAA;UACtB,IAAA,CAAA,UAAA,CAAW,IAAA,CAAK,OAAA,CAAQ,UAAU,CAAA;QAEzC;MACF;IACF;EACF;AACF","sourcesContent":["import { Object3D } from 'three'\nimport { GLTFLoader } from '../loaders/GLTFLoader'\n\nconst DEFAULT_HAND_PROFILE_PATH =\n  'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles/generic-hand/'\n\nclass XRHandMeshModel {\n  controller: Object3D\n  handModel: Object3D\n  bones: Object3D[]\n\n  constructor(\n    handModel: Object3D,\n    controller: Object3D,\n    path: string = DEFAULT_HAND_PROFILE_PATH,\n    handedness: string,\n    customModelPath?: string,\n  ) {\n    this.controller = controller\n    this.handModel = handModel\n\n    this.bones = []\n\n    const loader = new GLTFLoader()\n    if (!customModelPath) loader.setPath(path)\n    loader.load(customModelPath ?? `${handedness}.glb`, (gltf: { scene: Object3D }) => {\n      const object = gltf.scene.children[0]\n      this.handModel.add(object)\n\n      const mesh = object.getObjectByProperty('type', 'SkinnedMesh')!\n      mesh.frustumCulled = false\n      mesh.castShadow = true\n      mesh.receiveShadow = true\n\n      const joints = [\n        'wrist',\n        'thumb-metacarpal',\n        'thumb-phalanx-proximal',\n        'thumb-phalanx-distal',\n        'thumb-tip',\n        'index-finger-metacarpal',\n        'index-finger-phalanx-proximal',\n        'index-finger-phalanx-intermediate',\n        'index-finger-phalanx-distal',\n        'index-finger-tip',\n        'middle-finger-metacarpal',\n        'middle-finger-phalanx-proximal',\n        'middle-finger-phalanx-intermediate',\n        'middle-finger-phalanx-distal',\n        'middle-finger-tip',\n        'ring-finger-metacarpal',\n        'ring-finger-phalanx-proximal',\n        'ring-finger-phalanx-intermediate',\n        'ring-finger-phalanx-distal',\n        'ring-finger-tip',\n        'pinky-finger-metacarpal',\n        'pinky-finger-phalanx-proximal',\n        'pinky-finger-phalanx-intermediate',\n        'pinky-finger-phalanx-distal',\n        'pinky-finger-tip',\n      ]\n\n      joints.forEach((jointName) => {\n        const bone = object.getObjectByName(jointName) as any\n\n        if (bone !== undefined) {\n          bone.jointName = jointName\n        } else {\n          console.warn(`Couldn't find ${jointName} in ${handedness} hand mesh`)\n        }\n\n        this.bones.push(bone)\n      })\n    })\n  }\n\n  updateMesh(): void {\n    // XR Joints\n    const XRJoints = (this.controller as any).joints\n\n    for (let i = 0; i < this.bones.length; i++) {\n      const bone = this.bones[i]\n\n      if (bone) {\n        const XRJoint = XRJoints[(bone as any).jointName]\n\n        if (XRJoint.visible) {\n          const position = XRJoint.position\n\n          bone.position.copy(position)\n          bone.quaternion.copy(XRJoint.quaternion)\n          // bone.scale.setScalar( XRJoint.jointRadius || defaultRadius );\n        }\n      }\n    }\n  }\n}\n\nexport { XRHandMeshModel }\n"]},"metadata":{},"sourceType":"module"}