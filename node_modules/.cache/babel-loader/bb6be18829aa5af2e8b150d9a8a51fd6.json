{"ast":null,"code":"import { Vector3, Matrix4, Quaternion, Euler, Bone, Object3D, MeshBasicMaterial, Color, Mesh, BoxGeometry, SphereGeometry } from \"three\";\nimport { CapsuleGeometry } from \"../_polyfill/CapsuleGeometry.js\";\nclass MMDPhysics {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} rigidBodyParams\n   * @param {Array<Object>} (optional) constraintParams\n   * @param {Object} params - (optional)\n   * @param {Number} params.unitStep - Default is 1 / 65.\n   * @param {Integer} params.maxStepNum - Default is 3.\n   * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n   */\n  constructor(mesh, rigidBodyParams, constraintParams = [], params = {}) {\n    if (typeof Ammo === \"undefined\") {\n      throw new Error(\"THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js\");\n    }\n    this.manager = new ResourceManager();\n    this.mesh = mesh;\n    this.unitStep = params.unitStep !== void 0 ? params.unitStep : 1 / 65;\n    this.maxStepNum = params.maxStepNum !== void 0 ? params.maxStepNum : 3;\n    this.gravity = new Vector3(0, -9.8 * 10, 0);\n    if (params.gravity !== void 0) this.gravity.copy(params.gravity);\n    this.world = params.world !== void 0 ? params.world : null;\n    this.bodies = [];\n    this.constraints = [];\n    this._init(mesh, rigidBodyParams, constraintParams);\n  }\n  /**\n   * Advances Physics calculation and updates bones.\n   *\n   * @param {Number} delta - time in second\n   * @return {MMDPhysics}\n   */\n  update(delta) {\n    const manager = this.manager;\n    const mesh = this.mesh;\n    let isNonDefaultScale = false;\n    const position = manager.allocThreeVector3();\n    const quaternion = manager.allocThreeQuaternion();\n    const scale = manager.allocThreeVector3();\n    mesh.matrixWorld.decompose(position, quaternion, scale);\n    if (scale.x !== 1 || scale.y !== 1 || scale.z !== 1) {\n      isNonDefaultScale = true;\n    }\n    let parent;\n    if (isNonDefaultScale) {\n      parent = mesh.parent;\n      if (parent !== null) mesh.parent = null;\n      scale.copy(this.mesh.scale);\n      mesh.scale.set(1, 1, 1);\n      mesh.updateMatrixWorld(true);\n    }\n    this._updateRigidBodies();\n    this._stepSimulation(delta);\n    this._updateBones();\n    if (isNonDefaultScale) {\n      if (parent !== null) mesh.parent = parent;\n      mesh.scale.copy(scale);\n    }\n    manager.freeThreeVector3(scale);\n    manager.freeThreeQuaternion(quaternion);\n    manager.freeThreeVector3(position);\n    return this;\n  }\n  /**\n   * Resets rigid bodies transorm to current bone's.\n   *\n   * @return {MMDPhysics}\n   */\n  reset() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].reset();\n    }\n    return this;\n  }\n  /**\n   * Warm ups Rigid bodies. Calculates cycles steps.\n   *\n   * @param {Integer} cycles\n   * @return {MMDPhysics}\n   */\n  warmup(cycles) {\n    for (let i = 0; i < cycles; i++) {\n      this.update(1 / 60);\n    }\n    return this;\n  }\n  /**\n   * Sets gravity.\n   *\n   * @param {Vector3} gravity\n   * @return {MMDPhysicsHelper}\n   */\n  setGravity(gravity) {\n    this.world.setGravity(new Ammo.btVector3(gravity.x, gravity.y, gravity.z));\n    this.gravity.copy(gravity);\n    return this;\n  }\n  /**\n   * Creates MMDPhysicsHelper\n   *\n   * @return {MMDPhysicsHelper}\n   */\n  createHelper() {\n    return new MMDPhysicsHelper(this.mesh, this);\n  }\n  // private methods\n  _init(mesh, rigidBodyParams, constraintParams) {\n    const manager = this.manager;\n    const parent = mesh.parent;\n    if (parent !== null) mesh.parent = null;\n    const currentPosition = manager.allocThreeVector3();\n    const currentQuaternion = manager.allocThreeQuaternion();\n    const currentScale = manager.allocThreeVector3();\n    currentPosition.copy(mesh.position);\n    currentQuaternion.copy(mesh.quaternion);\n    currentScale.copy(mesh.scale);\n    mesh.position.set(0, 0, 0);\n    mesh.quaternion.set(0, 0, 0, 1);\n    mesh.scale.set(1, 1, 1);\n    mesh.updateMatrixWorld(true);\n    if (this.world === null) {\n      this.world = this._createWorld();\n      this.setGravity(this.gravity);\n    }\n    this._initRigidBodies(rigidBodyParams);\n    this._initConstraints(constraintParams);\n    if (parent !== null) mesh.parent = parent;\n    mesh.position.copy(currentPosition);\n    mesh.quaternion.copy(currentQuaternion);\n    mesh.scale.copy(currentScale);\n    mesh.updateMatrixWorld(true);\n    this.reset();\n    manager.freeThreeVector3(currentPosition);\n    manager.freeThreeQuaternion(currentQuaternion);\n    manager.freeThreeVector3(currentScale);\n  }\n  _createWorld() {\n    const config = new Ammo.btDefaultCollisionConfiguration();\n    const dispatcher = new Ammo.btCollisionDispatcher(config);\n    const cache = new Ammo.btDbvtBroadphase();\n    const solver = new Ammo.btSequentialImpulseConstraintSolver();\n    const world = new Ammo.btDiscreteDynamicsWorld(dispatcher, cache, solver, config);\n    return world;\n  }\n  _initRigidBodies(rigidBodies) {\n    for (let i = 0, il = rigidBodies.length; i < il; i++) {\n      this.bodies.push(new RigidBody(this.mesh, this.world, rigidBodies[i], this.manager));\n    }\n  }\n  _initConstraints(constraints) {\n    for (let i = 0, il = constraints.length; i < il; i++) {\n      const params = constraints[i];\n      const bodyA = this.bodies[params.rigidBodyIndex1];\n      const bodyB = this.bodies[params.rigidBodyIndex2];\n      this.constraints.push(new Constraint(this.mesh, this.world, bodyA, bodyB, params, this.manager));\n    }\n  }\n  _stepSimulation(delta) {\n    const unitStep = this.unitStep;\n    let stepTime = delta;\n    let maxStepNum = (delta / unitStep | 0) + 1;\n    if (stepTime < unitStep) {\n      stepTime = unitStep;\n      maxStepNum = 1;\n    }\n    if (maxStepNum > this.maxStepNum) {\n      maxStepNum = this.maxStepNum;\n    }\n    this.world.stepSimulation(stepTime, maxStepNum, unitStep);\n  }\n  _updateRigidBodies() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].updateFromBone();\n    }\n  }\n  _updateBones() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].updateBone();\n    }\n  }\n}\nclass ResourceManager {\n  constructor() {\n    this.threeVector3s = [];\n    this.threeMatrix4s = [];\n    this.threeQuaternions = [];\n    this.threeEulers = [];\n    this.transforms = [];\n    this.quaternions = [];\n    this.vector3s = [];\n  }\n  allocThreeVector3() {\n    return this.threeVector3s.length > 0 ? this.threeVector3s.pop() : new Vector3();\n  }\n  freeThreeVector3(v) {\n    this.threeVector3s.push(v);\n  }\n  allocThreeMatrix4() {\n    return this.threeMatrix4s.length > 0 ? this.threeMatrix4s.pop() : new Matrix4();\n  }\n  freeThreeMatrix4(m) {\n    this.threeMatrix4s.push(m);\n  }\n  allocThreeQuaternion() {\n    return this.threeQuaternions.length > 0 ? this.threeQuaternions.pop() : new Quaternion();\n  }\n  freeThreeQuaternion(q) {\n    this.threeQuaternions.push(q);\n  }\n  allocThreeEuler() {\n    return this.threeEulers.length > 0 ? this.threeEulers.pop() : new Euler();\n  }\n  freeThreeEuler(e) {\n    this.threeEulers.push(e);\n  }\n  allocTransform() {\n    return this.transforms.length > 0 ? this.transforms.pop() : new Ammo.btTransform();\n  }\n  freeTransform(t) {\n    this.transforms.push(t);\n  }\n  allocQuaternion() {\n    return this.quaternions.length > 0 ? this.quaternions.pop() : new Ammo.btQuaternion();\n  }\n  freeQuaternion(q) {\n    this.quaternions.push(q);\n  }\n  allocVector3() {\n    return this.vector3s.length > 0 ? this.vector3s.pop() : new Ammo.btVector3();\n  }\n  freeVector3(v) {\n    this.vector3s.push(v);\n  }\n  setIdentity(t) {\n    t.setIdentity();\n  }\n  getBasis(t) {\n    var q = this.allocQuaternion();\n    t.getBasis().getRotation(q);\n    return q;\n  }\n  getBasisAsMatrix3(t) {\n    var q = this.getBasis(t);\n    var m = this.quaternionToMatrix3(q);\n    this.freeQuaternion(q);\n    return m;\n  }\n  getOrigin(t) {\n    return t.getOrigin();\n  }\n  setOrigin(t, v) {\n    t.getOrigin().setValue(v.x(), v.y(), v.z());\n  }\n  copyOrigin(t1, t2) {\n    var o = t2.getOrigin();\n    this.setOrigin(t1, o);\n  }\n  setBasis(t, q) {\n    t.setRotation(q);\n  }\n  setBasisFromMatrix3(t, m) {\n    var q = this.matrix3ToQuaternion(m);\n    this.setBasis(t, q);\n    this.freeQuaternion(q);\n  }\n  setOriginFromArray3(t, a) {\n    t.getOrigin().setValue(a[0], a[1], a[2]);\n  }\n  setOriginFromThreeVector3(t, v) {\n    t.getOrigin().setValue(v.x, v.y, v.z);\n  }\n  setBasisFromArray3(t, a) {\n    var thQ = this.allocThreeQuaternion();\n    var thE = this.allocThreeEuler();\n    thE.set(a[0], a[1], a[2]);\n    this.setBasisFromThreeQuaternion(t, thQ.setFromEuler(thE));\n    this.freeThreeEuler(thE);\n    this.freeThreeQuaternion(thQ);\n  }\n  setBasisFromThreeQuaternion(t, a) {\n    var q = this.allocQuaternion();\n    q.setX(a.x);\n    q.setY(a.y);\n    q.setZ(a.z);\n    q.setW(a.w);\n    this.setBasis(t, q);\n    this.freeQuaternion(q);\n  }\n  multiplyTransforms(t1, t2) {\n    var t = this.allocTransform();\n    this.setIdentity(t);\n    var m1 = this.getBasisAsMatrix3(t1);\n    var m2 = this.getBasisAsMatrix3(t2);\n    var o1 = this.getOrigin(t1);\n    var o2 = this.getOrigin(t2);\n    var v1 = this.multiplyMatrix3ByVector3(m1, o2);\n    var v2 = this.addVector3(v1, o1);\n    this.setOrigin(t, v2);\n    var m3 = this.multiplyMatrices3(m1, m2);\n    this.setBasisFromMatrix3(t, m3);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return t;\n  }\n  inverseTransform(t) {\n    var t2 = this.allocTransform();\n    var m1 = this.getBasisAsMatrix3(t);\n    var o = this.getOrigin(t);\n    var m2 = this.transposeMatrix3(m1);\n    var v1 = this.negativeVector3(o);\n    var v2 = this.multiplyMatrix3ByVector3(m2, v1);\n    this.setOrigin(t2, v2);\n    this.setBasisFromMatrix3(t2, m2);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return t2;\n  }\n  multiplyMatrices3(m1, m2) {\n    var m3 = [];\n    var v10 = this.rowOfMatrix3(m1, 0);\n    var v11 = this.rowOfMatrix3(m1, 1);\n    var v12 = this.rowOfMatrix3(m1, 2);\n    var v20 = this.columnOfMatrix3(m2, 0);\n    var v21 = this.columnOfMatrix3(m2, 1);\n    var v22 = this.columnOfMatrix3(m2, 2);\n    m3[0] = this.dotVectors3(v10, v20);\n    m3[1] = this.dotVectors3(v10, v21);\n    m3[2] = this.dotVectors3(v10, v22);\n    m3[3] = this.dotVectors3(v11, v20);\n    m3[4] = this.dotVectors3(v11, v21);\n    m3[5] = this.dotVectors3(v11, v22);\n    m3[6] = this.dotVectors3(v12, v20);\n    m3[7] = this.dotVectors3(v12, v21);\n    m3[8] = this.dotVectors3(v12, v22);\n    this.freeVector3(v10);\n    this.freeVector3(v11);\n    this.freeVector3(v12);\n    this.freeVector3(v20);\n    this.freeVector3(v21);\n    this.freeVector3(v22);\n    return m3;\n  }\n  addVector3(v1, v2) {\n    var v = this.allocVector3();\n    v.setValue(v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z());\n    return v;\n  }\n  dotVectors3(v1, v2) {\n    return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\n  }\n  rowOfMatrix3(m, i) {\n    var v = this.allocVector3();\n    v.setValue(m[i * 3 + 0], m[i * 3 + 1], m[i * 3 + 2]);\n    return v;\n  }\n  columnOfMatrix3(m, i) {\n    var v = this.allocVector3();\n    v.setValue(m[i + 0], m[i + 3], m[i + 6]);\n    return v;\n  }\n  negativeVector3(v) {\n    var v2 = this.allocVector3();\n    v2.setValue(-v.x(), -v.y(), -v.z());\n    return v2;\n  }\n  multiplyMatrix3ByVector3(m, v) {\n    var v4 = this.allocVector3();\n    var v0 = this.rowOfMatrix3(m, 0);\n    var v1 = this.rowOfMatrix3(m, 1);\n    var v2 = this.rowOfMatrix3(m, 2);\n    var x = this.dotVectors3(v0, v);\n    var y = this.dotVectors3(v1, v);\n    var z = this.dotVectors3(v2, v);\n    v4.setValue(x, y, z);\n    this.freeVector3(v0);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return v4;\n  }\n  transposeMatrix3(m) {\n    var m2 = [];\n    m2[0] = m[0];\n    m2[1] = m[3];\n    m2[2] = m[6];\n    m2[3] = m[1];\n    m2[4] = m[4];\n    m2[5] = m[7];\n    m2[6] = m[2];\n    m2[7] = m[5];\n    m2[8] = m[8];\n    return m2;\n  }\n  quaternionToMatrix3(q) {\n    var m = [];\n    var x = q.x();\n    var y = q.y();\n    var z = q.z();\n    var w = q.w();\n    var xx = x * x;\n    var yy = y * y;\n    var zz = z * z;\n    var xy = x * y;\n    var yz = y * z;\n    var zx = z * x;\n    var xw = x * w;\n    var yw = y * w;\n    var zw = z * w;\n    m[0] = 1 - 2 * (yy + zz);\n    m[1] = 2 * (xy - zw);\n    m[2] = 2 * (zx + yw);\n    m[3] = 2 * (xy + zw);\n    m[4] = 1 - 2 * (zz + xx);\n    m[5] = 2 * (yz - xw);\n    m[6] = 2 * (zx - yw);\n    m[7] = 2 * (yz + xw);\n    m[8] = 1 - 2 * (xx + yy);\n    return m;\n  }\n  matrix3ToQuaternion(m) {\n    var t = m[0] + m[4] + m[8];\n    var s, x, y, z, w;\n    if (t > 0) {\n      s = Math.sqrt(t + 1) * 2;\n      w = 0.25 * s;\n      x = (m[7] - m[5]) / s;\n      y = (m[2] - m[6]) / s;\n      z = (m[3] - m[1]) / s;\n    } else if (m[0] > m[4] && m[0] > m[8]) {\n      s = Math.sqrt(1 + m[0] - m[4] - m[8]) * 2;\n      w = (m[7] - m[5]) / s;\n      x = 0.25 * s;\n      y = (m[1] + m[3]) / s;\n      z = (m[2] + m[6]) / s;\n    } else if (m[4] > m[8]) {\n      s = Math.sqrt(1 + m[4] - m[0] - m[8]) * 2;\n      w = (m[2] - m[6]) / s;\n      x = (m[1] + m[3]) / s;\n      y = 0.25 * s;\n      z = (m[5] + m[7]) / s;\n    } else {\n      s = Math.sqrt(1 + m[8] - m[0] - m[4]) * 2;\n      w = (m[3] - m[1]) / s;\n      x = (m[2] + m[6]) / s;\n      y = (m[5] + m[7]) / s;\n      z = 0.25 * s;\n    }\n    var q = this.allocQuaternion();\n    q.setX(x);\n    q.setY(y);\n    q.setZ(z);\n    q.setW(w);\n    return q;\n  }\n}\nclass RigidBody {\n  constructor(mesh, world, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.params = params;\n    this.manager = manager;\n    this.body = null;\n    this.bone = null;\n    this.boneOffsetForm = null;\n    this.boneOffsetFormInverse = null;\n    this._init();\n  }\n  /**\n   * Resets rigid body transform to the current bone's.\n   *\n   * @return {RigidBody}\n   */\n  reset() {\n    this._setTransformFromBone();\n    return this;\n  }\n  /**\n   * Updates rigid body's transform from the current bone.\n   *\n   * @return {RidigBody}\n   */\n  updateFromBone() {\n    if (this.params.boneIndex !== -1 && this.params.type === 0) {\n      this._setTransformFromBone();\n    }\n    return this;\n  }\n  /**\n   * Updates bone from the current ridid body's transform.\n   *\n   * @return {RidigBody}\n   */\n  updateBone() {\n    if (this.params.type === 0 || this.params.boneIndex === -1) {\n      return this;\n    }\n    this._updateBoneRotation();\n    if (this.params.type === 1) {\n      this._updateBonePosition();\n    }\n    this.bone.updateMatrixWorld(true);\n    if (this.params.type === 2) {\n      this._setPositionFromBone();\n    }\n    return this;\n  }\n  // private methods\n  _init() {\n    function generateShape(p) {\n      switch (p.shapeType) {\n        case 0:\n          return new Ammo.btSphereShape(p.width);\n        case 1:\n          return new Ammo.btBoxShape(new Ammo.btVector3(p.width, p.height, p.depth));\n        case 2:\n          return new Ammo.btCapsuleShape(p.width, p.height);\n        default:\n          throw new Error(\"unknown shape type \" + p.shapeType);\n      }\n    }\n    const manager = this.manager;\n    const params = this.params;\n    const bones = this.mesh.skeleton.bones;\n    const bone = params.boneIndex === -1 ? new Bone() : bones[params.boneIndex];\n    const shape = generateShape(params);\n    const weight = params.type === 0 ? 0 : params.weight;\n    const localInertia = manager.allocVector3();\n    localInertia.setValue(0, 0, 0);\n    if (weight !== 0) {\n      shape.calculateLocalInertia(weight, localInertia);\n    }\n    const boneOffsetForm = manager.allocTransform();\n    manager.setIdentity(boneOffsetForm);\n    manager.setOriginFromArray3(boneOffsetForm, params.position);\n    manager.setBasisFromArray3(boneOffsetForm, params.rotation);\n    const vector = manager.allocThreeVector3();\n    const boneForm = manager.allocTransform();\n    manager.setIdentity(boneForm);\n    manager.setOriginFromThreeVector3(boneForm, bone.getWorldPosition(vector));\n    const form = manager.multiplyTransforms(boneForm, boneOffsetForm);\n    const state = new Ammo.btDefaultMotionState(form);\n    const info = new Ammo.btRigidBodyConstructionInfo(weight, state, shape, localInertia);\n    info.set_m_friction(params.friction);\n    info.set_m_restitution(params.restitution);\n    const body = new Ammo.btRigidBody(info);\n    if (params.type === 0) {\n      body.setCollisionFlags(body.getCollisionFlags() | 2);\n      body.setActivationState(4);\n    }\n    body.setDamping(params.positionDamping, params.rotationDamping);\n    body.setSleepingThresholds(0, 0);\n    this.world.addRigidBody(body, 1 << params.groupIndex, params.groupTarget);\n    this.body = body;\n    this.bone = bone;\n    this.boneOffsetForm = boneOffsetForm;\n    this.boneOffsetFormInverse = manager.inverseTransform(boneOffsetForm);\n    manager.freeVector3(localInertia);\n    manager.freeTransform(form);\n    manager.freeTransform(boneForm);\n    manager.freeThreeVector3(vector);\n  }\n  _getBoneTransform() {\n    const manager = this.manager;\n    const p = manager.allocThreeVector3();\n    const q = manager.allocThreeQuaternion();\n    const s = manager.allocThreeVector3();\n    this.bone.matrixWorld.decompose(p, q, s);\n    const tr = manager.allocTransform();\n    manager.setOriginFromThreeVector3(tr, p);\n    manager.setBasisFromThreeQuaternion(tr, q);\n    const form = manager.multiplyTransforms(tr, this.boneOffsetForm);\n    manager.freeTransform(tr);\n    manager.freeThreeVector3(s);\n    manager.freeThreeQuaternion(q);\n    manager.freeThreeVector3(p);\n    return form;\n  }\n  _getWorldTransformForBone() {\n    const manager = this.manager;\n    const tr = this.body.getCenterOfMassTransform();\n    return manager.multiplyTransforms(tr, this.boneOffsetFormInverse);\n  }\n  _setTransformFromBone() {\n    const manager = this.manager;\n    const form = this._getBoneTransform();\n    this.body.setCenterOfMassTransform(form);\n    this.body.getMotionState().setWorldTransform(form);\n    manager.freeTransform(form);\n  }\n  _setPositionFromBone() {\n    const manager = this.manager;\n    const form = this._getBoneTransform();\n    const tr = manager.allocTransform();\n    this.body.getMotionState().getWorldTransform(tr);\n    manager.copyOrigin(tr, form);\n    this.body.setCenterOfMassTransform(tr);\n    this.body.getMotionState().setWorldTransform(tr);\n    manager.freeTransform(tr);\n    manager.freeTransform(form);\n  }\n  _updateBoneRotation() {\n    const manager = this.manager;\n    const tr = this._getWorldTransformForBone();\n    const q = manager.getBasis(tr);\n    const thQ = manager.allocThreeQuaternion();\n    const thQ2 = manager.allocThreeQuaternion();\n    const thQ3 = manager.allocThreeQuaternion();\n    thQ.set(q.x(), q.y(), q.z(), q.w());\n    thQ2.setFromRotationMatrix(this.bone.matrixWorld);\n    thQ2.conjugate();\n    thQ2.multiply(thQ);\n    thQ3.setFromRotationMatrix(this.bone.matrix);\n    this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize());\n    manager.freeThreeQuaternion(thQ);\n    manager.freeThreeQuaternion(thQ2);\n    manager.freeThreeQuaternion(thQ3);\n    manager.freeQuaternion(q);\n    manager.freeTransform(tr);\n  }\n  _updateBonePosition() {\n    const manager = this.manager;\n    const tr = this._getWorldTransformForBone();\n    const thV = manager.allocThreeVector3();\n    const o = manager.getOrigin(tr);\n    thV.set(o.x(), o.y(), o.z());\n    if (this.bone.parent) {\n      this.bone.parent.worldToLocal(thV);\n    }\n    this.bone.position.copy(thV);\n    manager.freeThreeVector3(thV);\n    manager.freeTransform(tr);\n  }\n}\nclass Constraint {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {RigidBody} bodyA\n   * @param {RigidBody} bodyB\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n  constructor(mesh, world, bodyA, bodyB, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.params = params;\n    this.manager = manager;\n    this.constraint = null;\n    this._init();\n  }\n  // private method\n  _init() {\n    const manager = this.manager;\n    const params = this.params;\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const form = manager.allocTransform();\n    manager.setIdentity(form);\n    manager.setOriginFromArray3(form, params.position);\n    manager.setBasisFromArray3(form, params.rotation);\n    const formA = manager.allocTransform();\n    const formB = manager.allocTransform();\n    bodyA.body.getMotionState().getWorldTransform(formA);\n    bodyB.body.getMotionState().getWorldTransform(formB);\n    const formInverseA = manager.inverseTransform(formA);\n    const formInverseB = manager.inverseTransform(formB);\n    const formA2 = manager.multiplyTransforms(formInverseA, form);\n    const formB2 = manager.multiplyTransforms(formInverseB, form);\n    const constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA.body, bodyB.body, formA2, formB2, true);\n    const lll = manager.allocVector3();\n    const lul = manager.allocVector3();\n    const all = manager.allocVector3();\n    const aul = manager.allocVector3();\n    lll.setValue(params.translationLimitation1[0], params.translationLimitation1[1], params.translationLimitation1[2]);\n    lul.setValue(params.translationLimitation2[0], params.translationLimitation2[1], params.translationLimitation2[2]);\n    all.setValue(params.rotationLimitation1[0], params.rotationLimitation1[1], params.rotationLimitation1[2]);\n    aul.setValue(params.rotationLimitation2[0], params.rotationLimitation2[1], params.rotationLimitation2[2]);\n    constraint.setLinearLowerLimit(lll);\n    constraint.setLinearUpperLimit(lul);\n    constraint.setAngularLowerLimit(all);\n    constraint.setAngularUpperLimit(aul);\n    for (let i = 0; i < 3; i++) {\n      if (params.springPosition[i] !== 0) {\n        constraint.enableSpring(i, true);\n        constraint.setStiffness(i, params.springPosition[i]);\n      }\n    }\n    for (let i = 0; i < 3; i++) {\n      if (params.springRotation[i] !== 0) {\n        constraint.enableSpring(i + 3, true);\n        constraint.setStiffness(i + 3, params.springRotation[i]);\n      }\n    }\n    if (constraint.setParam !== void 0) {\n      for (let i = 0; i < 6; i++) {\n        constraint.setParam(2, 0.475, i);\n      }\n    }\n    this.world.addConstraint(constraint, true);\n    this.constraint = constraint;\n    manager.freeTransform(form);\n    manager.freeTransform(formA);\n    manager.freeTransform(formB);\n    manager.freeTransform(formInverseA);\n    manager.freeTransform(formInverseB);\n    manager.freeTransform(formA2);\n    manager.freeTransform(formB2);\n    manager.freeVector3(lll);\n    manager.freeVector3(lul);\n    manager.freeVector3(all);\n    manager.freeVector3(aul);\n  }\n}\nconst _position = new Vector3();\nconst _quaternion = new Quaternion();\nconst _scale = new Vector3();\nconst _matrixWorldInv = new Matrix4();\nclass MMDPhysicsHelper extends Object3D {\n  /**\n   * Visualize Rigid bodies\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Physics} physics\n   */\n  constructor(mesh, physics) {\n    super();\n    this.root = mesh;\n    this.physics = physics;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.materials = [];\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(16746632),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(8978312),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(8947967),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this._init();\n  }\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    const materials = this.materials;\n    const children = this.children;\n    for (let i = 0; i < materials.length; i++) {\n      materials[i].dispose();\n    }\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.isMesh) child.geometry.dispose();\n    }\n  }\n  /**\n   * Updates Rigid Bodies visualization.\n   */\n  updateMatrixWorld(force) {\n    var mesh = this.root;\n    if (this.visible) {\n      var bodies = this.physics.bodies;\n      _matrixWorldInv.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1)).invert();\n      for (var i = 0, il = bodies.length; i < il; i++) {\n        var body = bodies[i].body;\n        var child = this.children[i];\n        var tr = body.getCenterOfMassTransform();\n        var origin = tr.getOrigin();\n        var rotation = tr.getRotation();\n        child.position.set(origin.x(), origin.y(), origin.z()).applyMatrix4(_matrixWorldInv);\n        child.quaternion.setFromRotationMatrix(_matrixWorldInv).multiply(_quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w()));\n      }\n    }\n    this.matrix.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1));\n    super.updateMatrixWorld(force);\n  }\n  // private method\n  _init() {\n    var bodies = this.physics.bodies;\n    function createGeometry(param2) {\n      switch (param2.shapeType) {\n        case 0:\n          return new SphereGeometry(param2.width, 16, 8);\n        case 1:\n          return new BoxGeometry(param2.width * 2, param2.height * 2, param2.depth * 2, 8, 8, 8);\n        case 2:\n          return new CapsuleGeometry(param2.width, param2.height, 8, 16);\n        default:\n          return null;\n      }\n    }\n    for (var i = 0, il = bodies.length; i < il; i++) {\n      var param = bodies[i].params;\n      this.add(new Mesh(createGeometry(param), this.materials[param.type]));\n    }\n  }\n}\nexport { MMDPhysics };","map":{"version":3,"sources":["../../src/animation/MMDPhysics.js"],"names":["param"],"mappings":"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","sourcesContent":["import {\n  Bone,\n  BoxGeometry,\n  Color,\n  Euler,\n  Matrix4,\n  Mesh,\n  MeshBasicMaterial,\n  Object3D,\n  Quaternion,\n  SphereGeometry,\n  Vector3,\n} from 'three'\nimport { CapsuleGeometry } from '../_polyfill/CapsuleGeometry'\n\n/**\n * Dependencies\n *  - Ammo.js https://github.com/kripken/ammo.js\n *\n * MMDPhysics calculates physics with Ammo(Bullet based JavaScript Physics engine)\n * for MMD model loaded by MMDLoader.\n *\n * TODO\n *  - Physics in Worker\n */\n\n/* global Ammo */\n\nclass MMDPhysics {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} rigidBodyParams\n   * @param {Array<Object>} (optional) constraintParams\n   * @param {Object} params - (optional)\n   * @param {Number} params.unitStep - Default is 1 / 65.\n   * @param {Integer} params.maxStepNum - Default is 3.\n   * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n   */\n  constructor(mesh, rigidBodyParams, constraintParams = [], params = {}) {\n    if (typeof Ammo === 'undefined') {\n      throw new Error('THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js')\n    }\n\n    this.manager = new ResourceManager()\n\n    this.mesh = mesh\n\n    /*\n     * I don't know why but 1/60 unitStep easily breaks models\n     * so I set it 1/65 so far.\n     * Don't set too small unitStep because\n     * the smaller unitStep can make the performance worse.\n     */\n    this.unitStep = params.unitStep !== undefined ? params.unitStep : 1 / 65\n    this.maxStepNum = params.maxStepNum !== undefined ? params.maxStepNum : 3\n    this.gravity = new Vector3(0, -9.8 * 10, 0)\n\n    if (params.gravity !== undefined) this.gravity.copy(params.gravity)\n\n    this.world = params.world !== undefined ? params.world : null // experimental\n\n    this.bodies = []\n    this.constraints = []\n\n    this._init(mesh, rigidBodyParams, constraintParams)\n  }\n\n  /**\n   * Advances Physics calculation and updates bones.\n   *\n   * @param {Number} delta - time in second\n   * @return {MMDPhysics}\n   */\n  update(delta) {\n    const manager = this.manager\n    const mesh = this.mesh\n\n    // rigid bodies and constrains are for\n    // mesh's world scale (1, 1, 1).\n    // Convert to (1, 1, 1) if it isn't.\n\n    let isNonDefaultScale = false\n\n    const position = manager.allocThreeVector3()\n    const quaternion = manager.allocThreeQuaternion()\n    const scale = manager.allocThreeVector3()\n\n    mesh.matrixWorld.decompose(position, quaternion, scale)\n\n    if (scale.x !== 1 || scale.y !== 1 || scale.z !== 1) {\n      isNonDefaultScale = true\n    }\n\n    let parent\n\n    if (isNonDefaultScale) {\n      parent = mesh.parent\n\n      if (parent !== null) mesh.parent = null\n\n      scale.copy(this.mesh.scale)\n\n      mesh.scale.set(1, 1, 1)\n      mesh.updateMatrixWorld(true)\n    }\n\n    // calculate physics and update bones\n\n    this._updateRigidBodies()\n    this._stepSimulation(delta)\n    this._updateBones()\n\n    // restore mesh if converted above\n\n    if (isNonDefaultScale) {\n      if (parent !== null) mesh.parent = parent\n\n      mesh.scale.copy(scale)\n    }\n\n    manager.freeThreeVector3(scale)\n    manager.freeThreeQuaternion(quaternion)\n    manager.freeThreeVector3(position)\n\n    return this\n  }\n\n  /**\n   * Resets rigid bodies transorm to current bone's.\n   *\n   * @return {MMDPhysics}\n   */\n  reset() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].reset()\n    }\n\n    return this\n  }\n\n  /**\n   * Warm ups Rigid bodies. Calculates cycles steps.\n   *\n   * @param {Integer} cycles\n   * @return {MMDPhysics}\n   */\n  warmup(cycles) {\n    for (let i = 0; i < cycles; i++) {\n      this.update(1 / 60)\n    }\n\n    return this\n  }\n\n  /**\n   * Sets gravity.\n   *\n   * @param {Vector3} gravity\n   * @return {MMDPhysicsHelper}\n   */\n  setGravity(gravity) {\n    this.world.setGravity(new Ammo.btVector3(gravity.x, gravity.y, gravity.z))\n    this.gravity.copy(gravity)\n\n    return this\n  }\n\n  /**\n   * Creates MMDPhysicsHelper\n   *\n   * @return {MMDPhysicsHelper}\n   */\n  createHelper() {\n    return new MMDPhysicsHelper(this.mesh, this)\n  }\n\n  // private methods\n\n  _init(mesh, rigidBodyParams, constraintParams) {\n    const manager = this.manager\n\n    // rigid body/constraint parameters are for\n    // mesh's default world transform as position(0, 0, 0),\n    // quaternion(0, 0, 0, 1) and scale(0, 0, 0)\n\n    const parent = mesh.parent\n\n    if (parent !== null) mesh.parent = null\n\n    const currentPosition = manager.allocThreeVector3()\n    const currentQuaternion = manager.allocThreeQuaternion()\n    const currentScale = manager.allocThreeVector3()\n\n    currentPosition.copy(mesh.position)\n    currentQuaternion.copy(mesh.quaternion)\n    currentScale.copy(mesh.scale)\n\n    mesh.position.set(0, 0, 0)\n    mesh.quaternion.set(0, 0, 0, 1)\n    mesh.scale.set(1, 1, 1)\n\n    mesh.updateMatrixWorld(true)\n\n    if (this.world === null) {\n      this.world = this._createWorld()\n      this.setGravity(this.gravity)\n    }\n\n    this._initRigidBodies(rigidBodyParams)\n    this._initConstraints(constraintParams)\n\n    if (parent !== null) mesh.parent = parent\n\n    mesh.position.copy(currentPosition)\n    mesh.quaternion.copy(currentQuaternion)\n    mesh.scale.copy(currentScale)\n\n    mesh.updateMatrixWorld(true)\n\n    this.reset()\n\n    manager.freeThreeVector3(currentPosition)\n    manager.freeThreeQuaternion(currentQuaternion)\n    manager.freeThreeVector3(currentScale)\n  }\n\n  _createWorld() {\n    const config = new Ammo.btDefaultCollisionConfiguration()\n    const dispatcher = new Ammo.btCollisionDispatcher(config)\n    const cache = new Ammo.btDbvtBroadphase()\n    const solver = new Ammo.btSequentialImpulseConstraintSolver()\n    const world = new Ammo.btDiscreteDynamicsWorld(dispatcher, cache, solver, config)\n    return world\n  }\n\n  _initRigidBodies(rigidBodies) {\n    for (let i = 0, il = rigidBodies.length; i < il; i++) {\n      this.bodies.push(new RigidBody(this.mesh, this.world, rigidBodies[i], this.manager))\n    }\n  }\n\n  _initConstraints(constraints) {\n    for (let i = 0, il = constraints.length; i < il; i++) {\n      const params = constraints[i]\n      const bodyA = this.bodies[params.rigidBodyIndex1]\n      const bodyB = this.bodies[params.rigidBodyIndex2]\n      this.constraints.push(new Constraint(this.mesh, this.world, bodyA, bodyB, params, this.manager))\n    }\n  }\n\n  _stepSimulation(delta) {\n    const unitStep = this.unitStep\n    let stepTime = delta\n    let maxStepNum = ((delta / unitStep) | 0) + 1\n\n    if (stepTime < unitStep) {\n      stepTime = unitStep\n      maxStepNum = 1\n    }\n\n    if (maxStepNum > this.maxStepNum) {\n      maxStepNum = this.maxStepNum\n    }\n\n    this.world.stepSimulation(stepTime, maxStepNum, unitStep)\n  }\n\n  _updateRigidBodies() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].updateFromBone()\n    }\n  }\n\n  _updateBones() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].updateBone()\n    }\n  }\n}\n\n/**\n * This manager's responsibilies are\n *\n * 1. manage Ammo.js and Three.js object resources and\n *    improve the performance and the memory consumption by\n *    reusing objects.\n *\n * 2. provide simple Ammo object operations.\n */\nclass ResourceManager {\n  constructor() {\n    // for Three.js\n    this.threeVector3s = []\n    this.threeMatrix4s = []\n    this.threeQuaternions = []\n    this.threeEulers = []\n\n    // for Ammo.js\n    this.transforms = []\n    this.quaternions = []\n    this.vector3s = []\n  }\n\n  allocThreeVector3() {\n    return this.threeVector3s.length > 0 ? this.threeVector3s.pop() : new Vector3()\n  }\n\n  freeThreeVector3(v) {\n    this.threeVector3s.push(v)\n  }\n\n  allocThreeMatrix4() {\n    return this.threeMatrix4s.length > 0 ? this.threeMatrix4s.pop() : new Matrix4()\n  }\n\n  freeThreeMatrix4(m) {\n    this.threeMatrix4s.push(m)\n  }\n\n  allocThreeQuaternion() {\n    return this.threeQuaternions.length > 0 ? this.threeQuaternions.pop() : new Quaternion()\n  }\n\n  freeThreeQuaternion(q) {\n    this.threeQuaternions.push(q)\n  }\n\n  allocThreeEuler() {\n    return this.threeEulers.length > 0 ? this.threeEulers.pop() : new Euler()\n  }\n\n  freeThreeEuler(e) {\n    this.threeEulers.push(e)\n  }\n\n  allocTransform() {\n    return this.transforms.length > 0 ? this.transforms.pop() : new Ammo.btTransform()\n  }\n\n  freeTransform(t) {\n    this.transforms.push(t)\n  }\n\n  allocQuaternion() {\n    return this.quaternions.length > 0 ? this.quaternions.pop() : new Ammo.btQuaternion()\n  }\n\n  freeQuaternion(q) {\n    this.quaternions.push(q)\n  }\n\n  allocVector3() {\n    return this.vector3s.length > 0 ? this.vector3s.pop() : new Ammo.btVector3()\n  }\n\n  freeVector3(v) {\n    this.vector3s.push(v)\n  }\n\n  setIdentity(t) {\n    t.setIdentity()\n  }\n\n  getBasis(t) {\n    var q = this.allocQuaternion()\n    t.getBasis().getRotation(q)\n    return q\n  }\n\n  getBasisAsMatrix3(t) {\n    var q = this.getBasis(t)\n    var m = this.quaternionToMatrix3(q)\n    this.freeQuaternion(q)\n    return m\n  }\n\n  getOrigin(t) {\n    return t.getOrigin()\n  }\n\n  setOrigin(t, v) {\n    t.getOrigin().setValue(v.x(), v.y(), v.z())\n  }\n\n  copyOrigin(t1, t2) {\n    var o = t2.getOrigin()\n    this.setOrigin(t1, o)\n  }\n\n  setBasis(t, q) {\n    t.setRotation(q)\n  }\n\n  setBasisFromMatrix3(t, m) {\n    var q = this.matrix3ToQuaternion(m)\n    this.setBasis(t, q)\n    this.freeQuaternion(q)\n  }\n\n  setOriginFromArray3(t, a) {\n    t.getOrigin().setValue(a[0], a[1], a[2])\n  }\n\n  setOriginFromThreeVector3(t, v) {\n    t.getOrigin().setValue(v.x, v.y, v.z)\n  }\n\n  setBasisFromArray3(t, a) {\n    var thQ = this.allocThreeQuaternion()\n    var thE = this.allocThreeEuler()\n    thE.set(a[0], a[1], a[2])\n    this.setBasisFromThreeQuaternion(t, thQ.setFromEuler(thE))\n\n    this.freeThreeEuler(thE)\n    this.freeThreeQuaternion(thQ)\n  }\n\n  setBasisFromThreeQuaternion(t, a) {\n    var q = this.allocQuaternion()\n\n    q.setX(a.x)\n    q.setY(a.y)\n    q.setZ(a.z)\n    q.setW(a.w)\n    this.setBasis(t, q)\n\n    this.freeQuaternion(q)\n  }\n\n  multiplyTransforms(t1, t2) {\n    var t = this.allocTransform()\n    this.setIdentity(t)\n\n    var m1 = this.getBasisAsMatrix3(t1)\n    var m2 = this.getBasisAsMatrix3(t2)\n\n    var o1 = this.getOrigin(t1)\n    var o2 = this.getOrigin(t2)\n\n    var v1 = this.multiplyMatrix3ByVector3(m1, o2)\n    var v2 = this.addVector3(v1, o1)\n    this.setOrigin(t, v2)\n\n    var m3 = this.multiplyMatrices3(m1, m2)\n    this.setBasisFromMatrix3(t, m3)\n\n    this.freeVector3(v1)\n    this.freeVector3(v2)\n\n    return t\n  }\n\n  inverseTransform(t) {\n    var t2 = this.allocTransform()\n\n    var m1 = this.getBasisAsMatrix3(t)\n    var o = this.getOrigin(t)\n\n    var m2 = this.transposeMatrix3(m1)\n    var v1 = this.negativeVector3(o)\n    var v2 = this.multiplyMatrix3ByVector3(m2, v1)\n\n    this.setOrigin(t2, v2)\n    this.setBasisFromMatrix3(t2, m2)\n\n    this.freeVector3(v1)\n    this.freeVector3(v2)\n\n    return t2\n  }\n\n  multiplyMatrices3(m1, m2) {\n    var m3 = []\n\n    var v10 = this.rowOfMatrix3(m1, 0)\n    var v11 = this.rowOfMatrix3(m1, 1)\n    var v12 = this.rowOfMatrix3(m1, 2)\n\n    var v20 = this.columnOfMatrix3(m2, 0)\n    var v21 = this.columnOfMatrix3(m2, 1)\n    var v22 = this.columnOfMatrix3(m2, 2)\n\n    m3[0] = this.dotVectors3(v10, v20)\n    m3[1] = this.dotVectors3(v10, v21)\n    m3[2] = this.dotVectors3(v10, v22)\n    m3[3] = this.dotVectors3(v11, v20)\n    m3[4] = this.dotVectors3(v11, v21)\n    m3[5] = this.dotVectors3(v11, v22)\n    m3[6] = this.dotVectors3(v12, v20)\n    m3[7] = this.dotVectors3(v12, v21)\n    m3[8] = this.dotVectors3(v12, v22)\n\n    this.freeVector3(v10)\n    this.freeVector3(v11)\n    this.freeVector3(v12)\n    this.freeVector3(v20)\n    this.freeVector3(v21)\n    this.freeVector3(v22)\n\n    return m3\n  }\n\n  addVector3(v1, v2) {\n    var v = this.allocVector3()\n    v.setValue(v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z())\n    return v\n  }\n\n  dotVectors3(v1, v2) {\n    return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z()\n  }\n\n  rowOfMatrix3(m, i) {\n    var v = this.allocVector3()\n    v.setValue(m[i * 3 + 0], m[i * 3 + 1], m[i * 3 + 2])\n    return v\n  }\n\n  columnOfMatrix3(m, i) {\n    var v = this.allocVector3()\n    v.setValue(m[i + 0], m[i + 3], m[i + 6])\n    return v\n  }\n\n  negativeVector3(v) {\n    var v2 = this.allocVector3()\n    v2.setValue(-v.x(), -v.y(), -v.z())\n    return v2\n  }\n\n  multiplyMatrix3ByVector3(m, v) {\n    var v4 = this.allocVector3()\n\n    var v0 = this.rowOfMatrix3(m, 0)\n    var v1 = this.rowOfMatrix3(m, 1)\n    var v2 = this.rowOfMatrix3(m, 2)\n    var x = this.dotVectors3(v0, v)\n    var y = this.dotVectors3(v1, v)\n    var z = this.dotVectors3(v2, v)\n\n    v4.setValue(x, y, z)\n\n    this.freeVector3(v0)\n    this.freeVector3(v1)\n    this.freeVector3(v2)\n\n    return v4\n  }\n\n  transposeMatrix3(m) {\n    var m2 = []\n    m2[0] = m[0]\n    m2[1] = m[3]\n    m2[2] = m[6]\n    m2[3] = m[1]\n    m2[4] = m[4]\n    m2[5] = m[7]\n    m2[6] = m[2]\n    m2[7] = m[5]\n    m2[8] = m[8]\n    return m2\n  }\n\n  quaternionToMatrix3(q) {\n    var m = []\n\n    var x = q.x()\n    var y = q.y()\n    var z = q.z()\n    var w = q.w()\n\n    var xx = x * x\n    var yy = y * y\n    var zz = z * z\n\n    var xy = x * y\n    var yz = y * z\n    var zx = z * x\n\n    var xw = x * w\n    var yw = y * w\n    var zw = z * w\n\n    m[0] = 1 - 2 * (yy + zz)\n    m[1] = 2 * (xy - zw)\n    m[2] = 2 * (zx + yw)\n    m[3] = 2 * (xy + zw)\n    m[4] = 1 - 2 * (zz + xx)\n    m[5] = 2 * (yz - xw)\n    m[6] = 2 * (zx - yw)\n    m[7] = 2 * (yz + xw)\n    m[8] = 1 - 2 * (xx + yy)\n\n    return m\n  }\n\n  matrix3ToQuaternion(m) {\n    var t = m[0] + m[4] + m[8]\n    var s, x, y, z, w\n\n    if (t > 0) {\n      s = Math.sqrt(t + 1.0) * 2\n      w = 0.25 * s\n      x = (m[7] - m[5]) / s\n      y = (m[2] - m[6]) / s\n      z = (m[3] - m[1]) / s\n    } else if (m[0] > m[4] && m[0] > m[8]) {\n      s = Math.sqrt(1.0 + m[0] - m[4] - m[8]) * 2\n      w = (m[7] - m[5]) / s\n      x = 0.25 * s\n      y = (m[1] + m[3]) / s\n      z = (m[2] + m[6]) / s\n    } else if (m[4] > m[8]) {\n      s = Math.sqrt(1.0 + m[4] - m[0] - m[8]) * 2\n      w = (m[2] - m[6]) / s\n      x = (m[1] + m[3]) / s\n      y = 0.25 * s\n      z = (m[5] + m[7]) / s\n    } else {\n      s = Math.sqrt(1.0 + m[8] - m[0] - m[4]) * 2\n      w = (m[3] - m[1]) / s\n      x = (m[2] + m[6]) / s\n      y = (m[5] + m[7]) / s\n      z = 0.25 * s\n    }\n\n    var q = this.allocQuaternion()\n    q.setX(x)\n    q.setY(y)\n    q.setZ(z)\n    q.setW(w)\n    return q\n  }\n}\n\n/**\n * @param {THREE.SkinnedMesh} mesh\n * @param {Ammo.btDiscreteDynamicsWorld} world\n * @param {Object} params\n * @param {ResourceManager} manager\n */\nclass RigidBody {\n  constructor(mesh, world, params, manager) {\n    this.mesh = mesh\n    this.world = world\n    this.params = params\n    this.manager = manager\n\n    this.body = null\n    this.bone = null\n    this.boneOffsetForm = null\n    this.boneOffsetFormInverse = null\n\n    this._init()\n  }\n\n  /**\n   * Resets rigid body transform to the current bone's.\n   *\n   * @return {RigidBody}\n   */\n  reset() {\n    this._setTransformFromBone()\n    return this\n  }\n\n  /**\n   * Updates rigid body's transform from the current bone.\n   *\n   * @return {RidigBody}\n   */\n  updateFromBone() {\n    if (this.params.boneIndex !== -1 && this.params.type === 0) {\n      this._setTransformFromBone()\n    }\n\n    return this\n  }\n\n  /**\n   * Updates bone from the current ridid body's transform.\n   *\n   * @return {RidigBody}\n   */\n  updateBone() {\n    if (this.params.type === 0 || this.params.boneIndex === -1) {\n      return this\n    }\n\n    this._updateBoneRotation()\n\n    if (this.params.type === 1) {\n      this._updateBonePosition()\n    }\n\n    this.bone.updateMatrixWorld(true)\n\n    if (this.params.type === 2) {\n      this._setPositionFromBone()\n    }\n\n    return this\n  }\n\n  // private methods\n\n  _init() {\n    function generateShape(p) {\n      switch (p.shapeType) {\n        case 0:\n          return new Ammo.btSphereShape(p.width)\n\n        case 1:\n          return new Ammo.btBoxShape(new Ammo.btVector3(p.width, p.height, p.depth))\n\n        case 2:\n          return new Ammo.btCapsuleShape(p.width, p.height)\n\n        default:\n          throw new Error('unknown shape type ' + p.shapeType)\n      }\n    }\n\n    const manager = this.manager\n    const params = this.params\n    const bones = this.mesh.skeleton.bones\n    const bone = params.boneIndex === -1 ? new Bone() : bones[params.boneIndex]\n\n    const shape = generateShape(params)\n    const weight = params.type === 0 ? 0 : params.weight\n    const localInertia = manager.allocVector3()\n    localInertia.setValue(0, 0, 0)\n\n    if (weight !== 0) {\n      shape.calculateLocalInertia(weight, localInertia)\n    }\n\n    const boneOffsetForm = manager.allocTransform()\n    manager.setIdentity(boneOffsetForm)\n    manager.setOriginFromArray3(boneOffsetForm, params.position)\n    manager.setBasisFromArray3(boneOffsetForm, params.rotation)\n\n    const vector = manager.allocThreeVector3()\n    const boneForm = manager.allocTransform()\n    manager.setIdentity(boneForm)\n    manager.setOriginFromThreeVector3(boneForm, bone.getWorldPosition(vector))\n\n    const form = manager.multiplyTransforms(boneForm, boneOffsetForm)\n    const state = new Ammo.btDefaultMotionState(form)\n\n    const info = new Ammo.btRigidBodyConstructionInfo(weight, state, shape, localInertia)\n    info.set_m_friction(params.friction)\n    info.set_m_restitution(params.restitution)\n\n    const body = new Ammo.btRigidBody(info)\n\n    if (params.type === 0) {\n      body.setCollisionFlags(body.getCollisionFlags() | 2)\n\n      /*\n       * It'd be better to comment out this line though in general I should call this method\n       * because I'm not sure why but physics will be more like MMD's\n       * if I comment out.\n       */\n      body.setActivationState(4)\n    }\n\n    body.setDamping(params.positionDamping, params.rotationDamping)\n    body.setSleepingThresholds(0, 0)\n\n    this.world.addRigidBody(body, 1 << params.groupIndex, params.groupTarget)\n\n    this.body = body\n    this.bone = bone\n    this.boneOffsetForm = boneOffsetForm\n    this.boneOffsetFormInverse = manager.inverseTransform(boneOffsetForm)\n\n    manager.freeVector3(localInertia)\n    manager.freeTransform(form)\n    manager.freeTransform(boneForm)\n    manager.freeThreeVector3(vector)\n  }\n\n  _getBoneTransform() {\n    const manager = this.manager\n    const p = manager.allocThreeVector3()\n    const q = manager.allocThreeQuaternion()\n    const s = manager.allocThreeVector3()\n\n    this.bone.matrixWorld.decompose(p, q, s)\n\n    const tr = manager.allocTransform()\n    manager.setOriginFromThreeVector3(tr, p)\n    manager.setBasisFromThreeQuaternion(tr, q)\n\n    const form = manager.multiplyTransforms(tr, this.boneOffsetForm)\n\n    manager.freeTransform(tr)\n    manager.freeThreeVector3(s)\n    manager.freeThreeQuaternion(q)\n    manager.freeThreeVector3(p)\n\n    return form\n  }\n\n  _getWorldTransformForBone() {\n    const manager = this.manager\n    const tr = this.body.getCenterOfMassTransform()\n    return manager.multiplyTransforms(tr, this.boneOffsetFormInverse)\n  }\n\n  _setTransformFromBone() {\n    const manager = this.manager\n    const form = this._getBoneTransform()\n\n    // TODO: check the most appropriate way to set\n    //this.body.setWorldTransform( form );\n    this.body.setCenterOfMassTransform(form)\n    this.body.getMotionState().setWorldTransform(form)\n\n    manager.freeTransform(form)\n  }\n\n  _setPositionFromBone() {\n    const manager = this.manager\n    const form = this._getBoneTransform()\n\n    const tr = manager.allocTransform()\n    this.body.getMotionState().getWorldTransform(tr)\n    manager.copyOrigin(tr, form)\n\n    // TODO: check the most appropriate way to set\n    //this.body.setWorldTransform( tr );\n    this.body.setCenterOfMassTransform(tr)\n    this.body.getMotionState().setWorldTransform(tr)\n\n    manager.freeTransform(tr)\n    manager.freeTransform(form)\n  }\n\n  _updateBoneRotation() {\n    const manager = this.manager\n\n    const tr = this._getWorldTransformForBone()\n    const q = manager.getBasis(tr)\n\n    const thQ = manager.allocThreeQuaternion()\n    const thQ2 = manager.allocThreeQuaternion()\n    const thQ3 = manager.allocThreeQuaternion()\n\n    thQ.set(q.x(), q.y(), q.z(), q.w())\n    thQ2.setFromRotationMatrix(this.bone.matrixWorld)\n    thQ2.conjugate()\n    thQ2.multiply(thQ)\n\n    //this.bone.quaternion.multiply( thQ2 );\n\n    thQ3.setFromRotationMatrix(this.bone.matrix)\n\n    // Renormalizing quaternion here because repeatedly transforming\n    // quaternion continuously accumulates floating point error and\n    // can end up being overflow. See #15335\n    this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize())\n\n    manager.freeThreeQuaternion(thQ)\n    manager.freeThreeQuaternion(thQ2)\n    manager.freeThreeQuaternion(thQ3)\n\n    manager.freeQuaternion(q)\n    manager.freeTransform(tr)\n  }\n\n  _updateBonePosition() {\n    const manager = this.manager\n\n    const tr = this._getWorldTransformForBone()\n\n    const thV = manager.allocThreeVector3()\n\n    const o = manager.getOrigin(tr)\n    thV.set(o.x(), o.y(), o.z())\n\n    if (this.bone.parent) {\n      this.bone.parent.worldToLocal(thV)\n    }\n\n    this.bone.position.copy(thV)\n\n    manager.freeThreeVector3(thV)\n\n    manager.freeTransform(tr)\n  }\n}\n\n//\n\nclass Constraint {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {RigidBody} bodyA\n   * @param {RigidBody} bodyB\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n  constructor(mesh, world, bodyA, bodyB, params, manager) {\n    this.mesh = mesh\n    this.world = world\n    this.bodyA = bodyA\n    this.bodyB = bodyB\n    this.params = params\n    this.manager = manager\n\n    this.constraint = null\n\n    this._init()\n  }\n\n  // private method\n\n  _init() {\n    const manager = this.manager\n    const params = this.params\n    const bodyA = this.bodyA\n    const bodyB = this.bodyB\n\n    const form = manager.allocTransform()\n    manager.setIdentity(form)\n    manager.setOriginFromArray3(form, params.position)\n    manager.setBasisFromArray3(form, params.rotation)\n\n    const formA = manager.allocTransform()\n    const formB = manager.allocTransform()\n\n    bodyA.body.getMotionState().getWorldTransform(formA)\n    bodyB.body.getMotionState().getWorldTransform(formB)\n\n    const formInverseA = manager.inverseTransform(formA)\n    const formInverseB = manager.inverseTransform(formB)\n\n    const formA2 = manager.multiplyTransforms(formInverseA, form)\n    const formB2 = manager.multiplyTransforms(formInverseB, form)\n\n    const constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA.body, bodyB.body, formA2, formB2, true)\n\n    const lll = manager.allocVector3()\n    const lul = manager.allocVector3()\n    const all = manager.allocVector3()\n    const aul = manager.allocVector3()\n\n    lll.setValue(params.translationLimitation1[0], params.translationLimitation1[1], params.translationLimitation1[2])\n    lul.setValue(params.translationLimitation2[0], params.translationLimitation2[1], params.translationLimitation2[2])\n    all.setValue(params.rotationLimitation1[0], params.rotationLimitation1[1], params.rotationLimitation1[2])\n    aul.setValue(params.rotationLimitation2[0], params.rotationLimitation2[1], params.rotationLimitation2[2])\n\n    constraint.setLinearLowerLimit(lll)\n    constraint.setLinearUpperLimit(lul)\n    constraint.setAngularLowerLimit(all)\n    constraint.setAngularUpperLimit(aul)\n\n    for (let i = 0; i < 3; i++) {\n      if (params.springPosition[i] !== 0) {\n        constraint.enableSpring(i, true)\n        constraint.setStiffness(i, params.springPosition[i])\n      }\n    }\n\n    for (let i = 0; i < 3; i++) {\n      if (params.springRotation[i] !== 0) {\n        constraint.enableSpring(i + 3, true)\n        constraint.setStiffness(i + 3, params.springRotation[i])\n      }\n    }\n\n    /*\n     * Currently(10/31/2016) official ammo.js doesn't support\n     * btGeneric6DofSpringConstraint.setParam method.\n     * You need custom ammo.js (add the method into idl) if you wanna use.\n     * By setting this parameter, physics will be more like MMD's\n     */\n    if (constraint.setParam !== undefined) {\n      for (let i = 0; i < 6; i++) {\n        constraint.setParam(2, 0.475, i)\n      }\n    }\n\n    this.world.addConstraint(constraint, true)\n    this.constraint = constraint\n\n    manager.freeTransform(form)\n    manager.freeTransform(formA)\n    manager.freeTransform(formB)\n    manager.freeTransform(formInverseA)\n    manager.freeTransform(formInverseB)\n    manager.freeTransform(formA2)\n    manager.freeTransform(formB2)\n    manager.freeVector3(lll)\n    manager.freeVector3(lul)\n    manager.freeVector3(all)\n    manager.freeVector3(aul)\n  }\n}\n\nconst _position = new Vector3()\nconst _quaternion = new Quaternion()\nconst _scale = new Vector3()\nconst _matrixWorldInv = new Matrix4()\n\nclass MMDPhysicsHelper extends Object3D {\n  /**\n   * Visualize Rigid bodies\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Physics} physics\n   */\n  constructor(mesh, physics) {\n    super()\n\n    this.root = mesh\n    this.physics = physics\n\n    this.matrix.copy(mesh.matrixWorld)\n    this.matrixAutoUpdate = false\n\n    this.materials = []\n\n    this.materials.push(\n      new MeshBasicMaterial({\n        color: new Color(0xff8888),\n        wireframe: true,\n        depthTest: false,\n        depthWrite: false,\n        opacity: 0.25,\n        transparent: true,\n      }),\n    )\n\n    this.materials.push(\n      new MeshBasicMaterial({\n        color: new Color(0x88ff88),\n        wireframe: true,\n        depthTest: false,\n        depthWrite: false,\n        opacity: 0.25,\n        transparent: true,\n      }),\n    )\n\n    this.materials.push(\n      new MeshBasicMaterial({\n        color: new Color(0x8888ff),\n        wireframe: true,\n        depthTest: false,\n        depthWrite: false,\n        opacity: 0.25,\n        transparent: true,\n      }),\n    )\n\n    this._init()\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    const materials = this.materials\n    const children = this.children\n\n    for (let i = 0; i < materials.length; i++) {\n      materials[i].dispose()\n    }\n\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i]\n\n      if (child.isMesh) child.geometry.dispose()\n    }\n  }\n\n  /**\n   * Updates Rigid Bodies visualization.\n   */\n  updateMatrixWorld(force) {\n    var mesh = this.root\n\n    if (this.visible) {\n      var bodies = this.physics.bodies\n\n      _matrixWorldInv\n        .copy(mesh.matrixWorld)\n        .decompose(_position, _quaternion, _scale)\n        .compose(_position, _quaternion, _scale.set(1, 1, 1))\n        .invert()\n\n      for (var i = 0, il = bodies.length; i < il; i++) {\n        var body = bodies[i].body\n        var child = this.children[i]\n\n        var tr = body.getCenterOfMassTransform()\n        var origin = tr.getOrigin()\n        var rotation = tr.getRotation()\n\n        child.position.set(origin.x(), origin.y(), origin.z()).applyMatrix4(_matrixWorldInv)\n\n        child.quaternion\n          .setFromRotationMatrix(_matrixWorldInv)\n          .multiply(_quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w()))\n      }\n    }\n\n    this.matrix\n      .copy(mesh.matrixWorld)\n      .decompose(_position, _quaternion, _scale)\n      .compose(_position, _quaternion, _scale.set(1, 1, 1))\n\n    super.updateMatrixWorld(force)\n  }\n\n  // private method\n\n  _init() {\n    var bodies = this.physics.bodies\n\n    function createGeometry(param) {\n      switch (param.shapeType) {\n        case 0:\n          return new SphereGeometry(param.width, 16, 8)\n\n        case 1:\n          return new BoxGeometry(param.width * 2, param.height * 2, param.depth * 2, 8, 8, 8)\n\n        case 2:\n          return new CapsuleGeometry(param.width, param.height, 8, 16)\n\n        default:\n          return null\n      }\n    }\n\n    for (var i = 0, il = bodies.length; i < il; i++) {\n      var param = bodies[i].params\n      this.add(new Mesh(createGeometry(param), this.materials[param.type]))\n    }\n  }\n}\n\nexport { MMDPhysics }\n"]},"metadata":{},"sourceType":"module"}