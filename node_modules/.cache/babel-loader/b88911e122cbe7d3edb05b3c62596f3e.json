{"ast":null,"code":"const BasicShader = {\n  uniforms: {},\n  vertexShader: [\"void main() {\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"void main() {\", \"\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 0.5 );\", \"}\"].join(\"\\n\")\n};\nexport { BasicShader };","map":{"version":3,"sources":["../../src/shaders/BasicShader.ts"],"names":[],"mappings":"AAUO,MAAM,WAAA,GAA4B;EACvC,QAAA,EAAU,CAAC,CAAA;EAEX,YAAA,EAAc,CACZ,eAAA,EAEA,4EAAA,EAEA,GAAA,CAAA,CACA,IAAA,CAAK,IAAI,CAAA;EAEX,cAAA,EAAgB,CAAC,eAAA,EAAiB,6CAAA,EAA+C,GAAG,CAAA,CAAE,IAAA,CAAK,IAAI;AACjG,CAAA","sourcesContent":["/**\n * Simple test shader\n */\n\nimport type { IShader } from './types'\n\nexport type BasicShaderUniforms = {}\n\nexport interface IBasicShader extends IShader<BasicShaderUniforms> {}\n\nexport const BasicShader: IBasicShader = {\n  uniforms: {},\n\n  vertexShader: [\n    'void main() {',\n\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: ['void main() {', '\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 0.5 );', '}'].join('\\n'),\n}\n"]},"metadata":{},"sourceType":"module"}