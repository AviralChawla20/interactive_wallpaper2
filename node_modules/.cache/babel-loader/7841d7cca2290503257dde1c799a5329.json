{"ast":null,"code":"import { Vector3, Color } from \"three\";\nconst ToonShader1 = {\n  uniforms: {\n    uDirLightPos: {\n      value: new Vector3()\n    },\n    uDirLightColor: {\n      value: new Color(15658734)\n    },\n    uAmbientLightColor: {\n      value: new Color(328965)\n    },\n    uBaseColor: {\n      value: new Color(16777215)\n    }\n  },\n  vertexShader: [\"varying vec3 vNormal;\", \"varying vec3 vRefract;\", \"void main() {\", \"\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\", \"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\", \"\tvec3 worldNormal = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\", \"\tvNormal = normalize( normalMatrix * normal );\", \"\tvec3 I = worldPosition.xyz - cameraPosition;\", \"\tvRefract = refract( normalize( I ), worldNormal, 1.02 );\", \"\tgl_Position = projectionMatrix * mvPosition;\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform vec3 uBaseColor;\", \"uniform vec3 uDirLightPos;\", \"uniform vec3 uDirLightColor;\", \"uniform vec3 uAmbientLightColor;\", \"varying vec3 vNormal;\", \"varying vec3 vRefract;\", \"void main() {\", \"\tfloat directionalLightWeighting = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\", \"\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\", \"\tfloat intensity = smoothstep( - 0.5, 1.0, pow( length(lightWeighting), 20.0 ) );\", \"\tintensity += length(lightWeighting) * 0.2;\", \"\tfloat cameraWeighting = dot( normalize( vNormal ), vRefract );\", \"\tintensity += pow( 1.0 - length( cameraWeighting ), 6.0 );\", \"\tintensity = intensity * 0.2 + 0.3;\", \"\tif ( intensity < 0.50 ) {\", \"\t\tgl_FragColor = vec4( 2.0 * intensity * uBaseColor, 1.0 );\", \"\t} else {\", \"\t\tgl_FragColor = vec4( 1.0 - 2.0 * ( 1.0 - intensity ) * ( 1.0 - uBaseColor ), 1.0 );\", \"}\", \"}\"].join(\"\\n\")\n};\nconst ToonShader2 = {\n  uniforms: {\n    uDirLightPos: {\n      value: new Vector3()\n    },\n    uDirLightColor: {\n      value: new Color(15658734)\n    },\n    uAmbientLightColor: {\n      value: new Color(328965)\n    },\n    uBaseColor: {\n      value: new Color(15658734)\n    },\n    uLineColor1: {\n      value: new Color(8421504)\n    },\n    uLineColor2: {\n      value: new Color(0)\n    },\n    uLineColor3: {\n      value: new Color(0)\n    },\n    uLineColor4: {\n      value: new Color(0)\n    }\n  },\n  vertexShader: [\"varying vec3 vNormal;\", \"void main() {\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"\tvNormal = normalize( normalMatrix * normal );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform vec3 uBaseColor;\", \"uniform vec3 uLineColor1;\", \"uniform vec3 uLineColor2;\", \"uniform vec3 uLineColor3;\", \"uniform vec3 uLineColor4;\", \"uniform vec3 uDirLightPos;\", \"uniform vec3 uDirLightColor;\", \"uniform vec3 uAmbientLightColor;\", \"varying vec3 vNormal;\", \"void main() {\", \"\tfloat camera = max( dot( normalize( vNormal ), vec3( 0.0, 0.0, 1.0 ) ), 0.4);\", \"\tfloat light = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\", \"\tgl_FragColor = vec4( uBaseColor, 1.0 );\", \"\tif ( length(uAmbientLightColor + uDirLightColor * light) < 1.00 ) {\", \"\t\tgl_FragColor *= vec4( uLineColor1, 1.0 );\", \"\t}\", \"\tif ( length(uAmbientLightColor + uDirLightColor * camera) < 0.50 ) {\", \"\t\tgl_FragColor *= vec4( uLineColor2, 1.0 );\", \"\t}\", \"}\"].join(\"\\n\")\n};\nconst ToonShaderHatching = {\n  uniforms: {\n    uDirLightPos: {\n      value: new Vector3()\n    },\n    uDirLightColor: {\n      value: new Color(15658734)\n    },\n    uAmbientLightColor: {\n      value: new Color(328965)\n    },\n    uBaseColor: {\n      value: new Color(16777215)\n    },\n    uLineColor1: {\n      value: new Color(0)\n    },\n    uLineColor2: {\n      value: new Color(0)\n    },\n    uLineColor3: {\n      value: new Color(0)\n    },\n    uLineColor4: {\n      value: new Color(0)\n    }\n  },\n  vertexShader: [\"varying vec3 vNormal;\", \"void main() {\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"\tvNormal = normalize( normalMatrix * normal );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform vec3 uBaseColor;\", \"uniform vec3 uLineColor1;\", \"uniform vec3 uLineColor2;\", \"uniform vec3 uLineColor3;\", \"uniform vec3 uLineColor4;\", \"uniform vec3 uDirLightPos;\", \"uniform vec3 uDirLightColor;\", \"uniform vec3 uAmbientLightColor;\", \"varying vec3 vNormal;\", \"void main() {\", \"\tfloat directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);\", \"\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\", \"\tgl_FragColor = vec4( uBaseColor, 1.0 );\", \"\tif ( length(lightWeighting) < 1.00 ) {\", \"\t\tif ( mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {\", \"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\", \"\t\t}\", \"\t}\", \"\tif ( length(lightWeighting) < 0.75 ) {\", \"\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {\", \"\t\t\tgl_FragColor = vec4( uLineColor2, 1.0 );\", \"\t\t}\", \"\t}\", \"\tif ( length(lightWeighting) < 0.50 ) {\", \"\t\tif (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {\", \"\t\t\tgl_FragColor = vec4( uLineColor3, 1.0 );\", \"\t\t}\", \"\t}\", \"\tif ( length(lightWeighting) < 0.3465 ) {\", \"\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {\", \"\t\t\tgl_FragColor = vec4( uLineColor4, 1.0 );\", \"\t}\", \"\t}\", \"}\"].join(\"\\n\")\n};\nconst ToonShaderDotted = {\n  uniforms: {\n    uDirLightPos: {\n      value: new Vector3()\n    },\n    uDirLightColor: {\n      value: new Color(15658734)\n    },\n    uAmbientLightColor: {\n      value: new Color(328965)\n    },\n    uBaseColor: {\n      value: new Color(16777215)\n    },\n    uLineColor1: {\n      value: new Color(0)\n    }\n  },\n  vertexShader: [\"varying vec3 vNormal;\", \"void main() {\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"\tvNormal = normalize( normalMatrix * normal );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform vec3 uBaseColor;\", \"uniform vec3 uLineColor1;\", \"uniform vec3 uLineColor2;\", \"uniform vec3 uLineColor3;\", \"uniform vec3 uLineColor4;\", \"uniform vec3 uDirLightPos;\", \"uniform vec3 uDirLightColor;\", \"uniform vec3 uAmbientLightColor;\", \"varying vec3 vNormal;\", \"void main() {\", \"float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);\", \"vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\", \"gl_FragColor = vec4( uBaseColor, 1.0 );\", \"if ( length(lightWeighting) < 1.00 ) {\", \"\t\tif ( ( mod(gl_FragCoord.x, 4.001) + mod(gl_FragCoord.y, 4.0) ) > 6.00 ) {\", \"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\", \"\t\t}\", \"\t}\", \"\tif ( length(lightWeighting) < 0.50 ) {\", \"\t\tif ( ( mod(gl_FragCoord.x + 2.0, 4.001) + mod(gl_FragCoord.y + 2.0, 4.0) ) > 6.00 ) {\", \"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\", \"\t\t}\", \"\t}\", \"}\"].join(\"\\n\")\n};\nexport { ToonShader1, ToonShader2, ToonShaderDotted, ToonShaderHatching };","map":{"version":3,"sources":["../../src/shaders/ToonShader.ts"],"names":[],"mappings":"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","sourcesContent":["import { Color, Vector3 } from 'three'\n\n/**\n * Currently contains:\n *\n *\ttoon1\n *\ttoon2\n *\thatching\n *\tdotted\n */\n\nexport const ToonShader1 = {\n  uniforms: {\n    uDirLightPos: { value: new Vector3() },\n    uDirLightColor: { value: new Color(0xeeeeee) },\n\n    uAmbientLightColor: { value: new Color(0x050505) },\n\n    uBaseColor: { value: new Color(0xffffff) },\n  },\n\n  vertexShader: [\n    'varying vec3 vNormal;',\n    'varying vec3 vRefract;',\n\n    'void main() {',\n\n    '\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\n    '\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n    '\tvec3 worldNormal = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );',\n\n    '\tvNormal = normalize( normalMatrix * normal );',\n\n    '\tvec3 I = worldPosition.xyz - cameraPosition;',\n    '\tvRefract = refract( normalize( I ), worldNormal, 1.02 );',\n\n    '\tgl_Position = projectionMatrix * mvPosition;',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    'uniform vec3 uBaseColor;',\n\n    'uniform vec3 uDirLightPos;',\n    'uniform vec3 uDirLightColor;',\n\n    'uniform vec3 uAmbientLightColor;',\n\n    'varying vec3 vNormal;',\n\n    'varying vec3 vRefract;',\n\n    'void main() {',\n\n    '\tfloat directionalLightWeighting = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);',\n    '\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;',\n\n    '\tfloat intensity = smoothstep( - 0.5, 1.0, pow( length(lightWeighting), 20.0 ) );',\n    '\tintensity += length(lightWeighting) * 0.2;',\n\n    '\tfloat cameraWeighting = dot( normalize( vNormal ), vRefract );',\n    '\tintensity += pow( 1.0 - length( cameraWeighting ), 6.0 );',\n    '\tintensity = intensity * 0.2 + 0.3;',\n\n    '\tif ( intensity < 0.50 ) {',\n\n    '\t\tgl_FragColor = vec4( 2.0 * intensity * uBaseColor, 1.0 );',\n\n    '\t} else {',\n\n    '\t\tgl_FragColor = vec4( 1.0 - 2.0 * ( 1.0 - intensity ) * ( 1.0 - uBaseColor ), 1.0 );',\n\n    '}',\n\n    '}',\n  ].join('\\n'),\n}\n\nexport const ToonShader2 = {\n  uniforms: {\n    uDirLightPos: { value: new Vector3() },\n    uDirLightColor: { value: new Color(0xeeeeee) },\n\n    uAmbientLightColor: { value: new Color(0x050505) },\n\n    uBaseColor: { value: new Color(0xeeeeee) },\n    uLineColor1: { value: new Color(0x808080) },\n    uLineColor2: { value: new Color(0x000000) },\n    uLineColor3: { value: new Color(0x000000) },\n    uLineColor4: { value: new Color(0x000000) },\n  },\n\n  vertexShader: [\n    'varying vec3 vNormal;',\n\n    'void main() {',\n\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n    '\tvNormal = normalize( normalMatrix * normal );',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    'uniform vec3 uBaseColor;',\n    'uniform vec3 uLineColor1;',\n    'uniform vec3 uLineColor2;',\n    'uniform vec3 uLineColor3;',\n    'uniform vec3 uLineColor4;',\n\n    'uniform vec3 uDirLightPos;',\n    'uniform vec3 uDirLightColor;',\n\n    'uniform vec3 uAmbientLightColor;',\n\n    'varying vec3 vNormal;',\n\n    'void main() {',\n\n    '\tfloat camera = max( dot( normalize( vNormal ), vec3( 0.0, 0.0, 1.0 ) ), 0.4);',\n    '\tfloat light = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);',\n\n    '\tgl_FragColor = vec4( uBaseColor, 1.0 );',\n\n    '\tif ( length(uAmbientLightColor + uDirLightColor * light) < 1.00 ) {',\n\n    '\t\tgl_FragColor *= vec4( uLineColor1, 1.0 );',\n\n    '\t}',\n\n    '\tif ( length(uAmbientLightColor + uDirLightColor * camera) < 0.50 ) {',\n\n    '\t\tgl_FragColor *= vec4( uLineColor2, 1.0 );',\n\n    '\t}',\n\n    '}',\n  ].join('\\n'),\n}\n\nexport const ToonShaderHatching = {\n  uniforms: {\n    uDirLightPos: { value: new Vector3() },\n    uDirLightColor: { value: new Color(0xeeeeee) },\n\n    uAmbientLightColor: { value: new Color(0x050505) },\n\n    uBaseColor: { value: new Color(0xffffff) },\n    uLineColor1: { value: new Color(0x000000) },\n    uLineColor2: { value: new Color(0x000000) },\n    uLineColor3: { value: new Color(0x000000) },\n    uLineColor4: { value: new Color(0x000000) },\n  },\n\n  vertexShader: [\n    'varying vec3 vNormal;',\n\n    'void main() {',\n\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n    '\tvNormal = normalize( normalMatrix * normal );',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    'uniform vec3 uBaseColor;',\n    'uniform vec3 uLineColor1;',\n    'uniform vec3 uLineColor2;',\n    'uniform vec3 uLineColor3;',\n    'uniform vec3 uLineColor4;',\n\n    'uniform vec3 uDirLightPos;',\n    'uniform vec3 uDirLightColor;',\n\n    'uniform vec3 uAmbientLightColor;',\n\n    'varying vec3 vNormal;',\n\n    'void main() {',\n\n    '\tfloat directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);',\n    '\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;',\n\n    '\tgl_FragColor = vec4( uBaseColor, 1.0 );',\n\n    '\tif ( length(lightWeighting) < 1.00 ) {',\n\n    '\t\tif ( mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {',\n\n    '\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );',\n\n    '\t\t}',\n\n    '\t}',\n\n    '\tif ( length(lightWeighting) < 0.75 ) {',\n\n    '\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {',\n\n    '\t\t\tgl_FragColor = vec4( uLineColor2, 1.0 );',\n\n    '\t\t}',\n\n    '\t}',\n\n    '\tif ( length(lightWeighting) < 0.50 ) {',\n\n    '\t\tif (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {',\n\n    '\t\t\tgl_FragColor = vec4( uLineColor3, 1.0 );',\n\n    '\t\t}',\n\n    '\t}',\n\n    '\tif ( length(lightWeighting) < 0.3465 ) {',\n\n    '\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {',\n\n    '\t\t\tgl_FragColor = vec4( uLineColor4, 1.0 );',\n\n    '\t}',\n\n    '\t}',\n\n    '}',\n  ].join('\\n'),\n}\n\nexport const ToonShaderDotted = {\n  uniforms: {\n    uDirLightPos: { value: new Vector3() },\n    uDirLightColor: { value: new Color(0xeeeeee) },\n\n    uAmbientLightColor: { value: new Color(0x050505) },\n\n    uBaseColor: { value: new Color(0xffffff) },\n    uLineColor1: { value: new Color(0x000000) },\n  },\n\n  vertexShader: [\n    'varying vec3 vNormal;',\n\n    'void main() {',\n\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n    '\tvNormal = normalize( normalMatrix * normal );',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    'uniform vec3 uBaseColor;',\n    'uniform vec3 uLineColor1;',\n    'uniform vec3 uLineColor2;',\n    'uniform vec3 uLineColor3;',\n    'uniform vec3 uLineColor4;',\n\n    'uniform vec3 uDirLightPos;',\n    'uniform vec3 uDirLightColor;',\n\n    'uniform vec3 uAmbientLightColor;',\n\n    'varying vec3 vNormal;',\n\n    'void main() {',\n\n    'float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);',\n    'vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;',\n\n    'gl_FragColor = vec4( uBaseColor, 1.0 );',\n\n    'if ( length(lightWeighting) < 1.00 ) {',\n\n    '\t\tif ( ( mod(gl_FragCoord.x, 4.001) + mod(gl_FragCoord.y, 4.0) ) > 6.00 ) {',\n\n    '\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );',\n\n    '\t\t}',\n\n    '\t}',\n\n    '\tif ( length(lightWeighting) < 0.50 ) {',\n\n    '\t\tif ( ( mod(gl_FragCoord.x + 2.0, 4.001) + mod(gl_FragCoord.y + 2.0, 4.0) ) > 6.00 ) {',\n\n    '\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );',\n\n    '\t\t}',\n\n    '\t}',\n\n    '}',\n  ].join('\\n'),\n}\n"]},"metadata":{},"sourceType":"module"}