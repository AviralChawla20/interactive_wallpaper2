{"ast":null,"code":"const KaleidoShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    sides: {\n      value: 6\n    },\n    angle: {\n      value: 0\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float sides;\", \"uniform float angle;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec2 p = vUv - 0.5;\", \"\tfloat r = length(p);\", \"\tfloat a = atan(p.y, p.x) + angle;\", \"\tfloat tau = 2. * 3.1416 ;\", \"\ta = mod(a, tau/sides);\", \"\ta = abs(a - tau/sides/2.) ;\", \"\tp = r * vec2(cos(a), sin(a));\", \"\tvec4 color = texture2D(tDiffuse, p + 0.5);\", \"\tgl_FragColor = color;\", \"}\"].join(\"\\n\")\n};\nexport { KaleidoShader };","map":{"version":3,"sources":["../../src/shaders/KaleidoShader.ts"],"names":[],"mappings":"AAUO,MAAM,aAAA,GAAgB;EAC3B,QAAA,EAAU;IACR,QAAA,EAAU;MAAE,KAAA,EAAO;IAAK,CAAA;IACxB,KAAA,EAAO;MAAE,KAAA,EAAO;IAAI,CAAA;IACpB,KAAA,EAAO;MAAE,KAAA,EAAO;IAAI;EACtB,CAAA;EAEA,YAAA,EAAc,CACZ,mBAAA,EAEA,eAAA,EAEA,YAAA,EACA,4EAAA,EAEA,GAAA,CAAA,CACA,IAAA,CAAK,IAAI,CAAA;EAEX,cAAA,EAAgB,CACd,6BAAA,EACA,sBAAA,EACA,sBAAA,EAEA,mBAAA,EAEA,eAAA,EAEA,sBAAA,EACA,uBAAA,EACA,oCAAA,EACA,4BAAA,EACA,yBAAA,EACA,8BAAA,EACA,gCAAA,EACA,6CAAA,EACA,wBAAA,EAEA,GAAA,CAAA,CACA,IAAA,CAAK,IAAI;AACb,CAAA","sourcesContent":["/**\n * Kaleidoscope Shader\n * Radial reflection around center point\n * Ported from: http://pixelshaders.com/editor/\n * by Toby Schachman / http://tobyschachman.com/\n *\n * sides: number of reflections\n * angle: initial angle in radians\n */\n\nexport const KaleidoShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    sides: { value: 6.0 },\n    angle: { value: 0.0 },\n  },\n\n  vertexShader: [\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvUv = uv;',\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    'uniform sampler2D tDiffuse;',\n    'uniform float sides;',\n    'uniform float angle;',\n\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvec2 p = vUv - 0.5;',\n    '\tfloat r = length(p);',\n    '\tfloat a = atan(p.y, p.x) + angle;',\n    '\tfloat tau = 2. * 3.1416 ;',\n    '\ta = mod(a, tau/sides);',\n    '\ta = abs(a - tau/sides/2.) ;',\n    '\tp = r * vec2(cos(a), sin(a));',\n    '\tvec4 color = texture2D(tDiffuse, p + 0.5);',\n    '\tgl_FragColor = color;',\n\n    '}',\n  ].join('\\n'),\n}\n"]},"metadata":{},"sourceType":"module"}