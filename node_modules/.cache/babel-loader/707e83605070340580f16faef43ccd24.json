{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Ray, Plane, EventDispatcher, Vector3, MOUSE, TOUCH, Quaternion, PerspectiveCamera, OrthographicCamera, Spherical, Vector2 } from \"three\";\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst TILT_LIMIT = Math.cos(70 * (Math.PI / 180));\nconst moduloWrapAround = (offset, capacity) => (offset % capacity + capacity) % capacity;\nclass OrbitControls extends EventDispatcher {\n  constructor(object, domElement) {\n    super();\n    __publicField(this, \"object\");\n    __publicField(this, \"domElement\");\n    // Set to false to disable this control\n    __publicField(this, \"enabled\", true);\n    // \"target\" sets the location of focus, where the object orbits around\n    __publicField(this, \"target\", new Vector3());\n    // How far you can dolly in and out ( PerspectiveCamera only )\n    __publicField(this, \"minDistance\", 0);\n    __publicField(this, \"maxDistance\", Infinity);\n    // How far you can zoom in and out ( OrthographicCamera only )\n    __publicField(this, \"minZoom\", 0);\n    __publicField(this, \"maxZoom\", Infinity);\n    // How far you can orbit vertically, upper and lower limits.\n    // Range is 0 to Math.PI radians.\n    __publicField(this, \"minPolarAngle\", 0);\n    // radians\n    __publicField(this, \"maxPolarAngle\", Math.PI);\n    // radians\n    // How far you can orbit horizontally, upper and lower limits.\n    // If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n    __publicField(this, \"minAzimuthAngle\", -Infinity);\n    // radians\n    __publicField(this, \"maxAzimuthAngle\", Infinity);\n    // radians\n    // Set to true to enable damping (inertia)\n    // If damping is enabled, you must call controls.update() in your animation loop\n    __publicField(this, \"enableDamping\", false);\n    __publicField(this, \"dampingFactor\", 0.05);\n    // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n    // Set to false to disable zooming\n    __publicField(this, \"enableZoom\", true);\n    __publicField(this, \"zoomSpeed\", 1);\n    // Set to false to disable rotating\n    __publicField(this, \"enableRotate\", true);\n    __publicField(this, \"rotateSpeed\", 1);\n    // Set to false to disable panning\n    __publicField(this, \"enablePan\", true);\n    __publicField(this, \"panSpeed\", 1);\n    __publicField(this, \"screenSpacePanning\", true);\n    // if false, pan orthogonal to world-space direction camera.up\n    __publicField(this, \"keyPanSpeed\", 7);\n    // pixels moved per arrow key push\n    __publicField(this, \"zoomToCursor\", false);\n    // Set to true to automatically rotate around the target\n    // If auto-rotate is enabled, you must call controls.update() in your animation loop\n    __publicField(this, \"autoRotate\", false);\n    __publicField(this, \"autoRotateSpeed\", 2);\n    // 30 seconds per orbit when fps is 60\n    __publicField(this, \"reverseOrbit\", false);\n    // true if you want to reverse the orbit to mouse drag from left to right = orbits left\n    __publicField(this, \"reverseHorizontalOrbit\", false);\n    // true if you want to reverse the horizontal orbit direction\n    __publicField(this, \"reverseVerticalOrbit\", false);\n    // true if you want to reverse the vertical orbit direction\n    // The four arrow keys\n    __publicField(this, \"keys\", {\n      LEFT: \"ArrowLeft\",\n      UP: \"ArrowUp\",\n      RIGHT: \"ArrowRight\",\n      BOTTOM: \"ArrowDown\"\n    });\n    // Mouse buttons\n    __publicField(this, \"mouseButtons\", {\n      LEFT: MOUSE.ROTATE,\n      MIDDLE: MOUSE.DOLLY,\n      RIGHT: MOUSE.PAN\n    });\n    // Touch fingers\n    __publicField(this, \"touches\", {\n      ONE: TOUCH.ROTATE,\n      TWO: TOUCH.DOLLY_PAN\n    });\n    __publicField(this, \"target0\");\n    __publicField(this, \"position0\");\n    __publicField(this, \"zoom0\");\n    // the target DOM element for key events\n    __publicField(this, \"_domElementKeyEvents\", null);\n    __publicField(this, \"getPolarAngle\");\n    __publicField(this, \"getAzimuthalAngle\");\n    __publicField(this, \"setPolarAngle\");\n    __publicField(this, \"setAzimuthalAngle\");\n    __publicField(this, \"getDistance\");\n    // Not used in most scenarios, however they can be useful for specific use cases\n    __publicField(this, \"getZoomScale\");\n    __publicField(this, \"listenToKeyEvents\");\n    __publicField(this, \"stopListenToKeyEvents\");\n    __publicField(this, \"saveState\");\n    __publicField(this, \"reset\");\n    __publicField(this, \"update\");\n    __publicField(this, \"connect\");\n    __publicField(this, \"dispose\");\n    // Dolly in programmatically\n    __publicField(this, \"dollyIn\");\n    // Dolly out programmatically\n    __publicField(this, \"dollyOut\");\n    // Get the current scale\n    __publicField(this, \"getScale\");\n    // Set the current scale (these are not used in most scenarios, however they can be useful for specific use cases)\n    __publicField(this, \"setScale\");\n    this.object = object;\n    this.domElement = domElement;\n    this.target0 = this.target.clone();\n    this.position0 = this.object.position.clone();\n    this.zoom0 = this.object.zoom;\n    this.getPolarAngle = () => spherical.phi;\n    this.getAzimuthalAngle = () => spherical.theta;\n    this.setPolarAngle = value => {\n      let phi = moduloWrapAround(value, 2 * Math.PI);\n      let currentPhi = spherical.phi;\n      if (currentPhi < 0) currentPhi += 2 * Math.PI;\n      if (phi < 0) phi += 2 * Math.PI;\n      let phiDist = Math.abs(phi - currentPhi);\n      if (2 * Math.PI - phiDist < phiDist) {\n        if (phi < currentPhi) {\n          phi += 2 * Math.PI;\n        } else {\n          currentPhi += 2 * Math.PI;\n        }\n      }\n      sphericalDelta.phi = phi - currentPhi;\n      scope.update();\n    };\n    this.setAzimuthalAngle = value => {\n      let theta = moduloWrapAround(value, 2 * Math.PI);\n      let currentTheta = spherical.theta;\n      if (currentTheta < 0) currentTheta += 2 * Math.PI;\n      if (theta < 0) theta += 2 * Math.PI;\n      let thetaDist = Math.abs(theta - currentTheta);\n      if (2 * Math.PI - thetaDist < thetaDist) {\n        if (theta < currentTheta) {\n          theta += 2 * Math.PI;\n        } else {\n          currentTheta += 2 * Math.PI;\n        }\n      }\n      sphericalDelta.theta = theta - currentTheta;\n      scope.update();\n    };\n    this.getDistance = () => scope.object.position.distanceTo(scope.target);\n    this.listenToKeyEvents = domElement2 => {\n      domElement2.addEventListener(\"keydown\", onKeyDown);\n      this._domElementKeyEvents = domElement2;\n    };\n    this.stopListenToKeyEvents = () => {\n      this._domElementKeyEvents.removeEventListener(\"keydown\", onKeyDown);\n      this._domElementKeyEvents = null;\n    };\n    this.saveState = () => {\n      scope.target0.copy(scope.target);\n      scope.position0.copy(scope.object.position);\n      scope.zoom0 = scope.object.zoom;\n    };\n    this.reset = () => {\n      scope.target.copy(scope.target0);\n      scope.object.position.copy(scope.position0);\n      scope.object.zoom = scope.zoom0;\n      scope.object.updateProjectionMatrix();\n      scope.dispatchEvent(changeEvent);\n      scope.update();\n      state = STATE.NONE;\n    };\n    this.update = (() => {\n      const offset = new Vector3();\n      const up = new Vector3(0, 1, 0);\n      const quat = new Quaternion().setFromUnitVectors(object.up, up);\n      const quatInverse = quat.clone().invert();\n      const lastPosition = new Vector3();\n      const lastQuaternion = new Quaternion();\n      const twoPI = 2 * Math.PI;\n      return function update() {\n        const position = scope.object.position;\n        quat.setFromUnitVectors(object.up, up);\n        quatInverse.copy(quat).invert();\n        offset.copy(position).sub(scope.target);\n        offset.applyQuaternion(quat);\n        spherical.setFromVector3(offset);\n        if (scope.autoRotate && state === STATE.NONE) {\n          rotateLeft(getAutoRotationAngle());\n        }\n        if (scope.enableDamping) {\n          spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n          spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n        } else {\n          spherical.theta += sphericalDelta.theta;\n          spherical.phi += sphericalDelta.phi;\n        }\n        let min = scope.minAzimuthAngle;\n        let max = scope.maxAzimuthAngle;\n        if (isFinite(min) && isFinite(max)) {\n          if (min < -Math.PI) min += twoPI;else if (min > Math.PI) min -= twoPI;\n          if (max < -Math.PI) max += twoPI;else if (max > Math.PI) max -= twoPI;\n          if (min <= max) {\n            spherical.theta = Math.max(min, Math.min(max, spherical.theta));\n          } else {\n            spherical.theta = spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta);\n          }\n        }\n        spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));\n        spherical.makeSafe();\n        if (scope.enableDamping === true) {\n          scope.target.addScaledVector(panOffset, scope.dampingFactor);\n        } else {\n          scope.target.add(panOffset);\n        }\n        if (scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera) {\n          spherical.radius = clampDistance(spherical.radius);\n        } else {\n          spherical.radius = clampDistance(spherical.radius * scale);\n        }\n        offset.setFromSpherical(spherical);\n        offset.applyQuaternion(quatInverse);\n        position.copy(scope.target).add(offset);\n        if (!scope.object.matrixAutoUpdate) scope.object.updateMatrix();\n        scope.object.lookAt(scope.target);\n        if (scope.enableDamping === true) {\n          sphericalDelta.theta *= 1 - scope.dampingFactor;\n          sphericalDelta.phi *= 1 - scope.dampingFactor;\n          panOffset.multiplyScalar(1 - scope.dampingFactor);\n        } else {\n          sphericalDelta.set(0, 0, 0);\n          panOffset.set(0, 0, 0);\n        }\n        let zoomChanged = false;\n        if (scope.zoomToCursor && performCursorZoom) {\n          let newRadius = null;\n          if (scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera) {\n            const prevRadius = offset.length();\n            newRadius = clampDistance(prevRadius * scale);\n            const radiusDelta = prevRadius - newRadius;\n            scope.object.position.addScaledVector(dollyDirection, radiusDelta);\n            scope.object.updateMatrixWorld();\n          } else if (scope.object.isOrthographicCamera) {\n            const mouseBefore = new Vector3(mouse.x, mouse.y, 0);\n            mouseBefore.unproject(scope.object);\n            scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale));\n            scope.object.updateProjectionMatrix();\n            zoomChanged = true;\n            const mouseAfter = new Vector3(mouse.x, mouse.y, 0);\n            mouseAfter.unproject(scope.object);\n            scope.object.position.sub(mouseAfter).add(mouseBefore);\n            scope.object.updateMatrixWorld();\n            newRadius = offset.length();\n          } else {\n            console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.\");\n            scope.zoomToCursor = false;\n          }\n          if (newRadius !== null) {\n            if (scope.screenSpacePanning) {\n              scope.target.set(0, 0, -1).transformDirection(scope.object.matrix).multiplyScalar(newRadius).add(scope.object.position);\n            } else {\n              _ray.origin.copy(scope.object.position);\n              _ray.direction.set(0, 0, -1).transformDirection(scope.object.matrix);\n              if (Math.abs(scope.object.up.dot(_ray.direction)) < TILT_LIMIT) {\n                object.lookAt(scope.target);\n              } else {\n                _plane.setFromNormalAndCoplanarPoint(scope.object.up, scope.target);\n                _ray.intersectPlane(_plane, scope.target);\n              }\n            }\n          }\n        } else if (scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera) {\n          zoomChanged = scale !== 1;\n          if (zoomChanged) {\n            scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale));\n            scope.object.updateProjectionMatrix();\n          }\n        }\n        scale = 1;\n        performCursorZoom = false;\n        if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\n          scope.dispatchEvent(changeEvent);\n          lastPosition.copy(scope.object.position);\n          lastQuaternion.copy(scope.object.quaternion);\n          zoomChanged = false;\n          return true;\n        }\n        return false;\n      };\n    })();\n    this.connect = domElement2 => {\n      scope.domElement = domElement2;\n      scope.domElement.style.touchAction = \"none\";\n      scope.domElement.addEventListener(\"contextmenu\", onContextMenu);\n      scope.domElement.addEventListener(\"pointerdown\", onPointerDown);\n      scope.domElement.addEventListener(\"pointercancel\", onPointerUp);\n      scope.domElement.addEventListener(\"wheel\", onMouseWheel);\n    };\n    this.dispose = () => {\n      var _a, _b, _c, _d, _e, _f;\n      if (scope.domElement) {\n        scope.domElement.style.touchAction = \"auto\";\n      }\n      (_a = scope.domElement) == null ? void 0 : _a.removeEventListener(\"contextmenu\", onContextMenu);\n      (_b = scope.domElement) == null ? void 0 : _b.removeEventListener(\"pointerdown\", onPointerDown);\n      (_c = scope.domElement) == null ? void 0 : _c.removeEventListener(\"pointercancel\", onPointerUp);\n      (_d = scope.domElement) == null ? void 0 : _d.removeEventListener(\"wheel\", onMouseWheel);\n      (_e = scope.domElement) == null ? void 0 : _e.ownerDocument.removeEventListener(\"pointermove\", onPointerMove);\n      (_f = scope.domElement) == null ? void 0 : _f.ownerDocument.removeEventListener(\"pointerup\", onPointerUp);\n      if (scope._domElementKeyEvents !== null) {\n        scope._domElementKeyEvents.removeEventListener(\"keydown\", onKeyDown);\n      }\n    };\n    const scope = this;\n    const changeEvent = {\n      type: \"change\"\n    };\n    const startEvent = {\n      type: \"start\"\n    };\n    const endEvent = {\n      type: \"end\"\n    };\n    const STATE = {\n      NONE: -1,\n      ROTATE: 0,\n      DOLLY: 1,\n      PAN: 2,\n      TOUCH_ROTATE: 3,\n      TOUCH_PAN: 4,\n      TOUCH_DOLLY_PAN: 5,\n      TOUCH_DOLLY_ROTATE: 6\n    };\n    let state = STATE.NONE;\n    const EPS = 1e-6;\n    const spherical = new Spherical();\n    const sphericalDelta = new Spherical();\n    let scale = 1;\n    const panOffset = new Vector3();\n    const rotateStart = new Vector2();\n    const rotateEnd = new Vector2();\n    const rotateDelta = new Vector2();\n    const panStart = new Vector2();\n    const panEnd = new Vector2();\n    const panDelta = new Vector2();\n    const dollyStart = new Vector2();\n    const dollyEnd = new Vector2();\n    const dollyDelta = new Vector2();\n    const dollyDirection = new Vector3();\n    const mouse = new Vector2();\n    let performCursorZoom = false;\n    const pointers = [];\n    const pointerPositions = {};\n    function getAutoRotationAngle() {\n      return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n    }\n    function getZoomScale() {\n      return Math.pow(0.95, scope.zoomSpeed);\n    }\n    function rotateLeft(angle) {\n      if (scope.reverseOrbit || scope.reverseHorizontalOrbit) {\n        sphericalDelta.theta += angle;\n      } else {\n        sphericalDelta.theta -= angle;\n      }\n    }\n    function rotateUp(angle) {\n      if (scope.reverseOrbit || scope.reverseVerticalOrbit) {\n        sphericalDelta.phi += angle;\n      } else {\n        sphericalDelta.phi -= angle;\n      }\n    }\n    const panLeft = (() => {\n      const v = new Vector3();\n      return function panLeft2(distance, objectMatrix) {\n        v.setFromMatrixColumn(objectMatrix, 0);\n        v.multiplyScalar(-distance);\n        panOffset.add(v);\n      };\n    })();\n    const panUp = (() => {\n      const v = new Vector3();\n      return function panUp2(distance, objectMatrix) {\n        if (scope.screenSpacePanning === true) {\n          v.setFromMatrixColumn(objectMatrix, 1);\n        } else {\n          v.setFromMatrixColumn(objectMatrix, 0);\n          v.crossVectors(scope.object.up, v);\n        }\n        v.multiplyScalar(distance);\n        panOffset.add(v);\n      };\n    })();\n    const pan = (() => {\n      const offset = new Vector3();\n      return function pan2(deltaX, deltaY) {\n        const element = scope.domElement;\n        if (element && scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera) {\n          const position = scope.object.position;\n          offset.copy(position).sub(scope.target);\n          let targetDistance = offset.length();\n          targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180);\n          panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);\n          panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);\n        } else if (element && scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera) {\n          panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);\n          panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);\n        } else {\n          console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\");\n          scope.enablePan = false;\n        }\n      };\n    })();\n    function setScale(newScale) {\n      if (scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera || scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera) {\n        scale = newScale;\n      } else {\n        console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\");\n        scope.enableZoom = false;\n      }\n    }\n    function dollyOut(dollyScale) {\n      setScale(scale / dollyScale);\n    }\n    function dollyIn(dollyScale) {\n      setScale(scale * dollyScale);\n    }\n    function updateMouseParameters(event) {\n      if (!scope.zoomToCursor || !scope.domElement) {\n        return;\n      }\n      performCursorZoom = true;\n      const rect = scope.domElement.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      const w = rect.width;\n      const h = rect.height;\n      mouse.x = x / w * 2 - 1;\n      mouse.y = -(y / h) * 2 + 1;\n      dollyDirection.set(mouse.x, mouse.y, 1).unproject(scope.object).sub(scope.object.position).normalize();\n    }\n    function clampDistance(dist) {\n      return Math.max(scope.minDistance, Math.min(scope.maxDistance, dist));\n    }\n    function handleMouseDownRotate(event) {\n      rotateStart.set(event.clientX, event.clientY);\n    }\n    function handleMouseDownDolly(event) {\n      updateMouseParameters(event);\n      dollyStart.set(event.clientX, event.clientY);\n    }\n    function handleMouseDownPan(event) {\n      panStart.set(event.clientX, event.clientY);\n    }\n    function handleMouseMoveRotate(event) {\n      rotateEnd.set(event.clientX, event.clientY);\n      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);\n      const element = scope.domElement;\n      if (element) {\n        rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);\n        rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);\n      }\n      rotateStart.copy(rotateEnd);\n      scope.update();\n    }\n    function handleMouseMoveDolly(event) {\n      dollyEnd.set(event.clientX, event.clientY);\n      dollyDelta.subVectors(dollyEnd, dollyStart);\n      if (dollyDelta.y > 0) {\n        dollyOut(getZoomScale());\n      } else if (dollyDelta.y < 0) {\n        dollyIn(getZoomScale());\n      }\n      dollyStart.copy(dollyEnd);\n      scope.update();\n    }\n    function handleMouseMovePan(event) {\n      panEnd.set(event.clientX, event.clientY);\n      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n      pan(panDelta.x, panDelta.y);\n      panStart.copy(panEnd);\n      scope.update();\n    }\n    function handleMouseWheel(event) {\n      updateMouseParameters(event);\n      if (event.deltaY < 0) {\n        dollyIn(getZoomScale());\n      } else if (event.deltaY > 0) {\n        dollyOut(getZoomScale());\n      }\n      scope.update();\n    }\n    function handleKeyDown(event) {\n      let needsUpdate = false;\n      switch (event.code) {\n        case scope.keys.UP:\n          pan(0, scope.keyPanSpeed);\n          needsUpdate = true;\n          break;\n        case scope.keys.BOTTOM:\n          pan(0, -scope.keyPanSpeed);\n          needsUpdate = true;\n          break;\n        case scope.keys.LEFT:\n          pan(scope.keyPanSpeed, 0);\n          needsUpdate = true;\n          break;\n        case scope.keys.RIGHT:\n          pan(-scope.keyPanSpeed, 0);\n          needsUpdate = true;\n          break;\n      }\n      if (needsUpdate) {\n        event.preventDefault();\n        scope.update();\n      }\n    }\n    function handleTouchStartRotate() {\n      if (pointers.length == 1) {\n        rotateStart.set(pointers[0].pageX, pointers[0].pageY);\n      } else {\n        const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n        const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n        rotateStart.set(x, y);\n      }\n    }\n    function handleTouchStartPan() {\n      if (pointers.length == 1) {\n        panStart.set(pointers[0].pageX, pointers[0].pageY);\n      } else {\n        const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n        const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n        panStart.set(x, y);\n      }\n    }\n    function handleTouchStartDolly() {\n      const dx = pointers[0].pageX - pointers[1].pageX;\n      const dy = pointers[0].pageY - pointers[1].pageY;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      dollyStart.set(0, distance);\n    }\n    function handleTouchStartDollyPan() {\n      if (scope.enableZoom) handleTouchStartDolly();\n      if (scope.enablePan) handleTouchStartPan();\n    }\n    function handleTouchStartDollyRotate() {\n      if (scope.enableZoom) handleTouchStartDolly();\n      if (scope.enableRotate) handleTouchStartRotate();\n    }\n    function handleTouchMoveRotate(event) {\n      if (pointers.length == 1) {\n        rotateEnd.set(event.pageX, event.pageY);\n      } else {\n        const position = getSecondPointerPosition(event);\n        const x = 0.5 * (event.pageX + position.x);\n        const y = 0.5 * (event.pageY + position.y);\n        rotateEnd.set(x, y);\n      }\n      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);\n      const element = scope.domElement;\n      if (element) {\n        rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);\n        rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);\n      }\n      rotateStart.copy(rotateEnd);\n    }\n    function handleTouchMovePan(event) {\n      if (pointers.length == 1) {\n        panEnd.set(event.pageX, event.pageY);\n      } else {\n        const position = getSecondPointerPosition(event);\n        const x = 0.5 * (event.pageX + position.x);\n        const y = 0.5 * (event.pageY + position.y);\n        panEnd.set(x, y);\n      }\n      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n      pan(panDelta.x, panDelta.y);\n      panStart.copy(panEnd);\n    }\n    function handleTouchMoveDolly(event) {\n      const position = getSecondPointerPosition(event);\n      const dx = event.pageX - position.x;\n      const dy = event.pageY - position.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      dollyEnd.set(0, distance);\n      dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));\n      dollyOut(dollyDelta.y);\n      dollyStart.copy(dollyEnd);\n    }\n    function handleTouchMoveDollyPan(event) {\n      if (scope.enableZoom) handleTouchMoveDolly(event);\n      if (scope.enablePan) handleTouchMovePan(event);\n    }\n    function handleTouchMoveDollyRotate(event) {\n      if (scope.enableZoom) handleTouchMoveDolly(event);\n      if (scope.enableRotate) handleTouchMoveRotate(event);\n    }\n    function onPointerDown(event) {\n      var _a, _b;\n      if (scope.enabled === false) return;\n      if (pointers.length === 0) {\n        (_a = scope.domElement) == null ? void 0 : _a.ownerDocument.addEventListener(\"pointermove\", onPointerMove);\n        (_b = scope.domElement) == null ? void 0 : _b.ownerDocument.addEventListener(\"pointerup\", onPointerUp);\n      }\n      addPointer(event);\n      if (event.pointerType === \"touch\") {\n        onTouchStart(event);\n      } else {\n        onMouseDown(event);\n      }\n    }\n    function onPointerMove(event) {\n      if (scope.enabled === false) return;\n      if (event.pointerType === \"touch\") {\n        onTouchMove(event);\n      } else {\n        onMouseMove(event);\n      }\n    }\n    function onPointerUp(event) {\n      var _a, _b, _c;\n      removePointer(event);\n      if (pointers.length === 0) {\n        (_a = scope.domElement) == null ? void 0 : _a.releasePointerCapture(event.pointerId);\n        (_b = scope.domElement) == null ? void 0 : _b.ownerDocument.removeEventListener(\"pointermove\", onPointerMove);\n        (_c = scope.domElement) == null ? void 0 : _c.ownerDocument.removeEventListener(\"pointerup\", onPointerUp);\n      }\n      scope.dispatchEvent(endEvent);\n      state = STATE.NONE;\n    }\n    function onMouseDown(event) {\n      let mouseAction;\n      switch (event.button) {\n        case 0:\n          mouseAction = scope.mouseButtons.LEFT;\n          break;\n        case 1:\n          mouseAction = scope.mouseButtons.MIDDLE;\n          break;\n        case 2:\n          mouseAction = scope.mouseButtons.RIGHT;\n          break;\n        default:\n          mouseAction = -1;\n      }\n      switch (mouseAction) {\n        case MOUSE.DOLLY:\n          if (scope.enableZoom === false) return;\n          handleMouseDownDolly(event);\n          state = STATE.DOLLY;\n          break;\n        case MOUSE.ROTATE:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (scope.enablePan === false) return;\n            handleMouseDownPan(event);\n            state = STATE.PAN;\n          } else {\n            if (scope.enableRotate === false) return;\n            handleMouseDownRotate(event);\n            state = STATE.ROTATE;\n          }\n          break;\n        case MOUSE.PAN:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (scope.enableRotate === false) return;\n            handleMouseDownRotate(event);\n            state = STATE.ROTATE;\n          } else {\n            if (scope.enablePan === false) return;\n            handleMouseDownPan(event);\n            state = STATE.PAN;\n          }\n          break;\n        default:\n          state = STATE.NONE;\n      }\n      if (state !== STATE.NONE) {\n        scope.dispatchEvent(startEvent);\n      }\n    }\n    function onMouseMove(event) {\n      if (scope.enabled === false) return;\n      switch (state) {\n        case STATE.ROTATE:\n          if (scope.enableRotate === false) return;\n          handleMouseMoveRotate(event);\n          break;\n        case STATE.DOLLY:\n          if (scope.enableZoom === false) return;\n          handleMouseMoveDolly(event);\n          break;\n        case STATE.PAN:\n          if (scope.enablePan === false) return;\n          handleMouseMovePan(event);\n          break;\n      }\n    }\n    function onMouseWheel(event) {\n      if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE && state !== STATE.ROTATE) {\n        return;\n      }\n      event.preventDefault();\n      scope.dispatchEvent(startEvent);\n      handleMouseWheel(event);\n      scope.dispatchEvent(endEvent);\n    }\n    function onKeyDown(event) {\n      if (scope.enabled === false || scope.enablePan === false) return;\n      handleKeyDown(event);\n    }\n    function onTouchStart(event) {\n      trackPointer(event);\n      switch (pointers.length) {\n        case 1:\n          switch (scope.touches.ONE) {\n            case TOUCH.ROTATE:\n              if (scope.enableRotate === false) return;\n              handleTouchStartRotate();\n              state = STATE.TOUCH_ROTATE;\n              break;\n            case TOUCH.PAN:\n              if (scope.enablePan === false) return;\n              handleTouchStartPan();\n              state = STATE.TOUCH_PAN;\n              break;\n            default:\n              state = STATE.NONE;\n          }\n          break;\n        case 2:\n          switch (scope.touches.TWO) {\n            case TOUCH.DOLLY_PAN:\n              if (scope.enableZoom === false && scope.enablePan === false) return;\n              handleTouchStartDollyPan();\n              state = STATE.TOUCH_DOLLY_PAN;\n              break;\n            case TOUCH.DOLLY_ROTATE:\n              if (scope.enableZoom === false && scope.enableRotate === false) return;\n              handleTouchStartDollyRotate();\n              state = STATE.TOUCH_DOLLY_ROTATE;\n              break;\n            default:\n              state = STATE.NONE;\n          }\n          break;\n        default:\n          state = STATE.NONE;\n      }\n      if (state !== STATE.NONE) {\n        scope.dispatchEvent(startEvent);\n      }\n    }\n    function onTouchMove(event) {\n      trackPointer(event);\n      switch (state) {\n        case STATE.TOUCH_ROTATE:\n          if (scope.enableRotate === false) return;\n          handleTouchMoveRotate(event);\n          scope.update();\n          break;\n        case STATE.TOUCH_PAN:\n          if (scope.enablePan === false) return;\n          handleTouchMovePan(event);\n          scope.update();\n          break;\n        case STATE.TOUCH_DOLLY_PAN:\n          if (scope.enableZoom === false && scope.enablePan === false) return;\n          handleTouchMoveDollyPan(event);\n          scope.update();\n          break;\n        case STATE.TOUCH_DOLLY_ROTATE:\n          if (scope.enableZoom === false && scope.enableRotate === false) return;\n          handleTouchMoveDollyRotate(event);\n          scope.update();\n          break;\n        default:\n          state = STATE.NONE;\n      }\n    }\n    function onContextMenu(event) {\n      if (scope.enabled === false) return;\n      event.preventDefault();\n    }\n    function addPointer(event) {\n      pointers.push(event);\n    }\n    function removePointer(event) {\n      delete pointerPositions[event.pointerId];\n      for (let i = 0; i < pointers.length; i++) {\n        if (pointers[i].pointerId == event.pointerId) {\n          pointers.splice(i, 1);\n          return;\n        }\n      }\n    }\n    function trackPointer(event) {\n      let position = pointerPositions[event.pointerId];\n      if (position === void 0) {\n        position = new Vector2();\n        pointerPositions[event.pointerId] = position;\n      }\n      position.set(event.pageX, event.pageY);\n    }\n    function getSecondPointerPosition(event) {\n      const pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0];\n      return pointerPositions[pointer.pointerId];\n    }\n    this.dollyIn = (dollyScale = getZoomScale()) => {\n      dollyIn(dollyScale);\n      scope.update();\n    };\n    this.dollyOut = (dollyScale = getZoomScale()) => {\n      dollyOut(dollyScale);\n      scope.update();\n    };\n    this.getScale = () => {\n      return scale;\n    };\n    this.setScale = newScale => {\n      setScale(newScale);\n      scope.update();\n    };\n    this.getZoomScale = () => {\n      return getZoomScale();\n    };\n    if (domElement !== void 0) this.connect(domElement);\n    this.update();\n  }\n}\nclass MapControls extends OrbitControls {\n  constructor(object, domElement) {\n    super(object, domElement);\n    this.screenSpacePanning = false;\n    this.mouseButtons.LEFT = MOUSE.PAN;\n    this.mouseButtons.RIGHT = MOUSE.ROTATE;\n    this.touches.ONE = TOUCH.PAN;\n    this.touches.TWO = TOUCH.DOLLY_ROTATE;\n  }\n}\nexport { MapControls, OrbitControls };","map":{"version":3,"sources":["../../src/controls/OrbitControls.ts"],"names":["domElement","panLeft","panUp","pan"],"mappings":"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","sourcesContent":["import {\n  EventDispatcher,\n  Matrix4,\n  MOUSE,\n  OrthographicCamera,\n  PerspectiveCamera,\n  Quaternion,\n  Spherical,\n  TOUCH,\n  Vector2,\n  Vector3,\n  Ray,\n  Plane,\n} from 'three'\n\nconst _ray = new Ray()\nconst _plane = new Plane()\nconst TILT_LIMIT = Math.cos(70 * (Math.PI / 180))\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst moduloWrapAround = (offset: number, capacity: number) => ((offset % capacity) + capacity) % capacity\n\nclass OrbitControls extends EventDispatcher {\n  object: PerspectiveCamera | OrthographicCamera\n  domElement: HTMLElement | undefined\n  // Set to false to disable this control\n  enabled = true\n  // \"target\" sets the location of focus, where the object orbits around\n  target = new Vector3()\n  // How far you can dolly in and out ( PerspectiveCamera only )\n  minDistance = 0\n  maxDistance = Infinity\n  // How far you can zoom in and out ( OrthographicCamera only )\n  minZoom = 0\n  maxZoom = Infinity\n  // How far you can orbit vertically, upper and lower limits.\n  // Range is 0 to Math.PI radians.\n  minPolarAngle = 0 // radians\n  maxPolarAngle = Math.PI // radians\n  // How far you can orbit horizontally, upper and lower limits.\n  // If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n  minAzimuthAngle = -Infinity // radians\n  maxAzimuthAngle = Infinity // radians\n  // Set to true to enable damping (inertia)\n  // If damping is enabled, you must call controls.update() in your animation loop\n  enableDamping = false\n  dampingFactor = 0.05\n  // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n  // Set to false to disable zooming\n  enableZoom = true\n  zoomSpeed = 1.0\n  // Set to false to disable rotating\n  enableRotate = true\n  rotateSpeed = 1.0\n  // Set to false to disable panning\n  enablePan = true\n  panSpeed = 1.0\n  screenSpacePanning = true // if false, pan orthogonal to world-space direction camera.up\n  keyPanSpeed = 7.0 // pixels moved per arrow key push\n  zoomToCursor = false\n  // Set to true to automatically rotate around the target\n  // If auto-rotate is enabled, you must call controls.update() in your animation loop\n  autoRotate = false\n  autoRotateSpeed = 2.0 // 30 seconds per orbit when fps is 60\n  reverseOrbit = false // true if you want to reverse the orbit to mouse drag from left to right = orbits left\n  reverseHorizontalOrbit = false // true if you want to reverse the horizontal orbit direction\n  reverseVerticalOrbit = false // true if you want to reverse the vertical orbit direction\n  // The four arrow keys\n  keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' }\n  // Mouse buttons\n  mouseButtons: Partial<{\n    LEFT: MOUSE\n    MIDDLE: MOUSE\n    RIGHT: MOUSE\n  }> = {\n    LEFT: MOUSE.ROTATE,\n    MIDDLE: MOUSE.DOLLY,\n    RIGHT: MOUSE.PAN,\n  }\n  // Touch fingers\n  touches: Partial<{\n    ONE: TOUCH\n    TWO: TOUCH\n  }> = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN }\n  target0: Vector3\n  position0: Vector3\n  zoom0: number\n  // the target DOM element for key events\n  _domElementKeyEvents: any = null\n\n  getPolarAngle: () => number\n  getAzimuthalAngle: () => number\n  setPolarAngle: (x: number) => void\n  setAzimuthalAngle: (x: number) => void\n  getDistance: () => number\n  // Not used in most scenarios, however they can be useful for specific use cases\n  getZoomScale: () => number\n\n  listenToKeyEvents: (domElement: HTMLElement) => void\n  stopListenToKeyEvents: () => void\n  saveState: () => void\n  reset: () => void\n  update: () => void\n  connect: (domElement: HTMLElement) => void\n  dispose: () => void\n\n  // Dolly in programmatically\n  dollyIn: (dollyScale?: number) => void\n  // Dolly out programmatically\n  dollyOut: (dollyScale?: number) => void\n  // Get the current scale\n  getScale: () => number\n  // Set the current scale (these are not used in most scenarios, however they can be useful for specific use cases)\n  setScale: (newScale: number) => void\n  \n\n  constructor(object: PerspectiveCamera | OrthographicCamera, domElement?: HTMLElement) {\n    super()\n\n    this.object = object\n    this.domElement = domElement\n\n    // for reset\n    this.target0 = this.target.clone()\n    this.position0 = this.object.position.clone()\n    this.zoom0 = this.object.zoom\n\n    //\n    // public methods\n    //\n\n    this.getPolarAngle = (): number => spherical.phi\n\n    this.getAzimuthalAngle = (): number => spherical.theta\n\n    this.setPolarAngle = (value: number): void => {\n      // use modulo wrapping to safeguard value\n      let phi = moduloWrapAround(value, 2 * Math.PI)\n      let currentPhi = spherical.phi\n\n      // convert to the equivalent shortest angle\n      if (currentPhi < 0) currentPhi += 2 * Math.PI\n      if (phi < 0) phi += 2 * Math.PI\n      let phiDist = Math.abs(phi - currentPhi)\n      if (2 * Math.PI - phiDist < phiDist) {\n        if (phi < currentPhi) {\n          phi += 2 * Math.PI\n        } else {\n          currentPhi += 2 * Math.PI\n        }\n      }\n      sphericalDelta.phi = phi - currentPhi\n      scope.update()\n    }\n\n    this.setAzimuthalAngle = (value: number): void => {\n      // use modulo wrapping to safeguard value\n      let theta = moduloWrapAround(value, 2 * Math.PI)\n      let currentTheta = spherical.theta\n\n      // convert to the equivalent shortest angle\n      if (currentTheta < 0) currentTheta += 2 * Math.PI\n      if (theta < 0) theta += 2 * Math.PI\n      let thetaDist = Math.abs(theta - currentTheta)\n      if (2 * Math.PI - thetaDist < thetaDist) {\n        if (theta < currentTheta) {\n          theta += 2 * Math.PI\n        } else {\n          currentTheta += 2 * Math.PI\n        }\n      }\n      sphericalDelta.theta = theta - currentTheta\n      scope.update()\n    }\n\n    this.getDistance = (): number => scope.object.position.distanceTo(scope.target)\n\n    this.listenToKeyEvents = (domElement: HTMLElement): void => {\n      domElement.addEventListener('keydown', onKeyDown)\n      this._domElementKeyEvents = domElement\n    }\n\n    this.stopListenToKeyEvents = (): void => {\n      this._domElementKeyEvents.removeEventListener('keydown', onKeyDown)\n      this._domElementKeyEvents = null\n    }\n\n    this.saveState = (): void => {\n      scope.target0.copy(scope.target)\n      scope.position0.copy(scope.object.position)\n      scope.zoom0 = scope.object.zoom\n    }\n\n    this.reset = (): void => {\n      scope.target.copy(scope.target0)\n      scope.object.position.copy(scope.position0)\n      scope.object.zoom = scope.zoom0\n      scope.object.updateProjectionMatrix()\n\n      // @ts-ignore\n      scope.dispatchEvent(changeEvent)\n\n      scope.update()\n\n      state = STATE.NONE\n    }\n\n    // this method is exposed, but perhaps it would be better if we can make it private...\n    this.update = ((): (() => void) => {\n      const offset = new Vector3()\n      const up = new Vector3(0, 1, 0)\n\n      // so camera.up is the orbit axis\n      const quat = new Quaternion().setFromUnitVectors(object.up, up)\n      const quatInverse = quat.clone().invert()\n\n      const lastPosition = new Vector3()\n      const lastQuaternion = new Quaternion()\n\n      const twoPI = 2 * Math.PI\n\n      return function update(): boolean {\n        const position = scope.object.position\n\n        // update new up direction\n        quat.setFromUnitVectors(object.up, up)\n        quatInverse.copy(quat).invert()\n\n        offset.copy(position).sub(scope.target)\n\n        // rotate offset to \"y-axis-is-up\" space\n        offset.applyQuaternion(quat)\n\n        // angle from z-axis around y-axis\n        spherical.setFromVector3(offset)\n\n        if (scope.autoRotate && state === STATE.NONE) {\n          rotateLeft(getAutoRotationAngle())\n        }\n\n        if (scope.enableDamping) {\n          spherical.theta += sphericalDelta.theta * scope.dampingFactor\n          spherical.phi += sphericalDelta.phi * scope.dampingFactor\n        } else {\n          spherical.theta += sphericalDelta.theta\n          spherical.phi += sphericalDelta.phi\n        }\n\n        // restrict theta to be between desired limits\n\n        let min = scope.minAzimuthAngle\n        let max = scope.maxAzimuthAngle\n\n        if (isFinite(min) && isFinite(max)) {\n          if (min < -Math.PI) min += twoPI\n          else if (min > Math.PI) min -= twoPI\n\n          if (max < -Math.PI) max += twoPI\n          else if (max > Math.PI) max -= twoPI\n\n          if (min <= max) {\n            spherical.theta = Math.max(min, Math.min(max, spherical.theta))\n          } else {\n            spherical.theta =\n              spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta)\n          }\n        }\n\n        // restrict phi to be between desired limits\n        spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi))\n        spherical.makeSafe()\n\n        // move target to panned location\n\n        if (scope.enableDamping === true) {\n          scope.target.addScaledVector(panOffset, scope.dampingFactor)\n        } else {\n          scope.target.add(panOffset)\n        }\n\n        // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n        // we adjust zoom later in these cases\n        if ((scope.zoomToCursor && performCursorZoom) || (scope.object as OrthographicCamera).isOrthographicCamera) {\n          spherical.radius = clampDistance(spherical.radius)\n        } else {\n          spherical.radius = clampDistance(spherical.radius * scale)\n        }\n\n        offset.setFromSpherical(spherical)\n\n        // rotate offset back to \"camera-up-vector-is-up\" space\n        offset.applyQuaternion(quatInverse)\n\n        position.copy(scope.target).add(offset)\n\n        if (!scope.object.matrixAutoUpdate) scope.object.updateMatrix()\n        scope.object.lookAt(scope.target)\n\n        if (scope.enableDamping === true) {\n          sphericalDelta.theta *= 1 - scope.dampingFactor\n          sphericalDelta.phi *= 1 - scope.dampingFactor\n\n          panOffset.multiplyScalar(1 - scope.dampingFactor)\n        } else {\n          sphericalDelta.set(0, 0, 0)\n\n          panOffset.set(0, 0, 0)\n        }\n\n        // adjust camera position\n        let zoomChanged = false\n        if (scope.zoomToCursor && performCursorZoom) {\n          let newRadius = null\n          if (scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera) {\n            // move the camera down the pointer ray\n            // this method avoids floating point error\n            const prevRadius = offset.length()\n            newRadius = clampDistance(prevRadius * scale)\n\n            const radiusDelta = prevRadius - newRadius\n            scope.object.position.addScaledVector(dollyDirection, radiusDelta)\n            scope.object.updateMatrixWorld()\n          } else if ((scope.object as OrthographicCamera).isOrthographicCamera) {\n            // adjust the ortho camera position based on zoom changes\n            const mouseBefore = new Vector3(mouse.x, mouse.y, 0)\n            mouseBefore.unproject(scope.object)\n\n            scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale))\n            scope.object.updateProjectionMatrix()\n            zoomChanged = true\n\n            const mouseAfter = new Vector3(mouse.x, mouse.y, 0)\n            mouseAfter.unproject(scope.object)\n\n            scope.object.position.sub(mouseAfter).add(mouseBefore)\n            scope.object.updateMatrixWorld()\n\n            newRadius = offset.length()\n          } else {\n            console.warn('WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.')\n            scope.zoomToCursor = false\n          }\n\n          // handle the placement of the target\n          if (newRadius !== null) {\n            if (scope.screenSpacePanning) {\n              // position the orbit target in front of the new camera position\n              scope.target\n                .set(0, 0, -1)\n                .transformDirection(scope.object.matrix)\n                .multiplyScalar(newRadius)\n                .add(scope.object.position)\n            } else {\n              // get the ray and translation plane to compute target\n              _ray.origin.copy(scope.object.position)\n              _ray.direction.set(0, 0, -1).transformDirection(scope.object.matrix)\n\n              // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n              // extremely large values\n              if (Math.abs(scope.object.up.dot(_ray.direction)) < TILT_LIMIT) {\n                object.lookAt(scope.target)\n              } else {\n                _plane.setFromNormalAndCoplanarPoint(scope.object.up, scope.target)\n                _ray.intersectPlane(_plane, scope.target)\n              }\n            }\n          }\n        } else if (scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera) {\n          zoomChanged = scale !== 1\n\n          if (zoomChanged) {\n            scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale))\n            scope.object.updateProjectionMatrix()\n          }\n        }\n\n        scale = 1\n        performCursorZoom = false\n\n        // update condition is:\n        // min(camera displacement, camera rotation in radians)^2 > EPS\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n        if (\n          zoomChanged ||\n          lastPosition.distanceToSquared(scope.object.position) > EPS ||\n          8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS\n        ) {\n          // @ts-ignore\n          scope.dispatchEvent(changeEvent)\n\n          lastPosition.copy(scope.object.position)\n          lastQuaternion.copy(scope.object.quaternion)\n          zoomChanged = false\n\n          return true\n        }\n\n        return false\n      }\n    })()\n\n    // https://github.com/mrdoob/three.js/issues/20575\n    this.connect = (domElement: HTMLElement): void => {\n      scope.domElement = domElement\n      // disables touch scroll\n      // touch-action needs to be defined for pointer events to work on mobile\n      // https://stackoverflow.com/a/48254578\n      scope.domElement.style.touchAction = 'none'\n      scope.domElement.addEventListener('contextmenu', onContextMenu)\n      scope.domElement.addEventListener('pointerdown', onPointerDown)\n      scope.domElement.addEventListener('pointercancel', onPointerUp)\n      scope.domElement.addEventListener('wheel', onMouseWheel)\n    }\n\n    this.dispose = (): void => {\n      // Enabling touch scroll\n      if (scope.domElement) {\n        scope.domElement.style.touchAction = 'auto'\n      }\n      scope.domElement?.removeEventListener('contextmenu', onContextMenu)\n      scope.domElement?.removeEventListener('pointerdown', onPointerDown)\n      scope.domElement?.removeEventListener('pointercancel', onPointerUp)\n      scope.domElement?.removeEventListener('wheel', onMouseWheel)\n      scope.domElement?.ownerDocument.removeEventListener('pointermove', onPointerMove)\n      scope.domElement?.ownerDocument.removeEventListener('pointerup', onPointerUp)\n      if (scope._domElementKeyEvents !== null) {\n        scope._domElementKeyEvents.removeEventListener('keydown', onKeyDown)\n      }\n      //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n    }\n\n    //\n    // internals\n    //\n\n    const scope = this\n\n    const changeEvent = { type: 'change' }\n    const startEvent = { type: 'start' }\n    const endEvent = { type: 'end' }\n\n    const STATE = {\n      NONE: -1,\n      ROTATE: 0,\n      DOLLY: 1,\n      PAN: 2,\n      TOUCH_ROTATE: 3,\n      TOUCH_PAN: 4,\n      TOUCH_DOLLY_PAN: 5,\n      TOUCH_DOLLY_ROTATE: 6,\n    }\n\n    let state = STATE.NONE\n\n    const EPS = 0.000001\n\n    // current position in spherical coordinates\n    const spherical = new Spherical()\n    const sphericalDelta = new Spherical()\n\n    let scale = 1\n    const panOffset = new Vector3()\n\n    const rotateStart = new Vector2()\n    const rotateEnd = new Vector2()\n    const rotateDelta = new Vector2()\n\n    const panStart = new Vector2()\n    const panEnd = new Vector2()\n    const panDelta = new Vector2()\n\n    const dollyStart = new Vector2()\n    const dollyEnd = new Vector2()\n    const dollyDelta = new Vector2()\n\n    const dollyDirection = new Vector3()\n    const mouse = new Vector2()\n    let performCursorZoom = false\n\n    const pointers: PointerEvent[] = []\n    const pointerPositions: { [key: string]: Vector2 } = {}\n\n    function getAutoRotationAngle(): number {\n      return ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed\n    }\n\n    function getZoomScale(): number {\n      return Math.pow(0.95, scope.zoomSpeed)\n    }\n\n    function rotateLeft(angle: number): void {\n      if (scope.reverseOrbit || scope.reverseHorizontalOrbit) {\n        sphericalDelta.theta += angle\n      } else {\n        sphericalDelta.theta -= angle\n      }\n    }\n\n    function rotateUp(angle: number): void {\n      if (scope.reverseOrbit || scope.reverseVerticalOrbit) {\n        sphericalDelta.phi += angle\n      } else {\n        sphericalDelta.phi -= angle\n      }\n    }\n\n    const panLeft = (() => {\n      const v = new Vector3()\n\n      return function panLeft(distance: number, objectMatrix: Matrix4) {\n        v.setFromMatrixColumn(objectMatrix, 0) // get X column of objectMatrix\n        v.multiplyScalar(-distance)\n\n        panOffset.add(v)\n      }\n    })()\n\n    const panUp = (() => {\n      const v = new Vector3()\n\n      return function panUp(distance: number, objectMatrix: Matrix4) {\n        if (scope.screenSpacePanning === true) {\n          v.setFromMatrixColumn(objectMatrix, 1)\n        } else {\n          v.setFromMatrixColumn(objectMatrix, 0)\n          v.crossVectors(scope.object.up, v)\n        }\n\n        v.multiplyScalar(distance)\n\n        panOffset.add(v)\n      }\n    })()\n\n    // deltaX and deltaY are in pixels; right and down are positive\n    const pan = (() => {\n      const offset = new Vector3()\n\n      return function pan(deltaX: number, deltaY: number) {\n        const element = scope.domElement\n\n        if (element && scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera) {\n          // perspective\n          const position = scope.object.position\n          offset.copy(position).sub(scope.target)\n          let targetDistance = offset.length()\n\n          // half of the fov is center to top of screen\n          targetDistance *= Math.tan(((scope.object.fov / 2) * Math.PI) / 180.0)\n\n          // we use only clientHeight here so aspect ratio does not distort speed\n          panLeft((2 * deltaX * targetDistance) / element.clientHeight, scope.object.matrix)\n          panUp((2 * deltaY * targetDistance) / element.clientHeight, scope.object.matrix)\n        } else if (element && scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera) {\n          // orthographic\n          panLeft(\n            (deltaX * (scope.object.right - scope.object.left)) / scope.object.zoom / element.clientWidth,\n            scope.object.matrix,\n          )\n          panUp(\n            (deltaY * (scope.object.top - scope.object.bottom)) / scope.object.zoom / element.clientHeight,\n            scope.object.matrix,\n          )\n        } else {\n          // camera neither orthographic nor perspective\n          console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.')\n          scope.enablePan = false\n        }\n      }\n    })()\n\n    function setScale(newScale: number) {\n      if (\n        (scope.object instanceof PerspectiveCamera && scope.object.isPerspectiveCamera) ||\n        (scope.object instanceof OrthographicCamera && scope.object.isOrthographicCamera)\n      ) {\n        scale = newScale\n      } else {\n        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.')\n        scope.enableZoom = false\n      }\n    }\n\n    function dollyOut(dollyScale: number) {\n      setScale(scale / dollyScale)\n    }\n\n    function dollyIn(dollyScale: number) {\n      setScale(scale * dollyScale)\n    }\n\n    function updateMouseParameters(event: MouseEvent): void {\n      if (!scope.zoomToCursor || !scope.domElement) {\n        return\n      }\n\n      performCursorZoom = true\n\n      const rect = scope.domElement.getBoundingClientRect()\n      const x = event.clientX - rect.left\n      const y = event.clientY - rect.top\n      const w = rect.width\n      const h = rect.height\n\n      mouse.x = (x / w) * 2 - 1\n      mouse.y = -(y / h) * 2 + 1\n\n      dollyDirection.set(mouse.x, mouse.y, 1).unproject(scope.object).sub(scope.object.position).normalize()\n    }\n\n    function clampDistance(dist: number): number {\n      return Math.max(scope.minDistance, Math.min(scope.maxDistance, dist))\n    }\n\n    //\n    // event callbacks - update the object state\n    //\n\n    function handleMouseDownRotate(event: MouseEvent) {\n      rotateStart.set(event.clientX, event.clientY)\n    }\n\n    function handleMouseDownDolly(event: MouseEvent) {\n      updateMouseParameters(event)\n      dollyStart.set(event.clientX, event.clientY)\n    }\n\n    function handleMouseDownPan(event: MouseEvent) {\n      panStart.set(event.clientX, event.clientY)\n    }\n\n    function handleMouseMoveRotate(event: MouseEvent) {\n      rotateEnd.set(event.clientX, event.clientY)\n      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed)\n\n      const element = scope.domElement\n\n      if (element) {\n        rotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight) // yes, height\n        rotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight)\n      }\n      rotateStart.copy(rotateEnd)\n      scope.update()\n    }\n\n    function handleMouseMoveDolly(event: MouseEvent) {\n      dollyEnd.set(event.clientX, event.clientY)\n      dollyDelta.subVectors(dollyEnd, dollyStart)\n\n      if (dollyDelta.y > 0) {\n        dollyOut(getZoomScale())\n      } else if (dollyDelta.y < 0) {\n        dollyIn(getZoomScale())\n      }\n\n      dollyStart.copy(dollyEnd)\n      scope.update()\n    }\n\n    function handleMouseMovePan(event: MouseEvent) {\n      panEnd.set(event.clientX, event.clientY)\n      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed)\n      pan(panDelta.x, panDelta.y)\n      panStart.copy(panEnd)\n      scope.update()\n    }\n\n    function handleMouseWheel(event: WheelEvent) {\n      updateMouseParameters(event)\n\n      if (event.deltaY < 0) {\n        dollyIn(getZoomScale())\n      } else if (event.deltaY > 0) {\n        dollyOut(getZoomScale())\n      }\n\n      scope.update()\n    }\n\n    function handleKeyDown(event: KeyboardEvent) {\n      let needsUpdate = false\n\n      switch (event.code) {\n        case scope.keys.UP:\n          pan(0, scope.keyPanSpeed)\n          needsUpdate = true\n          break\n\n        case scope.keys.BOTTOM:\n          pan(0, -scope.keyPanSpeed)\n          needsUpdate = true\n          break\n\n        case scope.keys.LEFT:\n          pan(scope.keyPanSpeed, 0)\n          needsUpdate = true\n          break\n\n        case scope.keys.RIGHT:\n          pan(-scope.keyPanSpeed, 0)\n          needsUpdate = true\n          break\n      }\n\n      if (needsUpdate) {\n        // prevent the browser from scrolling on cursor keys\n        event.preventDefault()\n        scope.update()\n      }\n    }\n\n    function handleTouchStartRotate() {\n      if (pointers.length == 1) {\n        rotateStart.set(pointers[0].pageX, pointers[0].pageY)\n      } else {\n        const x = 0.5 * (pointers[0].pageX + pointers[1].pageX)\n        const y = 0.5 * (pointers[0].pageY + pointers[1].pageY)\n\n        rotateStart.set(x, y)\n      }\n    }\n\n    function handleTouchStartPan() {\n      if (pointers.length == 1) {\n        panStart.set(pointers[0].pageX, pointers[0].pageY)\n      } else {\n        const x = 0.5 * (pointers[0].pageX + pointers[1].pageX)\n        const y = 0.5 * (pointers[0].pageY + pointers[1].pageY)\n\n        panStart.set(x, y)\n      }\n    }\n\n    function handleTouchStartDolly() {\n      const dx = pointers[0].pageX - pointers[1].pageX\n      const dy = pointers[0].pageY - pointers[1].pageY\n      const distance = Math.sqrt(dx * dx + dy * dy)\n\n      dollyStart.set(0, distance)\n    }\n\n    function handleTouchStartDollyPan() {\n      if (scope.enableZoom) handleTouchStartDolly()\n      if (scope.enablePan) handleTouchStartPan()\n    }\n\n    function handleTouchStartDollyRotate() {\n      if (scope.enableZoom) handleTouchStartDolly()\n      if (scope.enableRotate) handleTouchStartRotate()\n    }\n\n    function handleTouchMoveRotate(event: PointerEvent) {\n      if (pointers.length == 1) {\n        rotateEnd.set(event.pageX, event.pageY)\n      } else {\n        const position = getSecondPointerPosition(event)\n        const x = 0.5 * (event.pageX + position.x)\n        const y = 0.5 * (event.pageY + position.y)\n        rotateEnd.set(x, y)\n      }\n\n      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed)\n\n      const element = scope.domElement\n\n      if (element) {\n        rotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight) // yes, height\n        rotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight)\n      }\n      rotateStart.copy(rotateEnd)\n    }\n\n    function handleTouchMovePan(event: PointerEvent) {\n      if (pointers.length == 1) {\n        panEnd.set(event.pageX, event.pageY)\n      } else {\n        const position = getSecondPointerPosition(event)\n        const x = 0.5 * (event.pageX + position.x)\n        const y = 0.5 * (event.pageY + position.y)\n        panEnd.set(x, y)\n      }\n\n      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed)\n      pan(panDelta.x, panDelta.y)\n      panStart.copy(panEnd)\n    }\n\n    function handleTouchMoveDolly(event: PointerEvent) {\n      const position = getSecondPointerPosition(event)\n      const dx = event.pageX - position.x\n      const dy = event.pageY - position.y\n      const distance = Math.sqrt(dx * dx + dy * dy)\n\n      dollyEnd.set(0, distance)\n      dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed))\n      dollyOut(dollyDelta.y)\n      dollyStart.copy(dollyEnd)\n    }\n\n    function handleTouchMoveDollyPan(event: PointerEvent) {\n      if (scope.enableZoom) handleTouchMoveDolly(event)\n      if (scope.enablePan) handleTouchMovePan(event)\n    }\n\n    function handleTouchMoveDollyRotate(event: PointerEvent) {\n      if (scope.enableZoom) handleTouchMoveDolly(event)\n      if (scope.enableRotate) handleTouchMoveRotate(event)\n    }\n\n    //\n    // event handlers - FSM: listen for events and reset state\n    //\n\n    function onPointerDown(event: PointerEvent) {\n      if (scope.enabled === false) return\n\n      if (pointers.length === 0) {\n        scope.domElement?.ownerDocument.addEventListener('pointermove', onPointerMove)\n        scope.domElement?.ownerDocument.addEventListener('pointerup', onPointerUp)\n      }\n\n      addPointer(event)\n\n      if (event.pointerType === 'touch') {\n        onTouchStart(event)\n      } else {\n        onMouseDown(event)\n      }\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      if (scope.enabled === false) return\n\n      if (event.pointerType === 'touch') {\n        onTouchMove(event)\n      } else {\n        onMouseMove(event)\n      }\n    }\n\n    function onPointerUp(event: PointerEvent) {\n      removePointer(event)\n\n      if (pointers.length === 0) {\n        scope.domElement?.releasePointerCapture(event.pointerId)\n\n        scope.domElement?.ownerDocument.removeEventListener('pointermove', onPointerMove)\n        scope.domElement?.ownerDocument.removeEventListener('pointerup', onPointerUp)\n      }\n\n      // @ts-ignore\n      scope.dispatchEvent(endEvent)\n\n      state = STATE.NONE\n    }\n\n    function onMouseDown(event: MouseEvent) {\n      let mouseAction\n\n      switch (event.button) {\n        case 0:\n          mouseAction = scope.mouseButtons.LEFT\n          break\n\n        case 1:\n          mouseAction = scope.mouseButtons.MIDDLE\n          break\n\n        case 2:\n          mouseAction = scope.mouseButtons.RIGHT\n          break\n\n        default:\n          mouseAction = -1\n      }\n\n      switch (mouseAction) {\n        case MOUSE.DOLLY:\n          if (scope.enableZoom === false) return\n          handleMouseDownDolly(event)\n          state = STATE.DOLLY\n          break\n\n        case MOUSE.ROTATE:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (scope.enablePan === false) return\n            handleMouseDownPan(event)\n            state = STATE.PAN\n          } else {\n            if (scope.enableRotate === false) return\n            handleMouseDownRotate(event)\n            state = STATE.ROTATE\n          }\n          break\n\n        case MOUSE.PAN:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (scope.enableRotate === false) return\n            handleMouseDownRotate(event)\n            state = STATE.ROTATE\n          } else {\n            if (scope.enablePan === false) return\n            handleMouseDownPan(event)\n            state = STATE.PAN\n          }\n          break\n\n        default:\n          state = STATE.NONE\n      }\n\n      if (state !== STATE.NONE) {\n        // @ts-ignore\n        scope.dispatchEvent(startEvent)\n      }\n    }\n\n    function onMouseMove(event: MouseEvent) {\n      if (scope.enabled === false) return\n\n      switch (state) {\n        case STATE.ROTATE:\n          if (scope.enableRotate === false) return\n          handleMouseMoveRotate(event)\n          break\n\n        case STATE.DOLLY:\n          if (scope.enableZoom === false) return\n          handleMouseMoveDolly(event)\n          break\n\n        case STATE.PAN:\n          if (scope.enablePan === false) return\n          handleMouseMovePan(event)\n          break\n      }\n    }\n\n    function onMouseWheel(event: WheelEvent) {\n      if (scope.enabled === false || scope.enableZoom === false || (state !== STATE.NONE && state !== STATE.ROTATE)) {\n        return\n      }\n\n      event.preventDefault()\n\n      // @ts-ignore\n      scope.dispatchEvent(startEvent)\n\n      handleMouseWheel(event)\n\n      // @ts-ignore\n      scope.dispatchEvent(endEvent)\n    }\n\n    function onKeyDown(event: KeyboardEvent) {\n      if (scope.enabled === false || scope.enablePan === false) return\n      handleKeyDown(event)\n    }\n\n    function onTouchStart(event: PointerEvent) {\n      trackPointer(event)\n\n      switch (pointers.length) {\n        case 1:\n          switch (scope.touches.ONE) {\n            case TOUCH.ROTATE:\n              if (scope.enableRotate === false) return\n              handleTouchStartRotate()\n              state = STATE.TOUCH_ROTATE\n              break\n\n            case TOUCH.PAN:\n              if (scope.enablePan === false) return\n              handleTouchStartPan()\n              state = STATE.TOUCH_PAN\n              break\n\n            default:\n              state = STATE.NONE\n          }\n\n          break\n\n        case 2:\n          switch (scope.touches.TWO) {\n            case TOUCH.DOLLY_PAN:\n              if (scope.enableZoom === false && scope.enablePan === false) return\n              handleTouchStartDollyPan()\n              state = STATE.TOUCH_DOLLY_PAN\n              break\n\n            case TOUCH.DOLLY_ROTATE:\n              if (scope.enableZoom === false && scope.enableRotate === false) return\n              handleTouchStartDollyRotate()\n              state = STATE.TOUCH_DOLLY_ROTATE\n              break\n\n            default:\n              state = STATE.NONE\n          }\n\n          break\n\n        default:\n          state = STATE.NONE\n      }\n\n      if (state !== STATE.NONE) {\n        // @ts-ignore\n        scope.dispatchEvent(startEvent)\n      }\n    }\n\n    function onTouchMove(event: PointerEvent) {\n      trackPointer(event)\n\n      switch (state) {\n        case STATE.TOUCH_ROTATE:\n          if (scope.enableRotate === false) return\n          handleTouchMoveRotate(event)\n          scope.update()\n          break\n\n        case STATE.TOUCH_PAN:\n          if (scope.enablePan === false) return\n          handleTouchMovePan(event)\n          scope.update()\n          break\n\n        case STATE.TOUCH_DOLLY_PAN:\n          if (scope.enableZoom === false && scope.enablePan === false) return\n          handleTouchMoveDollyPan(event)\n          scope.update()\n          break\n\n        case STATE.TOUCH_DOLLY_ROTATE:\n          if (scope.enableZoom === false && scope.enableRotate === false) return\n          handleTouchMoveDollyRotate(event)\n          scope.update()\n          break\n\n        default:\n          state = STATE.NONE\n      }\n    }\n\n    function onContextMenu(event: Event) {\n      if (scope.enabled === false) return\n      event.preventDefault()\n    }\n\n    function addPointer(event: PointerEvent) {\n      pointers.push(event)\n    }\n\n    function removePointer(event: PointerEvent) {\n      delete pointerPositions[event.pointerId]\n\n      for (let i = 0; i < pointers.length; i++) {\n        if (pointers[i].pointerId == event.pointerId) {\n          pointers.splice(i, 1)\n          return\n        }\n      }\n    }\n\n    function trackPointer(event: PointerEvent) {\n      let position = pointerPositions[event.pointerId]\n\n      if (position === undefined) {\n        position = new Vector2()\n        pointerPositions[event.pointerId] = position\n      }\n\n      position.set(event.pageX, event.pageY)\n    }\n\n    function getSecondPointerPosition(event: PointerEvent) {\n      const pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0]\n      return pointerPositions[pointer.pointerId]\n    }\n\n    // Add dolly in/out methods for public API\n\n    this.dollyIn = (dollyScale = getZoomScale()) => {\n      dollyIn(dollyScale)\n      scope.update()\n    }\n\n    this.dollyOut = (dollyScale = getZoomScale()) => {\n        dollyOut(dollyScale)\n        scope.update()\n    }\n\n    this.getScale = () => {\n        return scale;\n    }\n\n    this.setScale = (newScale) => {\n        setScale(newScale)\n        scope.update()\n    }\n\n    this.getZoomScale = () => {\n        return getZoomScale();\n    }\n\n    // connect events\n    if (domElement !== undefined) this.connect(domElement)\n    // force an update at start\n    this.update()\n  }\n}\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nclass MapControls extends OrbitControls {\n  constructor(object: PerspectiveCamera | OrthographicCamera, domElement?: HTMLElement) {\n    super(object, domElement)\n\n    this.screenSpacePanning = false // pan orthogonal to world-space direction camera.up\n\n    this.mouseButtons.LEFT = MOUSE.PAN\n    this.mouseButtons.RIGHT = MOUSE.ROTATE\n\n    this.touches.ONE = TOUCH.PAN\n    this.touches.TWO = TOUCH.DOLLY_ROTATE\n  }\n}\n\nexport { OrbitControls, MapControls }\n"]},"metadata":{},"sourceType":"module"}