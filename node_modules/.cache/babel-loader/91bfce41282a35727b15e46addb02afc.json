{"ast":null,"code":"import { WebGLRenderTarget, HalfFloatType } from \"three\";\nimport { SSAARenderPass } from \"./SSAARenderPass.js\";\nclass TAARenderPass extends SSAARenderPass {\n  constructor(scene, camera, clearColor, clearAlpha) {\n    super(scene, camera, clearColor, clearAlpha);\n    this.sampleLevel = 0;\n    this.accumulate = false;\n    this.accumulateIndex = -1;\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime) {\n    if (this.accumulate === false) {\n      super.render(renderer, writeBuffer, readBuffer, deltaTime);\n      this.accumulateIndex = -1;\n      return;\n    }\n    const jitterOffsets = _JitterVectors[5];\n    if (this.sampleRenderTarget === void 0) {\n      this.sampleRenderTarget = new WebGLRenderTarget(readBuffer.width, readBuffer.height, {\n        type: HalfFloatType\n      });\n      this.sampleRenderTarget.texture.name = \"TAARenderPass.sample\";\n    }\n    if (this.holdRenderTarget === void 0) {\n      this.holdRenderTarget = new WebGLRenderTarget(readBuffer.width, readBuffer.height, {\n        type: HalfFloatType\n      });\n      this.holdRenderTarget.texture.name = \"TAARenderPass.hold\";\n    }\n    if (this.accumulateIndex === -1) {\n      super.render(renderer, this.holdRenderTarget, readBuffer, deltaTime);\n      this.accumulateIndex = 0;\n    }\n    const autoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.getClearColor(this._oldClearColor);\n    const oldClearAlpha = renderer.getClearAlpha();\n    const sampleWeight = 1 / jitterOffsets.length;\n    if (this.accumulateIndex >= 0 && this.accumulateIndex < jitterOffsets.length) {\n      this.copyUniforms[\"opacity\"].value = sampleWeight;\n      this.copyUniforms[\"tDiffuse\"].value = writeBuffer.texture;\n      const numSamplesPerFrame = Math.pow(2, this.sampleLevel);\n      for (let i = 0; i < numSamplesPerFrame; i++) {\n        const j = this.accumulateIndex;\n        const jitterOffset = jitterOffsets[j];\n        if (this.camera.setViewOffset) {\n          this.camera.setViewOffset(readBuffer.width, readBuffer.height, jitterOffset[0] * 0.0625, jitterOffset[1] * 0.0625,\n          // 0.0625 = 1 / 16\n          readBuffer.width, readBuffer.height);\n        }\n        renderer.setRenderTarget(writeBuffer);\n        renderer.setClearColor(this.clearColor, this.clearAlpha);\n        renderer.clear();\n        renderer.render(this.scene, this.camera);\n        renderer.setRenderTarget(this.sampleRenderTarget);\n        if (this.accumulateIndex === 0) {\n          renderer.setClearColor(0, 0);\n          renderer.clear();\n        }\n        this.fsQuad.render(renderer);\n        this.accumulateIndex++;\n        if (this.accumulateIndex >= jitterOffsets.length) break;\n      }\n      if (this.camera.clearViewOffset) this.camera.clearViewOffset();\n    }\n    renderer.setClearColor(this.clearColor, this.clearAlpha);\n    const accumulationWeight = this.accumulateIndex * sampleWeight;\n    if (accumulationWeight > 0) {\n      this.copyUniforms[\"opacity\"].value = 1;\n      this.copyUniforms[\"tDiffuse\"].value = this.sampleRenderTarget.texture;\n      renderer.setRenderTarget(writeBuffer);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n    if (accumulationWeight < 1) {\n      this.copyUniforms[\"opacity\"].value = 1 - accumulationWeight;\n      this.copyUniforms[\"tDiffuse\"].value = this.holdRenderTarget.texture;\n      renderer.setRenderTarget(writeBuffer);\n      this.fsQuad.render(renderer);\n    }\n    renderer.autoClear = autoClear;\n    renderer.setClearColor(this._oldClearColor, oldClearAlpha);\n  }\n  dispose() {\n    super.dispose();\n    if (this.sampleRenderTarget !== void 0) this.sampleRenderTarget.dispose();\n    if (this.holdRenderTarget !== void 0) this.holdRenderTarget.dispose();\n  }\n}\nconst _JitterVectors = [[[0, 0]], [[4, 4], [-4, -4]], [[-2, -6], [6, -2], [-6, 2], [2, 6]], [[1, -3], [-1, 3], [5, 1], [-3, -5], [-5, 5], [-7, -1], [3, 7], [7, -7]], [[1, 1], [-1, -3], [-3, 2], [4, -1], [-5, -2], [2, 5], [5, 3], [3, -5], [-2, 6], [0, -7], [-4, -6], [-6, 4], [-8, 0], [7, -4], [6, 7], [-7, -8]], [[-4, -7], [-7, -5], [-3, -5], [-5, -4], [-1, -4], [-2, -2], [-6, -1], [-4, 0], [-7, 1], [-1, 2], [-6, 3], [-3, 3], [-7, 6], [-3, 6], [-5, 7], [-1, 7], [5, -7], [1, -6], [6, -5], [4, -4], [2, -3], [7, -2], [1, -1], [4, -1], [2, 1], [6, 2], [0, 4], [4, 4], [2, 5], [7, 5], [5, 6], [3, 7]]];\nexport { TAARenderPass };","map":{"version":3,"sources":["../../src/postprocessing/TAARenderPass.js"],"names":[],"mappings":"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","sourcesContent":["import { HalfFloatType, WebGLRenderTarget } from 'three'\nimport { SSAARenderPass } from './SSAARenderPass'\n\n/**\n *\n * Temporal Anti-Aliasing Render Pass\n *\n * When there is no motion in the scene, the TAA render pass accumulates jittered camera samples across frames to create a high quality anti-aliased result.\n *\n * References:\n *\n * TODO: Add support for motion vector pas so that accumulation of samples across frames can occur on dynamics scenes.\n *\n */\n\nclass TAARenderPass extends SSAARenderPass {\n  constructor(scene, camera, clearColor, clearAlpha) {\n    super(scene, camera, clearColor, clearAlpha)\n\n    this.sampleLevel = 0\n    this.accumulate = false\n    this.accumulateIndex = -1\n  }\n\n  render(renderer, writeBuffer, readBuffer, deltaTime) {\n    if (this.accumulate === false) {\n      super.render(renderer, writeBuffer, readBuffer, deltaTime)\n\n      this.accumulateIndex = -1\n      return\n    }\n\n    const jitterOffsets = _JitterVectors[5]\n\n    if (this.sampleRenderTarget === undefined) {\n      this.sampleRenderTarget = new WebGLRenderTarget(readBuffer.width, readBuffer.height, { type: HalfFloatType })\n      this.sampleRenderTarget.texture.name = 'TAARenderPass.sample'\n    }\n\n    if (this.holdRenderTarget === undefined) {\n      this.holdRenderTarget = new WebGLRenderTarget(readBuffer.width, readBuffer.height, { type: HalfFloatType })\n      this.holdRenderTarget.texture.name = 'TAARenderPass.hold'\n    }\n\n    if (this.accumulateIndex === -1) {\n      super.render(renderer, this.holdRenderTarget, readBuffer, deltaTime)\n\n      this.accumulateIndex = 0\n    }\n\n    const autoClear = renderer.autoClear\n    renderer.autoClear = false\n\n    renderer.getClearColor(this._oldClearColor)\n    const oldClearAlpha = renderer.getClearAlpha()\n\n    const sampleWeight = 1.0 / jitterOffsets.length\n\n    if (this.accumulateIndex >= 0 && this.accumulateIndex < jitterOffsets.length) {\n      this.copyUniforms['opacity'].value = sampleWeight\n      this.copyUniforms['tDiffuse'].value = writeBuffer.texture\n\n      // render the scene multiple times, each slightly jitter offset from the last and accumulate the results.\n      const numSamplesPerFrame = Math.pow(2, this.sampleLevel)\n      for (let i = 0; i < numSamplesPerFrame; i++) {\n        const j = this.accumulateIndex\n        const jitterOffset = jitterOffsets[j]\n\n        if (this.camera.setViewOffset) {\n          this.camera.setViewOffset(\n            readBuffer.width,\n            readBuffer.height,\n            jitterOffset[0] * 0.0625,\n            jitterOffset[1] * 0.0625, // 0.0625 = 1 / 16\n            readBuffer.width,\n            readBuffer.height,\n          )\n        }\n\n        renderer.setRenderTarget(writeBuffer)\n        renderer.setClearColor(this.clearColor, this.clearAlpha)\n        renderer.clear()\n        renderer.render(this.scene, this.camera)\n\n        renderer.setRenderTarget(this.sampleRenderTarget)\n        if (this.accumulateIndex === 0) {\n          renderer.setClearColor(0x000000, 0.0)\n          renderer.clear()\n        }\n\n        this.fsQuad.render(renderer)\n\n        this.accumulateIndex++\n\n        if (this.accumulateIndex >= jitterOffsets.length) break\n      }\n\n      if (this.camera.clearViewOffset) this.camera.clearViewOffset()\n    }\n\n    renderer.setClearColor(this.clearColor, this.clearAlpha)\n    const accumulationWeight = this.accumulateIndex * sampleWeight\n\n    if (accumulationWeight > 0) {\n      this.copyUniforms['opacity'].value = 1.0\n      this.copyUniforms['tDiffuse'].value = this.sampleRenderTarget.texture\n      renderer.setRenderTarget(writeBuffer)\n      renderer.clear()\n      this.fsQuad.render(renderer)\n    }\n\n    if (accumulationWeight < 1.0) {\n      this.copyUniforms['opacity'].value = 1.0 - accumulationWeight\n      this.copyUniforms['tDiffuse'].value = this.holdRenderTarget.texture\n      renderer.setRenderTarget(writeBuffer)\n      this.fsQuad.render(renderer)\n    }\n\n    renderer.autoClear = autoClear\n    renderer.setClearColor(this._oldClearColor, oldClearAlpha)\n  }\n\n  dispose() {\n    super.dispose()\n\n    if (this.sampleRenderTarget !== undefined) this.sampleRenderTarget.dispose()\n    if (this.holdRenderTarget !== undefined) this.holdRenderTarget.dispose()\n  }\n}\n\n// prettier-ignore\nconst _JitterVectors = [\n\t[\n\t\t[ 0, 0 ]\n\t],\n\t[\n\t\t[ 4, 4 ], [ - 4, - 4 ]\n\t],\n\t[\n\t\t[ - 2, - 6 ], [ 6, - 2 ], [ - 6, 2 ], [ 2, 6 ]\n\t],\n\t[\n\t\t[ 1, - 3 ], [ - 1, 3 ], [ 5, 1 ], [ - 3, - 5 ],\n\t\t[ - 5, 5 ], [ - 7, - 1 ], [ 3, 7 ], [ 7, - 7 ]\n\t],\n\t[\n\t\t[ 1, 1 ], [ - 1, - 3 ], [ - 3, 2 ], [ 4, - 1 ],\n\t\t[ - 5, - 2 ], [ 2, 5 ], [ 5, 3 ], [ 3, - 5 ],\n\t\t[ - 2, 6 ], [ 0, - 7 ], [ - 4, - 6 ], [ - 6, 4 ],\n\t\t[ - 8, 0 ], [ 7, - 4 ], [ 6, 7 ], [ - 7, - 8 ]\n\t],\n\t[\n\t\t[ - 4, - 7 ], [ - 7, - 5 ], [ - 3, - 5 ], [ - 5, - 4 ],\n\t\t[ - 1, - 4 ], [ - 2, - 2 ], [ - 6, - 1 ], [ - 4, 0 ],\n\t\t[ - 7, 1 ], [ - 1, 2 ], [ - 6, 3 ], [ - 3, 3 ],\n\t\t[ - 7, 6 ], [ - 3, 6 ], [ - 5, 7 ], [ - 1, 7 ],\n\t\t[ 5, - 7 ], [ 1, - 6 ], [ 6, - 5 ], [ 4, - 4 ],\n\t\t[ 2, - 3 ], [ 7, - 2 ], [ 1, - 1 ], [ 4, - 1 ],\n\t\t[ 2, 1 ], [ 6, 2 ], [ 0, 4 ], [ 4, 4 ],\n\t\t[ 2, 5 ], [ 7, 5 ], [ 5, 6 ], [ 3, 7 ]\n\t]\n];\n\nexport { TAARenderPass }\n"]},"metadata":{},"sourceType":"module"}