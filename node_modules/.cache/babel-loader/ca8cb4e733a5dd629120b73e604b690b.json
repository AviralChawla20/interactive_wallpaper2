{"ast":null,"code":"import { PerspectiveCamera, ShaderMaterial, Scene, OrthographicCamera, WebGLRenderTarget, UniformsUtils, Mesh, PlaneGeometry } from \"three\";\nimport { BokehDepthShader, BokehShader2 } from \"../shaders/BokehShader2.js\";\nclass CinematicCamera extends PerspectiveCamera {\n  constructor(fov, aspect, near, far) {\n    super(fov, aspect, near, far);\n    this.type = \"CinematicCamera\";\n    this.postprocessing = {\n      enabled: true\n    };\n    this.shaderSettings = {\n      rings: 3,\n      samples: 4\n    };\n    const depthShader = BokehDepthShader;\n    this.materialDepth = new ShaderMaterial({\n      uniforms: depthShader.uniforms,\n      vertexShader: depthShader.vertexShader,\n      fragmentShader: depthShader.fragmentShader\n    });\n    this.materialDepth.uniforms[\"mNear\"].value = near;\n    this.materialDepth.uniforms[\"mFar\"].value = far;\n    this.setLens();\n    this.initPostProcessing();\n  }\n  // providing fnumber and coc(Circle of Confusion) as extra arguments\n  setLens(focalLength, filmGauge, fNumber, coc) {\n    if (focalLength === void 0) focalLength = 35;\n    if (filmGauge !== void 0) this.filmGauge = filmGauge;\n    this.setFocalLength(focalLength);\n    if (fNumber === void 0) fNumber = 8;\n    if (coc === void 0) coc = 0.019;\n    this.fNumber = fNumber;\n    this.coc = coc;\n    this.aperture = focalLength / this.fNumber;\n    this.hyperFocal = focalLength * focalLength / (this.aperture * this.coc);\n  }\n  linearize(depth) {\n    const zfar = this.far;\n    const znear = this.near;\n    return -zfar * znear / (depth * (zfar - znear) - zfar);\n  }\n  smoothstep(near, far, depth) {\n    const x = this.saturate((depth - near) / (far - near));\n    return x * x * (3 - 2 * x);\n  }\n  saturate(x) {\n    return Math.max(0, Math.min(1, x));\n  }\n  // function for focusing at a distance from the camera\n  focusAt(focusDistance) {\n    if (focusDistance === void 0) focusDistance = 20;\n    const focalLength = this.getFocalLength();\n    this.focus = focusDistance;\n    this.nearPoint = this.hyperFocal * this.focus / (this.hyperFocal + (this.focus - focalLength));\n    this.farPoint = this.hyperFocal * this.focus / (this.hyperFocal - (this.focus - focalLength));\n    this.depthOfField = this.farPoint - this.nearPoint;\n    if (this.depthOfField < 0) this.depthOfField = 0;\n    this.sdistance = this.smoothstep(this.near, this.far, this.focus);\n    this.ldistance = this.linearize(1 - this.sdistance);\n    this.postprocessing.bokeh_uniforms[\"focalDepth\"].value = this.ldistance;\n  }\n  initPostProcessing() {\n    if (this.postprocessing.enabled) {\n      this.postprocessing.scene = new Scene();\n      this.postprocessing.camera = new OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, -1e4, 1e4);\n      this.postprocessing.scene.add(this.postprocessing.camera);\n      this.postprocessing.rtTextureDepth = new WebGLRenderTarget(window.innerWidth, window.innerHeight);\n      this.postprocessing.rtTextureColor = new WebGLRenderTarget(window.innerWidth, window.innerHeight);\n      const bokeh_shader = BokehShader2;\n      this.postprocessing.bokeh_uniforms = UniformsUtils.clone(bokeh_shader.uniforms);\n      this.postprocessing.bokeh_uniforms[\"tColor\"].value = this.postprocessing.rtTextureColor.texture;\n      this.postprocessing.bokeh_uniforms[\"tDepth\"].value = this.postprocessing.rtTextureDepth.texture;\n      this.postprocessing.bokeh_uniforms[\"manualdof\"].value = 0;\n      this.postprocessing.bokeh_uniforms[\"shaderFocus\"].value = 0;\n      this.postprocessing.bokeh_uniforms[\"fstop\"].value = 2.8;\n      this.postprocessing.bokeh_uniforms[\"showFocus\"].value = 1;\n      this.postprocessing.bokeh_uniforms[\"focalDepth\"].value = 0.1;\n      this.postprocessing.bokeh_uniforms[\"znear\"].value = this.near;\n      this.postprocessing.bokeh_uniforms[\"zfar\"].value = this.near;\n      this.postprocessing.bokeh_uniforms[\"textureWidth\"].value = window.innerWidth;\n      this.postprocessing.bokeh_uniforms[\"textureHeight\"].value = window.innerHeight;\n      this.postprocessing.materialBokeh = new ShaderMaterial({\n        uniforms: this.postprocessing.bokeh_uniforms,\n        vertexShader: bokeh_shader.vertexShader,\n        fragmentShader: bokeh_shader.fragmentShader,\n        defines: {\n          RINGS: this.shaderSettings.rings,\n          SAMPLES: this.shaderSettings.samples,\n          DEPTH_PACKING: 1\n        }\n      });\n      this.postprocessing.quad = new Mesh(new PlaneGeometry(window.innerWidth, window.innerHeight), this.postprocessing.materialBokeh);\n      this.postprocessing.quad.position.z = -500;\n      this.postprocessing.scene.add(this.postprocessing.quad);\n    }\n  }\n  renderCinematic(scene, renderer) {\n    if (this.postprocessing.enabled) {\n      const currentRenderTarget = renderer.getRenderTarget();\n      renderer.clear();\n      scene.overrideMaterial = null;\n      renderer.setRenderTarget(this.postprocessing.rtTextureColor);\n      renderer.clear();\n      renderer.render(scene, this);\n      scene.overrideMaterial = this.materialDepth;\n      renderer.setRenderTarget(this.postprocessing.rtTextureDepth);\n      renderer.clear();\n      renderer.render(scene, this);\n      renderer.setRenderTarget(null);\n      renderer.render(this.postprocessing.scene, this.postprocessing.camera);\n      renderer.setRenderTarget(currentRenderTarget);\n    }\n  }\n}\nexport { CinematicCamera };","map":{"version":3,"sources":["../../src/cameras/CinematicCamera.js"],"names":[],"mappings":"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","sourcesContent":["import {\n  Mesh,\n  OrthographicCamera,\n  PerspectiveCamera,\n  PlaneGeometry,\n  Scene,\n  ShaderMaterial,\n  UniformsUtils,\n  WebGLRenderTarget,\n} from 'three'\nimport { BokehShader2, BokehDepthShader } from '../shaders/BokehShader2'\n\nclass CinematicCamera extends PerspectiveCamera {\n  constructor(fov, aspect, near, far) {\n    super(fov, aspect, near, far)\n\n    this.type = 'CinematicCamera'\n\n    this.postprocessing = { enabled: true }\n    this.shaderSettings = {\n      rings: 3,\n      samples: 4,\n    }\n\n    const depthShader = BokehDepthShader\n\n    this.materialDepth = new ShaderMaterial({\n      uniforms: depthShader.uniforms,\n      vertexShader: depthShader.vertexShader,\n      fragmentShader: depthShader.fragmentShader,\n    })\n\n    this.materialDepth.uniforms['mNear'].value = near\n    this.materialDepth.uniforms['mFar'].value = far\n\n    // In case of cinematicCamera, having a default lens set is important\n    this.setLens()\n\n    this.initPostProcessing()\n  }\n\n  // providing fnumber and coc(Circle of Confusion) as extra arguments\n  setLens(focalLength, filmGauge, fNumber, coc) {\n    // In case of cinematicCamera, having a default lens set is important\n    if (focalLength === undefined) focalLength = 35\n    if (filmGauge !== undefined) this.filmGauge = filmGauge\n\n    this.setFocalLength(focalLength)\n\n    // if fnumber and coc are not provided, cinematicCamera tries to act as a basic PerspectiveCamera\n    if (fNumber === undefined) fNumber = 8\n    if (coc === undefined) coc = 0.019\n\n    this.fNumber = fNumber\n    this.coc = coc\n\n    // fNumber is focalLength by aperture\n    this.aperture = focalLength / this.fNumber\n\n    // hyperFocal is required to calculate depthOfField when a lens tries to focus at a distance with given fNumber and focalLength\n    this.hyperFocal = (focalLength * focalLength) / (this.aperture * this.coc)\n  }\n\n  linearize(depth) {\n    const zfar = this.far\n    const znear = this.near\n    return (-zfar * znear) / (depth * (zfar - znear) - zfar)\n  }\n\n  smoothstep(near, far, depth) {\n    const x = this.saturate((depth - near) / (far - near))\n    return x * x * (3 - 2 * x)\n  }\n\n  saturate(x) {\n    return Math.max(0, Math.min(1, x))\n  }\n\n  // function for focusing at a distance from the camera\n  focusAt(focusDistance) {\n    if (focusDistance === undefined) focusDistance = 20\n\n    const focalLength = this.getFocalLength()\n\n    // distance from the camera (normal to frustrum) to focus on\n    this.focus = focusDistance\n\n    // the nearest point from the camera which is in focus (unused)\n    this.nearPoint = (this.hyperFocal * this.focus) / (this.hyperFocal + (this.focus - focalLength))\n\n    // the farthest point from the camera which is in focus (unused)\n    this.farPoint = (this.hyperFocal * this.focus) / (this.hyperFocal - (this.focus - focalLength))\n\n    // the gap or width of the space in which is everything is in focus (unused)\n    this.depthOfField = this.farPoint - this.nearPoint\n\n    // Considering minimum distance of focus for a standard lens (unused)\n    if (this.depthOfField < 0) this.depthOfField = 0\n\n    this.sdistance = this.smoothstep(this.near, this.far, this.focus)\n\n    this.ldistance = this.linearize(1 - this.sdistance)\n\n    this.postprocessing.bokeh_uniforms['focalDepth'].value = this.ldistance\n  }\n\n  initPostProcessing() {\n    if (this.postprocessing.enabled) {\n      this.postprocessing.scene = new Scene()\n\n      this.postprocessing.camera = new OrthographicCamera(\n        window.innerWidth / -2,\n        window.innerWidth / 2,\n        window.innerHeight / 2,\n        window.innerHeight / -2,\n        -10000,\n        10000,\n      )\n\n      this.postprocessing.scene.add(this.postprocessing.camera)\n\n      this.postprocessing.rtTextureDepth = new WebGLRenderTarget(window.innerWidth, window.innerHeight)\n      this.postprocessing.rtTextureColor = new WebGLRenderTarget(window.innerWidth, window.innerHeight)\n\n      const bokeh_shader = BokehShader2\n\n      this.postprocessing.bokeh_uniforms = UniformsUtils.clone(bokeh_shader.uniforms)\n\n      this.postprocessing.bokeh_uniforms['tColor'].value = this.postprocessing.rtTextureColor.texture\n      this.postprocessing.bokeh_uniforms['tDepth'].value = this.postprocessing.rtTextureDepth.texture\n\n      this.postprocessing.bokeh_uniforms['manualdof'].value = 0\n      this.postprocessing.bokeh_uniforms['shaderFocus'].value = 0\n\n      this.postprocessing.bokeh_uniforms['fstop'].value = 2.8\n\n      this.postprocessing.bokeh_uniforms['showFocus'].value = 1\n\n      this.postprocessing.bokeh_uniforms['focalDepth'].value = 0.1\n\n      //console.log( this.postprocessing.bokeh_uniforms[ \"focalDepth\" ].value );\n\n      this.postprocessing.bokeh_uniforms['znear'].value = this.near\n      this.postprocessing.bokeh_uniforms['zfar'].value = this.near\n\n      this.postprocessing.bokeh_uniforms['textureWidth'].value = window.innerWidth\n\n      this.postprocessing.bokeh_uniforms['textureHeight'].value = window.innerHeight\n\n      this.postprocessing.materialBokeh = new ShaderMaterial({\n        uniforms: this.postprocessing.bokeh_uniforms,\n        vertexShader: bokeh_shader.vertexShader,\n        fragmentShader: bokeh_shader.fragmentShader,\n        defines: {\n          RINGS: this.shaderSettings.rings,\n          SAMPLES: this.shaderSettings.samples,\n          DEPTH_PACKING: 1,\n        },\n      })\n\n      this.postprocessing.quad = new Mesh(\n        new PlaneGeometry(window.innerWidth, window.innerHeight),\n        this.postprocessing.materialBokeh,\n      )\n      this.postprocessing.quad.position.z = -500\n      this.postprocessing.scene.add(this.postprocessing.quad)\n    }\n  }\n\n  renderCinematic(scene, renderer) {\n    if (this.postprocessing.enabled) {\n      const currentRenderTarget = renderer.getRenderTarget()\n\n      renderer.clear()\n\n      // Render scene into texture\n\n      scene.overrideMaterial = null\n      renderer.setRenderTarget(this.postprocessing.rtTextureColor)\n      renderer.clear()\n      renderer.render(scene, this)\n\n      // Render depth into texture\n\n      scene.overrideMaterial = this.materialDepth\n      renderer.setRenderTarget(this.postprocessing.rtTextureDepth)\n      renderer.clear()\n      renderer.render(scene, this)\n\n      // Render bokeh composite\n\n      renderer.setRenderTarget(null)\n      renderer.render(this.postprocessing.scene, this.postprocessing.camera)\n\n      renderer.setRenderTarget(currentRenderTarget)\n    }\n  }\n}\n\nexport { CinematicCamera }\n"]},"metadata":{},"sourceType":"module"}