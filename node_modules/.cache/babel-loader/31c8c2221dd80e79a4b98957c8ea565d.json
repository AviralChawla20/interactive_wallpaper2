{"ast":null,"code":"import { PerspectiveCamera, Vector3, Quaternion } from \"three\";\nclass PeppersGhostEffect {\n  constructor(renderer) {\n    const scope = this;\n    scope.cameraDistance = 15;\n    scope.reflectFromAbove = false;\n    let _halfWidth, _width, _height;\n    const _cameraF = new PerspectiveCamera();\n    const _cameraB = new PerspectiveCamera();\n    const _cameraL = new PerspectiveCamera();\n    const _cameraR = new PerspectiveCamera();\n    const _position = new Vector3();\n    const _quaternion = new Quaternion();\n    const _scale = new Vector3();\n    renderer.autoClear = false;\n    this.setSize = function (width, height) {\n      _halfWidth = width / 2;\n      if (width < height) {\n        _width = width / 3;\n        _height = width / 3;\n      } else {\n        _width = height / 3;\n        _height = height / 3;\n      }\n      renderer.setSize(width, height);\n    };\n    this.render = function (scene, camera) {\n      if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n      camera.matrixWorld.decompose(_position, _quaternion, _scale);\n      _cameraF.position.copy(_position);\n      _cameraF.quaternion.copy(_quaternion);\n      _cameraF.translateZ(scope.cameraDistance);\n      _cameraF.lookAt(scene.position);\n      _cameraB.position.copy(_position);\n      _cameraB.quaternion.copy(_quaternion);\n      _cameraB.translateZ(-scope.cameraDistance);\n      _cameraB.lookAt(scene.position);\n      _cameraB.rotation.z += 180 * (Math.PI / 180);\n      _cameraL.position.copy(_position);\n      _cameraL.quaternion.copy(_quaternion);\n      _cameraL.translateX(-scope.cameraDistance);\n      _cameraL.lookAt(scene.position);\n      _cameraL.rotation.x += 90 * (Math.PI / 180);\n      _cameraR.position.copy(_position);\n      _cameraR.quaternion.copy(_quaternion);\n      _cameraR.translateX(scope.cameraDistance);\n      _cameraR.lookAt(scene.position);\n      _cameraR.rotation.x += 90 * (Math.PI / 180);\n      renderer.clear();\n      renderer.setScissorTest(true);\n      renderer.setScissor(_halfWidth - _width / 2, _height * 2, _width, _height);\n      renderer.setViewport(_halfWidth - _width / 2, _height * 2, _width, _height);\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraB);\n      } else {\n        renderer.render(scene, _cameraF);\n      }\n      renderer.setScissor(_halfWidth - _width / 2, 0, _width, _height);\n      renderer.setViewport(_halfWidth - _width / 2, 0, _width, _height);\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraF);\n      } else {\n        renderer.render(scene, _cameraB);\n      }\n      renderer.setScissor(_halfWidth - _width / 2 - _width, _height, _width, _height);\n      renderer.setViewport(_halfWidth - _width / 2 - _width, _height, _width, _height);\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraR);\n      } else {\n        renderer.render(scene, _cameraL);\n      }\n      renderer.setScissor(_halfWidth + _width / 2, _height, _width, _height);\n      renderer.setViewport(_halfWidth + _width / 2, _height, _width, _height);\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraL);\n      } else {\n        renderer.render(scene, _cameraR);\n      }\n      renderer.setScissorTest(false);\n    };\n  }\n}\nexport { PeppersGhostEffect };","map":{"version":3,"sources":["../../src/effects/PeppersGhostEffect.js"],"names":[],"mappings":"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","sourcesContent":["import { PerspectiveCamera, Quaternion, Vector3 } from 'three'\n\n/**\n * peppers ghost effect based on http://www.instructables.com/id/Reflective-Prism/?ALLSTEPS\n */\n\nclass PeppersGhostEffect {\n  constructor(renderer) {\n    const scope = this\n\n    scope.cameraDistance = 15\n    scope.reflectFromAbove = false\n\n    // Internals\n    let _halfWidth, _width, _height\n\n    const _cameraF = new PerspectiveCamera() //front\n    const _cameraB = new PerspectiveCamera() //back\n    const _cameraL = new PerspectiveCamera() //left\n    const _cameraR = new PerspectiveCamera() //right\n\n    const _position = new Vector3()\n    const _quaternion = new Quaternion()\n    const _scale = new Vector3()\n\n    // Initialization\n    renderer.autoClear = false\n\n    this.setSize = function (width, height) {\n      _halfWidth = width / 2\n      if (width < height) {\n        _width = width / 3\n        _height = width / 3\n      } else {\n        _width = height / 3\n        _height = height / 3\n      }\n\n      renderer.setSize(width, height)\n    }\n\n    this.render = function (scene, camera) {\n      if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld()\n\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld()\n\n      camera.matrixWorld.decompose(_position, _quaternion, _scale)\n\n      // front\n      _cameraF.position.copy(_position)\n      _cameraF.quaternion.copy(_quaternion)\n      _cameraF.translateZ(scope.cameraDistance)\n      _cameraF.lookAt(scene.position)\n\n      // back\n      _cameraB.position.copy(_position)\n      _cameraB.quaternion.copy(_quaternion)\n      _cameraB.translateZ(-scope.cameraDistance)\n      _cameraB.lookAt(scene.position)\n      _cameraB.rotation.z += 180 * (Math.PI / 180)\n\n      // left\n      _cameraL.position.copy(_position)\n      _cameraL.quaternion.copy(_quaternion)\n      _cameraL.translateX(-scope.cameraDistance)\n      _cameraL.lookAt(scene.position)\n      _cameraL.rotation.x += 90 * (Math.PI / 180)\n\n      // right\n      _cameraR.position.copy(_position)\n      _cameraR.quaternion.copy(_quaternion)\n      _cameraR.translateX(scope.cameraDistance)\n      _cameraR.lookAt(scene.position)\n      _cameraR.rotation.x += 90 * (Math.PI / 180)\n\n      renderer.clear()\n      renderer.setScissorTest(true)\n\n      renderer.setScissor(_halfWidth - _width / 2, _height * 2, _width, _height)\n      renderer.setViewport(_halfWidth - _width / 2, _height * 2, _width, _height)\n\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraB)\n      } else {\n        renderer.render(scene, _cameraF)\n      }\n\n      renderer.setScissor(_halfWidth - _width / 2, 0, _width, _height)\n      renderer.setViewport(_halfWidth - _width / 2, 0, _width, _height)\n\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraF)\n      } else {\n        renderer.render(scene, _cameraB)\n      }\n\n      renderer.setScissor(_halfWidth - _width / 2 - _width, _height, _width, _height)\n      renderer.setViewport(_halfWidth - _width / 2 - _width, _height, _width, _height)\n\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraR)\n      } else {\n        renderer.render(scene, _cameraL)\n      }\n\n      renderer.setScissor(_halfWidth + _width / 2, _height, _width, _height)\n      renderer.setViewport(_halfWidth + _width / 2, _height, _width, _height)\n\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraL)\n      } else {\n        renderer.render(scene, _cameraR)\n      }\n\n      renderer.setScissorTest(false)\n    }\n  }\n}\n\nexport { PeppersGhostEffect }\n"]},"metadata":{},"sourceType":"module"}