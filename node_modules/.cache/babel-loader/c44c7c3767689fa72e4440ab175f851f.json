{"ast":null,"code":"import { Object3D } from \"three\";\nimport { XRHandPrimitiveModel } from \"./XRHandPrimitiveModel.js\";\nimport { XRHandMeshModel } from \"./XRHandMeshModel.js\";\nclass XRHandModel extends Object3D {\n  constructor(controller) {\n    super();\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n}\nclass XRHandModelFactory {\n  constructor() {\n    this.path = null;\n  }\n  setPath(path) {\n    this.path = path;\n    return this;\n  }\n  createHandModel(controller, profile) {\n    const handModel = new XRHandModel(controller);\n    controller.addEventListener(\"connected\", event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.hand && !handModel.motionController) {\n        handModel.xrInputSource = xrInputSource;\n        if (profile === void 0 || profile === \"spheres\") {\n          handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n            primitive: \"sphere\"\n          });\n        } else if (profile === \"boxes\") {\n          handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n            primitive: \"box\"\n          });\n        } else if (profile === \"mesh\") {\n          handModel.motionController = new XRHandMeshModel(handModel, controller, this.path, xrInputSource.handedness);\n        }\n      }\n    });\n    controller.addEventListener(\"disconnected\", () => {});\n    return handModel;\n  }\n}\nexport { XRHandModelFactory };","map":{"version":3,"sources":["../../src/webxr/XRHandModelFactory.js"],"names":[],"mappings":";;;AAIA,MAAM,WAAA,SAAoB,QAAA,CAAS;EACjC,WAAA,CAAY,UAAA,EAAY;IACtB,KAAA,CAAO,CAAA;IAEP,IAAA,CAAK,UAAA,GAAa,UAAA;IAClB,IAAA,CAAK,gBAAA,GAAmB,IAAA;IACxB,IAAA,CAAK,MAAA,GAAS,IAAA;IAEd,IAAA,CAAK,IAAA,GAAO,IAAA;EACb;EAED,iBAAA,CAAkB,KAAA,EAAO;IACvB,KAAA,CAAM,iBAAA,CAAkB,KAAK,CAAA;IAE7B,IAAI,IAAA,CAAK,gBAAA,EAAkB;MACzB,IAAA,CAAK,gBAAA,CAAiB,UAAA,CAAY,CAAA;IACnC;EACF;AACH;AAEA,MAAM,kBAAA,CAAmB;EACvB,WAAA,CAAA,EAAc;IACZ,IAAA,CAAK,IAAA,GAAO,IAAA;EACb;EAED,OAAA,CAAQ,IAAA,EAAM;IACZ,IAAA,CAAK,IAAA,GAAO,IAAA;IAEZ,OAAO,IAAA;EACR;EAED,eAAA,CAAgB,UAAA,EAAY,OAAA,EAAS;IACnC,MAAM,SAAA,GAAY,IAAI,WAAA,CAAY,UAAU,CAAA;IAE5C,UAAA,CAAW,gBAAA,CAAiB,WAAA,EAAc,KAAA,IAAU;MAClD,MAAM,aAAA,GAAgB,KAAA,CAAM,IAAA;MAE5B,IAAI,aAAA,CAAc,IAAA,IAAQ,CAAC,SAAA,CAAU,gBAAA,EAAkB;QACrD,SAAA,CAAU,aAAA,GAAgB,aAAA;QAG1B,IAAI,OAAA,KAAY,KAAA,CAAA,IAAa,OAAA,KAAY,SAAA,EAAW;UAClD,SAAA,CAAU,gBAAA,GAAmB,IAAI,oBAAA,CAC/B,SAAA,EACA,UAAA,EACA,IAAA,CAAK,IAAA,EACL,aAAA,CAAc,UAAA,EACd;YAAE,SAAA,EAAW;UAAU,CACxB,CAAA;QACX,CAAA,MAAA,IAAmB,OAAA,KAAY,OAAA,EAAS;UAC9B,SAAA,CAAU,gBAAA,GAAmB,IAAI,oBAAA,CAC/B,SAAA,EACA,UAAA,EACA,IAAA,CAAK,IAAA,EACL,aAAA,CAAc,UAAA,EACd;YAAE,SAAA,EAAW;UAAO,CACrB,CAAA;QACX,CAAA,MAAA,IAAmB,OAAA,KAAY,MAAA,EAAQ;UAC7B,SAAA,CAAU,gBAAA,GAAmB,IAAI,eAAA,CAAgB,SAAA,EAAW,UAAA,EAAY,IAAA,CAAK,IAAA,EAAM,aAAA,CAAc,UAAU,CAAA;QAC5G;MACF;IACP,CAAK,CAAA;IAED,UAAA,CAAW,gBAAA,CAAiB,cAAA,EAAgB,MAAM,CAItD,CAAK,CAAA;IAED,OAAO,SAAA;EACR;AACH","sourcesContent":["import { Object3D } from 'three'\nimport { XRHandPrimitiveModel } from './XRHandPrimitiveModel'\nimport { XRHandMeshModel } from './XRHandMeshModel'\n\nclass XRHandModel extends Object3D {\n  constructor(controller) {\n    super()\n\n    this.controller = controller\n    this.motionController = null\n    this.envMap = null\n\n    this.mesh = null\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force)\n\n    if (this.motionController) {\n      this.motionController.updateMesh()\n    }\n  }\n}\n\nclass XRHandModelFactory {\n  constructor() {\n    this.path = null\n  }\n\n  setPath(path) {\n    this.path = path\n\n    return this\n  }\n\n  createHandModel(controller, profile) {\n    const handModel = new XRHandModel(controller)\n\n    controller.addEventListener('connected', (event) => {\n      const xrInputSource = event.data\n\n      if (xrInputSource.hand && !handModel.motionController) {\n        handModel.xrInputSource = xrInputSource\n\n        // @todo Detect profile if not provided\n        if (profile === undefined || profile === 'spheres') {\n          handModel.motionController = new XRHandPrimitiveModel(\n            handModel,\n            controller,\n            this.path,\n            xrInputSource.handedness,\n            { primitive: 'sphere' },\n          )\n        } else if (profile === 'boxes') {\n          handModel.motionController = new XRHandPrimitiveModel(\n            handModel,\n            controller,\n            this.path,\n            xrInputSource.handedness,\n            { primitive: 'box' },\n          )\n        } else if (profile === 'mesh') {\n          handModel.motionController = new XRHandMeshModel(handModel, controller, this.path, xrInputSource.handedness)\n        }\n      }\n    })\n\n    controller.addEventListener('disconnected', () => {\n      // handModel.motionController = null;\n      // handModel.remove( scene );\n      // scene = null;\n    })\n\n    return handModel\n  }\n}\n\nexport { XRHandModelFactory }\n"]},"metadata":{},"sourceType":"module"}