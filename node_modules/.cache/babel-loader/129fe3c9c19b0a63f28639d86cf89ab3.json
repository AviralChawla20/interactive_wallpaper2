{"ast":null,"code":"import { BufferGeometry, Vector3, Quaternion, BufferAttribute, Raycaster, Color } from \"three\";\nclass RollerCoasterGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const normals = [];\n    const colors = [];\n    const color1 = [1, 1, 1];\n    const color2 = [1, 1, 0];\n    const up = new Vector3(0, 1, 0);\n    const forward = new Vector3();\n    const right = new Vector3();\n    const quaternion = new Quaternion();\n    const prevQuaternion = new Quaternion();\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n    const point = new Vector3();\n    const prevPoint = new Vector3();\n    prevPoint.copy(curve.getPointAt(0));\n    const step = [new Vector3(-0.225, 0, 0), new Vector3(0, -0.05, 0), new Vector3(0, -0.175, 0), new Vector3(0, -0.05, 0), new Vector3(0.225, 0, 0), new Vector3(0, -0.175, 0)];\n    const PI2 = Math.PI * 2;\n    let sides = 5;\n    const tube1 = [];\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * PI2;\n      tube1.push(new Vector3(Math.sin(angle) * 0.06, Math.cos(angle) * 0.06, 0));\n    }\n    sides = 6;\n    const tube2 = [];\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * PI2;\n      tube2.push(new Vector3(Math.sin(angle) * 0.025, Math.cos(angle) * 0.025, 0));\n    }\n    const vector = new Vector3();\n    const normal = new Vector3();\n    function drawShape(shape, color) {\n      normal.set(0, 0, -1).applyQuaternion(quaternion);\n      for (let j = 0; j < shape.length; j++) {\n        vector.copy(shape[j]);\n        vector.applyQuaternion(quaternion);\n        vector.add(point);\n        vertices.push(vector.x, vector.y, vector.z);\n        normals.push(normal.x, normal.y, normal.z);\n        colors.push(color[0], color[1], color[2]);\n      }\n      normal.set(0, 0, 1).applyQuaternion(quaternion);\n      for (let j = shape.length - 1; j >= 0; j--) {\n        vector.copy(shape[j]);\n        vector.applyQuaternion(quaternion);\n        vector.add(point);\n        vertices.push(vector.x, vector.y, vector.z);\n        normals.push(normal.x, normal.y, normal.z);\n        colors.push(color[0], color[1], color[2]);\n      }\n    }\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    const normal1 = new Vector3();\n    const normal2 = new Vector3();\n    const normal3 = new Vector3();\n    const normal4 = new Vector3();\n    function extrudeShape(shape, offset2, color) {\n      for (let j = 0, jl = shape.length; j < jl; j++) {\n        const point1 = shape[j];\n        const point2 = shape[(j + 1) % jl];\n        vector1.copy(point1).add(offset2);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(point);\n        vector2.copy(point2).add(offset2);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(point);\n        vector3.copy(point2).add(offset2);\n        vector3.applyQuaternion(prevQuaternion);\n        vector3.add(prevPoint);\n        vector4.copy(point1).add(offset2);\n        vector4.applyQuaternion(prevQuaternion);\n        vector4.add(prevPoint);\n        vertices.push(vector1.x, vector1.y, vector1.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector3.x, vector3.y, vector3.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        normal1.copy(point1);\n        normal1.applyQuaternion(quaternion);\n        normal1.normalize();\n        normal2.copy(point2);\n        normal2.applyQuaternion(quaternion);\n        normal2.normalize();\n        normal3.copy(point2);\n        normal3.applyQuaternion(prevQuaternion);\n        normal3.normalize();\n        normal4.copy(point1);\n        normal4.applyQuaternion(prevQuaternion);\n        normal4.normalize();\n        normals.push(normal1.x, normal1.y, normal1.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal3.x, normal3.y, normal3.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n      }\n    }\n    const offset = new Vector3();\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      up.set(0, 1, 0);\n      forward.subVectors(point, prevPoint).normalize();\n      right.crossVectors(up, forward).normalize();\n      up.crossVectors(forward, right);\n      const angle = Math.atan2(forward.x, forward.z);\n      quaternion.setFromAxisAngle(up, angle);\n      if (i % 2 === 0) {\n        drawShape(step, color2);\n      }\n      extrudeShape(tube1, offset.set(0, -0.125, 0), color2);\n      extrudeShape(tube2, offset.set(0.2, 0, 0), color1);\n      extrudeShape(tube2, offset.set(-0.2, 0, 0), color1);\n      prevPoint.copy(point);\n      prevQuaternion.copy(quaternion);\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute(\"normal\", new BufferAttribute(new Float32Array(normals), 3));\n    this.setAttribute(\"color\", new BufferAttribute(new Float32Array(colors), 3));\n  }\n}\nclass RollerCoasterLiftersGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const normals = [];\n    const quaternion = new Quaternion();\n    const up = new Vector3(0, 1, 0);\n    const point = new Vector3();\n    const tangent = new Vector3();\n    const tube1 = [new Vector3(0, 0.05, -0.05), new Vector3(0, 0.05, 0.05), new Vector3(0, -0.05, 0)];\n    const tube2 = [new Vector3(-0.05, 0, 0.05), new Vector3(-0.05, 0, -0.05), new Vector3(0.05, 0, 0)];\n    const tube3 = [new Vector3(0.05, 0, -0.05), new Vector3(0.05, 0, 0.05), new Vector3(-0.05, 0, 0)];\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    const normal1 = new Vector3();\n    const normal2 = new Vector3();\n    const normal3 = new Vector3();\n    const normal4 = new Vector3();\n    function extrudeShape(shape, fromPoint2, toPoint2) {\n      for (let j = 0, jl = shape.length; j < jl; j++) {\n        const point1 = shape[j];\n        const point2 = shape[(j + 1) % jl];\n        vector1.copy(point1);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(fromPoint2);\n        vector2.copy(point2);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(fromPoint2);\n        vector3.copy(point2);\n        vector3.applyQuaternion(quaternion);\n        vector3.add(toPoint2);\n        vector4.copy(point1);\n        vector4.applyQuaternion(quaternion);\n        vector4.add(toPoint2);\n        vertices.push(vector1.x, vector1.y, vector1.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector3.x, vector3.y, vector3.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        normal1.copy(point1);\n        normal1.applyQuaternion(quaternion);\n        normal1.normalize();\n        normal2.copy(point2);\n        normal2.applyQuaternion(quaternion);\n        normal2.normalize();\n        normal3.copy(point2);\n        normal3.applyQuaternion(quaternion);\n        normal3.normalize();\n        normal4.copy(point1);\n        normal4.applyQuaternion(quaternion);\n        normal4.normalize();\n        normals.push(normal1.x, normal1.y, normal1.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal3.x, normal3.y, normal3.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n      }\n    }\n    const fromPoint = new Vector3();\n    const toPoint = new Vector3();\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      tangent.copy(curve.getTangentAt(i / divisions));\n      const angle = Math.atan2(tangent.x, tangent.z);\n      quaternion.setFromAxisAngle(up, angle);\n      if (point.y > 10) {\n        fromPoint.set(-0.75, -0.35, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0.75, -0.35, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube1, fromPoint, toPoint);\n        fromPoint.set(-0.7, -0.3, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(-0.7, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube2, fromPoint, toPoint);\n        fromPoint.set(0.7, -0.3, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0.7, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube3, fromPoint, toPoint);\n      } else {\n        fromPoint.set(0, -0.2, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube3, fromPoint, toPoint);\n      }\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute(\"normal\", new BufferAttribute(new Float32Array(normals), 3));\n  }\n}\nclass RollerCoasterShadowGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const up = new Vector3(0, 1, 0);\n    const forward = new Vector3();\n    const quaternion = new Quaternion();\n    const prevQuaternion = new Quaternion();\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n    const point = new Vector3();\n    const prevPoint = new Vector3();\n    prevPoint.copy(curve.getPointAt(0));\n    prevPoint.y = 0;\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      point.y = 0;\n      forward.subVectors(point, prevPoint);\n      const angle = Math.atan2(forward.x, forward.z);\n      quaternion.setFromAxisAngle(up, angle);\n      vector1.set(-0.3, 0, 0);\n      vector1.applyQuaternion(quaternion);\n      vector1.add(point);\n      vector2.set(0.3, 0, 0);\n      vector2.applyQuaternion(quaternion);\n      vector2.add(point);\n      vector3.set(0.3, 0, 0);\n      vector3.applyQuaternion(prevQuaternion);\n      vector3.add(prevPoint);\n      vector4.set(-0.3, 0, 0);\n      vector4.applyQuaternion(prevQuaternion);\n      vector4.add(prevPoint);\n      vertices.push(vector1.x, vector1.y, vector1.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector3.x, vector3.y, vector3.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      prevPoint.copy(point);\n      prevQuaternion.copy(quaternion);\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n  }\n}\nclass SkyGeometry extends BufferGeometry {\n  constructor() {\n    super();\n    const vertices = [];\n    for (let i = 0; i < 100; i++) {\n      const x = Math.random() * 800 - 400;\n      const y = Math.random() * 50 + 50;\n      const z = Math.random() * 800 - 400;\n      const size = Math.random() * 40 + 20;\n      vertices.push(x - size, y, z - size);\n      vertices.push(x + size, y, z - size);\n      vertices.push(x - size, y, z + size);\n      vertices.push(x + size, y, z - size);\n      vertices.push(x + size, y, z + size);\n      vertices.push(x - size, y, z + size);\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n  }\n}\nclass TreesGeometry extends BufferGeometry {\n  constructor(landscape) {\n    super();\n    const vertices = [];\n    const colors = [];\n    const raycaster = new Raycaster();\n    raycaster.ray.direction.set(0, -1, 0);\n    const _color = new Color();\n    for (let i = 0; i < 2e3; i++) {\n      const x = Math.random() * 500 - 250;\n      const z = Math.random() * 500 - 250;\n      raycaster.ray.origin.set(x, 50, z);\n      const intersections = raycaster.intersectObject(landscape);\n      if (intersections.length === 0) continue;\n      const y = intersections[0].point.y;\n      const height = Math.random() * 5 + 0.5;\n      let angle = Math.random() * Math.PI * 2;\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n      vertices.push(x, y + height, z);\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n      angle += Math.PI / 2;\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n      vertices.push(x, y + height, z);\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n      const random = Math.random() * 0.1;\n      for (let j = 0; j < 6; j++) {\n        _color.setRGB(0.2 + random, 0.4 + random, 0, \"srgb\");\n        colors.push(_color.r, _color.g, _color.b);\n      }\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute(\"color\", new BufferAttribute(new Float32Array(colors), 3));\n  }\n}\nexport { RollerCoasterGeometry, RollerCoasterLiftersGeometry, RollerCoasterShadowGeometry, SkyGeometry, TreesGeometry };","map":{"version":3,"sources":["../../src/misc/RollerCoaster.js"],"names":["offset","fromPoint","toPoint"],"mappings":"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","sourcesContent":["import { BufferAttribute, BufferGeometry, Color, Quaternion, Raycaster, Vector3 } from 'three'\n\nclass RollerCoasterGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super()\n\n    const vertices = []\n    const normals = []\n    const colors = []\n\n    const color1 = [1, 1, 1]\n    const color2 = [1, 1, 0]\n\n    const up = new Vector3(0, 1, 0)\n    const forward = new Vector3()\n    const right = new Vector3()\n\n    const quaternion = new Quaternion()\n    const prevQuaternion = new Quaternion()\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2)\n\n    const point = new Vector3()\n    const prevPoint = new Vector3()\n    prevPoint.copy(curve.getPointAt(0))\n\n    // shapes\n\n    const step = [\n      new Vector3(-0.225, 0, 0),\n      new Vector3(0, -0.05, 0),\n      new Vector3(0, -0.175, 0),\n\n      new Vector3(0, -0.05, 0),\n      new Vector3(0.225, 0, 0),\n      new Vector3(0, -0.175, 0),\n    ]\n\n    const PI2 = Math.PI * 2\n\n    let sides = 5\n    const tube1 = []\n\n    for (let i = 0; i < sides; i++) {\n      const angle = (i / sides) * PI2\n      tube1.push(new Vector3(Math.sin(angle) * 0.06, Math.cos(angle) * 0.06, 0))\n    }\n\n    sides = 6\n    const tube2 = []\n\n    for (let i = 0; i < sides; i++) {\n      const angle = (i / sides) * PI2\n      tube2.push(new Vector3(Math.sin(angle) * 0.025, Math.cos(angle) * 0.025, 0))\n    }\n\n    const vector = new Vector3()\n    const normal = new Vector3()\n\n    function drawShape(shape, color) {\n      normal.set(0, 0, -1).applyQuaternion(quaternion)\n\n      for (let j = 0; j < shape.length; j++) {\n        vector.copy(shape[j])\n        vector.applyQuaternion(quaternion)\n        vector.add(point)\n\n        vertices.push(vector.x, vector.y, vector.z)\n        normals.push(normal.x, normal.y, normal.z)\n        colors.push(color[0], color[1], color[2])\n      }\n\n      normal.set(0, 0, 1).applyQuaternion(quaternion)\n\n      for (let j = shape.length - 1; j >= 0; j--) {\n        vector.copy(shape[j])\n        vector.applyQuaternion(quaternion)\n        vector.add(point)\n\n        vertices.push(vector.x, vector.y, vector.z)\n        normals.push(normal.x, normal.y, normal.z)\n        colors.push(color[0], color[1], color[2])\n      }\n    }\n\n    const vector1 = new Vector3()\n    const vector2 = new Vector3()\n    const vector3 = new Vector3()\n    const vector4 = new Vector3()\n\n    const normal1 = new Vector3()\n    const normal2 = new Vector3()\n    const normal3 = new Vector3()\n    const normal4 = new Vector3()\n\n    function extrudeShape(shape, offset, color) {\n      for (let j = 0, jl = shape.length; j < jl; j++) {\n        const point1 = shape[j]\n        const point2 = shape[(j + 1) % jl]\n\n        vector1.copy(point1).add(offset)\n        vector1.applyQuaternion(quaternion)\n        vector1.add(point)\n\n        vector2.copy(point2).add(offset)\n        vector2.applyQuaternion(quaternion)\n        vector2.add(point)\n\n        vector3.copy(point2).add(offset)\n        vector3.applyQuaternion(prevQuaternion)\n        vector3.add(prevPoint)\n\n        vector4.copy(point1).add(offset)\n        vector4.applyQuaternion(prevQuaternion)\n        vector4.add(prevPoint)\n\n        vertices.push(vector1.x, vector1.y, vector1.z)\n        vertices.push(vector2.x, vector2.y, vector2.z)\n        vertices.push(vector4.x, vector4.y, vector4.z)\n\n        vertices.push(vector2.x, vector2.y, vector2.z)\n        vertices.push(vector3.x, vector3.y, vector3.z)\n        vertices.push(vector4.x, vector4.y, vector4.z)\n\n        //\n\n        normal1.copy(point1)\n        normal1.applyQuaternion(quaternion)\n        normal1.normalize()\n\n        normal2.copy(point2)\n        normal2.applyQuaternion(quaternion)\n        normal2.normalize()\n\n        normal3.copy(point2)\n        normal3.applyQuaternion(prevQuaternion)\n        normal3.normalize()\n\n        normal4.copy(point1)\n        normal4.applyQuaternion(prevQuaternion)\n        normal4.normalize()\n\n        normals.push(normal1.x, normal1.y, normal1.z)\n        normals.push(normal2.x, normal2.y, normal2.z)\n        normals.push(normal4.x, normal4.y, normal4.z)\n\n        normals.push(normal2.x, normal2.y, normal2.z)\n        normals.push(normal3.x, normal3.y, normal3.z)\n        normals.push(normal4.x, normal4.y, normal4.z)\n\n        colors.push(color[0], color[1], color[2])\n        colors.push(color[0], color[1], color[2])\n        colors.push(color[0], color[1], color[2])\n\n        colors.push(color[0], color[1], color[2])\n        colors.push(color[0], color[1], color[2])\n        colors.push(color[0], color[1], color[2])\n      }\n    }\n\n    const offset = new Vector3()\n\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions))\n\n      up.set(0, 1, 0)\n\n      forward.subVectors(point, prevPoint).normalize()\n      right.crossVectors(up, forward).normalize()\n      up.crossVectors(forward, right)\n\n      const angle = Math.atan2(forward.x, forward.z)\n\n      quaternion.setFromAxisAngle(up, angle)\n\n      if (i % 2 === 0) {\n        drawShape(step, color2)\n      }\n\n      extrudeShape(tube1, offset.set(0, -0.125, 0), color2)\n      extrudeShape(tube2, offset.set(0.2, 0, 0), color1)\n      extrudeShape(tube2, offset.set(-0.2, 0, 0), color1)\n\n      prevPoint.copy(point)\n      prevQuaternion.copy(quaternion)\n    }\n\n    // console.log( vertices.length );\n\n    this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3))\n    this.setAttribute('normal', new BufferAttribute(new Float32Array(normals), 3))\n    this.setAttribute('color', new BufferAttribute(new Float32Array(colors), 3))\n  }\n}\n\nclass RollerCoasterLiftersGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super()\n\n    const vertices = []\n    const normals = []\n\n    const quaternion = new Quaternion()\n\n    const up = new Vector3(0, 1, 0)\n\n    const point = new Vector3()\n    const tangent = new Vector3()\n\n    // shapes\n\n    const tube1 = [new Vector3(0, 0.05, -0.05), new Vector3(0, 0.05, 0.05), new Vector3(0, -0.05, 0)]\n\n    const tube2 = [new Vector3(-0.05, 0, 0.05), new Vector3(-0.05, 0, -0.05), new Vector3(0.05, 0, 0)]\n\n    const tube3 = [new Vector3(0.05, 0, -0.05), new Vector3(0.05, 0, 0.05), new Vector3(-0.05, 0, 0)]\n\n    const vector1 = new Vector3()\n    const vector2 = new Vector3()\n    const vector3 = new Vector3()\n    const vector4 = new Vector3()\n\n    const normal1 = new Vector3()\n    const normal2 = new Vector3()\n    const normal3 = new Vector3()\n    const normal4 = new Vector3()\n\n    function extrudeShape(shape, fromPoint, toPoint) {\n      for (let j = 0, jl = shape.length; j < jl; j++) {\n        const point1 = shape[j]\n        const point2 = shape[(j + 1) % jl]\n\n        vector1.copy(point1)\n        vector1.applyQuaternion(quaternion)\n        vector1.add(fromPoint)\n\n        vector2.copy(point2)\n        vector2.applyQuaternion(quaternion)\n        vector2.add(fromPoint)\n\n        vector3.copy(point2)\n        vector3.applyQuaternion(quaternion)\n        vector3.add(toPoint)\n\n        vector4.copy(point1)\n        vector4.applyQuaternion(quaternion)\n        vector4.add(toPoint)\n\n        vertices.push(vector1.x, vector1.y, vector1.z)\n        vertices.push(vector2.x, vector2.y, vector2.z)\n        vertices.push(vector4.x, vector4.y, vector4.z)\n\n        vertices.push(vector2.x, vector2.y, vector2.z)\n        vertices.push(vector3.x, vector3.y, vector3.z)\n        vertices.push(vector4.x, vector4.y, vector4.z)\n\n        //\n\n        normal1.copy(point1)\n        normal1.applyQuaternion(quaternion)\n        normal1.normalize()\n\n        normal2.copy(point2)\n        normal2.applyQuaternion(quaternion)\n        normal2.normalize()\n\n        normal3.copy(point2)\n        normal3.applyQuaternion(quaternion)\n        normal3.normalize()\n\n        normal4.copy(point1)\n        normal4.applyQuaternion(quaternion)\n        normal4.normalize()\n\n        normals.push(normal1.x, normal1.y, normal1.z)\n        normals.push(normal2.x, normal2.y, normal2.z)\n        normals.push(normal4.x, normal4.y, normal4.z)\n\n        normals.push(normal2.x, normal2.y, normal2.z)\n        normals.push(normal3.x, normal3.y, normal3.z)\n        normals.push(normal4.x, normal4.y, normal4.z)\n      }\n    }\n\n    const fromPoint = new Vector3()\n    const toPoint = new Vector3()\n\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions))\n      tangent.copy(curve.getTangentAt(i / divisions))\n\n      const angle = Math.atan2(tangent.x, tangent.z)\n\n      quaternion.setFromAxisAngle(up, angle)\n\n      //\n\n      if (point.y > 10) {\n        fromPoint.set(-0.75, -0.35, 0)\n        fromPoint.applyQuaternion(quaternion)\n        fromPoint.add(point)\n\n        toPoint.set(0.75, -0.35, 0)\n        toPoint.applyQuaternion(quaternion)\n        toPoint.add(point)\n\n        extrudeShape(tube1, fromPoint, toPoint)\n\n        fromPoint.set(-0.7, -0.3, 0)\n        fromPoint.applyQuaternion(quaternion)\n        fromPoint.add(point)\n\n        toPoint.set(-0.7, -point.y, 0)\n        toPoint.applyQuaternion(quaternion)\n        toPoint.add(point)\n\n        extrudeShape(tube2, fromPoint, toPoint)\n\n        fromPoint.set(0.7, -0.3, 0)\n        fromPoint.applyQuaternion(quaternion)\n        fromPoint.add(point)\n\n        toPoint.set(0.7, -point.y, 0)\n        toPoint.applyQuaternion(quaternion)\n        toPoint.add(point)\n\n        extrudeShape(tube3, fromPoint, toPoint)\n      } else {\n        fromPoint.set(0, -0.2, 0)\n        fromPoint.applyQuaternion(quaternion)\n        fromPoint.add(point)\n\n        toPoint.set(0, -point.y, 0)\n        toPoint.applyQuaternion(quaternion)\n        toPoint.add(point)\n\n        extrudeShape(tube3, fromPoint, toPoint)\n      }\n    }\n\n    this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3))\n    this.setAttribute('normal', new BufferAttribute(new Float32Array(normals), 3))\n  }\n}\n\nclass RollerCoasterShadowGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super()\n\n    const vertices = []\n\n    const up = new Vector3(0, 1, 0)\n    const forward = new Vector3()\n\n    const quaternion = new Quaternion()\n    const prevQuaternion = new Quaternion()\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2)\n\n    const point = new Vector3()\n\n    const prevPoint = new Vector3()\n    prevPoint.copy(curve.getPointAt(0))\n    prevPoint.y = 0\n\n    const vector1 = new Vector3()\n    const vector2 = new Vector3()\n    const vector3 = new Vector3()\n    const vector4 = new Vector3()\n\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions))\n      point.y = 0\n\n      forward.subVectors(point, prevPoint)\n\n      const angle = Math.atan2(forward.x, forward.z)\n\n      quaternion.setFromAxisAngle(up, angle)\n\n      vector1.set(-0.3, 0, 0)\n      vector1.applyQuaternion(quaternion)\n      vector1.add(point)\n\n      vector2.set(0.3, 0, 0)\n      vector2.applyQuaternion(quaternion)\n      vector2.add(point)\n\n      vector3.set(0.3, 0, 0)\n      vector3.applyQuaternion(prevQuaternion)\n      vector3.add(prevPoint)\n\n      vector4.set(-0.3, 0, 0)\n      vector4.applyQuaternion(prevQuaternion)\n      vector4.add(prevPoint)\n\n      vertices.push(vector1.x, vector1.y, vector1.z)\n      vertices.push(vector2.x, vector2.y, vector2.z)\n      vertices.push(vector4.x, vector4.y, vector4.z)\n\n      vertices.push(vector2.x, vector2.y, vector2.z)\n      vertices.push(vector3.x, vector3.y, vector3.z)\n      vertices.push(vector4.x, vector4.y, vector4.z)\n\n      prevPoint.copy(point)\n      prevQuaternion.copy(quaternion)\n    }\n\n    this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3))\n  }\n}\n\nclass SkyGeometry extends BufferGeometry {\n  constructor() {\n    super()\n\n    const vertices = []\n\n    for (let i = 0; i < 100; i++) {\n      const x = Math.random() * 800 - 400\n      const y = Math.random() * 50 + 50\n      const z = Math.random() * 800 - 400\n\n      const size = Math.random() * 40 + 20\n\n      vertices.push(x - size, y, z - size)\n      vertices.push(x + size, y, z - size)\n      vertices.push(x - size, y, z + size)\n\n      vertices.push(x + size, y, z - size)\n      vertices.push(x + size, y, z + size)\n      vertices.push(x - size, y, z + size)\n    }\n\n    this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3))\n  }\n}\n\nclass TreesGeometry extends BufferGeometry {\n  constructor(landscape) {\n    super()\n\n    const vertices = []\n    const colors = []\n\n    const raycaster = new Raycaster()\n    raycaster.ray.direction.set(0, -1, 0)\n\n    const _color = new Color()\n\n    for (let i = 0; i < 2000; i++) {\n      const x = Math.random() * 500 - 250\n      const z = Math.random() * 500 - 250\n\n      raycaster.ray.origin.set(x, 50, z)\n\n      const intersections = raycaster.intersectObject(landscape)\n\n      if (intersections.length === 0) continue\n\n      const y = intersections[0].point.y\n\n      const height = Math.random() * 5 + 0.5\n\n      let angle = Math.random() * Math.PI * 2\n\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle))\n      vertices.push(x, y + height, z)\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI))\n\n      angle += Math.PI / 2\n\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle))\n      vertices.push(x, y + height, z)\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI))\n\n      const random = Math.random() * 0.1\n\n      for (let j = 0; j < 6; j++) {\n        _color.setRGB(0.2 + random, 0.4 + random, 0, 'srgb')\n\n        colors.push(_color.r, _color.g, _color.b)\n      }\n    }\n\n    this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3))\n    this.setAttribute('color', new BufferAttribute(new Float32Array(colors), 3))\n  }\n}\n\nexport { RollerCoasterGeometry, RollerCoasterLiftersGeometry, RollerCoasterShadowGeometry, SkyGeometry, TreesGeometry }\n"]},"metadata":{},"sourceType":"module"}