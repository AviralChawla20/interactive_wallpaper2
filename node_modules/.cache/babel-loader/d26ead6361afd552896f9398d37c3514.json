{"ast":null,"code":"import { Loader, FileLoader, BufferGeometry, Float32BufferAttribute, BufferAttribute } from \"three\";\nimport { unzlibSync } from \"fflate\";\nimport { decodeText } from \"../_polyfill/LoaderUtils.js\";\nclass VTKLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(data) {\n    function parseASCII(data2) {\n      var indices = [];\n      var positions = [];\n      var colors = [];\n      var normals = [];\n      var result;\n      var patWord = /^[^\\d.\\s-]+/;\n      var pat3Floats = /(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)/g;\n      var patConnectivity = /^(\\d+)\\s+([\\s\\d]*)/;\n      var patPOINTS = /^POINTS /;\n      var patPOLYGONS = /^POLYGONS /;\n      var patTRIANGLE_STRIPS = /^TRIANGLE_STRIPS /;\n      var patPOINT_DATA = /^POINT_DATA[ ]+(\\d+)/;\n      var patCELL_DATA = /^CELL_DATA[ ]+(\\d+)/;\n      var patCOLOR_SCALARS = /^COLOR_SCALARS[ ]+(\\w+)[ ]+3/;\n      var patNORMALS = /^NORMALS[ ]+(\\w+)[ ]+(\\w+)/;\n      var inPointsSection = false;\n      var inPolygonsSection = false;\n      var inTriangleStripSection = false;\n      var inPointDataSection = false;\n      var inCellDataSection = false;\n      var inColorSection = false;\n      var inNormalsSection = false;\n      var lines = data2.split(\"\\n\");\n      for (var i in lines) {\n        var line = lines[i].trim();\n        if (line.indexOf(\"DATASET\") === 0) {\n          var dataset = line.split(\" \")[1];\n          if (dataset !== \"POLYDATA\") throw new Error(\"Unsupported DATASET type: \" + dataset);\n        } else if (inPointsSection) {\n          while ((result = pat3Floats.exec(line)) !== null) {\n            if (patWord.exec(line) !== null) break;\n            var x = parseFloat(result[1]);\n            var y = parseFloat(result[2]);\n            var z = parseFloat(result[3]);\n            positions.push(x, y, z);\n          }\n        } else if (inPolygonsSection) {\n          if ((result = patConnectivity.exec(line)) !== null) {\n            var numVertices = parseInt(result[1]);\n            var inds = result[2].split(/\\s+/);\n            if (numVertices >= 3) {\n              var i0 = parseInt(inds[0]);\n              var i1, i2;\n              var k = 1;\n              for (var j = 0; j < numVertices - 2; ++j) {\n                i1 = parseInt(inds[k]);\n                i2 = parseInt(inds[k + 1]);\n                indices.push(i0, i1, i2);\n                k++;\n              }\n            }\n          }\n        } else if (inTriangleStripSection) {\n          if ((result = patConnectivity.exec(line)) !== null) {\n            var numVertices = parseInt(result[1]);\n            var inds = result[2].split(/\\s+/);\n            if (numVertices >= 3) {\n              var i0, i1, i2;\n              for (var j = 0; j < numVertices - 2; j++) {\n                if (j % 2 === 1) {\n                  i0 = parseInt(inds[j]);\n                  i1 = parseInt(inds[j + 2]);\n                  i2 = parseInt(inds[j + 1]);\n                  indices.push(i0, i1, i2);\n                } else {\n                  i0 = parseInt(inds[j]);\n                  i1 = parseInt(inds[j + 1]);\n                  i2 = parseInt(inds[j + 2]);\n                  indices.push(i0, i1, i2);\n                }\n              }\n            }\n          }\n        } else if (inPointDataSection || inCellDataSection) {\n          if (inColorSection) {\n            while ((result = pat3Floats.exec(line)) !== null) {\n              if (patWord.exec(line) !== null) break;\n              var r = parseFloat(result[1]);\n              var g = parseFloat(result[2]);\n              var b = parseFloat(result[3]);\n              colors.push(r, g, b);\n            }\n          } else if (inNormalsSection) {\n            while ((result = pat3Floats.exec(line)) !== null) {\n              if (patWord.exec(line) !== null) break;\n              var nx = parseFloat(result[1]);\n              var ny = parseFloat(result[2]);\n              var nz = parseFloat(result[3]);\n              normals.push(nx, ny, nz);\n            }\n          }\n        }\n        if (patPOLYGONS.exec(line) !== null) {\n          inPolygonsSection = true;\n          inPointsSection = false;\n          inTriangleStripSection = false;\n        } else if (patPOINTS.exec(line) !== null) {\n          inPolygonsSection = false;\n          inPointsSection = true;\n          inTriangleStripSection = false;\n        } else if (patTRIANGLE_STRIPS.exec(line) !== null) {\n          inPolygonsSection = false;\n          inPointsSection = false;\n          inTriangleStripSection = true;\n        } else if (patPOINT_DATA.exec(line) !== null) {\n          inPointDataSection = true;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        } else if (patCELL_DATA.exec(line) !== null) {\n          inCellDataSection = true;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        } else if (patCOLOR_SCALARS.exec(line) !== null) {\n          inColorSection = true;\n          inNormalsSection = false;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        } else if (patNORMALS.exec(line) !== null) {\n          inNormalsSection = true;\n          inColorSection = false;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        }\n      }\n      var geometry = new BufferGeometry();\n      geometry.setIndex(indices);\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n      if (normals.length === positions.length) {\n        geometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n      }\n      if (colors.length !== indices.length) {\n        if (colors.length === positions.length) {\n          geometry.setAttribute(\"color\", new Float32BufferAttribute(colors, 3));\n        }\n      } else {\n        geometry = geometry.toNonIndexed();\n        var numTriangles = geometry.attributes.position.count / 3;\n        if (colors.length === numTriangles * 3) {\n          var newColors = [];\n          for (var i = 0; i < numTriangles; i++) {\n            var r = colors[3 * i + 0];\n            var g = colors[3 * i + 1];\n            var b = colors[3 * i + 2];\n            newColors.push(r, g, b);\n            newColors.push(r, g, b);\n            newColors.push(r, g, b);\n          }\n          geometry.setAttribute(\"color\", new Float32BufferAttribute(newColors, 3));\n        }\n      }\n      return geometry;\n    }\n    function parseBinary(data2) {\n      var count, pointIndex, i, numberOfPoints, s;\n      var buffer = new Uint8Array(data2);\n      var dataView = new DataView(data2);\n      var points = [];\n      var normals = [];\n      var indices = [];\n      var index = 0;\n      function findString(buffer2, start) {\n        var index2 = start;\n        var c = buffer2[index2];\n        var s2 = [];\n        while (c !== 10) {\n          s2.push(String.fromCharCode(c));\n          index2++;\n          c = buffer2[index2];\n        }\n        return {\n          start,\n          end: index2,\n          next: index2 + 1,\n          parsedString: s2.join(\"\")\n        };\n      }\n      var state, line;\n      while (true) {\n        state = findString(buffer, index);\n        line = state.parsedString;\n        if (line.indexOf(\"DATASET\") === 0) {\n          var dataset = line.split(\" \")[1];\n          if (dataset !== \"POLYDATA\") throw new Error(\"Unsupported DATASET type: \" + dataset);\n        } else if (line.indexOf(\"POINTS\") === 0) {\n          numberOfPoints = parseInt(line.split(\" \")[1], 10);\n          count = numberOfPoints * 4 * 3;\n          points = new Float32Array(numberOfPoints * 3);\n          pointIndex = state.next;\n          for (i = 0; i < numberOfPoints; i++) {\n            points[3 * i] = dataView.getFloat32(pointIndex, false);\n            points[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n            points[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n            pointIndex = pointIndex + 12;\n          }\n          state.next = state.next + count + 1;\n        } else if (line.indexOf(\"TRIANGLE_STRIPS\") === 0) {\n          var numberOfStrips = parseInt(line.split(\" \")[1], 10);\n          var size = parseInt(line.split(\" \")[2], 10);\n          count = size * 4;\n          indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n          var indicesIndex = 0;\n          pointIndex = state.next;\n          for (i = 0; i < numberOfStrips; i++) {\n            var indexCount = dataView.getInt32(pointIndex, false);\n            var strip = [];\n            pointIndex += 4;\n            for (s = 0; s < indexCount; s++) {\n              strip.push(dataView.getInt32(pointIndex, false));\n              pointIndex += 4;\n            }\n            for (var j = 0; j < indexCount - 2; j++) {\n              if (j % 2) {\n                indices[indicesIndex++] = strip[j];\n                indices[indicesIndex++] = strip[j + 2];\n                indices[indicesIndex++] = strip[j + 1];\n              } else {\n                indices[indicesIndex++] = strip[j];\n                indices[indicesIndex++] = strip[j + 1];\n                indices[indicesIndex++] = strip[j + 2];\n              }\n            }\n          }\n          state.next = state.next + count + 1;\n        } else if (line.indexOf(\"POLYGONS\") === 0) {\n          var numberOfStrips = parseInt(line.split(\" \")[1], 10);\n          var size = parseInt(line.split(\" \")[2], 10);\n          count = size * 4;\n          indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n          var indicesIndex = 0;\n          pointIndex = state.next;\n          for (i = 0; i < numberOfStrips; i++) {\n            var indexCount = dataView.getInt32(pointIndex, false);\n            var strip = [];\n            pointIndex += 4;\n            for (s = 0; s < indexCount; s++) {\n              strip.push(dataView.getInt32(pointIndex, false));\n              pointIndex += 4;\n            }\n            for (var j = 1; j < indexCount - 1; j++) {\n              indices[indicesIndex++] = strip[0];\n              indices[indicesIndex++] = strip[j];\n              indices[indicesIndex++] = strip[j + 1];\n            }\n          }\n          state.next = state.next + count + 1;\n        } else if (line.indexOf(\"POINT_DATA\") === 0) {\n          numberOfPoints = parseInt(line.split(\" \")[1], 10);\n          state = findString(buffer, state.next);\n          count = numberOfPoints * 4 * 3;\n          normals = new Float32Array(numberOfPoints * 3);\n          pointIndex = state.next;\n          for (i = 0; i < numberOfPoints; i++) {\n            normals[3 * i] = dataView.getFloat32(pointIndex, false);\n            normals[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n            normals[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n            pointIndex += 12;\n          }\n          state.next = state.next + count;\n        }\n        index = state.next;\n        if (index >= buffer.byteLength) {\n          break;\n        }\n      }\n      var geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(indices, 1));\n      geometry.setAttribute(\"position\", new BufferAttribute(points, 3));\n      if (normals.length === points.length) {\n        geometry.setAttribute(\"normal\", new BufferAttribute(normals, 3));\n      }\n      return geometry;\n    }\n    function Float32Concat(first, second) {\n      const firstLength = first.length,\n        result = new Float32Array(firstLength + second.length);\n      result.set(first);\n      result.set(second, firstLength);\n      return result;\n    }\n    function Int32Concat(first, second) {\n      var firstLength = first.length,\n        result = new Int32Array(firstLength + second.length);\n      result.set(first);\n      result.set(second, firstLength);\n      return result;\n    }\n    function parseXML(stringFile) {\n      function xmlToJson(xml) {\n        var obj = {};\n        if (xml.nodeType === 1) {\n          if (xml.attributes) {\n            if (xml.attributes.length > 0) {\n              obj[\"attributes\"] = {};\n              for (var j2 = 0; j2 < xml.attributes.length; j2++) {\n                var attribute = xml.attributes.item(j2);\n                obj[\"attributes\"][attribute.nodeName] = attribute.nodeValue.trim();\n              }\n            }\n          }\n        } else if (xml.nodeType === 3) {\n          obj = xml.nodeValue.trim();\n        }\n        if (xml.hasChildNodes()) {\n          for (var i2 = 0; i2 < xml.childNodes.length; i2++) {\n            var item = xml.childNodes.item(i2);\n            var nodeName = item.nodeName;\n            if (typeof obj[nodeName] === \"undefined\") {\n              var tmp = xmlToJson(item);\n              if (tmp !== \"\") obj[nodeName] = tmp;\n            } else {\n              if (typeof obj[nodeName].push === \"undefined\") {\n                var old = obj[nodeName];\n                obj[nodeName] = [old];\n              }\n              var tmp = xmlToJson(item);\n              if (tmp !== \"\") obj[nodeName].push(tmp);\n            }\n          }\n        }\n        return obj;\n      }\n      function Base64toByteArray(b64) {\n        var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n        var i2;\n        var revLookup = [];\n        var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n        var len2 = code.length;\n        for (i2 = 0; i2 < len2; i2++) {}\n        for (i2 = 0; i2 < len2; ++i2) {\n          revLookup[code.charCodeAt(i2)] = i2;\n        }\n        revLookup[\"-\".charCodeAt(0)] = 62;\n        revLookup[\"_\".charCodeAt(0)] = 63;\n        var j2, l, tmp, placeHolders, arr2;\n        var len2 = b64.length;\n        if (len2 % 4 > 0) {\n          throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        }\n        placeHolders = b64[len2 - 2] === \"=\" ? 2 : b64[len2 - 1] === \"=\" ? 1 : 0;\n        arr2 = new Arr(len2 * 3 / 4 - placeHolders);\n        l = placeHolders > 0 ? len2 - 4 : len2;\n        var L = 0;\n        for (i2 = 0, j2 = 0; i2 < l; i2 += 4, j2 += 3) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n          arr2[L++] = (tmp & 16711680) >> 16;\n          arr2[L++] = (tmp & 65280) >> 8;\n          arr2[L++] = tmp & 255;\n        }\n        if (placeHolders === 2) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n          arr2[L++] = tmp & 255;\n        } else if (placeHolders === 1) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n          arr2[L++] = tmp >> 8 & 255;\n          arr2[L++] = tmp & 255;\n        }\n        return arr2;\n      }\n      function parseDataArray(ele, compressed2) {\n        var numBytes = 0;\n        if (json.attributes.header_type === \"UInt64\") {\n          numBytes = 8;\n        } else if (json.attributes.header_type === \"UInt32\") {\n          numBytes = 4;\n        }\n        if (ele.attributes.format === \"binary\" && compressed2) {\n          var rawData, content, byteData, blocks, cSizeStart, headerSize, padding, dataOffsets, currentOffset;\n          if (ele.attributes.type === \"Float32\") {\n            var txt = new Float32Array();\n          } else if (ele.attributes.type === \"Int64\") {\n            var txt = new Int32Array();\n          }\n          rawData = ele[\"#text\"];\n          byteData = Base64toByteArray(rawData);\n          blocks = byteData[0];\n          for (var i2 = 1; i2 < numBytes - 1; i2++) {\n            blocks = blocks | byteData[i2] << i2 * numBytes;\n          }\n          headerSize = (blocks + 3) * numBytes;\n          padding = headerSize % 3 > 0 ? 3 - headerSize % 3 : 0;\n          headerSize = headerSize + padding;\n          dataOffsets = [];\n          currentOffset = headerSize;\n          dataOffsets.push(currentOffset);\n          cSizeStart = 3 * numBytes;\n          for (var i2 = 0; i2 < blocks; i2++) {\n            var currentBlockSize = byteData[i2 * numBytes + cSizeStart];\n            for (var j2 = 1; j2 < numBytes - 1; j2++) {\n              currentBlockSize = currentBlockSize | byteData[i2 * numBytes + cSizeStart + j2] << j2 * 8;\n            }\n            currentOffset = currentOffset + currentBlockSize;\n            dataOffsets.push(currentOffset);\n          }\n          for (var i2 = 0; i2 < dataOffsets.length - 1; i2++) {\n            var data2 = unzlibSync(byteData.slice(dataOffsets[i2], dataOffsets[i2 + 1]));\n            content = data2.buffer;\n            if (ele.attributes.type === \"Float32\") {\n              content = new Float32Array(content);\n              txt = Float32Concat(txt, content);\n            } else if (ele.attributes.type === \"Int64\") {\n              content = new Int32Array(content);\n              txt = Int32Concat(txt, content);\n            }\n          }\n          delete ele[\"#text\"];\n          if (ele.attributes.type === \"Int64\") {\n            if (ele.attributes.format === \"binary\") {\n              txt = txt.filter(function (el, idx) {\n                if (idx % 2 !== 1) return true;\n              });\n            }\n          }\n        } else {\n          if (ele.attributes.format === \"binary\" && !compressed2) {\n            var content = Base64toByteArray(ele[\"#text\"]);\n            content = content.slice(numBytes).buffer;\n          } else {\n            if (ele[\"#text\"]) {\n              var content = ele[\"#text\"].split(/\\s+/).filter(function (el) {\n                if (el !== \"\") return el;\n              });\n            } else {\n              var content = new Int32Array(0).buffer;\n            }\n          }\n          delete ele[\"#text\"];\n          if (ele.attributes.type === \"Float32\") {\n            var txt = new Float32Array(content);\n          } else if (ele.attributes.type === \"Int32\") {\n            var txt = new Int32Array(content);\n          } else if (ele.attributes.type === \"Int64\") {\n            var txt = new Int32Array(content);\n            if (ele.attributes.format === \"binary\") {\n              txt = txt.filter(function (el, idx) {\n                if (idx % 2 !== 1) return true;\n              });\n            }\n          }\n        }\n        return txt;\n      }\n      var dom = null;\n      if (window.DOMParser) {\n        try {\n          dom = new DOMParser().parseFromString(stringFile, \"text/xml\");\n        } catch (e) {\n          dom = null;\n        }\n      } else if (window.ActiveXObject) {\n        try {\n          dom = new ActiveXObject(\"Microsoft.XMLDOM\");\n          dom.async = false;\n          if (!dom.loadXML(\n            /* xml */\n          )) {\n            throw new Error(dom.parseError.reason + dom.parseError.srcText);\n          }\n        } catch (e) {\n          dom = null;\n        }\n      } else {\n        throw new Error(\"Cannot parse xml string!\");\n      }\n      var doc = dom.documentElement;\n      var json = xmlToJson(doc);\n      var points = [];\n      var normals = [];\n      var indices = [];\n      if (json.PolyData) {\n        var piece = json.PolyData.Piece;\n        var compressed = json.attributes.hasOwnProperty(\"compressor\");\n        var sections = [\"PointData\", \"Points\", \"Strips\", \"Polys\"];\n        var sectionIndex = 0,\n          numberOfSections = sections.length;\n        while (sectionIndex < numberOfSections) {\n          var section = piece[sections[sectionIndex]];\n          if (section && section.DataArray) {\n            if (Object.prototype.toString.call(section.DataArray) === \"[object Array]\") {\n              var arr = section.DataArray;\n            } else {\n              var arr = [section.DataArray];\n            }\n            var dataArrayIndex = 0,\n              numberOfDataArrays = arr.length;\n            while (dataArrayIndex < numberOfDataArrays) {\n              if (\"#text\" in arr[dataArrayIndex] && arr[dataArrayIndex][\"#text\"].length > 0) {\n                arr[dataArrayIndex].text = parseDataArray(arr[dataArrayIndex], compressed);\n              }\n              dataArrayIndex++;\n            }\n            switch (sections[sectionIndex]) {\n              case \"PointData\":\n                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n                var normalsName = section.attributes.Normals;\n                if (numberOfPoints > 0) {\n                  for (var i = 0, len = arr.length; i < len; i++) {\n                    if (normalsName === arr[i].attributes.Name) {\n                      var components = arr[i].attributes.NumberOfComponents;\n                      normals = new Float32Array(numberOfPoints * components);\n                      normals.set(arr[i].text, 0);\n                    }\n                  }\n                }\n                break;\n              case \"Points\":\n                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n                if (numberOfPoints > 0) {\n                  var components = section.DataArray.attributes.NumberOfComponents;\n                  points = new Float32Array(numberOfPoints * components);\n                  points.set(section.DataArray.text, 0);\n                }\n                break;\n              case \"Strips\":\n                var numberOfStrips = parseInt(piece.attributes.NumberOfStrips);\n                if (numberOfStrips > 0) {\n                  var connectivity = new Int32Array(section.DataArray[0].text.length);\n                  var offset = new Int32Array(section.DataArray[1].text.length);\n                  connectivity.set(section.DataArray[0].text, 0);\n                  offset.set(section.DataArray[1].text, 0);\n                  var size = numberOfStrips + connectivity.length;\n                  indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n                  var indicesIndex = 0;\n                  for (var i = 0, len = numberOfStrips; i < len; i++) {\n                    var strip = [];\n                    for (var s = 0, len1 = offset[i], len0 = 0; s < len1 - len0; s++) {\n                      strip.push(connectivity[s]);\n                      if (i > 0) len0 = offset[i - 1];\n                    }\n                    for (var j = 0, len1 = offset[i], len0 = 0; j < len1 - len0 - 2; j++) {\n                      if (j % 2) {\n                        indices[indicesIndex++] = strip[j];\n                        indices[indicesIndex++] = strip[j + 2];\n                        indices[indicesIndex++] = strip[j + 1];\n                      } else {\n                        indices[indicesIndex++] = strip[j];\n                        indices[indicesIndex++] = strip[j + 1];\n                        indices[indicesIndex++] = strip[j + 2];\n                      }\n                      if (i > 0) len0 = offset[i - 1];\n                    }\n                  }\n                }\n                break;\n              case \"Polys\":\n                var numberOfPolys = parseInt(piece.attributes.NumberOfPolys);\n                if (numberOfPolys > 0) {\n                  var connectivity = new Int32Array(section.DataArray[0].text.length);\n                  var offset = new Int32Array(section.DataArray[1].text.length);\n                  connectivity.set(section.DataArray[0].text, 0);\n                  offset.set(section.DataArray[1].text, 0);\n                  var size = numberOfPolys + connectivity.length;\n                  indices = new Uint32Array(3 * size - 9 * numberOfPolys);\n                  var indicesIndex = 0,\n                    connectivityIndex = 0;\n                  var i = 0,\n                    len = numberOfPolys,\n                    len0 = 0;\n                  while (i < len) {\n                    var poly = [];\n                    var s = 0,\n                      len1 = offset[i];\n                    while (s < len1 - len0) {\n                      poly.push(connectivity[connectivityIndex++]);\n                      s++;\n                    }\n                    var j = 1;\n                    while (j < len1 - len0 - 1) {\n                      indices[indicesIndex++] = poly[0];\n                      indices[indicesIndex++] = poly[j];\n                      indices[indicesIndex++] = poly[j + 1];\n                      j++;\n                    }\n                    i++;\n                    len0 = offset[i - 1];\n                  }\n                }\n                break;\n            }\n          }\n          sectionIndex++;\n        }\n        var geometry = new BufferGeometry();\n        geometry.setIndex(new BufferAttribute(indices, 1));\n        geometry.setAttribute(\"position\", new BufferAttribute(points, 3));\n        if (normals.length === points.length) {\n          geometry.setAttribute(\"normal\", new BufferAttribute(normals, 3));\n        }\n        return geometry;\n      } else {\n        throw new Error(\"Unsupported DATASET type\");\n      }\n    }\n    var meta = decodeText(new Uint8Array(data, 0, 250)).split(\"\\n\");\n    if (meta[0].indexOf(\"xml\") !== -1) {\n      return parseXML(decodeText(data));\n    } else if (meta[2].includes(\"ASCII\")) {\n      return parseASCII(decodeText(data));\n    } else {\n      return parseBinary(data);\n    }\n  }\n}\nexport { VTKLoader };","map":{"version":3,"sources":["../../src/loaders/VTKLoader.js"],"names":["data","buffer","index","s","j","i","len","arr","compressed"],"mappings":"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","sourcesContent":["import { BufferAttribute, BufferGeometry, FileLoader, Float32BufferAttribute, Loader, LoaderUtils } from 'three'\nimport { unzlibSync } from 'fflate'\nimport { decodeText } from '../_polyfill/LoaderUtils'\n\nclass VTKLoader extends Loader {\n  constructor(manager) {\n    super(manager)\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this\n\n    const loader = new FileLoader(scope.manager)\n    loader.setPath(scope.path)\n    loader.setResponseType('arraybuffer')\n    loader.setRequestHeader(scope.requestHeader)\n    loader.setWithCredentials(scope.withCredentials)\n    loader.load(\n      url,\n      function (text) {\n        try {\n          onLoad(scope.parse(text))\n        } catch (e) {\n          if (onError) {\n            onError(e)\n          } else {\n            console.error(e)\n          }\n\n          scope.manager.itemError(url)\n        }\n      },\n      onProgress,\n      onError,\n    )\n  }\n\n  parse(data) {\n    function parseASCII(data) {\n      // connectivity of the triangles\n      var indices = []\n\n      // triangles vertices\n      var positions = []\n\n      // red, green, blue colors in the range 0 to 1\n      var colors = []\n\n      // normal vector, one per vertex\n      var normals = []\n\n      var result\n\n      // pattern for detecting the end of a number sequence\n      var patWord = /^[^\\d.\\s-]+/\n\n      // pattern for reading vertices, 3 floats or integers\n      var pat3Floats = /(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)/g\n\n      // pattern for connectivity, an integer followed by any number of ints\n      // the first integer is the number of polygon nodes\n      var patConnectivity = /^(\\d+)\\s+([\\s\\d]*)/\n\n      // indicates start of vertex data section\n      var patPOINTS = /^POINTS /\n\n      // indicates start of polygon connectivity section\n      var patPOLYGONS = /^POLYGONS /\n\n      // indicates start of triangle strips section\n      var patTRIANGLE_STRIPS = /^TRIANGLE_STRIPS /\n\n      // POINT_DATA number_of_values\n      var patPOINT_DATA = /^POINT_DATA[ ]+(\\d+)/\n\n      // CELL_DATA number_of_polys\n      var patCELL_DATA = /^CELL_DATA[ ]+(\\d+)/\n\n      // Start of color section\n      var patCOLOR_SCALARS = /^COLOR_SCALARS[ ]+(\\w+)[ ]+3/\n\n      // NORMALS Normals float\n      var patNORMALS = /^NORMALS[ ]+(\\w+)[ ]+(\\w+)/\n\n      var inPointsSection = false\n      var inPolygonsSection = false\n      var inTriangleStripSection = false\n      var inPointDataSection = false\n      var inCellDataSection = false\n      var inColorSection = false\n      var inNormalsSection = false\n\n      var lines = data.split('\\n')\n\n      for (var i in lines) {\n        var line = lines[i].trim()\n\n        if (line.indexOf('DATASET') === 0) {\n          var dataset = line.split(' ')[1]\n\n          if (dataset !== 'POLYDATA') throw new Error('Unsupported DATASET type: ' + dataset)\n        } else if (inPointsSection) {\n          // get the vertices\n          while ((result = pat3Floats.exec(line)) !== null) {\n            if (patWord.exec(line) !== null) break\n\n            var x = parseFloat(result[1])\n            var y = parseFloat(result[2])\n            var z = parseFloat(result[3])\n            positions.push(x, y, z)\n          }\n        } else if (inPolygonsSection) {\n          if ((result = patConnectivity.exec(line)) !== null) {\n            // numVertices i0 i1 i2 ...\n            var numVertices = parseInt(result[1])\n            var inds = result[2].split(/\\s+/)\n\n            if (numVertices >= 3) {\n              var i0 = parseInt(inds[0])\n              var i1, i2\n              var k = 1\n              // split the polygon in numVertices - 2 triangles\n              for (var j = 0; j < numVertices - 2; ++j) {\n                i1 = parseInt(inds[k])\n                i2 = parseInt(inds[k + 1])\n                indices.push(i0, i1, i2)\n                k++\n              }\n            }\n          }\n        } else if (inTriangleStripSection) {\n          if ((result = patConnectivity.exec(line)) !== null) {\n            // numVertices i0 i1 i2 ...\n            var numVertices = parseInt(result[1])\n            var inds = result[2].split(/\\s+/)\n\n            if (numVertices >= 3) {\n              var i0, i1, i2\n              // split the polygon in numVertices - 2 triangles\n              for (var j = 0; j < numVertices - 2; j++) {\n                if (j % 2 === 1) {\n                  i0 = parseInt(inds[j])\n                  i1 = parseInt(inds[j + 2])\n                  i2 = parseInt(inds[j + 1])\n                  indices.push(i0, i1, i2)\n                } else {\n                  i0 = parseInt(inds[j])\n                  i1 = parseInt(inds[j + 1])\n                  i2 = parseInt(inds[j + 2])\n                  indices.push(i0, i1, i2)\n                }\n              }\n            }\n          }\n        } else if (inPointDataSection || inCellDataSection) {\n          if (inColorSection) {\n            // Get the colors\n\n            while ((result = pat3Floats.exec(line)) !== null) {\n              if (patWord.exec(line) !== null) break\n\n              var r = parseFloat(result[1])\n              var g = parseFloat(result[2])\n              var b = parseFloat(result[3])\n              colors.push(r, g, b)\n            }\n          } else if (inNormalsSection) {\n            // Get the normal vectors\n\n            while ((result = pat3Floats.exec(line)) !== null) {\n              if (patWord.exec(line) !== null) break\n\n              var nx = parseFloat(result[1])\n              var ny = parseFloat(result[2])\n              var nz = parseFloat(result[3])\n              normals.push(nx, ny, nz)\n            }\n          }\n        }\n\n        if (patPOLYGONS.exec(line) !== null) {\n          inPolygonsSection = true\n          inPointsSection = false\n          inTriangleStripSection = false\n        } else if (patPOINTS.exec(line) !== null) {\n          inPolygonsSection = false\n          inPointsSection = true\n          inTriangleStripSection = false\n        } else if (patTRIANGLE_STRIPS.exec(line) !== null) {\n          inPolygonsSection = false\n          inPointsSection = false\n          inTriangleStripSection = true\n        } else if (patPOINT_DATA.exec(line) !== null) {\n          inPointDataSection = true\n          inPointsSection = false\n          inPolygonsSection = false\n          inTriangleStripSection = false\n        } else if (patCELL_DATA.exec(line) !== null) {\n          inCellDataSection = true\n          inPointsSection = false\n          inPolygonsSection = false\n          inTriangleStripSection = false\n        } else if (patCOLOR_SCALARS.exec(line) !== null) {\n          inColorSection = true\n          inNormalsSection = false\n          inPointsSection = false\n          inPolygonsSection = false\n          inTriangleStripSection = false\n        } else if (patNORMALS.exec(line) !== null) {\n          inNormalsSection = true\n          inColorSection = false\n          inPointsSection = false\n          inPolygonsSection = false\n          inTriangleStripSection = false\n        }\n      }\n\n      var geometry = new BufferGeometry()\n      geometry.setIndex(indices)\n      geometry.setAttribute('position', new Float32BufferAttribute(positions, 3))\n\n      if (normals.length === positions.length) {\n        geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3))\n      }\n\n      if (colors.length !== indices.length) {\n        // stagger\n\n        if (colors.length === positions.length) {\n          geometry.setAttribute('color', new Float32BufferAttribute(colors, 3))\n        }\n      } else {\n        // cell\n\n        geometry = geometry.toNonIndexed()\n        var numTriangles = geometry.attributes.position.count / 3\n\n        if (colors.length === numTriangles * 3) {\n          var newColors = []\n\n          for (var i = 0; i < numTriangles; i++) {\n            var r = colors[3 * i + 0]\n            var g = colors[3 * i + 1]\n            var b = colors[3 * i + 2]\n\n            newColors.push(r, g, b)\n            newColors.push(r, g, b)\n            newColors.push(r, g, b)\n          }\n\n          geometry.setAttribute('color', new Float32BufferAttribute(newColors, 3))\n        }\n      }\n\n      return geometry\n    }\n\n    function parseBinary(data) {\n      var count, pointIndex, i, numberOfPoints, s\n      var buffer = new Uint8Array(data)\n      var dataView = new DataView(data)\n\n      // Points and normals, by default, are empty\n      var points = []\n      var normals = []\n      var indices = []\n\n      // Going to make a big array of strings\n      var vtk = []\n      var index = 0\n\n      function findString(buffer, start) {\n        var index = start\n        var c = buffer[index]\n        var s = []\n        while (c !== 10) {\n          s.push(String.fromCharCode(c))\n          index++\n          c = buffer[index]\n        }\n\n        return { start: start, end: index, next: index + 1, parsedString: s.join('') }\n      }\n\n      var state, line\n\n      while (true) {\n        // Get a string\n        state = findString(buffer, index)\n        line = state.parsedString\n\n        if (line.indexOf('DATASET') === 0) {\n          var dataset = line.split(' ')[1]\n\n          if (dataset !== 'POLYDATA') throw new Error('Unsupported DATASET type: ' + dataset)\n        } else if (line.indexOf('POINTS') === 0) {\n          vtk.push(line)\n          // Add the points\n          numberOfPoints = parseInt(line.split(' ')[1], 10)\n\n          // Each point is 3 4-byte floats\n          count = numberOfPoints * 4 * 3\n\n          points = new Float32Array(numberOfPoints * 3)\n\n          pointIndex = state.next\n          for (i = 0; i < numberOfPoints; i++) {\n            points[3 * i] = dataView.getFloat32(pointIndex, false)\n            points[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false)\n            points[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false)\n            pointIndex = pointIndex + 12\n          }\n\n          // increment our next pointer\n          state.next = state.next + count + 1\n        } else if (line.indexOf('TRIANGLE_STRIPS') === 0) {\n          var numberOfStrips = parseInt(line.split(' ')[1], 10)\n          var size = parseInt(line.split(' ')[2], 10)\n          // 4 byte integers\n          count = size * 4\n\n          indices = new Uint32Array(3 * size - 9 * numberOfStrips)\n          var indicesIndex = 0\n\n          pointIndex = state.next\n          for (i = 0; i < numberOfStrips; i++) {\n            // For each strip, read the first value, then record that many more points\n            var indexCount = dataView.getInt32(pointIndex, false)\n            var strip = []\n            pointIndex += 4\n            for (s = 0; s < indexCount; s++) {\n              strip.push(dataView.getInt32(pointIndex, false))\n              pointIndex += 4\n            }\n\n            // retrieves the n-2 triangles from the triangle strip\n            for (var j = 0; j < indexCount - 2; j++) {\n              if (j % 2) {\n                indices[indicesIndex++] = strip[j]\n                indices[indicesIndex++] = strip[j + 2]\n                indices[indicesIndex++] = strip[j + 1]\n              } else {\n                indices[indicesIndex++] = strip[j]\n                indices[indicesIndex++] = strip[j + 1]\n                indices[indicesIndex++] = strip[j + 2]\n              }\n            }\n          }\n\n          // increment our next pointer\n          state.next = state.next + count + 1\n        } else if (line.indexOf('POLYGONS') === 0) {\n          var numberOfStrips = parseInt(line.split(' ')[1], 10)\n          var size = parseInt(line.split(' ')[2], 10)\n          // 4 byte integers\n          count = size * 4\n\n          indices = new Uint32Array(3 * size - 9 * numberOfStrips)\n          var indicesIndex = 0\n\n          pointIndex = state.next\n          for (i = 0; i < numberOfStrips; i++) {\n            // For each strip, read the first value, then record that many more points\n            var indexCount = dataView.getInt32(pointIndex, false)\n            var strip = []\n            pointIndex += 4\n            for (s = 0; s < indexCount; s++) {\n              strip.push(dataView.getInt32(pointIndex, false))\n              pointIndex += 4\n            }\n\n            // divide the polygon in n-2 triangle\n            for (var j = 1; j < indexCount - 1; j++) {\n              indices[indicesIndex++] = strip[0]\n              indices[indicesIndex++] = strip[j]\n              indices[indicesIndex++] = strip[j + 1]\n            }\n          }\n\n          // increment our next pointer\n          state.next = state.next + count + 1\n        } else if (line.indexOf('POINT_DATA') === 0) {\n          numberOfPoints = parseInt(line.split(' ')[1], 10)\n\n          // Grab the next line\n          state = findString(buffer, state.next)\n\n          // Now grab the binary data\n          count = numberOfPoints * 4 * 3\n\n          normals = new Float32Array(numberOfPoints * 3)\n          pointIndex = state.next\n          for (i = 0; i < numberOfPoints; i++) {\n            normals[3 * i] = dataView.getFloat32(pointIndex, false)\n            normals[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false)\n            normals[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false)\n            pointIndex += 12\n          }\n\n          // Increment past our data\n          state.next = state.next + count\n        }\n\n        // Increment index\n        index = state.next\n\n        if (index >= buffer.byteLength) {\n          break\n        }\n      }\n\n      var geometry = new BufferGeometry()\n      geometry.setIndex(new BufferAttribute(indices, 1))\n      geometry.setAttribute('position', new BufferAttribute(points, 3))\n\n      if (normals.length === points.length) {\n        geometry.setAttribute('normal', new BufferAttribute(normals, 3))\n      }\n\n      return geometry\n    }\n\n    function Float32Concat(first, second) {\n      const firstLength = first.length,\n        result = new Float32Array(firstLength + second.length)\n\n      result.set(first)\n      result.set(second, firstLength)\n\n      return result\n    }\n\n    function Int32Concat(first, second) {\n      var firstLength = first.length,\n        result = new Int32Array(firstLength + second.length)\n\n      result.set(first)\n      result.set(second, firstLength)\n\n      return result\n    }\n\n    function parseXML(stringFile) {\n      // Changes XML to JSON, based on https://davidwalsh.name/convert-xml-json\n\n      function xmlToJson(xml) {\n        // Create the return object\n        var obj = {}\n\n        if (xml.nodeType === 1) {\n          // element\n\n          // do attributes\n\n          if (xml.attributes) {\n            if (xml.attributes.length > 0) {\n              obj['attributes'] = {}\n\n              for (var j = 0; j < xml.attributes.length; j++) {\n                var attribute = xml.attributes.item(j)\n                obj['attributes'][attribute.nodeName] = attribute.nodeValue.trim()\n              }\n            }\n          }\n        } else if (xml.nodeType === 3) {\n          // text\n\n          obj = xml.nodeValue.trim()\n        }\n\n        // do children\n        if (xml.hasChildNodes()) {\n          for (var i = 0; i < xml.childNodes.length; i++) {\n            var item = xml.childNodes.item(i)\n            var nodeName = item.nodeName\n\n            if (typeof obj[nodeName] === 'undefined') {\n              var tmp = xmlToJson(item)\n\n              if (tmp !== '') obj[nodeName] = tmp\n            } else {\n              if (typeof obj[nodeName].push === 'undefined') {\n                var old = obj[nodeName]\n                obj[nodeName] = [old]\n              }\n\n              var tmp = xmlToJson(item)\n\n              if (tmp !== '') obj[nodeName].push(tmp)\n            }\n          }\n        }\n\n        return obj\n      }\n\n      // Taken from Base64-js\n      function Base64toByteArray(b64) {\n        var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n        var i\n        var lookup = []\n        var revLookup = []\n        var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n        var len = code.length\n\n        for (i = 0; i < len; i++) {\n          lookup[i] = code[i]\n        }\n\n        for (i = 0; i < len; ++i) {\n          revLookup[code.charCodeAt(i)] = i\n        }\n\n        revLookup['-'.charCodeAt(0)] = 62\n        revLookup['_'.charCodeAt(0)] = 63\n\n        var j, l, tmp, placeHolders, arr\n        var len = b64.length\n\n        if (len % 4 > 0) {\n          throw new Error('Invalid string. Length must be a multiple of 4')\n        }\n\n        placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n        arr = new Arr((len * 3) / 4 - placeHolders)\n        l = placeHolders > 0 ? len - 4 : len\n\n        var L = 0\n\n        for (i = 0, j = 0; i < l; i += 4, j += 3) {\n          tmp =\n            (revLookup[b64.charCodeAt(i)] << 18) |\n            (revLookup[b64.charCodeAt(i + 1)] << 12) |\n            (revLookup[b64.charCodeAt(i + 2)] << 6) |\n            revLookup[b64.charCodeAt(i + 3)]\n          arr[L++] = (tmp & 0xff0000) >> 16\n          arr[L++] = (tmp & 0xff00) >> 8\n          arr[L++] = tmp & 0xff\n        }\n\n        if (placeHolders === 2) {\n          tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n          arr[L++] = tmp & 0xff\n        } else if (placeHolders === 1) {\n          tmp =\n            (revLookup[b64.charCodeAt(i)] << 10) |\n            (revLookup[b64.charCodeAt(i + 1)] << 4) |\n            (revLookup[b64.charCodeAt(i + 2)] >> 2)\n          arr[L++] = (tmp >> 8) & 0xff\n          arr[L++] = tmp & 0xff\n        }\n\n        return arr\n      }\n\n      function parseDataArray(ele, compressed) {\n        var numBytes = 0\n\n        if (json.attributes.header_type === 'UInt64') {\n          numBytes = 8\n        } else if (json.attributes.header_type === 'UInt32') {\n          numBytes = 4\n        }\n\n        // Check the format\n        if (ele.attributes.format === 'binary' && compressed) {\n          var rawData, content, byteData, blocks, cSizeStart, headerSize, padding, dataOffsets, currentOffset\n\n          if (ele.attributes.type === 'Float32') {\n            var txt = new Float32Array()\n          } else if (ele.attributes.type === 'Int64') {\n            var txt = new Int32Array()\n          }\n\n          // VTP data with the header has the following structure:\n          // [#blocks][#u-size][#p-size][#c-size-1][#c-size-2]...[#c-size-#blocks][DATA]\n          //\n          // Each token is an integer value whose type is specified by \"header_type\" at the top of the file (UInt32 if no type specified). The token meanings are:\n          // [#blocks] = Number of blocks\n          // [#u-size] = Block size before compression\n          // [#p-size] = Size of last partial block (zero if it not needed)\n          // [#c-size-i] = Size in bytes of block i after compression\n          //\n          // The [DATA] portion stores contiguously every block appended together. The offset from the beginning of the data section to the beginning of a block is\n          // computed by summing the compressed block sizes from preceding blocks according to the header.\n\n          rawData = ele['#text']\n\n          byteData = Base64toByteArray(rawData)\n\n          blocks = byteData[0]\n          for (var i = 1; i < numBytes - 1; i++) {\n            blocks = blocks | (byteData[i] << (i * numBytes))\n          }\n\n          headerSize = (blocks + 3) * numBytes\n          padding = headerSize % 3 > 0 ? 3 - (headerSize % 3) : 0\n          headerSize = headerSize + padding\n\n          dataOffsets = []\n          currentOffset = headerSize\n          dataOffsets.push(currentOffset)\n\n          // Get the blocks sizes after the compression.\n          // There are three blocks before c-size-i, so we skip 3*numBytes\n          cSizeStart = 3 * numBytes\n\n          for (var i = 0; i < blocks; i++) {\n            var currentBlockSize = byteData[i * numBytes + cSizeStart]\n\n            for (var j = 1; j < numBytes - 1; j++) {\n              // Each data point consists of 8 bytes regardless of the header type\n              currentBlockSize = currentBlockSize | (byteData[i * numBytes + cSizeStart + j] << (j * 8))\n            }\n\n            currentOffset = currentOffset + currentBlockSize\n            dataOffsets.push(currentOffset)\n          }\n\n          for (var i = 0; i < dataOffsets.length - 1; i++) {\n            var data = unzlibSync(byteData.slice(dataOffsets[i], dataOffsets[i + 1]))\n            content = data.buffer\n\n            if (ele.attributes.type === 'Float32') {\n              content = new Float32Array(content)\n              txt = Float32Concat(txt, content)\n            } else if (ele.attributes.type === 'Int64') {\n              content = new Int32Array(content)\n              txt = Int32Concat(txt, content)\n            }\n          }\n\n          delete ele['#text']\n\n          if (ele.attributes.type === 'Int64') {\n            if (ele.attributes.format === 'binary') {\n              txt = txt.filter(function (el, idx) {\n                if (idx % 2 !== 1) return true\n              })\n            }\n          }\n        } else {\n          if (ele.attributes.format === 'binary' && !compressed) {\n            var content = Base64toByteArray(ele['#text'])\n\n            //  VTP data for the uncompressed case has the following structure:\n            // [#bytes][DATA]\n            // where \"[#bytes]\" is an integer value specifying the number of bytes in the block of data following it.\n            content = content.slice(numBytes).buffer\n          } else {\n            if (ele['#text']) {\n              var content = ele['#text'].split(/\\s+/).filter(function (el) {\n                if (el !== '') return el\n              })\n            } else {\n              var content = new Int32Array(0).buffer\n            }\n          }\n\n          delete ele['#text']\n\n          // Get the content and optimize it\n          if (ele.attributes.type === 'Float32') {\n            var txt = new Float32Array(content)\n          } else if (ele.attributes.type === 'Int32') {\n            var txt = new Int32Array(content)\n          } else if (ele.attributes.type === 'Int64') {\n            var txt = new Int32Array(content)\n\n            if (ele.attributes.format === 'binary') {\n              txt = txt.filter(function (el, idx) {\n                if (idx % 2 !== 1) return true\n              })\n            }\n          }\n        } // endif ( ele.attributes.format === 'binary' && compressed )\n\n        return txt\n      }\n\n      // Main part\n      // Get Dom\n      var dom = null\n\n      if (window.DOMParser) {\n        try {\n          dom = new DOMParser().parseFromString(stringFile, 'text/xml')\n        } catch (e) {\n          dom = null\n        }\n      } else if (window.ActiveXObject) {\n        try {\n          dom = new ActiveXObject('Microsoft.XMLDOM')\n          dom.async = false\n\n          if (!(dom.loadXML(/* xml */))) {\n            throw new Error(dom.parseError.reason + dom.parseError.srcText)\n          }\n        } catch (e) {\n          dom = null\n        }\n      } else {\n        throw new Error('Cannot parse xml string!')\n      }\n\n      // Get the doc\n      var doc = dom.documentElement\n      // Convert to json\n      var json = xmlToJson(doc)\n      var points = []\n      var normals = []\n      var indices = []\n\n      if (json.PolyData) {\n        var piece = json.PolyData.Piece\n        var compressed = json.attributes.hasOwnProperty('compressor')\n\n        // Can be optimized\n        // Loop through the sections\n        var sections = ['PointData', 'Points', 'Strips', 'Polys'] // +['CellData', 'Verts', 'Lines'];\n        var sectionIndex = 0,\n          numberOfSections = sections.length\n\n        while (sectionIndex < numberOfSections) {\n          var section = piece[sections[sectionIndex]]\n\n          // If it has a DataArray in it\n\n          if (section && section.DataArray) {\n            // Depending on the number of DataArrays\n\n            if (Object.prototype.toString.call(section.DataArray) === '[object Array]') {\n              var arr = section.DataArray\n            } else {\n              var arr = [section.DataArray]\n            }\n\n            var dataArrayIndex = 0,\n              numberOfDataArrays = arr.length\n\n            while (dataArrayIndex < numberOfDataArrays) {\n              // Parse the DataArray\n              if ('#text' in arr[dataArrayIndex] && arr[dataArrayIndex]['#text'].length > 0) {\n                arr[dataArrayIndex].text = parseDataArray(arr[dataArrayIndex], compressed)\n              }\n\n              dataArrayIndex++\n            }\n\n            switch (sections[sectionIndex]) {\n              // if iti is point data\n              case 'PointData':\n                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints)\n                var normalsName = section.attributes.Normals\n\n                if (numberOfPoints > 0) {\n                  for (var i = 0, len = arr.length; i < len; i++) {\n                    if (normalsName === arr[i].attributes.Name) {\n                      var components = arr[i].attributes.NumberOfComponents\n                      normals = new Float32Array(numberOfPoints * components)\n                      normals.set(arr[i].text, 0)\n                    }\n                  }\n                }\n\n                break\n\n              // if it is points\n              case 'Points':\n                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints)\n\n                if (numberOfPoints > 0) {\n                  var components = section.DataArray.attributes.NumberOfComponents\n                  points = new Float32Array(numberOfPoints * components)\n                  points.set(section.DataArray.text, 0)\n                }\n\n                break\n\n              // if it is strips\n              case 'Strips':\n                var numberOfStrips = parseInt(piece.attributes.NumberOfStrips)\n\n                if (numberOfStrips > 0) {\n                  var connectivity = new Int32Array(section.DataArray[0].text.length)\n                  var offset = new Int32Array(section.DataArray[1].text.length)\n                  connectivity.set(section.DataArray[0].text, 0)\n                  offset.set(section.DataArray[1].text, 0)\n\n                  var size = numberOfStrips + connectivity.length\n                  indices = new Uint32Array(3 * size - 9 * numberOfStrips)\n\n                  var indicesIndex = 0\n\n                  for (var i = 0, len = numberOfStrips; i < len; i++) {\n                    var strip = []\n\n                    for (var s = 0, len1 = offset[i], len0 = 0; s < len1 - len0; s++) {\n                      strip.push(connectivity[s])\n\n                      if (i > 0) len0 = offset[i - 1]\n                    }\n\n                    for (var j = 0, len1 = offset[i], len0 = 0; j < len1 - len0 - 2; j++) {\n                      if (j % 2) {\n                        indices[indicesIndex++] = strip[j]\n                        indices[indicesIndex++] = strip[j + 2]\n                        indices[indicesIndex++] = strip[j + 1]\n                      } else {\n                        indices[indicesIndex++] = strip[j]\n                        indices[indicesIndex++] = strip[j + 1]\n                        indices[indicesIndex++] = strip[j + 2]\n                      }\n\n                      if (i > 0) len0 = offset[i - 1]\n                    }\n                  }\n                }\n\n                break\n\n              // if it is polys\n              case 'Polys':\n                var numberOfPolys = parseInt(piece.attributes.NumberOfPolys)\n\n                if (numberOfPolys > 0) {\n                  var connectivity = new Int32Array(section.DataArray[0].text.length)\n                  var offset = new Int32Array(section.DataArray[1].text.length)\n                  connectivity.set(section.DataArray[0].text, 0)\n                  offset.set(section.DataArray[1].text, 0)\n\n                  var size = numberOfPolys + connectivity.length\n                  indices = new Uint32Array(3 * size - 9 * numberOfPolys)\n                  var indicesIndex = 0,\n                    connectivityIndex = 0\n                  var i = 0,\n                    len = numberOfPolys,\n                    len0 = 0\n\n                  while (i < len) {\n                    var poly = []\n                    var s = 0,\n                      len1 = offset[i]\n\n                    while (s < len1 - len0) {\n                      poly.push(connectivity[connectivityIndex++])\n                      s++\n                    }\n\n                    var j = 1\n\n                    while (j < len1 - len0 - 1) {\n                      indices[indicesIndex++] = poly[0]\n                      indices[indicesIndex++] = poly[j]\n                      indices[indicesIndex++] = poly[j + 1]\n                      j++\n                    }\n\n                    i++\n                    len0 = offset[i - 1]\n                  }\n                }\n\n                break\n\n              default:\n                break\n            }\n          }\n\n          sectionIndex++\n        }\n\n        var geometry = new BufferGeometry()\n        geometry.setIndex(new BufferAttribute(indices, 1))\n        geometry.setAttribute('position', new BufferAttribute(points, 3))\n\n        if (normals.length === points.length) {\n          geometry.setAttribute('normal', new BufferAttribute(normals, 3))\n        }\n\n        return geometry\n      } else {\n        throw new Error('Unsupported DATASET type')\n      }\n    }\n\n    // get the 5 first lines of the files to check if there is the key word binary\n    var meta = decodeText(new Uint8Array(data, 0, 250)).split('\\n')\n\n    if (meta[0].indexOf('xml') !== -1) {\n      return parseXML(decodeText(data))\n    } else if (meta[2].includes('ASCII')) {\n      return parseASCII(decodeText(data))\n    } else {\n      return parseBinary(data)\n    }\n  }\n}\n\nexport { VTKLoader }\n"]},"metadata":{},"sourceType":"module"}