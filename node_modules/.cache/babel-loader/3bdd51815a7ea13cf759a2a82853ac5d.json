{"ast":null,"code":"import { Matrix4, Mesh, MeshBasicMaterial, EqualStencilFunc, IncrementStencilOp } from \"three\";\nconst _shadowMatrix = new Matrix4();\nclass ShadowMesh extends Mesh {\n  constructor(mesh) {\n    const shadowMaterial = new MeshBasicMaterial({\n      color: 0,\n      transparent: true,\n      opacity: 0.6,\n      depthWrite: false,\n      stencilWrite: true,\n      stencilFunc: EqualStencilFunc,\n      stencilRef: 0,\n      stencilZPass: IncrementStencilOp\n    });\n    super(mesh.geometry, shadowMaterial);\n    this.isShadowMesh = true;\n    this.meshMatrix = mesh.matrixWorld;\n    this.frustumCulled = false;\n    this.matrixAutoUpdate = false;\n  }\n  update(plane, lightPosition4D) {\n    const dot = plane.normal.x * lightPosition4D.x + plane.normal.y * lightPosition4D.y + plane.normal.z * lightPosition4D.z + -plane.constant * lightPosition4D.w;\n    const sme = _shadowMatrix.elements;\n    sme[0] = dot - lightPosition4D.x * plane.normal.x;\n    sme[4] = -lightPosition4D.x * plane.normal.y;\n    sme[8] = -lightPosition4D.x * plane.normal.z;\n    sme[12] = -lightPosition4D.x * -plane.constant;\n    sme[1] = -lightPosition4D.y * plane.normal.x;\n    sme[5] = dot - lightPosition4D.y * plane.normal.y;\n    sme[9] = -lightPosition4D.y * plane.normal.z;\n    sme[13] = -lightPosition4D.y * -plane.constant;\n    sme[2] = -lightPosition4D.z * plane.normal.x;\n    sme[6] = -lightPosition4D.z * plane.normal.y;\n    sme[10] = dot - lightPosition4D.z * plane.normal.z;\n    sme[14] = -lightPosition4D.z * -plane.constant;\n    sme[3] = -lightPosition4D.w * plane.normal.x;\n    sme[7] = -lightPosition4D.w * plane.normal.y;\n    sme[11] = -lightPosition4D.w * plane.normal.z;\n    sme[15] = dot - lightPosition4D.w * -plane.constant;\n    this.matrix.multiplyMatrices(_shadowMatrix, this.meshMatrix);\n  }\n}\nexport { ShadowMesh };","map":{"version":3,"sources":["../../src/objects/ShadowMesh.js"],"names":[],"mappings":"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","sourcesContent":["import { Matrix4, Mesh, MeshBasicMaterial, EqualStencilFunc, IncrementStencilOp } from 'three'\n\n/**\n * A shadow Mesh that follows a shadow-casting Mesh in the scene, but is confined to a single plane.\n */\n\nconst _shadowMatrix = new Matrix4()\n\nclass ShadowMesh extends Mesh {\n  constructor(mesh) {\n    const shadowMaterial = new MeshBasicMaterial({\n      color: 0x000000,\n      transparent: true,\n      opacity: 0.6,\n      depthWrite: false,\n      stencilWrite: true,\n      stencilFunc: EqualStencilFunc,\n      stencilRef: 0,\n      stencilZPass: IncrementStencilOp,\n    })\n\n    super(mesh.geometry, shadowMaterial)\n\n    this.isShadowMesh = true\n\n    this.meshMatrix = mesh.matrixWorld\n\n    this.frustumCulled = false\n    this.matrixAutoUpdate = false\n  }\n\n  update(plane, lightPosition4D) {\n    // based on https://www.opengl.org/archives/resources/features/StencilTalk/tsld021.htm\n\n    const dot =\n      plane.normal.x * lightPosition4D.x +\n      plane.normal.y * lightPosition4D.y +\n      plane.normal.z * lightPosition4D.z +\n      -plane.constant * lightPosition4D.w\n\n    const sme = _shadowMatrix.elements\n\n    sme[0] = dot - lightPosition4D.x * plane.normal.x\n    sme[4] = -lightPosition4D.x * plane.normal.y\n    sme[8] = -lightPosition4D.x * plane.normal.z\n    sme[12] = -lightPosition4D.x * -plane.constant\n\n    sme[1] = -lightPosition4D.y * plane.normal.x\n    sme[5] = dot - lightPosition4D.y * plane.normal.y\n    sme[9] = -lightPosition4D.y * plane.normal.z\n    sme[13] = -lightPosition4D.y * -plane.constant\n\n    sme[2] = -lightPosition4D.z * plane.normal.x\n    sme[6] = -lightPosition4D.z * plane.normal.y\n    sme[10] = dot - lightPosition4D.z * plane.normal.z\n    sme[14] = -lightPosition4D.z * -plane.constant\n\n    sme[3] = -lightPosition4D.w * plane.normal.x\n    sme[7] = -lightPosition4D.w * plane.normal.y\n    sme[11] = -lightPosition4D.w * plane.normal.z\n    sme[15] = dot - lightPosition4D.w * -plane.constant\n\n    this.matrix.multiplyMatrices(_shadowMatrix, this.meshMatrix)\n  }\n}\n\nexport { ShadowMesh }\n"]},"metadata":{},"sourceType":"module"}