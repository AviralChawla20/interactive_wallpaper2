{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { OrthographicCamera, PlaneGeometry, Mesh } from \"three\";\nclass Pass {\n  constructor() {\n    // if set to true, the pass is processed by the composer\n    __publicField(this, \"enabled\", true);\n    // if set to true, the pass indicates to swap read and write buffer after rendering\n    __publicField(this, \"needsSwap\", true);\n    // if set to true, the pass clears its buffer before rendering\n    __publicField(this, \"clear\", false);\n    // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n    __publicField(this, \"renderToScreen\", false);\n  }\n  setSize(width, height) {}\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    console.error(\"THREE.Pass: .render() must be implemented in derived pass.\");\n  }\n  dispose() {}\n}\nclass FullScreenQuad {\n  constructor(material) {\n    __publicField(this, \"camera\", new OrthographicCamera(-1, 1, 1, -1, 0, 1));\n    __publicField(this, \"geometry\", new PlaneGeometry(2, 2));\n    __publicField(this, \"mesh\");\n    this.mesh = new Mesh(this.geometry, material);\n  }\n  get material() {\n    return this.mesh.material;\n  }\n  set material(value) {\n    this.mesh.material = value;\n  }\n  dispose() {\n    this.mesh.geometry.dispose();\n  }\n  render(renderer) {\n    renderer.render(this.mesh, this.camera);\n  }\n}\nexport { FullScreenQuad, Pass };","map":{"version":3,"sources":["../../src/postprocessing/Pass.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,MAAM,IAAA,CAAK;EAAX,WAAA,CAAA,EAAA;IAES;IAAA,aAAA,CAAA,IAAA,EAAA,SAAA,EAAU,IAAA,CAAA;IAGV;IAAA,aAAA,CAAA,IAAA,EAAA,WAAA,EAAY,IAAA,CAAA;IAGZ;IAAA,aAAA,CAAA,IAAA,EAAA,OAAA,EAAQ,KAAA,CAAA;IAGR;IAAA,aAAA,CAAA,IAAA,EAAA,gBAAA,EAAiB,KAAA,CAAA;EAAA;EAEjB,OAAA,CAAQ,KAAA,EAAe,MAAA,EAAsB,CAAC;EAE9C,MAAA,CACL,QAAA,EACA,WAAA,EACA,UAAA,EACA,SAAA,EACA,UAAA,EACM;IACN,OAAA,CAAQ,KAAA,CAAM,4DAA4D,CAAA;EAC5E;EAEO,OAAA,CAAA,EAAU,CAAC;AACpB;AAGA,MAAM,cAAA,CAAsD;EAK1D,WAAA,CAAY,QAAA,EAAqB;IAJ1B,aAAA,CAAA,IAAA,EAAA,QAAA,EAAS,IAAI,kBAAA,CAAmB,CAAA,CAAA,EAAI,CAAA,EAAG,CAAA,EAAG,CAAA,CAAA,EAAI,CAAA,EAAG,CAAC,CAAA,CAAA;IAClD,aAAA,CAAA,IAAA,EAAA,UAAA,EAAW,IAAI,aAAA,CAAc,CAAA,EAAG,CAAC,CAAA,CAAA;IAChC,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA;IAGN,IAAA,CAAK,IAAA,GAAO,IAAI,IAAA,CAAK,IAAA,CAAK,QAAA,EAAU,QAAQ,CAAA;EAC9C;EAEA,IAAW,QAAA,CAAA,EAAsB;IAC/B,OAAO,IAAA,CAAK,IAAA,CAAK,QAAA;EACnB;EAEA,IAAW,QAAA,CAAS,KAAA,EAAkB;IACpC,IAAA,CAAK,IAAA,CAAK,QAAA,GAAW,KAAA;EACvB;EAEO,OAAA,CAAA,EAAgB;IAChB,IAAA,CAAA,IAAA,CAAK,QAAA,CAAS,OAAA,CAAA,CAAA;EACrB;EAEO,MAAA,CAAO,QAAA,EAA0B;IACtC,QAAA,CAAS,MAAA,CAAO,IAAA,CAAK,IAAA,EAAM,IAAA,CAAK,MAAM,CAAA;EACxC;AACF","sourcesContent":["import { OrthographicCamera, PlaneGeometry, Mesh, Material, Renderer, WebGLRenderer, WebGLRenderTarget } from 'three'\n\nclass Pass {\n  // if set to true, the pass is processed by the composer\n  public enabled = true\n\n  // if set to true, the pass indicates to swap read and write buffer after rendering\n  public needsSwap = true\n\n  // if set to true, the pass clears its buffer before rendering\n  public clear = false\n\n  // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n  public renderToScreen = false\n\n  public setSize(width: number, height: number): void {}\n\n  public render(\n    renderer: WebGLRenderer,\n    writeBuffer: WebGLRenderTarget,\n    readBuffer: WebGLRenderTarget,\n    deltaTime: number,\n    maskActive?: unknown,\n  ): void {\n    console.error('THREE.Pass: .render() must be implemented in derived pass.')\n  }\n\n  public dispose() {}\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\nclass FullScreenQuad<TMaterial extends Material = Material> {\n  public camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1)\n  public geometry = new PlaneGeometry(2, 2)\n  private mesh: Mesh<PlaneGeometry, TMaterial>\n\n  constructor(material: TMaterial) {\n    this.mesh = new Mesh(this.geometry, material)\n  }\n\n  public get material(): TMaterial {\n    return this.mesh.material\n  }\n\n  public set material(value: TMaterial) {\n    this.mesh.material = value\n  }\n\n  public dispose(): void {\n    this.mesh.geometry.dispose()\n  }\n\n  public render(renderer: Renderer): void {\n    renderer.render(this.mesh, this.camera)\n  }\n}\n\nexport { Pass, FullScreenQuad }\n"]},"metadata":{},"sourceType":"module"}