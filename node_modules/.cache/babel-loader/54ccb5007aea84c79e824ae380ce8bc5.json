{"ast":null,"code":"import { Curve, Vector3 } from \"three\";\nclass GrannyKnot extends Curve {\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    t = 2 * Math.PI * t;\n    const x = -0.22 * Math.cos(t) - 1.28 * Math.sin(t) - 0.44 * Math.cos(3 * t) - 0.78 * Math.sin(3 * t);\n    const y = -0.1 * Math.cos(2 * t) - 0.27 * Math.sin(2 * t) + 0.38 * Math.cos(4 * t) + 0.46 * Math.sin(4 * t);\n    const z = 0.7 * Math.cos(3 * t) - 0.4 * Math.sin(3 * t);\n    return point.set(x, y, z).multiplyScalar(20);\n  }\n}\nclass HeartCurve extends Curve {\n  constructor(scale = 5) {\n    super();\n    this.scale = scale;\n  }\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    t *= 2 * Math.PI;\n    const x = 16 * Math.pow(Math.sin(t), 3);\n    const y = 13 * Math.cos(t) - 5 * Math.cos(2 * t) - 2 * Math.cos(3 * t) - Math.cos(4 * t);\n    const z = 0;\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n}\nclass VivianiCurve extends Curve {\n  constructor(scale = 70) {\n    super();\n    this.scale = scale;\n  }\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    t = t * 4 * Math.PI;\n    const a = this.scale / 2;\n    const x = a * (1 + Math.cos(t));\n    const y = a * Math.sin(t);\n    const z = 2 * a * Math.sin(t / 2);\n    return point.set(x, y, z);\n  }\n}\nclass KnotCurve extends Curve {\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    t *= 2 * Math.PI;\n    const R = 10;\n    const s = 50;\n    const x = s * Math.sin(t);\n    const y = Math.cos(t) * (R + s * Math.cos(t));\n    const z = Math.sin(t) * (R + s * Math.cos(t));\n    return point.set(x, y, z);\n  }\n}\nclass HelixCurve extends Curve {\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    const a = 30;\n    const b = 150;\n    const t2 = 2 * Math.PI * t * b / 30;\n    const x = Math.cos(t2) * a;\n    const y = Math.sin(t2) * a;\n    const z = b * t;\n    return point.set(x, y, z);\n  }\n}\nclass TrefoilKnot extends Curve {\n  constructor(scale = 10) {\n    super();\n    this.scale = scale;\n  }\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    t *= Math.PI * 2;\n    const x = (2 + Math.cos(3 * t)) * Math.cos(2 * t);\n    const y = (2 + Math.cos(3 * t)) * Math.sin(2 * t);\n    const z = Math.sin(3 * t);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n}\nclass TorusKnot extends Curve {\n  constructor(scale = 10) {\n    super();\n    this.scale = scale;\n  }\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    const p = 3;\n    const q = 4;\n    t *= Math.PI * 2;\n    const x = (2 + Math.cos(q * t)) * Math.cos(p * t);\n    const y = (2 + Math.cos(q * t)) * Math.sin(p * t);\n    const z = Math.sin(q * t);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n}\nclass CinquefoilKnot extends Curve {\n  constructor(scale = 10) {\n    super();\n    this.scale = scale;\n  }\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    const p = 2;\n    const q = 5;\n    t *= Math.PI * 2;\n    const x = (2 + Math.cos(q * t)) * Math.cos(p * t);\n    const y = (2 + Math.cos(q * t)) * Math.sin(p * t);\n    const z = Math.sin(q * t);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n}\nclass TrefoilPolynomialKnot extends Curve {\n  constructor(scale = 10) {\n    super();\n    this.scale = scale;\n  }\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    t = t * 4 - 2;\n    const x = Math.pow(t, 3) - 3 * t;\n    const y = Math.pow(t, 4) - 4 * t * t;\n    const z = 1 / 5 * Math.pow(t, 5) - 2 * t;\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n}\nfunction scaleTo(x, y, t) {\n  const r = y - x;\n  return t * r + x;\n}\nclass FigureEightPolynomialKnot extends Curve {\n  constructor(scale = 1) {\n    super();\n    this.scale = scale;\n  }\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    t = scaleTo(-4, 4, t);\n    const x = 2 / 5 * t * (t * t - 7) * (t * t - 10);\n    const y = Math.pow(t, 4) - 13 * t * t;\n    const z = 1 / 10 * t * (t * t - 4) * (t * t - 9) * (t * t - 12);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n}\nclass DecoratedTorusKnot4a extends Curve {\n  constructor(scale = 40) {\n    super();\n    this.scale = scale;\n  }\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    t *= Math.PI * 2;\n    const x = Math.cos(2 * t) * (1 + 0.6 * (Math.cos(5 * t) + 0.75 * Math.cos(10 * t)));\n    const y = Math.sin(2 * t) * (1 + 0.6 * (Math.cos(5 * t) + 0.75 * Math.cos(10 * t)));\n    const z = 0.35 * Math.sin(5 * t);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n}\nclass DecoratedTorusKnot4b extends Curve {\n  constructor(scale = 40) {\n    super();\n    this.scale = scale;\n  }\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    const fi = t * Math.PI * 2;\n    const x = Math.cos(2 * fi) * (1 + 0.45 * Math.cos(3 * fi) + 0.4 * Math.cos(9 * fi));\n    const y = Math.sin(2 * fi) * (1 + 0.45 * Math.cos(3 * fi) + 0.4 * Math.cos(9 * fi));\n    const z = 0.2 * Math.sin(9 * fi);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n}\nclass DecoratedTorusKnot5a extends Curve {\n  constructor(scale = 40) {\n    super();\n    this.scale = scale;\n  }\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    const fi = t * Math.PI * 2;\n    const x = Math.cos(3 * fi) * (1 + 0.3 * Math.cos(5 * fi) + 0.5 * Math.cos(10 * fi));\n    const y = Math.sin(3 * fi) * (1 + 0.3 * Math.cos(5 * fi) + 0.5 * Math.cos(10 * fi));\n    const z = 0.2 * Math.sin(20 * fi);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n}\nclass DecoratedTorusKnot5c extends Curve {\n  constructor(scale = 40) {\n    super();\n    this.scale = scale;\n  }\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget;\n    const fi = t * Math.PI * 2;\n    const x = Math.cos(4 * fi) * (1 + 0.5 * (Math.cos(5 * fi) + 0.4 * Math.cos(20 * fi)));\n    const y = Math.sin(4 * fi) * (1 + 0.5 * (Math.cos(5 * fi) + 0.4 * Math.cos(20 * fi)));\n    const z = 0.35 * Math.sin(15 * fi);\n    return point.set(x, y, z).multiplyScalar(this.scale);\n  }\n}\nexport { CinquefoilKnot, DecoratedTorusKnot4a, DecoratedTorusKnot4b, DecoratedTorusKnot5a, DecoratedTorusKnot5c, FigureEightPolynomialKnot, GrannyKnot, HeartCurve, HelixCurve, KnotCurve, TorusKnot, TrefoilKnot, TrefoilPolynomialKnot, VivianiCurve };","map":{"version":3,"sources":["../../src/curves/CurveExtras.js"],"names":[],"mappings":"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","sourcesContent":["import { Curve, Vector3 } from 'three'\n\n/**\n * A bunch of parametric curves\n *\n * Formulas collected from various sources\n * http://mathworld.wolfram.com/HeartCurve.html\n * http://en.wikipedia.org/wiki/Viviani%27s_curve\n * http://www.mi.sanu.ac.rs/vismath/taylorapril2011/Taylor.pdf\n * https://prideout.net/blog/old/blog/index.html@p=44.html\n */\n\n// GrannyKnot\n\nclass GrannyKnot extends Curve {\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget\n\n    t = 2 * Math.PI * t\n\n    const x = -0.22 * Math.cos(t) - 1.28 * Math.sin(t) - 0.44 * Math.cos(3 * t) - 0.78 * Math.sin(3 * t)\n    const y = -0.1 * Math.cos(2 * t) - 0.27 * Math.sin(2 * t) + 0.38 * Math.cos(4 * t) + 0.46 * Math.sin(4 * t)\n    const z = 0.7 * Math.cos(3 * t) - 0.4 * Math.sin(3 * t)\n\n    return point.set(x, y, z).multiplyScalar(20)\n  }\n}\n\n// HeartCurve\n\nclass HeartCurve extends Curve {\n  constructor(scale = 5) {\n    super()\n\n    this.scale = scale\n  }\n\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget\n\n    t *= 2 * Math.PI\n\n    const x = 16 * Math.pow(Math.sin(t), 3)\n    const y = 13 * Math.cos(t) - 5 * Math.cos(2 * t) - 2 * Math.cos(3 * t) - Math.cos(4 * t)\n    const z = 0\n\n    return point.set(x, y, z).multiplyScalar(this.scale)\n  }\n}\n\n// Viviani's Curve\n\nclass VivianiCurve extends Curve {\n  constructor(scale = 70) {\n    super()\n\n    this.scale = scale\n  }\n\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget\n\n    t = t * 4 * Math.PI // normalized to 0..1\n    const a = this.scale / 2\n\n    const x = a * (1 + Math.cos(t))\n    const y = a * Math.sin(t)\n    const z = 2 * a * Math.sin(t / 2)\n\n    return point.set(x, y, z)\n  }\n}\n\n// KnotCurve\n\nclass KnotCurve extends Curve {\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget\n\n    t *= 2 * Math.PI\n\n    const R = 10\n    const s = 50\n\n    const x = s * Math.sin(t)\n    const y = Math.cos(t) * (R + s * Math.cos(t))\n    const z = Math.sin(t) * (R + s * Math.cos(t))\n\n    return point.set(x, y, z)\n  }\n}\n\n// HelixCurve\n\nclass HelixCurve extends Curve {\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget\n\n    const a = 30 // radius\n    const b = 150 // height\n\n    const t2 = (2 * Math.PI * t * b) / 30\n\n    const x = Math.cos(t2) * a\n    const y = Math.sin(t2) * a\n    const z = b * t\n\n    return point.set(x, y, z)\n  }\n}\n\n// TrefoilKnot\n\nclass TrefoilKnot extends Curve {\n  constructor(scale = 10) {\n    super()\n\n    this.scale = scale\n  }\n\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget\n\n    t *= Math.PI * 2\n\n    const x = (2 + Math.cos(3 * t)) * Math.cos(2 * t)\n    const y = (2 + Math.cos(3 * t)) * Math.sin(2 * t)\n    const z = Math.sin(3 * t)\n\n    return point.set(x, y, z).multiplyScalar(this.scale)\n  }\n}\n\n// TorusKnot\n\nclass TorusKnot extends Curve {\n  constructor(scale = 10) {\n    super()\n\n    this.scale = scale\n  }\n\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget\n\n    const p = 3\n    const q = 4\n\n    t *= Math.PI * 2\n\n    const x = (2 + Math.cos(q * t)) * Math.cos(p * t)\n    const y = (2 + Math.cos(q * t)) * Math.sin(p * t)\n    const z = Math.sin(q * t)\n\n    return point.set(x, y, z).multiplyScalar(this.scale)\n  }\n}\n\n// CinquefoilKnot\n\nclass CinquefoilKnot extends Curve {\n  constructor(scale = 10) {\n    super()\n\n    this.scale = scale\n  }\n\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget\n\n    const p = 2\n    const q = 5\n\n    t *= Math.PI * 2\n\n    const x = (2 + Math.cos(q * t)) * Math.cos(p * t)\n    const y = (2 + Math.cos(q * t)) * Math.sin(p * t)\n    const z = Math.sin(q * t)\n\n    return point.set(x, y, z).multiplyScalar(this.scale)\n  }\n}\n\n// TrefoilPolynomialKnot\n\nclass TrefoilPolynomialKnot extends Curve {\n  constructor(scale = 10) {\n    super()\n\n    this.scale = scale\n  }\n\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget\n\n    t = t * 4 - 2\n\n    const x = Math.pow(t, 3) - 3 * t\n    const y = Math.pow(t, 4) - 4 * t * t\n    const z = (1 / 5) * Math.pow(t, 5) - 2 * t\n\n    return point.set(x, y, z).multiplyScalar(this.scale)\n  }\n}\n\nfunction scaleTo(x, y, t) {\n  const r = y - x\n  return t * r + x\n}\n\n// FigureEightPolynomialKnot\n\nclass FigureEightPolynomialKnot extends Curve {\n  constructor(scale = 1) {\n    super()\n\n    this.scale = scale\n  }\n\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget\n\n    t = scaleTo(-4, 4, t)\n\n    const x = (2 / 5) * t * (t * t - 7) * (t * t - 10)\n    const y = Math.pow(t, 4) - 13 * t * t\n    const z = (1 / 10) * t * (t * t - 4) * (t * t - 9) * (t * t - 12)\n\n    return point.set(x, y, z).multiplyScalar(this.scale)\n  }\n}\n\n// DecoratedTorusKnot4a\n\nclass DecoratedTorusKnot4a extends Curve {\n  constructor(scale = 40) {\n    super()\n\n    this.scale = scale\n  }\n\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget\n\n    t *= Math.PI * 2\n\n    const x = Math.cos(2 * t) * (1 + 0.6 * (Math.cos(5 * t) + 0.75 * Math.cos(10 * t)))\n    const y = Math.sin(2 * t) * (1 + 0.6 * (Math.cos(5 * t) + 0.75 * Math.cos(10 * t)))\n    const z = 0.35 * Math.sin(5 * t)\n\n    return point.set(x, y, z).multiplyScalar(this.scale)\n  }\n}\n\n// DecoratedTorusKnot4b\n\nclass DecoratedTorusKnot4b extends Curve {\n  constructor(scale = 40) {\n    super()\n\n    this.scale = scale\n  }\n\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget\n\n    const fi = t * Math.PI * 2\n\n    const x = Math.cos(2 * fi) * (1 + 0.45 * Math.cos(3 * fi) + 0.4 * Math.cos(9 * fi))\n    const y = Math.sin(2 * fi) * (1 + 0.45 * Math.cos(3 * fi) + 0.4 * Math.cos(9 * fi))\n    const z = 0.2 * Math.sin(9 * fi)\n\n    return point.set(x, y, z).multiplyScalar(this.scale)\n  }\n}\n\n// DecoratedTorusKnot5a\n\nclass DecoratedTorusKnot5a extends Curve {\n  constructor(scale = 40) {\n    super()\n\n    this.scale = scale\n  }\n\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget\n\n    const fi = t * Math.PI * 2\n\n    const x = Math.cos(3 * fi) * (1 + 0.3 * Math.cos(5 * fi) + 0.5 * Math.cos(10 * fi))\n    const y = Math.sin(3 * fi) * (1 + 0.3 * Math.cos(5 * fi) + 0.5 * Math.cos(10 * fi))\n    const z = 0.2 * Math.sin(20 * fi)\n\n    return point.set(x, y, z).multiplyScalar(this.scale)\n  }\n}\n\n// DecoratedTorusKnot5c\n\nclass DecoratedTorusKnot5c extends Curve {\n  constructor(scale = 40) {\n    super()\n\n    this.scale = scale\n  }\n\n  getPoint(t, optionalTarget = new Vector3()) {\n    const point = optionalTarget\n\n    const fi = t * Math.PI * 2\n\n    const x = Math.cos(4 * fi) * (1 + 0.5 * (Math.cos(5 * fi) + 0.4 * Math.cos(20 * fi)))\n    const y = Math.sin(4 * fi) * (1 + 0.5 * (Math.cos(5 * fi) + 0.4 * Math.cos(20 * fi)))\n    const z = 0.35 * Math.sin(15 * fi)\n\n    return point.set(x, y, z).multiplyScalar(this.scale)\n  }\n}\n\nexport {\n  GrannyKnot,\n  HeartCurve,\n  VivianiCurve,\n  KnotCurve,\n  HelixCurve,\n  TrefoilKnot,\n  TorusKnot,\n  CinquefoilKnot,\n  TrefoilPolynomialKnot,\n  FigureEightPolynomialKnot,\n  DecoratedTorusKnot4a,\n  DecoratedTorusKnot4b,\n  DecoratedTorusKnot5a,\n  DecoratedTorusKnot5c,\n}\n"]},"metadata":{},"sourceType":"module"}