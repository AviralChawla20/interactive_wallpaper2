{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Mesh, PlaneGeometry, OrthographicCamera, MathUtils, WebGLRenderTarget, Vector2, RawShaderMaterial, NoBlending } from \"three\";\nvar _mipmapMaterial = _getMipmapMaterial();\nvar _mesh = new Mesh(new PlaneGeometry(2, 2), _mipmapMaterial);\nvar _flatCamera = new OrthographicCamera(0, 1, 0, 1, 0, 1);\nvar _tempTarget = null;\nclass RoughnessMipmapper {\n  constructor(renderer) {\n    __publicField(this, \"generateMipmaps\", function (material) {\n      if (\"roughnessMap\" in material === false) return;\n      var {\n        roughnessMap,\n        normalMap\n      } = material;\n      if (roughnessMap === null || normalMap === null || !roughnessMap.generateMipmaps || material.userData.roughnessUpdated) {\n        return;\n      }\n      material.userData.roughnessUpdated = true;\n      var width = Math.max(roughnessMap.image.width, normalMap.image.width);\n      var height = Math.max(roughnessMap.image.height, normalMap.image.height);\n      if (!MathUtils.isPowerOfTwo(width) || !MathUtils.isPowerOfTwo(height)) return;\n      var oldTarget = this._renderer.getRenderTarget();\n      var autoClear = this._renderer.autoClear;\n      this._renderer.autoClear = false;\n      if (_tempTarget === null || _tempTarget.width !== width || _tempTarget.height !== height) {\n        if (_tempTarget !== null) _tempTarget.dispose();\n        _tempTarget = new WebGLRenderTarget(width, height, {\n          depthBuffer: false\n        });\n        _tempTarget.scissorTest = true;\n      }\n      if (width !== roughnessMap.image.width || height !== roughnessMap.image.height) {\n        var params = {\n          wrapS: roughnessMap.wrapS,\n          wrapT: roughnessMap.wrapT,\n          magFilter: roughnessMap.magFilter,\n          minFilter: roughnessMap.minFilter,\n          depthBuffer: false\n        };\n        var newRoughnessTarget = new WebGLRenderTarget(width, height, params);\n        newRoughnessTarget.texture.generateMipmaps = true;\n        this._renderer.setRenderTarget(newRoughnessTarget);\n        material.roughnessMap = newRoughnessTarget.texture;\n        if (material.metalnessMap == roughnessMap) material.metalnessMap = material.roughnessMap;\n        if (material.aoMap == roughnessMap) material.aoMap = material.roughnessMap;\n      }\n      _mipmapMaterial.uniforms.roughnessMap.value = roughnessMap;\n      _mipmapMaterial.uniforms.normalMap.value = normalMap;\n      var position = new Vector2(0, 0);\n      var texelSize = _mipmapMaterial.uniforms.texelSize.value;\n      for (let mip = 0; width >= 1 && height >= 1; ++mip, width /= 2, height /= 2) {\n        texelSize.set(1 / width, 1 / height);\n        if (mip == 0) texelSize.set(0, 0);\n        _tempTarget.viewport.set(position.x, position.y, width, height);\n        _tempTarget.scissor.set(position.x, position.y, width, height);\n        this._renderer.setRenderTarget(_tempTarget);\n        this._renderer.render(_mesh, _flatCamera);\n        this._renderer.copyFramebufferToTexture(position, material.roughnessMap, mip);\n        _mipmapMaterial.uniforms.roughnessMap.value = material.roughnessMap;\n      }\n      if (roughnessMap !== material.roughnessMap) roughnessMap.dispose();\n      this._renderer.setRenderTarget(oldTarget);\n      this._renderer.autoClear = autoClear;\n    });\n    __publicField(this, \"dispose\", function () {\n      _mipmapMaterial.dispose();\n      _mesh.geometry.dispose();\n      if (_tempTarget != null) _tempTarget.dispose();\n    });\n    this._renderer = renderer;\n    this._renderer.compile(_mesh, _flatCamera);\n  }\n}\nfunction _getMipmapMaterial() {\n  var shaderMaterial = new RawShaderMaterial({\n    uniforms: {\n      roughnessMap: {\n        value: null\n      },\n      normalMap: {\n        value: null\n      },\n      texelSize: {\n        value: new Vector2(1, 1)\n      }\n    },\n    vertexShader: (/* glsl */\n    `\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tattribute vec3 position;\n\t\t\tattribute vec2 uv;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tvoid main() {\n\n\t\t\t\tvUv = uv;\n\n\t\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t\t}\n\t\t`),\n    fragmentShader: (/* glsl */\n    `\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tuniform sampler2D roughnessMap;\n\t\t\tuniform sampler2D normalMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\n\t\t\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\n\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tfloat roughnessToVariance( float roughness ) {\n\n\t\t\t\tfloat variance = 0.0;\n\n\t\t\t\tif ( roughness >= r1 ) {\n\n\t\t\t\t\tvariance = ( r0 - roughness ) * ( v1 - v0 ) / ( r0 - r1 ) + v0;\n\n\t\t\t\t} else if ( roughness >= r4 ) {\n\n\t\t\t\t\tvariance = ( r1 - roughness ) * ( v4 - v1 ) / ( r1 - r4 ) + v1;\n\n\t\t\t\t} else if ( roughness >= r5 ) {\n\n\t\t\t\t\tvariance = ( r4 - roughness ) * ( v5 - v4 ) / ( r4 - r5 ) + v4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfloat roughness2 = roughness * roughness;\n\n\t\t\t\t\tvariance = 1.79 * roughness2 * roughness2;\n\n\t\t\t\t}\n\n\t\t\t\treturn variance;\n\n\t\t\t}\n\n\t\t\tfloat varianceToRoughness( float variance ) {\n\n\t\t\t\tfloat roughness = 0.0;\n\n\t\t\t\tif ( variance >= v1 ) {\n\n\t\t\t\t\troughness = ( v0 - variance ) * ( r1 - r0 ) / ( v0 - v1 ) + r0;\n\n\t\t\t\t} else if ( variance >= v4 ) {\n\n\t\t\t\t\troughness = ( v1 - variance ) * ( r4 - r1 ) / ( v1 - v4 ) + r1;\n\n\t\t\t\t} else if ( variance >= v5 ) {\n\n\t\t\t\t\troughness = ( v4 - variance ) * ( r5 - r4 ) / ( v4 - v5 ) + r4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\troughness = pow( 0.559 * variance, 0.25 ); // 0.559 = 1.0 / 1.79\n\n\t\t\t\t}\n\n\t\t\t\treturn roughness;\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = texture2D( roughnessMap, vUv, - 1.0 );\n\n\t\t\t\tif ( texelSize.x == 0.0 ) return;\n\n\t\t\t\tfloat roughness = gl_FragColor.g;\n\n\t\t\t\tfloat variance = roughnessToVariance( roughness );\n\n\t\t\t\tvec3 avgNormal;\n\n\t\t\t\tfor ( float x = - 1.0; x < 2.0; x += 2.0 ) {\n\n\t\t\t\t\tfor ( float y = - 1.0; y < 2.0; y += 2.0 ) {\n\n\t\t\t\t\t\tvec2 uv = vUv + vec2( x, y ) * 0.25 * texelSize;\n\n\t\t\t\t\t\tavgNormal += normalize( texture2D( normalMap, uv, - 1.0 ).xyz - 0.5 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvariance += 1.0 - 0.25 * length( avgNormal );\n\n\t\t\t\tgl_FragColor.g = varianceToRoughness( variance );\n\n\t\t\t}\n\t\t`),\n    blending: NoBlending,\n    depthTest: false,\n    depthWrite: false\n  });\n  shaderMaterial.type = \"RoughnessMipmapper\";\n  return shaderMaterial;\n}\nexport { RoughnessMipmapper };","map":{"version":3,"sources":["../../src/utils/RoughnessMipmapper.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * This class generates custom mipmaps for a roughness map by encoding the lost variation in the\n * normal map mip levels as increased roughness in the corresponding roughness mip levels. This\n * helps with rendering accuracy for MeshStandardMaterial, and also helps with anti-aliasing when\n * using PMREM. If the normal map is larger than the roughness map, the roughness map will be\n * enlarged to match the dimensions of the normal map.\n */\n\nimport {\n  MathUtils,\n  Mesh,\n  NoBlending,\n  OrthographicCamera,\n  PlaneGeometry,\n  RawShaderMaterial,\n  Vector2,\n  WebGLRenderTarget,\n} from 'three'\n\nvar _mipmapMaterial = _getMipmapMaterial()\n\nvar _mesh = new Mesh(new PlaneGeometry(2, 2), _mipmapMaterial)\n\nvar _flatCamera = new OrthographicCamera(0, 1, 0, 1, 0, 1)\n\nvar _tempTarget = null\n\nclass RoughnessMipmapper {\n  constructor(renderer) {\n    this._renderer = renderer\n\n    this._renderer.compile(_mesh, _flatCamera)\n  }\n\n  generateMipmaps = function (material) {\n    if ('roughnessMap' in material === false) return\n\n    var { roughnessMap, normalMap } = material\n\n    if (\n      roughnessMap === null ||\n      normalMap === null ||\n      !roughnessMap.generateMipmaps ||\n      material.userData.roughnessUpdated\n    ) {\n      return\n    }\n\n    material.userData.roughnessUpdated = true\n\n    var width = Math.max(roughnessMap.image.width, normalMap.image.width)\n\n    var height = Math.max(roughnessMap.image.height, normalMap.image.height)\n\n    if (!MathUtils.isPowerOfTwo(width) || !MathUtils.isPowerOfTwo(height)) return\n\n    var oldTarget = this._renderer.getRenderTarget()\n\n    var autoClear = this._renderer.autoClear\n\n    this._renderer.autoClear = false\n\n    if (_tempTarget === null || _tempTarget.width !== width || _tempTarget.height !== height) {\n      if (_tempTarget !== null) _tempTarget.dispose()\n\n      _tempTarget = new WebGLRenderTarget(width, height, {\n        depthBuffer: false,\n      })\n\n      _tempTarget.scissorTest = true\n    }\n\n    if (width !== roughnessMap.image.width || height !== roughnessMap.image.height) {\n      var params = {\n        wrapS: roughnessMap.wrapS,\n        wrapT: roughnessMap.wrapT,\n        magFilter: roughnessMap.magFilter,\n        minFilter: roughnessMap.minFilter,\n        depthBuffer: false,\n      }\n\n      var newRoughnessTarget = new WebGLRenderTarget(width, height, params)\n\n      newRoughnessTarget.texture.generateMipmaps = true\n\n      // Setting the render target causes the memory to be allocated.\n\n      this._renderer.setRenderTarget(newRoughnessTarget)\n\n      material.roughnessMap = newRoughnessTarget.texture\n\n      if (material.metalnessMap == roughnessMap) material.metalnessMap = material.roughnessMap\n\n      if (material.aoMap == roughnessMap) material.aoMap = material.roughnessMap\n    }\n\n    _mipmapMaterial.uniforms.roughnessMap.value = roughnessMap\n\n    _mipmapMaterial.uniforms.normalMap.value = normalMap\n\n    var position = new Vector2(0, 0)\n\n    var texelSize = _mipmapMaterial.uniforms.texelSize.value\n\n    for (let mip = 0; width >= 1 && height >= 1; ++mip, width /= 2, height /= 2) {\n      // Rendering to a mip level is not allowed in webGL1. Instead we must set\n      // up a secondary texture to write the result to, then copy it back to the\n      // proper mipmap level.\n\n      texelSize.set(1.0 / width, 1.0 / height)\n\n      if (mip == 0) texelSize.set(0.0, 0.0)\n\n      _tempTarget.viewport.set(position.x, position.y, width, height)\n\n      _tempTarget.scissor.set(position.x, position.y, width, height)\n\n      this._renderer.setRenderTarget(_tempTarget)\n\n      this._renderer.render(_mesh, _flatCamera)\n\n      this._renderer.copyFramebufferToTexture(position, material.roughnessMap, mip)\n\n      _mipmapMaterial.uniforms.roughnessMap.value = material.roughnessMap\n    }\n\n    if (roughnessMap !== material.roughnessMap) roughnessMap.dispose()\n\n    this._renderer.setRenderTarget(oldTarget)\n\n    this._renderer.autoClear = autoClear\n  }\n\n  dispose = function () {\n    _mipmapMaterial.dispose()\n\n    _mesh.geometry.dispose()\n\n    if (_tempTarget != null) _tempTarget.dispose()\n  }\n}\n\nfunction _getMipmapMaterial() {\n  var shaderMaterial = new RawShaderMaterial({\n    uniforms: {\n      roughnessMap: { value: null },\n      normalMap: { value: null },\n      texelSize: { value: new Vector2(1, 1) },\n    },\n\n    vertexShader: /* glsl */ `\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tattribute vec3 position;\n\t\t\tattribute vec2 uv;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tvoid main() {\n\n\t\t\t\tvUv = uv;\n\n\t\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t\t}\n\t\t`,\n\n    fragmentShader: /* glsl */ `\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tuniform sampler2D roughnessMap;\n\t\t\tuniform sampler2D normalMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\n\t\t\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\n\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tfloat roughnessToVariance( float roughness ) {\n\n\t\t\t\tfloat variance = 0.0;\n\n\t\t\t\tif ( roughness >= r1 ) {\n\n\t\t\t\t\tvariance = ( r0 - roughness ) * ( v1 - v0 ) / ( r0 - r1 ) + v0;\n\n\t\t\t\t} else if ( roughness >= r4 ) {\n\n\t\t\t\t\tvariance = ( r1 - roughness ) * ( v4 - v1 ) / ( r1 - r4 ) + v1;\n\n\t\t\t\t} else if ( roughness >= r5 ) {\n\n\t\t\t\t\tvariance = ( r4 - roughness ) * ( v5 - v4 ) / ( r4 - r5 ) + v4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfloat roughness2 = roughness * roughness;\n\n\t\t\t\t\tvariance = 1.79 * roughness2 * roughness2;\n\n\t\t\t\t}\n\n\t\t\t\treturn variance;\n\n\t\t\t}\n\n\t\t\tfloat varianceToRoughness( float variance ) {\n\n\t\t\t\tfloat roughness = 0.0;\n\n\t\t\t\tif ( variance >= v1 ) {\n\n\t\t\t\t\troughness = ( v0 - variance ) * ( r1 - r0 ) / ( v0 - v1 ) + r0;\n\n\t\t\t\t} else if ( variance >= v4 ) {\n\n\t\t\t\t\troughness = ( v1 - variance ) * ( r4 - r1 ) / ( v1 - v4 ) + r1;\n\n\t\t\t\t} else if ( variance >= v5 ) {\n\n\t\t\t\t\troughness = ( v4 - variance ) * ( r5 - r4 ) / ( v4 - v5 ) + r4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\troughness = pow( 0.559 * variance, 0.25 ); // 0.559 = 1.0 / 1.79\n\n\t\t\t\t}\n\n\t\t\t\treturn roughness;\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = texture2D( roughnessMap, vUv, - 1.0 );\n\n\t\t\t\tif ( texelSize.x == 0.0 ) return;\n\n\t\t\t\tfloat roughness = gl_FragColor.g;\n\n\t\t\t\tfloat variance = roughnessToVariance( roughness );\n\n\t\t\t\tvec3 avgNormal;\n\n\t\t\t\tfor ( float x = - 1.0; x < 2.0; x += 2.0 ) {\n\n\t\t\t\t\tfor ( float y = - 1.0; y < 2.0; y += 2.0 ) {\n\n\t\t\t\t\t\tvec2 uv = vUv + vec2( x, y ) * 0.25 * texelSize;\n\n\t\t\t\t\t\tavgNormal += normalize( texture2D( normalMap, uv, - 1.0 ).xyz - 0.5 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvariance += 1.0 - 0.25 * length( avgNormal );\n\n\t\t\t\tgl_FragColor.g = varianceToRoughness( variance );\n\n\t\t\t}\n\t\t`,\n\n    blending: NoBlending,\n    depthTest: false,\n    depthWrite: false,\n  })\n\n  shaderMaterial.type = 'RoughnessMipmapper'\n\n  return shaderMaterial\n}\n\nexport { RoughnessMipmapper }\n"]},"metadata":{},"sourceType":"module"}