{"ast":null,"code":"import { Vector3, Quaternion, Object3D } from \"three\";\nconst _translationObject = new Vector3();\nconst _quaternionObject = new Quaternion();\nconst _scaleObject = new Vector3();\nconst _translationWorld = new Vector3();\nconst _quaternionWorld = new Quaternion();\nconst _scaleWorld = new Vector3();\nclass Gyroscope extends Object3D {\n  constructor() {\n    super();\n  }\n  updateMatrixWorld(force) {\n    this.matrixAutoUpdate && this.updateMatrix();\n    if (this.matrixWorldNeedsUpdate || force) {\n      if (this.parent !== null) {\n        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n        this.matrixWorld.decompose(_translationWorld, _quaternionWorld, _scaleWorld);\n        this.matrix.decompose(_translationObject, _quaternionObject, _scaleObject);\n        this.matrixWorld.compose(_translationWorld, _quaternionObject, _scaleWorld);\n      } else {\n        this.matrixWorld.copy(this.matrix);\n      }\n      this.matrixWorldNeedsUpdate = false;\n      force = true;\n    }\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      this.children[i].updateMatrixWorld(force);\n    }\n  }\n}\nexport { Gyroscope };","map":{"version":3,"sources":["../../src/misc/Gyroscope.js"],"names":[],"mappings":";AAEA,MAAM,kBAAA,GAAqB,IAAI,OAAA,CAAS,CAAA;AACxC,MAAM,iBAAA,GAAoB,IAAI,UAAA,CAAY,CAAA;AAC1C,MAAM,YAAA,GAAe,IAAI,OAAA,CAAS,CAAA;AAElC,MAAM,iBAAA,GAAoB,IAAI,OAAA,CAAS,CAAA;AACvC,MAAM,gBAAA,GAAmB,IAAI,UAAA,CAAY,CAAA;AACzC,MAAM,WAAA,GAAc,IAAI,OAAA,CAAS,CAAA;AAEjC,MAAM,SAAA,SAAkB,QAAA,CAAS;EAC/B,WAAA,CAAA,EAAc;IACZ,KAAA,CAAO,CAAA;EACR;EAED,iBAAA,CAAkB,KAAA,EAAO;IACvB,IAAA,CAAK,gBAAA,IAAoB,IAAA,CAAK,YAAA,CAAc,CAAA;IAI5C,IAAI,IAAA,CAAK,sBAAA,IAA0B,KAAA,EAAO;MACxC,IAAI,IAAA,CAAK,MAAA,KAAW,IAAA,EAAM;QACxB,IAAA,CAAK,WAAA,CAAY,gBAAA,CAAiB,IAAA,CAAK,MAAA,CAAO,WAAA,EAAa,IAAA,CAAK,MAAM,CAAA;QAEtE,IAAA,CAAK,WAAA,CAAY,SAAA,CAAU,iBAAA,EAAmB,gBAAA,EAAkB,WAAW,CAAA;QAC3E,IAAA,CAAK,MAAA,CAAO,SAAA,CAAU,kBAAA,EAAoB,iBAAA,EAAmB,YAAY,CAAA;QAEzE,IAAA,CAAK,WAAA,CAAY,OAAA,CAAQ,iBAAA,EAAmB,iBAAA,EAAmB,WAAW,CAAA;MAClF,CAAA,MAAa;QACL,IAAA,CAAK,WAAA,CAAY,IAAA,CAAK,IAAA,CAAK,MAAM,CAAA;MAClC;MAED,IAAA,CAAK,sBAAA,GAAyB,KAAA;MAE9B,KAAA,GAAQ,IAAA;IACT;IAID,KAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,IAAA,CAAK,QAAA,CAAS,MAAA,EAAQ,CAAA,GAAI,CAAA,EAAG,CAAA,EAAA,EAAK;MACpD,IAAA,CAAK,QAAA,CAAS,CAAC,CAAA,CAAE,iBAAA,CAAkB,KAAK,CAAA;IACzC;EACF;AACH","sourcesContent":["import { Object3D, Quaternion, Vector3 } from 'three'\n\nconst _translationObject = new Vector3()\nconst _quaternionObject = new Quaternion()\nconst _scaleObject = new Vector3()\n\nconst _translationWorld = new Vector3()\nconst _quaternionWorld = new Quaternion()\nconst _scaleWorld = new Vector3()\n\nclass Gyroscope extends Object3D {\n  constructor() {\n    super()\n  }\n\n  updateMatrixWorld(force) {\n    this.matrixAutoUpdate && this.updateMatrix()\n\n    // update matrixWorld\n\n    if (this.matrixWorldNeedsUpdate || force) {\n      if (this.parent !== null) {\n        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)\n\n        this.matrixWorld.decompose(_translationWorld, _quaternionWorld, _scaleWorld)\n        this.matrix.decompose(_translationObject, _quaternionObject, _scaleObject)\n\n        this.matrixWorld.compose(_translationWorld, _quaternionObject, _scaleWorld)\n      } else {\n        this.matrixWorld.copy(this.matrix)\n      }\n\n      this.matrixWorldNeedsUpdate = false\n\n      force = true\n    }\n\n    // update children\n\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      this.children[i].updateMatrixWorld(force)\n    }\n  }\n}\n\nexport { Gyroscope }\n"]},"metadata":{},"sourceType":"module"}