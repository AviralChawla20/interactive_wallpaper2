{"ast":null,"code":"import { Loader, FileLoader, Mesh, BufferGeometry, Float32BufferAttribute, MeshStandardMaterial, RedFormat, NearestFilter, LinearFilter } from \"three\";\nimport { Data3DTexture } from \"../_polyfill/Data3DTexture.js\";\nclass VOXLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(buffer) {\n    const data = new DataView(buffer);\n    const id = data.getUint32(0, true);\n    const version = data.getUint32(4, true);\n    if (id !== 542658390 || version !== 150) {\n      console.error(\"Not a valid VOX file\");\n      return;\n    }\n    const DEFAULT_PALETTE = [0, 4294967295, 4291624959, 4288282623, 4284940287, 4281597951, 4278255615, 4294954239, 4291611903, 4288269567, 4284927231, 4281584895, 4278242559, 4294941183, 4291598847, 4288256511, 4284914175, 4281571839, 4278229503, 4294928127, 4291585791, 4288243455, 4284901119, 4281558783, 4278216447, 4294915071, 4291572735, 4288230399, 4284888063, 4281545727, 4278203391, 4294902015, 4291559679, 4288217343, 4284875007, 4281532671, 4278190335, 4294967244, 4291624908, 4288282572, 4284940236, 4281597900, 4278255564, 4294954188, 4291611852, 4288269516, 4284927180, 4281584844, 4278242508, 4294941132, 4291598796, 4288256460, 4284914124, 4281571788, 4278229452, 4294928076, 4291585740, 4288243404, 4284901068, 4281558732, 4278216396, 4294915020, 4291572684, 4288230348, 4284888012, 4281545676, 4278203340, 4294901964, 4291559628, 4288217292, 4284874956, 4281532620, 4278190284, 4294967193, 4291624857, 4288282521, 4284940185, 4281597849, 4278255513, 4294954137, 4291611801, 4288269465, 4284927129, 4281584793, 4278242457, 4294941081, 4291598745, 4288256409, 4284914073, 4281571737, 4278229401, 4294928025, 4291585689, 4288243353, 4284901017, 4281558681, 4278216345, 4294914969, 4291572633, 4288230297, 4284887961, 4281545625, 4278203289, 4294901913, 4291559577, 4288217241, 4284874905, 4281532569, 4278190233, 4294967142, 4291624806, 4288282470, 4284940134, 4281597798, 4278255462, 4294954086, 4291611750, 4288269414, 4284927078, 4281584742, 4278242406, 4294941030, 4291598694, 4288256358, 4284914022, 4281571686, 4278229350, 4294927974, 4291585638, 4288243302, 4284900966, 4281558630, 4278216294, 4294914918, 4291572582, 4288230246, 4284887910, 4281545574, 4278203238, 4294901862, 4291559526, 4288217190, 4284874854, 4281532518, 4278190182, 4294967091, 4291624755, 4288282419, 4284940083, 4281597747, 4278255411, 4294954035, 4291611699, 4288269363, 4284927027, 4281584691, 4278242355, 4294940979, 4291598643, 4288256307, 4284913971, 4281571635, 4278229299, 4294927923, 4291585587, 4288243251, 4284900915, 4281558579, 4278216243, 4294914867, 4291572531, 4288230195, 4284887859, 4281545523, 4278203187, 4294901811, 4291559475, 4288217139, 4284874803, 4281532467, 4278190131, 4294967040, 4291624704, 4288282368, 4284940032, 4281597696, 4278255360, 4294953984, 4291611648, 4288269312, 4284926976, 4281584640, 4278242304, 4294940928, 4291598592, 4288256256, 4284913920, 4281571584, 4278229248, 4294927872, 4291585536, 4288243200, 4284900864, 4281558528, 4278216192, 4294914816, 4291572480, 4288230144, 4284887808, 4281545472, 4278203136, 4294901760, 4291559424, 4288217088, 4284874752, 4281532416, 4278190318, 4278190301, 4278190267, 4278190250, 4278190216, 4278190199, 4278190165, 4278190148, 4278190114, 4278190097, 4278251008, 4278246656, 4278237952, 4278233600, 4278224896, 4278220544, 4278211840, 4278207488, 4278198784, 4278194432, 4293787648, 4292673536, 4290445312, 4289331200, 4287102976, 4285988864, 4283760640, 4282646528, 4280418304, 4279304192, 4293848814, 4292730333, 4290493371, 4289374890, 4287137928, 4286019447, 4283782485, 4282664004, 4280427042, 4279308561];\n    let i = 8;\n    let chunk;\n    const chunks = [];\n    while (i < data.byteLength) {\n      let id2 = \"\";\n      for (let j = 0; j < 4; j++) {\n        id2 += String.fromCharCode(data.getUint8(i++));\n      }\n      const chunkSize = data.getUint32(i, true);\n      i += 4;\n      i += 4;\n      if (id2 === \"SIZE\") {\n        const x = data.getUint32(i, true);\n        i += 4;\n        const y = data.getUint32(i, true);\n        i += 4;\n        const z = data.getUint32(i, true);\n        i += 4;\n        chunk = {\n          palette: DEFAULT_PALETTE,\n          size: {\n            x,\n            y,\n            z\n          }\n        };\n        chunks.push(chunk);\n        i += chunkSize - 3 * 4;\n      } else if (id2 === \"XYZI\") {\n        const numVoxels = data.getUint32(i, true);\n        i += 4;\n        chunk.data = new Uint8Array(buffer, i, numVoxels * 4);\n        i += numVoxels * 4;\n      } else if (id2 === \"RGBA\") {\n        const palette = [0];\n        for (let j = 0; j < 256; j++) {\n          palette[j + 1] = data.getUint32(i, true);\n          i += 4;\n        }\n        chunk.palette = palette;\n      } else {\n        i += chunkSize;\n      }\n    }\n    return chunks;\n  }\n}\nclass VOXMesh extends Mesh {\n  constructor(chunk) {\n    const data = chunk.data;\n    const size = chunk.size;\n    const palette = chunk.palette;\n    const vertices = [];\n    const colors = [];\n    const nx = [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1];\n    const px = [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0];\n    const py = [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1];\n    const ny = [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0];\n    const nz = [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0];\n    const pz = [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1];\n    function add(tile, x, y, z, r, g, b) {\n      x -= size.x / 2;\n      y -= size.z / 2;\n      z += size.y / 2;\n      for (let i = 0; i < 18; i += 3) {\n        vertices.push(tile[i + 0] + x, tile[i + 1] + y, tile[i + 2] + z);\n        colors.push(r, g, b);\n      }\n    }\n    const offsety = size.x;\n    const offsetz = size.x * size.y;\n    const array = new Uint8Array(size.x * size.y * size.z);\n    for (let j = 0; j < data.length; j += 4) {\n      const x = data[j + 0];\n      const y = data[j + 1];\n      const z = data[j + 2];\n      const index = x + y * offsety + z * offsetz;\n      array[index] = 255;\n    }\n    let hasColors = false;\n    for (let j = 0; j < data.length; j += 4) {\n      const x = data[j + 0];\n      const y = data[j + 1];\n      const z = data[j + 2];\n      const c = data[j + 3];\n      const hex = palette[c];\n      const r = (hex >> 0 & 255) / 255;\n      const g = (hex >> 8 & 255) / 255;\n      const b = (hex >> 16 & 255) / 255;\n      if (r > 0 || g > 0 || b > 0) hasColors = true;\n      const index = x + y * offsety + z * offsetz;\n      if (array[index + 1] === 0 || x === size.x - 1) add(px, x, z, -y, r, g, b);\n      if (array[index - 1] === 0 || x === 0) add(nx, x, z, -y, r, g, b);\n      if (array[index + offsety] === 0 || y === size.y - 1) add(ny, x, z, -y, r, g, b);\n      if (array[index - offsety] === 0 || y === 0) add(py, x, z, -y, r, g, b);\n      if (array[index + offsetz] === 0 || z === size.z - 1) add(pz, x, z, -y, r, g, b);\n      if (array[index - offsetz] === 0 || z === 0) add(nz, x, z, -y, r, g, b);\n    }\n    const geometry = new BufferGeometry();\n    geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    geometry.computeVertexNormals();\n    const material = new MeshStandardMaterial();\n    if (hasColors) {\n      geometry.setAttribute(\"color\", new Float32BufferAttribute(colors, 3));\n      material.vertexColors = true;\n    }\n    super(geometry, material);\n  }\n}\nclass VOXData3DTexture extends Data3DTexture {\n  constructor(chunk) {\n    const data = chunk.data;\n    const size = chunk.size;\n    const offsety = size.x;\n    const offsetz = size.x * size.y;\n    const array = new Uint8Array(size.x * size.y * size.z);\n    for (let j = 0; j < data.length; j += 4) {\n      const x = data[j + 0];\n      const y = data[j + 1];\n      const z = data[j + 2];\n      const index = x + y * offsety + z * offsetz;\n      array[index] = 255;\n    }\n    super(array, size.x, size.y, size.z);\n    this.format = RedFormat;\n    this.minFilter = NearestFilter;\n    this.magFilter = LinearFilter;\n    this.unpackAlignment = 1;\n    this.needsUpdate = true;\n  }\n}\nexport { VOXData3DTexture, VOXLoader, VOXMesh };","map":{"version":3,"sources":["../../src/loaders/VOXLoader.js"],"names":["id"],"mappings":"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","sourcesContent":["import {\n  BufferGeometry,\n  FileLoader,\n  Float32BufferAttribute,\n  Loader,\n  LinearFilter,\n  Mesh,\n  MeshStandardMaterial,\n  NearestFilter,\n  RedFormat,\n} from 'three'\nimport { Data3DTexture } from '../_polyfill/Data3DTexture'\n\nclass VOXLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const scope = this\n\n    const loader = new FileLoader(scope.manager)\n    loader.setPath(scope.path)\n    loader.setResponseType('arraybuffer')\n    loader.setRequestHeader(scope.requestHeader)\n    loader.load(\n      url,\n      function (buffer) {\n        try {\n          onLoad(scope.parse(buffer))\n        } catch (e) {\n          if (onError) {\n            onError(e)\n          } else {\n            console.error(e)\n          }\n\n          scope.manager.itemError(url)\n        }\n      },\n      onProgress,\n      onError,\n    )\n  }\n\n  parse(buffer) {\n    const data = new DataView(buffer)\n\n    const id = data.getUint32(0, true)\n    const version = data.getUint32(4, true)\n\n    if (id !== 542658390 || version !== 150) {\n      console.error('Not a valid VOX file')\n      return\n    }\n\n    const DEFAULT_PALETTE = [\n      0x00000000,\n      0xffffffff,\n      0xffccffff,\n      0xff99ffff,\n      0xff66ffff,\n      0xff33ffff,\n      0xff00ffff,\n      0xffffccff,\n      0xffccccff,\n      0xff99ccff,\n      0xff66ccff,\n      0xff33ccff,\n      0xff00ccff,\n      0xffff99ff,\n      0xffcc99ff,\n      0xff9999ff,\n      0xff6699ff,\n      0xff3399ff,\n      0xff0099ff,\n      0xffff66ff,\n      0xffcc66ff,\n      0xff9966ff,\n      0xff6666ff,\n      0xff3366ff,\n      0xff0066ff,\n      0xffff33ff,\n      0xffcc33ff,\n      0xff9933ff,\n      0xff6633ff,\n      0xff3333ff,\n      0xff0033ff,\n      0xffff00ff,\n      0xffcc00ff,\n      0xff9900ff,\n      0xff6600ff,\n      0xff3300ff,\n      0xff0000ff,\n      0xffffffcc,\n      0xffccffcc,\n      0xff99ffcc,\n      0xff66ffcc,\n      0xff33ffcc,\n      0xff00ffcc,\n      0xffffcccc,\n      0xffcccccc,\n      0xff99cccc,\n      0xff66cccc,\n      0xff33cccc,\n      0xff00cccc,\n      0xffff99cc,\n      0xffcc99cc,\n      0xff9999cc,\n      0xff6699cc,\n      0xff3399cc,\n      0xff0099cc,\n      0xffff66cc,\n      0xffcc66cc,\n      0xff9966cc,\n      0xff6666cc,\n      0xff3366cc,\n      0xff0066cc,\n      0xffff33cc,\n      0xffcc33cc,\n      0xff9933cc,\n      0xff6633cc,\n      0xff3333cc,\n      0xff0033cc,\n      0xffff00cc,\n      0xffcc00cc,\n      0xff9900cc,\n      0xff6600cc,\n      0xff3300cc,\n      0xff0000cc,\n      0xffffff99,\n      0xffccff99,\n      0xff99ff99,\n      0xff66ff99,\n      0xff33ff99,\n      0xff00ff99,\n      0xffffcc99,\n      0xffcccc99,\n      0xff99cc99,\n      0xff66cc99,\n      0xff33cc99,\n      0xff00cc99,\n      0xffff9999,\n      0xffcc9999,\n      0xff999999,\n      0xff669999,\n      0xff339999,\n      0xff009999,\n      0xffff6699,\n      0xffcc6699,\n      0xff996699,\n      0xff666699,\n      0xff336699,\n      0xff006699,\n      0xffff3399,\n      0xffcc3399,\n      0xff993399,\n      0xff663399,\n      0xff333399,\n      0xff003399,\n      0xffff0099,\n      0xffcc0099,\n      0xff990099,\n      0xff660099,\n      0xff330099,\n      0xff000099,\n      0xffffff66,\n      0xffccff66,\n      0xff99ff66,\n      0xff66ff66,\n      0xff33ff66,\n      0xff00ff66,\n      0xffffcc66,\n      0xffcccc66,\n      0xff99cc66,\n      0xff66cc66,\n      0xff33cc66,\n      0xff00cc66,\n      0xffff9966,\n      0xffcc9966,\n      0xff999966,\n      0xff669966,\n      0xff339966,\n      0xff009966,\n      0xffff6666,\n      0xffcc6666,\n      0xff996666,\n      0xff666666,\n      0xff336666,\n      0xff006666,\n      0xffff3366,\n      0xffcc3366,\n      0xff993366,\n      0xff663366,\n      0xff333366,\n      0xff003366,\n      0xffff0066,\n      0xffcc0066,\n      0xff990066,\n      0xff660066,\n      0xff330066,\n      0xff000066,\n      0xffffff33,\n      0xffccff33,\n      0xff99ff33,\n      0xff66ff33,\n      0xff33ff33,\n      0xff00ff33,\n      0xffffcc33,\n      0xffcccc33,\n      0xff99cc33,\n      0xff66cc33,\n      0xff33cc33,\n      0xff00cc33,\n      0xffff9933,\n      0xffcc9933,\n      0xff999933,\n      0xff669933,\n      0xff339933,\n      0xff009933,\n      0xffff6633,\n      0xffcc6633,\n      0xff996633,\n      0xff666633,\n      0xff336633,\n      0xff006633,\n      0xffff3333,\n      0xffcc3333,\n      0xff993333,\n      0xff663333,\n      0xff333333,\n      0xff003333,\n      0xffff0033,\n      0xffcc0033,\n      0xff990033,\n      0xff660033,\n      0xff330033,\n      0xff000033,\n      0xffffff00,\n      0xffccff00,\n      0xff99ff00,\n      0xff66ff00,\n      0xff33ff00,\n      0xff00ff00,\n      0xffffcc00,\n      0xffcccc00,\n      0xff99cc00,\n      0xff66cc00,\n      0xff33cc00,\n      0xff00cc00,\n      0xffff9900,\n      0xffcc9900,\n      0xff999900,\n      0xff669900,\n      0xff339900,\n      0xff009900,\n      0xffff6600,\n      0xffcc6600,\n      0xff996600,\n      0xff666600,\n      0xff336600,\n      0xff006600,\n      0xffff3300,\n      0xffcc3300,\n      0xff993300,\n      0xff663300,\n      0xff333300,\n      0xff003300,\n      0xffff0000,\n      0xffcc0000,\n      0xff990000,\n      0xff660000,\n      0xff330000,\n      0xff0000ee,\n      0xff0000dd,\n      0xff0000bb,\n      0xff0000aa,\n      0xff000088,\n      0xff000077,\n      0xff000055,\n      0xff000044,\n      0xff000022,\n      0xff000011,\n      0xff00ee00,\n      0xff00dd00,\n      0xff00bb00,\n      0xff00aa00,\n      0xff008800,\n      0xff007700,\n      0xff005500,\n      0xff004400,\n      0xff002200,\n      0xff001100,\n      0xffee0000,\n      0xffdd0000,\n      0xffbb0000,\n      0xffaa0000,\n      0xff880000,\n      0xff770000,\n      0xff550000,\n      0xff440000,\n      0xff220000,\n      0xff110000,\n      0xffeeeeee,\n      0xffdddddd,\n      0xffbbbbbb,\n      0xffaaaaaa,\n      0xff888888,\n      0xff777777,\n      0xff555555,\n      0xff444444,\n      0xff222222,\n      0xff111111,\n    ]\n\n    let i = 8\n\n    let chunk\n    const chunks = []\n\n    while (i < data.byteLength) {\n      let id = ''\n\n      for (let j = 0; j < 4; j++) {\n        id += String.fromCharCode(data.getUint8(i++))\n      }\n\n      const chunkSize = data.getUint32(i, true)\n      i += 4\n      i += 4 // childChunks\n\n      if (id === 'SIZE') {\n        const x = data.getUint32(i, true)\n        i += 4\n        const y = data.getUint32(i, true)\n        i += 4\n        const z = data.getUint32(i, true)\n        i += 4\n\n        chunk = {\n          palette: DEFAULT_PALETTE,\n          size: { x: x, y: y, z: z },\n        }\n\n        chunks.push(chunk)\n\n        i += chunkSize - 3 * 4\n      } else if (id === 'XYZI') {\n        const numVoxels = data.getUint32(i, true)\n        i += 4\n        chunk.data = new Uint8Array(buffer, i, numVoxels * 4)\n\n        i += numVoxels * 4\n      } else if (id === 'RGBA') {\n        const palette = [0]\n\n        for (let j = 0; j < 256; j++) {\n          palette[j + 1] = data.getUint32(i, true)\n          i += 4\n        }\n\n        chunk.palette = palette\n      } else {\n        // console.log( id, chunkSize, childChunks );\n\n        i += chunkSize\n      }\n    }\n\n    return chunks\n  }\n}\n\nclass VOXMesh extends Mesh {\n  constructor(chunk) {\n    const data = chunk.data\n    const size = chunk.size\n    const palette = chunk.palette\n\n    //\n\n    const vertices = []\n    const colors = []\n\n    const nx = [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1]\n    const px = [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0]\n    const py = [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1]\n    const ny = [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0]\n    const nz = [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0]\n    const pz = [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1]\n\n    function add(tile, x, y, z, r, g, b) {\n      x -= size.x / 2\n      y -= size.z / 2\n      z += size.y / 2\n\n      for (let i = 0; i < 18; i += 3) {\n        vertices.push(tile[i + 0] + x, tile[i + 1] + y, tile[i + 2] + z)\n        colors.push(r, g, b)\n      }\n    }\n\n    // Store data in a volume for sampling\n\n    const offsety = size.x\n    const offsetz = size.x * size.y\n\n    const array = new Uint8Array(size.x * size.y * size.z)\n\n    for (let j = 0; j < data.length; j += 4) {\n      const x = data[j + 0]\n      const y = data[j + 1]\n      const z = data[j + 2]\n\n      const index = x + y * offsety + z * offsetz\n\n      array[index] = 255\n    }\n\n    // Construct geometry\n\n    let hasColors = false\n\n    for (let j = 0; j < data.length; j += 4) {\n      const x = data[j + 0]\n      const y = data[j + 1]\n      const z = data[j + 2]\n      const c = data[j + 3]\n\n      const hex = palette[c]\n      const r = ((hex >> 0) & 0xff) / 0xff\n      const g = ((hex >> 8) & 0xff) / 0xff\n      const b = ((hex >> 16) & 0xff) / 0xff\n\n      if (r > 0 || g > 0 || b > 0) hasColors = true\n\n      const index = x + y * offsety + z * offsetz\n\n      if (array[index + 1] === 0 || x === size.x - 1) add(px, x, z, -y, r, g, b)\n      if (array[index - 1] === 0 || x === 0) add(nx, x, z, -y, r, g, b)\n      if (array[index + offsety] === 0 || y === size.y - 1) add(ny, x, z, -y, r, g, b)\n      if (array[index - offsety] === 0 || y === 0) add(py, x, z, -y, r, g, b)\n      if (array[index + offsetz] === 0 || z === size.z - 1) add(pz, x, z, -y, r, g, b)\n      if (array[index - offsetz] === 0 || z === 0) add(nz, x, z, -y, r, g, b)\n    }\n\n    const geometry = new BufferGeometry()\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3))\n    geometry.computeVertexNormals()\n\n    const material = new MeshStandardMaterial()\n\n    if (hasColors) {\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3))\n      material.vertexColors = true\n    }\n\n    super(geometry, material)\n  }\n}\n\nclass VOXData3DTexture extends Data3DTexture {\n  constructor(chunk) {\n    const data = chunk.data\n    const size = chunk.size\n\n    const offsety = size.x\n    const offsetz = size.x * size.y\n\n    const array = new Uint8Array(size.x * size.y * size.z)\n\n    for (let j = 0; j < data.length; j += 4) {\n      const x = data[j + 0]\n      const y = data[j + 1]\n      const z = data[j + 2]\n\n      const index = x + y * offsety + z * offsetz\n\n      array[index] = 255\n    }\n\n    super(array, size.x, size.y, size.z)\n\n    this.format = RedFormat\n    this.minFilter = NearestFilter\n    this.magFilter = LinearFilter\n    this.unpackAlignment = 1\n    this.needsUpdate = true\n  }\n}\n\nexport { VOXLoader, VOXMesh, VOXData3DTexture }\n"]},"metadata":{},"sourceType":"module"}