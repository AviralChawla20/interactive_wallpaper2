{"ast":null,"code":"import { Loader } from \"three\";\nimport { GLTFLoader } from \"./GLTFLoader.js\";\nclass VRMLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.gltfLoader = new GLTFLoader(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    this.gltfLoader.load(url, function (gltf) {\n      try {\n        scope.parse(gltf, onLoad);\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  setDRACOLoader(dracoLoader) {\n    this.gltfLoader.setDRACOLoader(dracoLoader);\n    return this;\n  }\n  parse(gltf, onLoad) {\n    onLoad(gltf);\n  }\n}\nexport { VRMLoader };","map":{"version":3,"sources":["../../src/loaders/VRMLoader.js"],"names":[],"mappings":";;AAQA,MAAM,SAAA,SAAkB,MAAA,CAAO;EAC7B,WAAA,CAAY,OAAA,EAAS;IACnB,KAAA,CAAM,OAAO,CAAA;IACb,IAAA,CAAK,UAAA,GAAa,IAAI,UAAA,CAAW,OAAO,CAAA;EACzC;EAED,IAAA,CAAK,GAAA,EAAK,MAAA,EAAQ,UAAA,EAAY,OAAA,EAAS;IACrC,MAAM,KAAA,GAAQ,IAAA;IAEd,IAAA,CAAK,UAAA,CAAW,IAAA,CACd,GAAA,EACA,UAAU,IAAA,EAAM;MACd,IAAI;QACF,KAAA,CAAM,KAAA,CAAM,IAAA,EAAM,MAAM,CAAA;MACzB,CAAA,CAAA,OAAQ,CAAA,EAAP;QACA,IAAI,OAAA,EAAS;UACX,OAAA,CAAQ,CAAC,CAAA;QACrB,CAAA,MAAiB;UACL,OAAA,CAAQ,KAAA,CAAM,CAAC,CAAA;QAChB;QAED,KAAA,CAAM,OAAA,CAAQ,SAAA,CAAU,GAAG,CAAA;MAC5B;IACF,CAAA,EACD,UAAA,EACA,OACD,CAAA;EACF;EAED,cAAA,CAAe,WAAA,EAAa;IAC1B,IAAA,CAAK,UAAA,CAAW,cAAA,CAAe,WAAW,CAAA;IAC1C,OAAO,IAAA;EACR;EAED,KAAA,CAAM,IAAA,EAAM,MAAA,EAAQ;IAOlB,MAAA,CAAO,IAAI,CAAA;EACZ;AACH","sourcesContent":["import { Loader } from 'three'\nimport { GLTFLoader } from '../loaders/GLTFLoader.js'\n\n// VRM Specification: https://dwango.github.io/vrm/vrm_spec/\n//\n// VRM is based on glTF 2.0 and VRM extension is defined\n// in top-level json.extensions.VRM\n\nclass VRMLoader extends Loader {\n  constructor(manager) {\n    super(manager)\n    this.gltfLoader = new GLTFLoader(manager)\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this\n\n    this.gltfLoader.load(\n      url,\n      function (gltf) {\n        try {\n          scope.parse(gltf, onLoad)\n        } catch (e) {\n          if (onError) {\n            onError(e)\n          } else {\n            console.error(e)\n          }\n\n          scope.manager.itemError(url)\n        }\n      },\n      onProgress,\n      onError,\n    )\n  }\n\n  setDRACOLoader(dracoLoader) {\n    this.gltfLoader.setDRACOLoader(dracoLoader)\n    return this\n  }\n\n  parse(gltf, onLoad) {\n    // const gltfParser = gltf.parser;\n    // const gltfExtensions = gltf.userData.gltfExtensions || {};\n    // const vrmExtension = gltfExtensions.VRM || {};\n\n    // handle VRM Extension here\n\n    onLoad(gltf)\n  }\n}\n\nexport { VRMLoader }\n"]},"metadata":{},"sourceType":"module"}