{"ast":null,"code":"import { Line, BufferGeometry, BufferAttribute, LineBasicMaterial, MathUtils } from \"three\";\nclass PositionalAudioHelper extends Line {\n  constructor(audio, range = 1, divisionsInnerAngle = 16, divisionsOuterAngle = 2) {\n    const geometry = new BufferGeometry();\n    const divisions = divisionsInnerAngle + divisionsOuterAngle * 2;\n    const positions = new Float32Array((divisions * 3 + 3) * 3);\n    geometry.setAttribute(\"position\", new BufferAttribute(positions, 3));\n    const materialInnerAngle = new LineBasicMaterial({\n      color: 65280\n    });\n    const materialOuterAngle = new LineBasicMaterial({\n      color: 16776960\n    });\n    super(geometry, [materialOuterAngle, materialInnerAngle]);\n    this.type = \"PositionalAudioHelper\";\n    this.audio = audio;\n    this.range = range;\n    this.divisionsInnerAngle = divisionsInnerAngle;\n    this.divisionsOuterAngle = divisionsOuterAngle;\n    this.update();\n  }\n  update() {\n    const audio = this.audio;\n    const range = this.range;\n    const divisionsInnerAngle = this.divisionsInnerAngle;\n    const divisionsOuterAngle = this.divisionsOuterAngle;\n    const coneInnerAngle = MathUtils.degToRad(audio.panner.coneInnerAngle);\n    const coneOuterAngle = MathUtils.degToRad(audio.panner.coneOuterAngle);\n    const halfConeInnerAngle = coneInnerAngle / 2;\n    const halfConeOuterAngle = coneOuterAngle / 2;\n    let start = 0;\n    let count = 0;\n    let i, stride;\n    const geometry = this.geometry;\n    const positionAttribute = geometry.attributes.position;\n    geometry.clearGroups();\n    function generateSegment(from, to, divisions, materialIndex) {\n      const step = (to - from) / divisions;\n      positionAttribute.setXYZ(start, 0, 0, 0);\n      count++;\n      for (i = from; i < to; i += step) {\n        stride = start + count;\n        positionAttribute.setXYZ(stride, Math.sin(i) * range, 0, Math.cos(i) * range);\n        positionAttribute.setXYZ(stride + 1, Math.sin(Math.min(i + step, to)) * range, 0, Math.cos(Math.min(i + step, to)) * range);\n        positionAttribute.setXYZ(stride + 2, 0, 0, 0);\n        count += 3;\n      }\n      geometry.addGroup(start, count, materialIndex);\n      start += count;\n      count = 0;\n    }\n    generateSegment(-halfConeOuterAngle, -halfConeInnerAngle, divisionsOuterAngle, 0);\n    generateSegment(-halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1);\n    generateSegment(halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0);\n    positionAttribute.needsUpdate = true;\n    if (coneInnerAngle === coneOuterAngle) this.material[0].visible = false;\n  }\n  dispose() {\n    this.geometry.dispose();\n    this.material[0].dispose();\n    this.material[1].dispose();\n  }\n}\nexport { PositionalAudioHelper };","map":{"version":3,"sources":["../../src/helpers/PositionalAudioHelper.js"],"names":[],"mappings":"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","sourcesContent":["import { BufferGeometry, BufferAttribute, LineBasicMaterial, Line, MathUtils } from 'three'\n\nclass PositionalAudioHelper extends Line {\n  constructor(audio, range = 1, divisionsInnerAngle = 16, divisionsOuterAngle = 2) {\n    const geometry = new BufferGeometry()\n    const divisions = divisionsInnerAngle + divisionsOuterAngle * 2\n    const positions = new Float32Array((divisions * 3 + 3) * 3)\n    geometry.setAttribute('position', new BufferAttribute(positions, 3))\n\n    const materialInnerAngle = new LineBasicMaterial({ color: 0x00ff00 })\n    const materialOuterAngle = new LineBasicMaterial({ color: 0xffff00 })\n\n    super(geometry, [materialOuterAngle, materialInnerAngle])\n\n    this.type = 'PositionalAudioHelper'\n    this.audio = audio\n    this.range = range\n    this.divisionsInnerAngle = divisionsInnerAngle\n    this.divisionsOuterAngle = divisionsOuterAngle\n\n    this.update()\n  }\n\n  update() {\n    const audio = this.audio\n    const range = this.range\n    const divisionsInnerAngle = this.divisionsInnerAngle\n    const divisionsOuterAngle = this.divisionsOuterAngle\n\n    const coneInnerAngle = MathUtils.degToRad(audio.panner.coneInnerAngle)\n    const coneOuterAngle = MathUtils.degToRad(audio.panner.coneOuterAngle)\n\n    const halfConeInnerAngle = coneInnerAngle / 2\n    const halfConeOuterAngle = coneOuterAngle / 2\n\n    let start = 0\n    let count = 0\n    let i, stride\n\n    const geometry = this.geometry\n    const positionAttribute = geometry.attributes.position\n\n    geometry.clearGroups()\n\n    //\n\n    function generateSegment(from, to, divisions, materialIndex) {\n      const step = (to - from) / divisions\n\n      positionAttribute.setXYZ(start, 0, 0, 0)\n      count++\n\n      for (i = from; i < to; i += step) {\n        stride = start + count\n\n        positionAttribute.setXYZ(stride, Math.sin(i) * range, 0, Math.cos(i) * range)\n        positionAttribute.setXYZ(\n          stride + 1,\n          Math.sin(Math.min(i + step, to)) * range,\n          0,\n          Math.cos(Math.min(i + step, to)) * range,\n        )\n        positionAttribute.setXYZ(stride + 2, 0, 0, 0)\n\n        count += 3\n      }\n\n      geometry.addGroup(start, count, materialIndex)\n\n      start += count\n      count = 0\n    }\n\n    //\n\n    generateSegment(-halfConeOuterAngle, -halfConeInnerAngle, divisionsOuterAngle, 0)\n    generateSegment(-halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1)\n    generateSegment(halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0)\n\n    //\n\n    positionAttribute.needsUpdate = true\n\n    if (coneInnerAngle === coneOuterAngle) this.material[0].visible = false\n  }\n\n  dispose() {\n    this.geometry.dispose()\n    this.material[0].dispose()\n    this.material[1].dispose()\n  }\n}\n\nexport { PositionalAudioHelper }\n"]},"metadata":{},"sourceType":"module"}