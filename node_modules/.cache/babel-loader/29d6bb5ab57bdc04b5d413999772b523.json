{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { defaultParameters } from \"./defaultParameters\";\nexport const useParameters = func => {\n  _s();\n  const prevParameters = useRef({});\n  const [parameters, setParameters] = useState(null);\n  const [error, setError] = useState(false);\n  const onUpdateParameters = useCallback((newParameters, defaultPar = false) => {\n    setParameters(prev => {\n      if (prev) prevParameters.current = {\n        ...prev\n      };\n      return {\n        ...newParameters,\n        defaultPar,\n        id: Date.now()\n      };\n    });\n  }, []);\n  const onResetParameters = useCallback(() => {\n    onUpdateParameters(defaultParameters[func], true);\n  }, [onUpdateParameters, func]);\n  const onError = useCallback(() => {\n    setError(true);\n  }, []);\n  const onClearError = useCallback(() => {\n    setError(false);\n    setParameters(prevParameters.current);\n  }, []);\n  useEffect(() => {\n    onResetParameters();\n  }, [onResetParameters, func]);\n  return [parameters, error, onUpdateParameters, onResetParameters, onError, onClearError];\n};\n_s(useParameters, \"xTA65k+aqESiFilFmHm8LuN4BdA=\");","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","defaultParameters","useParameters","func","_s","prevParameters","parameters","setParameters","error","setError","onUpdateParameters","newParameters","defaultPar","prev","current","id","Date","now","onResetParameters","onError","onClearError"],"sources":["C:/Users/Aviral Chawla/Downloads/Attractors-buffer/Attractors-buffer/src/Parameters/useParameters.js"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { defaultParameters } from \"./defaultParameters\";\r\n\r\nexport const useParameters = (func) => {\r\n  const prevParameters = useRef({});\r\n  const [parameters, setParameters] = useState(null);\r\n  const [error, setError] = useState(false);\r\n  const onUpdateParameters = useCallback(\r\n    (newParameters, defaultPar = false) => {\r\n      setParameters((prev) => {\r\n        if (prev) prevParameters.current = { ...prev };\r\n        return { ...newParameters, defaultPar, id: Date.now() };\r\n      });\r\n    },\r\n    []\r\n  );\r\n\r\n  const onResetParameters = useCallback(() => {\r\n    onUpdateParameters(defaultParameters[func], true);\r\n  }, [onUpdateParameters, func]);\r\n\r\n  const onError = useCallback(() => {\r\n    setError(true);\r\n  }, []);\r\n\r\n  const onClearError = useCallback(() => {\r\n    setError(false);\r\n    setParameters(prevParameters.current);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    onResetParameters();\r\n  }, [onResetParameters, func]);\r\n\r\n  return [\r\n    parameters,\r\n    error,\r\n    onUpdateParameters,\r\n    onResetParameters,\r\n    onError,\r\n    onClearError,\r\n  ];\r\n};\r\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAChE,SAASC,iBAAiB,QAAQ,qBAAqB;AAEvD,OAAO,MAAMC,aAAa,GAAIC,IAAI,IAAK;EAAAC,EAAA;EACrC,MAAMC,cAAc,GAAGN,MAAM,CAAC,CAAC,CAAC,CAAC;EACjC,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAMU,kBAAkB,GAAGb,WAAW,CACpC,CAACc,aAAa,EAAEC,UAAU,GAAG,KAAK,KAAK;IACrCL,aAAa,CAAEM,IAAI,IAAK;MACtB,IAAIA,IAAI,EAAER,cAAc,CAACS,OAAO,GAAG;QAAE,GAAGD;MAAK,CAAC;MAC9C,OAAO;QAAE,GAAGF,aAAa;QAAEC,UAAU;QAAEG,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC;MAAE,CAAC;IACzD,CAAC,CAAC;EACJ,CAAC,EACD,EACF,CAAC;EAED,MAAMC,iBAAiB,GAAGrB,WAAW,CAAC,MAAM;IAC1Ca,kBAAkB,CAACT,iBAAiB,CAACE,IAAI,CAAC,EAAE,IAAI,CAAC;EACnD,CAAC,EAAE,CAACO,kBAAkB,EAAEP,IAAI,CAAC,CAAC;EAE9B,MAAMgB,OAAO,GAAGtB,WAAW,CAAC,MAAM;IAChCY,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMW,YAAY,GAAGvB,WAAW,CAAC,MAAM;IACrCY,QAAQ,CAAC,KAAK,CAAC;IACfF,aAAa,CAACF,cAAc,CAACS,OAAO,CAAC;EACvC,CAAC,EAAE,EAAE,CAAC;EAENhB,SAAS,CAAC,MAAM;IACdoB,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,CAACA,iBAAiB,EAAEf,IAAI,CAAC,CAAC;EAE7B,OAAO,CACLG,UAAU,EACVE,KAAK,EACLE,kBAAkB,EAClBQ,iBAAiB,EACjBC,OAAO,EACPC,YAAY,CACb;AACH,CAAC;AAAChB,EAAA,CAvCWF,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module"}