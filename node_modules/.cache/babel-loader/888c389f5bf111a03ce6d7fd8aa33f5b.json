{"ast":null,"code":"import { Loader, FileLoader, Group, MeshPhongMaterial, Float32BufferAttribute, Color, BufferGeometry, Mesh } from \"three\";\nimport { unzipSync } from \"fflate\";\nimport { decodeText } from \"../_polyfill/LoaderUtils.js\";\nclass AMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(data) {\n    function loadDocument(data2) {\n      let view = new DataView(data2);\n      const magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n      if (magic === \"PK\") {\n        let zip = null;\n        let file = null;\n        console.log(\"THREE.AMFLoader: Loading Zip\");\n        try {\n          zip = unzipSync(new Uint8Array(data2));\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.log(\"THREE.AMFLoader: fflate missing and file is compressed.\");\n            return null;\n          }\n        }\n        for (file in zip) {\n          if (file.toLowerCase().substr(-4) === \".amf\") {\n            break;\n          }\n        }\n        console.log(\"THREE.AMFLoader: Trying to load file asset: \" + file);\n        view = new DataView(zip[file].buffer);\n      }\n      const fileText = decodeText(view);\n      const xmlData2 = new DOMParser().parseFromString(fileText, \"application/xml\");\n      if (xmlData2.documentElement.nodeName.toLowerCase() !== \"amf\") {\n        console.log(\"THREE.AMFLoader: Error loading AMF - no AMF document found.\");\n        return null;\n      }\n      return xmlData2;\n    }\n    function loadDocumentScale(node) {\n      let scale = 1;\n      let unit = \"millimeter\";\n      if (node.documentElement.attributes.unit !== void 0) {\n        unit = node.documentElement.attributes.unit.value.toLowerCase();\n      }\n      const scaleUnits = {\n        millimeter: 1,\n        inch: 25.4,\n        feet: 304.8,\n        meter: 1e3,\n        micron: 1e-3\n      };\n      if (scaleUnits[unit] !== void 0) {\n        scale = scaleUnits[unit];\n      }\n      console.log(\"THREE.AMFLoader: Unit scale: \" + scale);\n      return scale;\n    }\n    function loadMaterials(node) {\n      let matName = \"AMF Material\";\n      const matId = node.attributes.id.textContent;\n      let color = {\n        r: 1,\n        g: 1,\n        b: 1,\n        a: 1\n      };\n      let loadedMaterial = null;\n      for (let i2 = 0; i2 < node.childNodes.length; i2++) {\n        const matChildEl = node.childNodes[i2];\n        if (matChildEl.nodeName === \"metadata\" && matChildEl.attributes.type !== void 0) {\n          if (matChildEl.attributes.type.value === \"name\") {\n            matName = matChildEl.textContent;\n          }\n        } else if (matChildEl.nodeName === \"color\") {\n          color = loadColor(matChildEl);\n        }\n      }\n      loadedMaterial = new MeshPhongMaterial({\n        flatShading: true,\n        color: new Color(color.r, color.g, color.b),\n        name: matName\n      });\n      if (color.a !== 1) {\n        loadedMaterial.transparent = true;\n        loadedMaterial.opacity = color.a;\n      }\n      return {\n        id: matId,\n        material: loadedMaterial\n      };\n    }\n    function loadColor(node) {\n      const color = {\n        r: 1,\n        g: 1,\n        b: 1,\n        a: 1\n      };\n      for (let i2 = 0; i2 < node.childNodes.length; i2++) {\n        const matColor = node.childNodes[i2];\n        if (matColor.nodeName === \"r\") {\n          color.r = matColor.textContent;\n        } else if (matColor.nodeName === \"g\") {\n          color.g = matColor.textContent;\n        } else if (matColor.nodeName === \"b\") {\n          color.b = matColor.textContent;\n        } else if (matColor.nodeName === \"a\") {\n          color.a = matColor.textContent;\n        }\n      }\n      return color;\n    }\n    function loadMeshVolume(node) {\n      const volume = {\n        name: \"\",\n        triangles: [],\n        materialid: null\n      };\n      let currVolumeNode = node.firstElementChild;\n      if (node.attributes.materialid !== void 0) {\n        volume.materialId = node.attributes.materialid.nodeValue;\n      }\n      while (currVolumeNode) {\n        if (currVolumeNode.nodeName === \"metadata\") {\n          if (currVolumeNode.attributes.type !== void 0) {\n            if (currVolumeNode.attributes.type.value === \"name\") {\n              volume.name = currVolumeNode.textContent;\n            }\n          }\n        } else if (currVolumeNode.nodeName === \"triangle\") {\n          const v1 = currVolumeNode.getElementsByTagName(\"v1\")[0].textContent;\n          const v2 = currVolumeNode.getElementsByTagName(\"v2\")[0].textContent;\n          const v3 = currVolumeNode.getElementsByTagName(\"v3\")[0].textContent;\n          volume.triangles.push(v1, v2, v3);\n        }\n        currVolumeNode = currVolumeNode.nextElementSibling;\n      }\n      return volume;\n    }\n    function loadMeshVertices(node) {\n      const vertArray = [];\n      const normalArray = [];\n      let currVerticesNode = node.firstElementChild;\n      while (currVerticesNode) {\n        if (currVerticesNode.nodeName === \"vertex\") {\n          let vNode = currVerticesNode.firstElementChild;\n          while (vNode) {\n            if (vNode.nodeName === \"coordinates\") {\n              const x = vNode.getElementsByTagName(\"x\")[0].textContent;\n              const y = vNode.getElementsByTagName(\"y\")[0].textContent;\n              const z = vNode.getElementsByTagName(\"z\")[0].textContent;\n              vertArray.push(x, y, z);\n            } else if (vNode.nodeName === \"normal\") {\n              const nx = vNode.getElementsByTagName(\"nx\")[0].textContent;\n              const ny = vNode.getElementsByTagName(\"ny\")[0].textContent;\n              const nz = vNode.getElementsByTagName(\"nz\")[0].textContent;\n              normalArray.push(nx, ny, nz);\n            }\n            vNode = vNode.nextElementSibling;\n          }\n        }\n        currVerticesNode = currVerticesNode.nextElementSibling;\n      }\n      return {\n        vertices: vertArray,\n        normals: normalArray\n      };\n    }\n    function loadObject(node) {\n      const objId = node.attributes.id.textContent;\n      const loadedObject = {\n        name: \"amfobject\",\n        meshes: []\n      };\n      let currColor = null;\n      let currObjNode = node.firstElementChild;\n      while (currObjNode) {\n        if (currObjNode.nodeName === \"metadata\") {\n          if (currObjNode.attributes.type !== void 0) {\n            if (currObjNode.attributes.type.value === \"name\") {\n              loadedObject.name = currObjNode.textContent;\n            }\n          }\n        } else if (currObjNode.nodeName === \"color\") {\n          currColor = loadColor(currObjNode);\n        } else if (currObjNode.nodeName === \"mesh\") {\n          let currMeshNode = currObjNode.firstElementChild;\n          const mesh = {\n            vertices: [],\n            normals: [],\n            volumes: [],\n            color: currColor\n          };\n          while (currMeshNode) {\n            if (currMeshNode.nodeName === \"vertices\") {\n              const loadedVertices = loadMeshVertices(currMeshNode);\n              mesh.normals = mesh.normals.concat(loadedVertices.normals);\n              mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n            } else if (currMeshNode.nodeName === \"volume\") {\n              mesh.volumes.push(loadMeshVolume(currMeshNode));\n            }\n            currMeshNode = currMeshNode.nextElementSibling;\n          }\n          loadedObject.meshes.push(mesh);\n        }\n        currObjNode = currObjNode.nextElementSibling;\n      }\n      return {\n        id: objId,\n        obj: loadedObject\n      };\n    }\n    const xmlData = loadDocument(data);\n    let amfName = \"\";\n    let amfAuthor = \"\";\n    const amfScale = loadDocumentScale(xmlData);\n    const amfMaterials = {};\n    const amfObjects = {};\n    const childNodes = xmlData.documentElement.childNodes;\n    let i, j;\n    for (i = 0; i < childNodes.length; i++) {\n      const child = childNodes[i];\n      if (child.nodeName === \"metadata\") {\n        if (child.attributes.type !== void 0) {\n          if (child.attributes.type.value === \"name\") {\n            amfName = child.textContent;\n          } else if (child.attributes.type.value === \"author\") {\n            amfAuthor = child.textContent;\n          }\n        }\n      } else if (child.nodeName === \"material\") {\n        const loadedMaterial = loadMaterials(child);\n        amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n      } else if (child.nodeName === \"object\") {\n        const loadedObject = loadObject(child);\n        amfObjects[loadedObject.id] = loadedObject.obj;\n      }\n    }\n    const sceneObject = new Group();\n    const defaultMaterial = new MeshPhongMaterial({\n      color: 11184895,\n      flatShading: true\n    });\n    sceneObject.name = amfName;\n    sceneObject.userData.author = amfAuthor;\n    sceneObject.userData.loader = \"AMF\";\n    for (const id in amfObjects) {\n      const part = amfObjects[id];\n      const meshes = part.meshes;\n      const newObject = new Group();\n      newObject.name = part.name || \"\";\n      for (i = 0; i < meshes.length; i++) {\n        let objDefaultMaterial = defaultMaterial;\n        const mesh = meshes[i];\n        const vertices = new Float32BufferAttribute(mesh.vertices, 3);\n        let normals = null;\n        if (mesh.normals.length) {\n          normals = new Float32BufferAttribute(mesh.normals, 3);\n        }\n        if (mesh.color) {\n          const color = mesh.color;\n          objDefaultMaterial = defaultMaterial.clone();\n          objDefaultMaterial.color = new Color(color.r, color.g, color.b);\n          if (color.a !== 1) {\n            objDefaultMaterial.transparent = true;\n            objDefaultMaterial.opacity = color.a;\n          }\n        }\n        const volumes = mesh.volumes;\n        for (j = 0; j < volumes.length; j++) {\n          const volume = volumes[j];\n          const newGeometry = new BufferGeometry();\n          let material = objDefaultMaterial;\n          newGeometry.setIndex(volume.triangles);\n          newGeometry.setAttribute(\"position\", vertices.clone());\n          if (normals) {\n            newGeometry.setAttribute(\"normal\", normals.clone());\n          }\n          if (amfMaterials[volume.materialId] !== void 0) {\n            material = amfMaterials[volume.materialId];\n          }\n          newGeometry.scale(amfScale, amfScale, amfScale);\n          newObject.add(new Mesh(newGeometry, material.clone()));\n        }\n      }\n      sceneObject.add(newObject);\n    }\n    return sceneObject;\n  }\n}\nexport { AMFLoader };","map":{"version":3,"sources":["../../src/loaders/AMFLoader.js"],"names":["data","xmlData","i"],"mappings":"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","sourcesContent":["import {\n  BufferGeometry,\n  Color,\n  FileLoader,\n  Float32BufferAttribute,\n  Group,\n  Loader,\n  LoaderUtils,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three'\nimport { unzipSync } from 'fflate'\nimport { decodeText } from '../_polyfill/LoaderUtils'\n\n/**\n * Description: Early release of an AMF Loader following the pattern of the\n * example loaders in the three.js project.\n *\n * Usage:\n *\tconst loader = new AMFLoader();\n *\tloader.load('/path/to/project.amf', function(objecttree) {\n *\t\tscene.add(objecttree);\n *\t});\n *\n * Materials now supported, material colors supported\n * Zip support, requires fflate\n * No constellation support (yet)!\n *\n */\n\nclass AMFLoader extends Loader {\n  constructor(manager) {\n    super(manager)\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this\n\n    const loader = new FileLoader(scope.manager)\n    loader.setPath(scope.path)\n    loader.setResponseType('arraybuffer')\n    loader.setRequestHeader(scope.requestHeader)\n    loader.setWithCredentials(scope.withCredentials)\n    loader.load(\n      url,\n      function (text) {\n        try {\n          onLoad(scope.parse(text))\n        } catch (e) {\n          if (onError) {\n            onError(e)\n          } else {\n            console.error(e)\n          }\n\n          scope.manager.itemError(url)\n        }\n      },\n      onProgress,\n      onError,\n    )\n  }\n\n  parse(data) {\n    function loadDocument(data) {\n      let view = new DataView(data)\n      const magic = String.fromCharCode(view.getUint8(0), view.getUint8(1))\n\n      if (magic === 'PK') {\n        let zip = null\n        let file = null\n\n        console.log('THREE.AMFLoader: Loading Zip')\n\n        try {\n          zip = unzipSync(new Uint8Array(data))\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.log('THREE.AMFLoader: fflate missing and file is compressed.')\n            return null\n          }\n        }\n\n        for (file in zip) {\n          if (file.toLowerCase().substr(-4) === '.amf') {\n            break\n          }\n        }\n\n        console.log('THREE.AMFLoader: Trying to load file asset: ' + file)\n        view = new DataView(zip[file].buffer)\n      }\n\n      const fileText = decodeText(view)\n      const xmlData = new DOMParser().parseFromString(fileText, 'application/xml')\n\n      if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {\n        console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.')\n        return null\n      }\n\n      return xmlData\n    }\n\n    function loadDocumentScale(node) {\n      let scale = 1.0\n      let unit = 'millimeter'\n\n      if (node.documentElement.attributes.unit !== undefined) {\n        unit = node.documentElement.attributes.unit.value.toLowerCase()\n      }\n\n      const scaleUnits = {\n        millimeter: 1.0,\n        inch: 25.4,\n        feet: 304.8,\n        meter: 1000.0,\n        micron: 0.001,\n      }\n\n      if (scaleUnits[unit] !== undefined) {\n        scale = scaleUnits[unit]\n      }\n\n      console.log('THREE.AMFLoader: Unit scale: ' + scale)\n      return scale\n    }\n\n    function loadMaterials(node) {\n      let matName = 'AMF Material'\n      const matId = node.attributes.id.textContent\n      let color = { r: 1.0, g: 1.0, b: 1.0, a: 1.0 }\n\n      let loadedMaterial = null\n\n      for (let i = 0; i < node.childNodes.length; i++) {\n        const matChildEl = node.childNodes[i]\n\n        if (matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined) {\n          if (matChildEl.attributes.type.value === 'name') {\n            matName = matChildEl.textContent\n          }\n        } else if (matChildEl.nodeName === 'color') {\n          color = loadColor(matChildEl)\n        }\n      }\n\n      loadedMaterial = new MeshPhongMaterial({\n        flatShading: true,\n        color: new Color(color.r, color.g, color.b),\n        name: matName,\n      })\n\n      if (color.a !== 1.0) {\n        loadedMaterial.transparent = true\n        loadedMaterial.opacity = color.a\n      }\n\n      return { id: matId, material: loadedMaterial }\n    }\n\n    function loadColor(node) {\n      const color = { r: 1.0, g: 1.0, b: 1.0, a: 1.0 }\n\n      for (let i = 0; i < node.childNodes.length; i++) {\n        const matColor = node.childNodes[i]\n\n        if (matColor.nodeName === 'r') {\n          color.r = matColor.textContent\n        } else if (matColor.nodeName === 'g') {\n          color.g = matColor.textContent\n        } else if (matColor.nodeName === 'b') {\n          color.b = matColor.textContent\n        } else if (matColor.nodeName === 'a') {\n          color.a = matColor.textContent\n        }\n      }\n\n      return color\n    }\n\n    function loadMeshVolume(node) {\n      const volume = { name: '', triangles: [], materialid: null }\n\n      let currVolumeNode = node.firstElementChild\n\n      if (node.attributes.materialid !== undefined) {\n        volume.materialId = node.attributes.materialid.nodeValue\n      }\n\n      while (currVolumeNode) {\n        if (currVolumeNode.nodeName === 'metadata') {\n          if (currVolumeNode.attributes.type !== undefined) {\n            if (currVolumeNode.attributes.type.value === 'name') {\n              volume.name = currVolumeNode.textContent\n            }\n          }\n        } else if (currVolumeNode.nodeName === 'triangle') {\n          const v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent\n          const v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent\n          const v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent\n\n          volume.triangles.push(v1, v2, v3)\n        }\n\n        currVolumeNode = currVolumeNode.nextElementSibling\n      }\n\n      return volume\n    }\n\n    function loadMeshVertices(node) {\n      const vertArray = []\n      const normalArray = []\n      let currVerticesNode = node.firstElementChild\n\n      while (currVerticesNode) {\n        if (currVerticesNode.nodeName === 'vertex') {\n          let vNode = currVerticesNode.firstElementChild\n\n          while (vNode) {\n            if (vNode.nodeName === 'coordinates') {\n              const x = vNode.getElementsByTagName('x')[0].textContent\n              const y = vNode.getElementsByTagName('y')[0].textContent\n              const z = vNode.getElementsByTagName('z')[0].textContent\n\n              vertArray.push(x, y, z)\n            } else if (vNode.nodeName === 'normal') {\n              const nx = vNode.getElementsByTagName('nx')[0].textContent\n              const ny = vNode.getElementsByTagName('ny')[0].textContent\n              const nz = vNode.getElementsByTagName('nz')[0].textContent\n\n              normalArray.push(nx, ny, nz)\n            }\n\n            vNode = vNode.nextElementSibling\n          }\n        }\n\n        currVerticesNode = currVerticesNode.nextElementSibling\n      }\n\n      return { vertices: vertArray, normals: normalArray }\n    }\n\n    function loadObject(node) {\n      const objId = node.attributes.id.textContent\n      const loadedObject = { name: 'amfobject', meshes: [] }\n      let currColor = null\n      let currObjNode = node.firstElementChild\n\n      while (currObjNode) {\n        if (currObjNode.nodeName === 'metadata') {\n          if (currObjNode.attributes.type !== undefined) {\n            if (currObjNode.attributes.type.value === 'name') {\n              loadedObject.name = currObjNode.textContent\n            }\n          }\n        } else if (currObjNode.nodeName === 'color') {\n          currColor = loadColor(currObjNode)\n        } else if (currObjNode.nodeName === 'mesh') {\n          let currMeshNode = currObjNode.firstElementChild\n          const mesh = { vertices: [], normals: [], volumes: [], color: currColor }\n\n          while (currMeshNode) {\n            if (currMeshNode.nodeName === 'vertices') {\n              const loadedVertices = loadMeshVertices(currMeshNode)\n\n              mesh.normals = mesh.normals.concat(loadedVertices.normals)\n              mesh.vertices = mesh.vertices.concat(loadedVertices.vertices)\n            } else if (currMeshNode.nodeName === 'volume') {\n              mesh.volumes.push(loadMeshVolume(currMeshNode))\n            }\n\n            currMeshNode = currMeshNode.nextElementSibling\n          }\n\n          loadedObject.meshes.push(mesh)\n        }\n\n        currObjNode = currObjNode.nextElementSibling\n      }\n\n      return { id: objId, obj: loadedObject }\n    }\n\n    const xmlData = loadDocument(data)\n    let amfName = ''\n    let amfAuthor = ''\n    const amfScale = loadDocumentScale(xmlData)\n    const amfMaterials = {}\n    const amfObjects = {}\n    const childNodes = xmlData.documentElement.childNodes\n\n    let i, j\n\n    for (i = 0; i < childNodes.length; i++) {\n      const child = childNodes[i]\n\n      if (child.nodeName === 'metadata') {\n        if (child.attributes.type !== undefined) {\n          if (child.attributes.type.value === 'name') {\n            amfName = child.textContent\n          } else if (child.attributes.type.value === 'author') {\n            amfAuthor = child.textContent\n          }\n        }\n      } else if (child.nodeName === 'material') {\n        const loadedMaterial = loadMaterials(child)\n\n        amfMaterials[loadedMaterial.id] = loadedMaterial.material\n      } else if (child.nodeName === 'object') {\n        const loadedObject = loadObject(child)\n\n        amfObjects[loadedObject.id] = loadedObject.obj\n      }\n    }\n\n    const sceneObject = new Group()\n    const defaultMaterial = new MeshPhongMaterial({ color: 0xaaaaff, flatShading: true })\n\n    sceneObject.name = amfName\n    sceneObject.userData.author = amfAuthor\n    sceneObject.userData.loader = 'AMF'\n\n    for (const id in amfObjects) {\n      const part = amfObjects[id]\n      const meshes = part.meshes\n      const newObject = new Group()\n      newObject.name = part.name || ''\n\n      for (i = 0; i < meshes.length; i++) {\n        let objDefaultMaterial = defaultMaterial\n        const mesh = meshes[i]\n        const vertices = new Float32BufferAttribute(mesh.vertices, 3)\n        let normals = null\n\n        if (mesh.normals.length) {\n          normals = new Float32BufferAttribute(mesh.normals, 3)\n        }\n\n        if (mesh.color) {\n          const color = mesh.color\n\n          objDefaultMaterial = defaultMaterial.clone()\n          objDefaultMaterial.color = new Color(color.r, color.g, color.b)\n\n          if (color.a !== 1.0) {\n            objDefaultMaterial.transparent = true\n            objDefaultMaterial.opacity = color.a\n          }\n        }\n\n        const volumes = mesh.volumes\n\n        for (j = 0; j < volumes.length; j++) {\n          const volume = volumes[j]\n          const newGeometry = new BufferGeometry()\n          let material = objDefaultMaterial\n\n          newGeometry.setIndex(volume.triangles)\n          newGeometry.setAttribute('position', vertices.clone())\n\n          if (normals) {\n            newGeometry.setAttribute('normal', normals.clone())\n          }\n\n          if (amfMaterials[volume.materialId] !== undefined) {\n            material = amfMaterials[volume.materialId]\n          }\n\n          newGeometry.scale(amfScale, amfScale, amfScale)\n          newObject.add(new Mesh(newGeometry, material.clone()))\n        }\n      }\n\n      sceneObject.add(newObject)\n    }\n\n    return sceneObject\n  }\n}\n\nexport { AMFLoader }\n"]},"metadata":{},"sourceType":"module"}