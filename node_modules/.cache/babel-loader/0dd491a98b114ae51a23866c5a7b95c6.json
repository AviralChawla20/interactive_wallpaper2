{"ast":null,"code":"import { BufferAttribute, Matrix4, Vector3, Matrix3, MeshPhongMaterial, UniformsUtils, ShaderLib, ShaderChunk, REVISION } from \"three\";\nvar GeometryCompressionUtils = {\n  /**\n   * Make the input mesh.geometry's normal attribute encoded and compressed by 3 different methods.\n   * Also will change the mesh.material to `PackedPhongMaterial` which let the vertex shader program decode the normal data.\n   *\n   * @param {THREE.Mesh} mesh\n   * @param {String} encodeMethod\t\t\"DEFAULT\" || \"OCT1Byte\" || \"OCT2Byte\" || \"ANGLES\"\n   *\n   */\n  compressNormals: function (mesh, encodeMethod) {\n    if (!mesh.geometry) {\n      console.error(\"Mesh must contain geometry. \");\n    }\n    const normal = mesh.geometry.attributes.normal;\n    if (!normal) {\n      console.error(\"Geometry must contain normal attribute. \");\n    }\n    if (normal.isPacked) return;\n    if (normal.itemSize != 3) {\n      console.error(\"normal.itemSize is not 3, which cannot be encoded. \");\n    }\n    const array = normal.array;\n    const count = normal.count;\n    let result;\n    if (encodeMethod == \"DEFAULT\") {\n      result = new Uint8Array(count * 3);\n      for (let idx = 0; idx < array.length; idx += 3) {\n        const encoded = this.EncodingFuncs.defaultEncode(array[idx], array[idx + 1], array[idx + 2], 1);\n        result[idx + 0] = encoded[0];\n        result[idx + 1] = encoded[1];\n        result[idx + 2] = encoded[2];\n      }\n      mesh.geometry.setAttribute(\"normal\", new BufferAttribute(result, 3, true));\n      mesh.geometry.attributes.normal.bytes = result.length * 1;\n    } else if (encodeMethod == \"OCT1Byte\") {\n      result = new Int8Array(count * 2);\n      for (let idx = 0; idx < array.length; idx += 3) {\n        const encoded = this.EncodingFuncs.octEncodeBest(array[idx], array[idx + 1], array[idx + 2], 1);\n        result[idx / 3 * 2 + 0] = encoded[0];\n        result[idx / 3 * 2 + 1] = encoded[1];\n      }\n      mesh.geometry.setAttribute(\"normal\", new BufferAttribute(result, 2, true));\n      mesh.geometry.attributes.normal.bytes = result.length * 1;\n    } else if (encodeMethod == \"OCT2Byte\") {\n      result = new Int16Array(count * 2);\n      for (let idx = 0; idx < array.length; idx += 3) {\n        const encoded = this.EncodingFuncs.octEncodeBest(array[idx], array[idx + 1], array[idx + 2], 2);\n        result[idx / 3 * 2 + 0] = encoded[0];\n        result[idx / 3 * 2 + 1] = encoded[1];\n      }\n      mesh.geometry.setAttribute(\"normal\", new BufferAttribute(result, 2, true));\n      mesh.geometry.attributes.normal.bytes = result.length * 2;\n    } else if (encodeMethod == \"ANGLES\") {\n      result = new Uint16Array(count * 2);\n      for (let idx = 0; idx < array.length; idx += 3) {\n        const encoded = this.EncodingFuncs.anglesEncode(array[idx], array[idx + 1], array[idx + 2]);\n        result[idx / 3 * 2 + 0] = encoded[0];\n        result[idx / 3 * 2 + 1] = encoded[1];\n      }\n      mesh.geometry.setAttribute(\"normal\", new BufferAttribute(result, 2, true));\n      mesh.geometry.attributes.normal.bytes = result.length * 2;\n    } else {\n      console.error(\"Unrecognized encoding method, should be `DEFAULT` or `ANGLES` or `OCT`. \");\n    }\n    mesh.geometry.attributes.normal.needsUpdate = true;\n    mesh.geometry.attributes.normal.isPacked = true;\n    mesh.geometry.attributes.normal.packingMethod = encodeMethod;\n    if (!(mesh.material instanceof PackedPhongMaterial)) {\n      mesh.material = new PackedPhongMaterial().copy(mesh.material);\n    }\n    if (encodeMethod == \"ANGLES\") {\n      mesh.material.defines.USE_PACKED_NORMAL = 0;\n    }\n    if (encodeMethod == \"OCT1Byte\") {\n      mesh.material.defines.USE_PACKED_NORMAL = 1;\n    }\n    if (encodeMethod == \"OCT2Byte\") {\n      mesh.material.defines.USE_PACKED_NORMAL = 1;\n    }\n    if (encodeMethod == \"DEFAULT\") {\n      mesh.material.defines.USE_PACKED_NORMAL = 2;\n    }\n  },\n  /**\n   * Make the input mesh.geometry's position attribute encoded and compressed.\n   * Also will change the mesh.material to `PackedPhongMaterial` which let the vertex shader program decode the position data.\n   *\n   * @param {THREE.Mesh} mesh\n   *\n   */\n  compressPositions: function (mesh) {\n    if (!mesh.geometry) {\n      console.error(\"Mesh must contain geometry. \");\n    }\n    const position = mesh.geometry.attributes.position;\n    if (!position) {\n      console.error(\"Geometry must contain position attribute. \");\n    }\n    if (position.isPacked) return;\n    if (position.itemSize != 3) {\n      console.error(\"position.itemSize is not 3, which cannot be packed. \");\n    }\n    const array = position.array;\n    const encodingBytes = 2;\n    const result = this.EncodingFuncs.quantizedEncode(array, encodingBytes);\n    const quantized = result.quantized;\n    const decodeMat = result.decodeMat;\n    if (mesh.geometry.boundingBox == null) mesh.geometry.computeBoundingBox();\n    if (mesh.geometry.boundingSphere == null) mesh.geometry.computeBoundingSphere();\n    mesh.geometry.setAttribute(\"position\", new BufferAttribute(quantized, 3));\n    mesh.geometry.attributes.position.isPacked = true;\n    mesh.geometry.attributes.position.needsUpdate = true;\n    mesh.geometry.attributes.position.bytes = quantized.length * encodingBytes;\n    if (!(mesh.material instanceof PackedPhongMaterial)) {\n      mesh.material = new PackedPhongMaterial().copy(mesh.material);\n    }\n    mesh.material.defines.USE_PACKED_POSITION = 0;\n    mesh.material.uniforms.quantizeMatPos.value = decodeMat;\n    mesh.material.uniforms.quantizeMatPos.needsUpdate = true;\n  },\n  /**\n   * Make the input mesh.geometry's uv attribute encoded and compressed.\n   * Also will change the mesh.material to `PackedPhongMaterial` which let the vertex shader program decode the uv data.\n   *\n   * @param {THREE.Mesh} mesh\n   *\n   */\n  compressUvs: function (mesh) {\n    if (!mesh.geometry) {\n      console.error(\"Mesh must contain geometry property. \");\n    }\n    const uvs = mesh.geometry.attributes.uv;\n    if (!uvs) {\n      console.error(\"Geometry must contain uv attribute. \");\n    }\n    if (uvs.isPacked) return;\n    const range = {\n      min: Infinity,\n      max: -Infinity\n    };\n    const array = uvs.array;\n    for (let i = 0; i < array.length; i++) {\n      range.min = Math.min(range.min, array[i]);\n      range.max = Math.max(range.max, array[i]);\n    }\n    let result;\n    if (range.min >= -1 && range.max <= 1) {\n      result = new Uint16Array(array.length);\n      for (let i = 0; i < array.length; i += 2) {\n        const encoded = this.EncodingFuncs.defaultEncode(array[i], array[i + 1], 0, 2);\n        result[i] = encoded[0];\n        result[i + 1] = encoded[1];\n      }\n      mesh.geometry.setAttribute(\"uv\", new BufferAttribute(result, 2, true));\n      mesh.geometry.attributes.uv.isPacked = true;\n      mesh.geometry.attributes.uv.needsUpdate = true;\n      mesh.geometry.attributes.uv.bytes = result.length * 2;\n      if (!(mesh.material instanceof PackedPhongMaterial)) {\n        mesh.material = new PackedPhongMaterial().copy(mesh.material);\n      }\n      mesh.material.defines.USE_PACKED_UV = 0;\n    } else {\n      result = this.EncodingFuncs.quantizedEncodeUV(array, 2);\n      mesh.geometry.setAttribute(\"uv\", new BufferAttribute(result.quantized, 2));\n      mesh.geometry.attributes.uv.isPacked = true;\n      mesh.geometry.attributes.uv.needsUpdate = true;\n      mesh.geometry.attributes.uv.bytes = result.quantized.length * 2;\n      if (!(mesh.material instanceof PackedPhongMaterial)) {\n        mesh.material = new PackedPhongMaterial().copy(mesh.material);\n      }\n      mesh.material.defines.USE_PACKED_UV = 1;\n      mesh.material.uniforms.quantizeMatUV.value = result.decodeMat;\n      mesh.material.uniforms.quantizeMatUV.needsUpdate = true;\n    }\n  },\n  EncodingFuncs: {\n    defaultEncode: function (x, y, z, bytes) {\n      if (bytes == 1) {\n        const tmpx = Math.round((x + 1) * 0.5 * 255);\n        const tmpy = Math.round((y + 1) * 0.5 * 255);\n        const tmpz = Math.round((z + 1) * 0.5 * 255);\n        return new Uint8Array([tmpx, tmpy, tmpz]);\n      } else if (bytes == 2) {\n        const tmpx = Math.round((x + 1) * 0.5 * 65535);\n        const tmpy = Math.round((y + 1) * 0.5 * 65535);\n        const tmpz = Math.round((z + 1) * 0.5 * 65535);\n        return new Uint16Array([tmpx, tmpy, tmpz]);\n      } else {\n        console.error(\"number of bytes must be 1 or 2\");\n      }\n    },\n    defaultDecode: function (array, bytes) {\n      if (bytes == 1) {\n        return [array[0] / 255 * 2 - 1, array[1] / 255 * 2 - 1, array[2] / 255 * 2 - 1];\n      } else if (bytes == 2) {\n        return [array[0] / 65535 * 2 - 1, array[1] / 65535 * 2 - 1, array[2] / 65535 * 2 - 1];\n      } else {\n        console.error(\"number of bytes must be 1 or 2\");\n      }\n    },\n    // for `Angles` encoding\n    anglesEncode: function (x, y, z) {\n      const normal0 = parseInt(0.5 * (1 + Math.atan2(y, x) / Math.PI) * 65535);\n      const normal1 = parseInt(0.5 * (1 + z) * 65535);\n      return new Uint16Array([normal0, normal1]);\n    },\n    // for `Octahedron` encoding\n    octEncodeBest: function (x, y, z, bytes) {\n      var oct, dec, best, currentCos, bestCos;\n      best = oct = octEncodeVec3(x, y, z, \"floor\", \"floor\");\n      dec = octDecodeVec2(oct);\n      bestCos = dot(x, y, z, dec);\n      oct = octEncodeVec3(x, y, z, \"ceil\", \"floor\");\n      dec = octDecodeVec2(oct);\n      currentCos = dot(x, y, z, dec);\n      if (currentCos > bestCos) {\n        best = oct;\n        bestCos = currentCos;\n      }\n      oct = octEncodeVec3(x, y, z, \"floor\", \"ceil\");\n      dec = octDecodeVec2(oct);\n      currentCos = dot(x, y, z, dec);\n      if (currentCos > bestCos) {\n        best = oct;\n        bestCos = currentCos;\n      }\n      oct = octEncodeVec3(x, y, z, \"ceil\", \"ceil\");\n      dec = octDecodeVec2(oct);\n      currentCos = dot(x, y, z, dec);\n      if (currentCos > bestCos) {\n        best = oct;\n      }\n      return best;\n      function octEncodeVec3(x0, y0, z0, xfunc, yfunc) {\n        var x2 = x0 / (Math.abs(x0) + Math.abs(y0) + Math.abs(z0));\n        var y2 = y0 / (Math.abs(x0) + Math.abs(y0) + Math.abs(z0));\n        if (z < 0) {\n          var tempx = (1 - Math.abs(y2)) * (x2 >= 0 ? 1 : -1);\n          var tempy = (1 - Math.abs(x2)) * (y2 >= 0 ? 1 : -1);\n          x2 = tempx;\n          y2 = tempy;\n          var diff = 1 - Math.abs(x2) - Math.abs(y2);\n          if (diff > 0) {\n            diff += 1e-3;\n            x2 += x2 > 0 ? diff / 2 : -diff / 2;\n            y2 += y2 > 0 ? diff / 2 : -diff / 2;\n          }\n        }\n        if (bytes == 1) {\n          return new Int8Array([Math[xfunc](x2 * 127.5 + (x2 < 0 ? 1 : 0)), Math[yfunc](y2 * 127.5 + (y2 < 0 ? 1 : 0))]);\n        }\n        if (bytes == 2) {\n          return new Int16Array([Math[xfunc](x2 * 32767.5 + (x2 < 0 ? 1 : 0)), Math[yfunc](y2 * 32767.5 + (y2 < 0 ? 1 : 0))]);\n        }\n      }\n      function octDecodeVec2(oct2) {\n        var x2 = oct2[0];\n        var y2 = oct2[1];\n        if (bytes == 1) {\n          x2 /= x2 < 0 ? 127 : 128;\n          y2 /= y2 < 0 ? 127 : 128;\n        } else if (bytes == 2) {\n          x2 /= x2 < 0 ? 32767 : 32768;\n          y2 /= y2 < 0 ? 32767 : 32768;\n        }\n        var z2 = 1 - Math.abs(x2) - Math.abs(y2);\n        if (z2 < 0) {\n          var tmpx = x2;\n          x2 = (1 - Math.abs(y2)) * (x2 >= 0 ? 1 : -1);\n          y2 = (1 - Math.abs(tmpx)) * (y2 >= 0 ? 1 : -1);\n        }\n        var length = Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2);\n        return [x2 / length, y2 / length, z2 / length];\n      }\n      function dot(x2, y2, z2, vec3) {\n        return x2 * vec3[0] + y2 * vec3[1] + z2 * vec3[2];\n      }\n    },\n    quantizedEncode: function (array, bytes) {\n      let quantized, segments;\n      if (bytes == 1) {\n        quantized = new Uint8Array(array.length);\n        segments = 255;\n      } else if (bytes == 2) {\n        quantized = new Uint16Array(array.length);\n        segments = 65535;\n      } else {\n        console.error(\"number of bytes error! \");\n      }\n      const decodeMat = new Matrix4();\n      const min = new Float32Array(3);\n      const max = new Float32Array(3);\n      min[0] = min[1] = min[2] = Number.MAX_VALUE;\n      max[0] = max[1] = max[2] = -Number.MAX_VALUE;\n      for (let i = 0; i < array.length; i += 3) {\n        min[0] = Math.min(min[0], array[i + 0]);\n        min[1] = Math.min(min[1], array[i + 1]);\n        min[2] = Math.min(min[2], array[i + 2]);\n        max[0] = Math.max(max[0], array[i + 0]);\n        max[1] = Math.max(max[1], array[i + 1]);\n        max[2] = Math.max(max[2], array[i + 2]);\n      }\n      decodeMat.scale(new Vector3((max[0] - min[0]) / segments, (max[1] - min[1]) / segments, (max[2] - min[2]) / segments));\n      decodeMat.elements[12] = min[0];\n      decodeMat.elements[13] = min[1];\n      decodeMat.elements[14] = min[2];\n      decodeMat.transpose();\n      const multiplier = new Float32Array([max[0] !== min[0] ? segments / (max[0] - min[0]) : 0, max[1] !== min[1] ? segments / (max[1] - min[1]) : 0, max[2] !== min[2] ? segments / (max[2] - min[2]) : 0]);\n      for (let i = 0; i < array.length; i += 3) {\n        quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0]);\n        quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1]);\n        quantized[i + 2] = Math.floor((array[i + 2] - min[2]) * multiplier[2]);\n      }\n      return {\n        quantized,\n        decodeMat\n      };\n    },\n    quantizedEncodeUV: function (array, bytes) {\n      let quantized, segments;\n      if (bytes == 1) {\n        quantized = new Uint8Array(array.length);\n        segments = 255;\n      } else if (bytes == 2) {\n        quantized = new Uint16Array(array.length);\n        segments = 65535;\n      } else {\n        console.error(\"number of bytes error! \");\n      }\n      const decodeMat = new Matrix3();\n      const min = new Float32Array(2);\n      const max = new Float32Array(2);\n      min[0] = min[1] = Number.MAX_VALUE;\n      max[0] = max[1] = -Number.MAX_VALUE;\n      for (let i = 0; i < array.length; i += 2) {\n        min[0] = Math.min(min[0], array[i + 0]);\n        min[1] = Math.min(min[1], array[i + 1]);\n        max[0] = Math.max(max[0], array[i + 0]);\n        max[1] = Math.max(max[1], array[i + 1]);\n      }\n      decodeMat.scale((max[0] - min[0]) / segments, (max[1] - min[1]) / segments);\n      decodeMat.elements[6] = min[0];\n      decodeMat.elements[7] = min[1];\n      decodeMat.transpose();\n      const multiplier = new Float32Array([max[0] !== min[0] ? segments / (max[0] - min[0]) : 0, max[1] !== min[1] ? segments / (max[1] - min[1]) : 0]);\n      for (let i = 0; i < array.length; i += 2) {\n        quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0]);\n        quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1]);\n      }\n      return {\n        quantized,\n        decodeMat\n      };\n    }\n  }\n};\nclass PackedPhongMaterial extends MeshPhongMaterial {\n  constructor(parameters) {\n    super();\n    this.defines = {};\n    this.type = \"PackedPhongMaterial\";\n    this.uniforms = UniformsUtils.merge([ShaderLib.phong.uniforms, {\n      quantizeMatPos: {\n        value: null\n      },\n      quantizeMatUV: {\n        value: null\n      }\n    }]);\n    this.vertexShader = [\"#define PHONG\", \"varying vec3 vViewPosition;\", \"#ifndef FLAT_SHADED\", \"varying vec3 vNormal;\", \"#endif\", ShaderChunk.common, ShaderChunk.uv_pars_vertex, ShaderChunk.uv2_pars_vertex, ShaderChunk.displacementmap_pars_vertex, ShaderChunk.envmap_pars_vertex, ShaderChunk.color_pars_vertex, ShaderChunk.fog_pars_vertex, ShaderChunk.morphtarget_pars_vertex, ShaderChunk.skinning_pars_vertex, ShaderChunk.shadowmap_pars_vertex, ShaderChunk.logdepthbuf_pars_vertex, ShaderChunk.clipping_planes_pars_vertex, `#ifdef USE_PACKED_NORMAL\n\t\t\t\t\t#if USE_PACKED_NORMAL == 0\n\t\t\t\t\t\tvec3 decodeNormal(vec3 packedNormal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat x = packedNormal.x * 2.0 - 1.0;\n\t\t\t\t\t\t\tfloat y = packedNormal.y * 2.0 - 1.0;\n\t\t\t\t\t\t\tvec2 scth = vec2(sin(x * PI), cos(x * PI));\n\t\t\t\t\t\t\tvec2 scphi = vec2(sqrt(1.0 - y * y), y);\n\t\t\t\t\t\t\treturn normalize( vec3(scth.y * scphi.x, scth.x * scphi.x, scphi.y) );\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#if USE_PACKED_NORMAL == 1\n\t\t\t\t\t\tvec3 decodeNormal(vec3 packedNormal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec3 v = vec3(packedNormal.xy, 1.0 - abs(packedNormal.x) - abs(packedNormal.y));\n\t\t\t\t\t\t\tif (v.z < 0.0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tv.xy = (1.0 - abs(v.yx)) * vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn normalize(v);\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#if USE_PACKED_NORMAL == 2\n\t\t\t\t\t\tvec3 decodeNormal(vec3 packedNormal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec3 v = (packedNormal * 2.0) - 1.0;\n\t\t\t\t\t\t\treturn normalize(v);\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\t\t\t\t#endif`, `#ifdef USE_PACKED_POSITION\n\t\t\t\t\t#if USE_PACKED_POSITION == 0\n\t\t\t\t\t\tuniform mat4 quantizeMatPos;\n\t\t\t\t\t#endif\n\t\t\t\t#endif`, `#ifdef USE_PACKED_UV\n\t\t\t\t\t#if USE_PACKED_UV == 1\n\t\t\t\t\t\tuniform mat3 quantizeMatUV;\n\t\t\t\t\t#endif\n\t\t\t\t#endif`, `#ifdef USE_PACKED_UV\n\t\t\t\t\t#if USE_PACKED_UV == 0\n\t\t\t\t\t\tvec2 decodeUV(vec2 packedUV)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec2 uv = (packedUV * 2.0) - 1.0;\n\t\t\t\t\t\t\treturn uv;\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#if USE_PACKED_UV == 1\n\t\t\t\t\t\tvec2 decodeUV(vec2 packedUV)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec2 uv = ( vec3(packedUV, 1.0) * quantizeMatUV ).xy;\n\t\t\t\t\t\t\treturn uv;\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\t\t\t\t#endif`, \"void main() {\", ShaderChunk.uv_vertex, `#ifdef USE_UV\n\t\t\t\t\t#ifdef USE_PACKED_UV\n\t\t\t\t\t\tvUv = decodeUV(vUv);\n\t\t\t\t\t#endif\n\t\t\t\t#endif`, ShaderChunk.uv2_vertex, ShaderChunk.color_vertex, ShaderChunk.beginnormal_vertex, `#ifdef USE_PACKED_NORMAL\n\t\t\t\t\tobjectNormal = decodeNormal(objectNormal);\n\t\t\t\t#endif\n\n\t\t\t\t#ifdef USE_TANGENT\n\t\t\t\t\tvec3 objectTangent = vec3( tangent.xyz );\n\t\t\t\t#endif\n\t\t\t\t`, ShaderChunk.morphnormal_vertex, ShaderChunk.skinbase_vertex, ShaderChunk.skinnormal_vertex, ShaderChunk.defaultnormal_vertex, \"#ifndef FLAT_SHADED\", \"\tvNormal = normalize( transformedNormal );\", \"#endif\", ShaderChunk.begin_vertex, `#ifdef USE_PACKED_POSITION\n\t\t\t\t\t#if USE_PACKED_POSITION == 0\n\t\t\t\t\t\ttransformed = ( vec4(transformed, 1.0) * quantizeMatPos ).xyz;\n\t\t\t\t\t#endif\n\t\t\t\t#endif`, ShaderChunk.morphtarget_vertex, ShaderChunk.skinning_vertex, ShaderChunk.displacementmap_vertex, ShaderChunk.project_vertex, ShaderChunk.logdepthbuf_vertex, ShaderChunk.clipping_planes_vertex, \"vViewPosition = - mvPosition.xyz;\", ShaderChunk.worldpos_vertex, ShaderChunk.envmap_vertex, ShaderChunk.shadowmap_vertex, ShaderChunk.fog_vertex, \"}\"].join(\"\\n\");\n    this.fragmentShader = [\"#define PHONG\", \"uniform vec3 diffuse;\", \"uniform vec3 emissive;\", \"uniform vec3 specular;\", \"uniform float shininess;\", \"uniform float opacity;\", ShaderChunk.common, ShaderChunk.packing, ShaderChunk.dithering_pars_fragment, ShaderChunk.color_pars_fragment, ShaderChunk.uv_pars_fragment, ShaderChunk.uv2_pars_fragment, ShaderChunk.map_pars_fragment, ShaderChunk.alphamap_pars_fragment, ShaderChunk.aomap_pars_fragment, ShaderChunk.lightmap_pars_fragment, ShaderChunk.emissivemap_pars_fragment, ShaderChunk.envmap_common_pars_fragment, ShaderChunk.envmap_pars_fragment, ShaderChunk.cube_uv_reflection_fragment, ShaderChunk.fog_pars_fragment, ShaderChunk.bsdfs, ShaderChunk.lights_pars_begin, ShaderChunk.lights_phong_pars_fragment, ShaderChunk.shadowmap_pars_fragment, ShaderChunk.bumpmap_pars_fragment, ShaderChunk.normalmap_pars_fragment, ShaderChunk.specularmap_pars_fragment, ShaderChunk.logdepthbuf_pars_fragment, ShaderChunk.clipping_planes_pars_fragment, \"void main() {\", ShaderChunk.clipping_planes_fragment, \"vec4 diffuseColor = vec4( diffuse, opacity );\", \"ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\", \"vec3 totalEmissiveRadiance = emissive;\", ShaderChunk.logdepthbuf_fragment, ShaderChunk.map_fragment, ShaderChunk.color_fragment, ShaderChunk.alphamap_fragment, ShaderChunk.alphatest_fragment, ShaderChunk.specularmap_fragment, ShaderChunk.normal_fragment_begin, ShaderChunk.normal_fragment_maps, ShaderChunk.emissivemap_fragment,\n    // accumulation\n    ShaderChunk.lights_phong_fragment, ShaderChunk.lights_fragment_begin, ShaderChunk.lights_fragment_maps, ShaderChunk.lights_fragment_end,\n    // modulation\n    ShaderChunk.aomap_fragment, \"vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\", ShaderChunk.envmap_fragment, \"gl_FragColor = vec4( outgoingLight, diffuseColor.a );\", ShaderChunk.tonemapping_fragment, parseInt(REVISION.replace(/\\D+/g, \"\")) >= 154 ? ShaderChunk.colorspace_fragment : ShaderChunk.encodings_fragment, ShaderChunk.fog_fragment, ShaderChunk.premultiplied_alpha_fragment, ShaderChunk.dithering_fragment, \"}\"].join(\"\\n\");\n    this.setValues(parameters);\n  }\n}\nexport { GeometryCompressionUtils, PackedPhongMaterial };","map":{"version":3,"sources":["../../src/utils/GeometryCompressionUtils.js"],"names":["x","y","oct","z"],"mappings":"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","sourcesContent":["/**\n * Octahedron and Quantization encodings based on work by:\n *\n * @link https://github.com/tsherif/mesh-quantization-example\n *\n */\n\nimport {\n  BufferAttribute,\n  Matrix3,\n  Matrix4,\n  MeshPhongMaterial,\n  ShaderChunk,\n  ShaderLib,\n  UniformsUtils,\n  Vector3,\n  REVISION,\n} from 'three'\n\nvar GeometryCompressionUtils = {\n  /**\n   * Make the input mesh.geometry's normal attribute encoded and compressed by 3 different methods.\n   * Also will change the mesh.material to `PackedPhongMaterial` which let the vertex shader program decode the normal data.\n   *\n   * @param {THREE.Mesh} mesh\n   * @param {String} encodeMethod\t\t\"DEFAULT\" || \"OCT1Byte\" || \"OCT2Byte\" || \"ANGLES\"\n   *\n   */\n  compressNormals: function (mesh, encodeMethod) {\n    if (!mesh.geometry) {\n      console.error('Mesh must contain geometry. ')\n    }\n\n    const normal = mesh.geometry.attributes.normal\n\n    if (!normal) {\n      console.error('Geometry must contain normal attribute. ')\n    }\n\n    if (normal.isPacked) return\n\n    if (normal.itemSize != 3) {\n      console.error('normal.itemSize is not 3, which cannot be encoded. ')\n    }\n\n    const array = normal.array\n    const count = normal.count\n\n    let result\n    if (encodeMethod == 'DEFAULT') {\n      // TODO: Add 1 byte to the result, making the encoded length to be 4 bytes.\n      result = new Uint8Array(count * 3)\n\n      for (let idx = 0; idx < array.length; idx += 3) {\n        const encoded = this.EncodingFuncs.defaultEncode(array[idx], array[idx + 1], array[idx + 2], 1)\n\n        result[idx + 0] = encoded[0]\n        result[idx + 1] = encoded[1]\n        result[idx + 2] = encoded[2]\n      }\n\n      mesh.geometry.setAttribute('normal', new BufferAttribute(result, 3, true))\n      mesh.geometry.attributes.normal.bytes = result.length * 1\n    } else if (encodeMethod == 'OCT1Byte') {\n      /**\n       * It is not recommended to use 1-byte octahedron normals encoding unless you want to extremely reduce the memory usage\n       * As it makes vertex data not aligned to a 4 byte boundary which may harm some WebGL implementations and sometimes the normal distortion is visible\n       * Please refer to @zeux 's comments in https://github.com/mrdoob/three.js/pull/18208\n       */\n\n      result = new Int8Array(count * 2)\n\n      for (let idx = 0; idx < array.length; idx += 3) {\n        const encoded = this.EncodingFuncs.octEncodeBest(array[idx], array[idx + 1], array[idx + 2], 1)\n\n        result[(idx / 3) * 2 + 0] = encoded[0]\n        result[(idx / 3) * 2 + 1] = encoded[1]\n      }\n\n      mesh.geometry.setAttribute('normal', new BufferAttribute(result, 2, true))\n      mesh.geometry.attributes.normal.bytes = result.length * 1\n    } else if (encodeMethod == 'OCT2Byte') {\n      result = new Int16Array(count * 2)\n\n      for (let idx = 0; idx < array.length; idx += 3) {\n        const encoded = this.EncodingFuncs.octEncodeBest(array[idx], array[idx + 1], array[idx + 2], 2)\n\n        result[(idx / 3) * 2 + 0] = encoded[0]\n        result[(idx / 3) * 2 + 1] = encoded[1]\n      }\n\n      mesh.geometry.setAttribute('normal', new BufferAttribute(result, 2, true))\n      mesh.geometry.attributes.normal.bytes = result.length * 2\n    } else if (encodeMethod == 'ANGLES') {\n      result = new Uint16Array(count * 2)\n\n      for (let idx = 0; idx < array.length; idx += 3) {\n        const encoded = this.EncodingFuncs.anglesEncode(array[idx], array[idx + 1], array[idx + 2])\n\n        result[(idx / 3) * 2 + 0] = encoded[0]\n        result[(idx / 3) * 2 + 1] = encoded[1]\n      }\n\n      mesh.geometry.setAttribute('normal', new BufferAttribute(result, 2, true))\n      mesh.geometry.attributes.normal.bytes = result.length * 2\n    } else {\n      console.error('Unrecognized encoding method, should be `DEFAULT` or `ANGLES` or `OCT`. ')\n    }\n\n    mesh.geometry.attributes.normal.needsUpdate = true\n    mesh.geometry.attributes.normal.isPacked = true\n    mesh.geometry.attributes.normal.packingMethod = encodeMethod\n\n    // modify material\n    if (!(mesh.material instanceof PackedPhongMaterial)) {\n      mesh.material = new PackedPhongMaterial().copy(mesh.material)\n    }\n\n    if (encodeMethod == 'ANGLES') {\n      mesh.material.defines.USE_PACKED_NORMAL = 0\n    }\n\n    if (encodeMethod == 'OCT1Byte') {\n      mesh.material.defines.USE_PACKED_NORMAL = 1\n    }\n\n    if (encodeMethod == 'OCT2Byte') {\n      mesh.material.defines.USE_PACKED_NORMAL = 1\n    }\n\n    if (encodeMethod == 'DEFAULT') {\n      mesh.material.defines.USE_PACKED_NORMAL = 2\n    }\n  },\n\n  /**\n   * Make the input mesh.geometry's position attribute encoded and compressed.\n   * Also will change the mesh.material to `PackedPhongMaterial` which let the vertex shader program decode the position data.\n   *\n   * @param {THREE.Mesh} mesh\n   *\n   */\n  compressPositions: function (mesh) {\n    if (!mesh.geometry) {\n      console.error('Mesh must contain geometry. ')\n    }\n\n    const position = mesh.geometry.attributes.position\n\n    if (!position) {\n      console.error('Geometry must contain position attribute. ')\n    }\n\n    if (position.isPacked) return\n\n    if (position.itemSize != 3) {\n      console.error('position.itemSize is not 3, which cannot be packed. ')\n    }\n\n    const array = position.array\n    const encodingBytes = 2\n\n    const result = this.EncodingFuncs.quantizedEncode(array, encodingBytes)\n\n    const quantized = result.quantized\n    const decodeMat = result.decodeMat\n\n    // IMPORTANT: calculate original geometry bounding info first, before updating packed positions\n    if (mesh.geometry.boundingBox == null) mesh.geometry.computeBoundingBox()\n    if (mesh.geometry.boundingSphere == null) mesh.geometry.computeBoundingSphere()\n\n    mesh.geometry.setAttribute('position', new BufferAttribute(quantized, 3))\n    mesh.geometry.attributes.position.isPacked = true\n    mesh.geometry.attributes.position.needsUpdate = true\n    mesh.geometry.attributes.position.bytes = quantized.length * encodingBytes\n\n    // modify material\n    if (!(mesh.material instanceof PackedPhongMaterial)) {\n      mesh.material = new PackedPhongMaterial().copy(mesh.material)\n    }\n\n    mesh.material.defines.USE_PACKED_POSITION = 0\n\n    mesh.material.uniforms.quantizeMatPos.value = decodeMat\n    mesh.material.uniforms.quantizeMatPos.needsUpdate = true\n  },\n\n  /**\n   * Make the input mesh.geometry's uv attribute encoded and compressed.\n   * Also will change the mesh.material to `PackedPhongMaterial` which let the vertex shader program decode the uv data.\n   *\n   * @param {THREE.Mesh} mesh\n   *\n   */\n  compressUvs: function (mesh) {\n    if (!mesh.geometry) {\n      console.error('Mesh must contain geometry property. ')\n    }\n\n    const uvs = mesh.geometry.attributes.uv\n\n    if (!uvs) {\n      console.error('Geometry must contain uv attribute. ')\n    }\n\n    if (uvs.isPacked) return\n\n    const range = { min: Infinity, max: -Infinity }\n\n    const array = uvs.array\n\n    for (let i = 0; i < array.length; i++) {\n      range.min = Math.min(range.min, array[i])\n      range.max = Math.max(range.max, array[i])\n    }\n\n    let result\n\n    if (range.min >= -1.0 && range.max <= 1.0) {\n      // use default encoding method\n      result = new Uint16Array(array.length)\n\n      for (let i = 0; i < array.length; i += 2) {\n        const encoded = this.EncodingFuncs.defaultEncode(array[i], array[i + 1], 0, 2)\n\n        result[i] = encoded[0]\n        result[i + 1] = encoded[1]\n      }\n\n      mesh.geometry.setAttribute('uv', new BufferAttribute(result, 2, true))\n      mesh.geometry.attributes.uv.isPacked = true\n      mesh.geometry.attributes.uv.needsUpdate = true\n      mesh.geometry.attributes.uv.bytes = result.length * 2\n\n      if (!(mesh.material instanceof PackedPhongMaterial)) {\n        mesh.material = new PackedPhongMaterial().copy(mesh.material)\n      }\n\n      mesh.material.defines.USE_PACKED_UV = 0\n    } else {\n      // use quantized encoding method\n      result = this.EncodingFuncs.quantizedEncodeUV(array, 2)\n\n      mesh.geometry.setAttribute('uv', new BufferAttribute(result.quantized, 2))\n      mesh.geometry.attributes.uv.isPacked = true\n      mesh.geometry.attributes.uv.needsUpdate = true\n      mesh.geometry.attributes.uv.bytes = result.quantized.length * 2\n\n      if (!(mesh.material instanceof PackedPhongMaterial)) {\n        mesh.material = new PackedPhongMaterial().copy(mesh.material)\n      }\n\n      mesh.material.defines.USE_PACKED_UV = 1\n\n      mesh.material.uniforms.quantizeMatUV.value = result.decodeMat\n      mesh.material.uniforms.quantizeMatUV.needsUpdate = true\n    }\n  },\n\n  EncodingFuncs: {\n    defaultEncode: function (x, y, z, bytes) {\n      if (bytes == 1) {\n        const tmpx = Math.round((x + 1) * 0.5 * 255)\n        const tmpy = Math.round((y + 1) * 0.5 * 255)\n        const tmpz = Math.round((z + 1) * 0.5 * 255)\n        return new Uint8Array([tmpx, tmpy, tmpz])\n      } else if (bytes == 2) {\n        const tmpx = Math.round((x + 1) * 0.5 * 65535)\n        const tmpy = Math.round((y + 1) * 0.5 * 65535)\n        const tmpz = Math.round((z + 1) * 0.5 * 65535)\n        return new Uint16Array([tmpx, tmpy, tmpz])\n      } else {\n        console.error('number of bytes must be 1 or 2')\n      }\n    },\n\n    defaultDecode: function (array, bytes) {\n      if (bytes == 1) {\n        return [(array[0] / 255) * 2.0 - 1.0, (array[1] / 255) * 2.0 - 1.0, (array[2] / 255) * 2.0 - 1.0]\n      } else if (bytes == 2) {\n        return [(array[0] / 65535) * 2.0 - 1.0, (array[1] / 65535) * 2.0 - 1.0, (array[2] / 65535) * 2.0 - 1.0]\n      } else {\n        console.error('number of bytes must be 1 or 2')\n      }\n    },\n\n    // for `Angles` encoding\n    anglesEncode: function (x, y, z) {\n      const normal0 = parseInt(0.5 * (1.0 + Math.atan2(y, x) / Math.PI) * 65535)\n      const normal1 = parseInt(0.5 * (1.0 + z) * 65535)\n      return new Uint16Array([normal0, normal1])\n    },\n\n    // for `Octahedron` encoding\n    octEncodeBest: function (x, y, z, bytes) {\n      var oct, dec, best, currentCos, bestCos\n\n      // Test various combinations of ceil and floor\n      // to minimize rounding errors\n      best = oct = octEncodeVec3(x, y, z, 'floor', 'floor')\n      dec = octDecodeVec2(oct)\n      bestCos = dot(x, y, z, dec)\n\n      oct = octEncodeVec3(x, y, z, 'ceil', 'floor')\n      dec = octDecodeVec2(oct)\n      currentCos = dot(x, y, z, dec)\n\n      if (currentCos > bestCos) {\n        best = oct\n        bestCos = currentCos\n      }\n\n      oct = octEncodeVec3(x, y, z, 'floor', 'ceil')\n      dec = octDecodeVec2(oct)\n      currentCos = dot(x, y, z, dec)\n\n      if (currentCos > bestCos) {\n        best = oct\n        bestCos = currentCos\n      }\n\n      oct = octEncodeVec3(x, y, z, 'ceil', 'ceil')\n      dec = octDecodeVec2(oct)\n      currentCos = dot(x, y, z, dec)\n\n      if (currentCos > bestCos) {\n        best = oct\n      }\n\n      return best\n\n      function octEncodeVec3(x0, y0, z0, xfunc, yfunc) {\n        var x = x0 / (Math.abs(x0) + Math.abs(y0) + Math.abs(z0))\n        var y = y0 / (Math.abs(x0) + Math.abs(y0) + Math.abs(z0))\n\n        if (z < 0) {\n          var tempx = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1)\n          var tempy = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1)\n\n          x = tempx\n          y = tempy\n\n          var diff = 1 - Math.abs(x) - Math.abs(y)\n          if (diff > 0) {\n            diff += 0.001\n            x += x > 0 ? diff / 2 : -diff / 2\n            y += y > 0 ? diff / 2 : -diff / 2\n          }\n        }\n\n        if (bytes == 1) {\n          return new Int8Array([Math[xfunc](x * 127.5 + (x < 0 ? 1 : 0)), Math[yfunc](y * 127.5 + (y < 0 ? 1 : 0))])\n        }\n\n        if (bytes == 2) {\n          return new Int16Array([\n            Math[xfunc](x * 32767.5 + (x < 0 ? 1 : 0)),\n            Math[yfunc](y * 32767.5 + (y < 0 ? 1 : 0)),\n          ])\n        }\n      }\n\n      function octDecodeVec2(oct) {\n        var x = oct[0]\n        var y = oct[1]\n\n        if (bytes == 1) {\n          x /= x < 0 ? 127 : 128\n          y /= y < 0 ? 127 : 128\n        } else if (bytes == 2) {\n          x /= x < 0 ? 32767 : 32768\n          y /= y < 0 ? 32767 : 32768\n        }\n\n        var z = 1 - Math.abs(x) - Math.abs(y)\n\n        if (z < 0) {\n          var tmpx = x\n          x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1)\n          y = (1 - Math.abs(tmpx)) * (y >= 0 ? 1 : -1)\n        }\n\n        var length = Math.sqrt(x * x + y * y + z * z)\n\n        return [x / length, y / length, z / length]\n      }\n\n      function dot(x, y, z, vec3) {\n        return x * vec3[0] + y * vec3[1] + z * vec3[2]\n      }\n    },\n\n    quantizedEncode: function (array, bytes) {\n      let quantized, segments\n\n      if (bytes == 1) {\n        quantized = new Uint8Array(array.length)\n        segments = 255\n      } else if (bytes == 2) {\n        quantized = new Uint16Array(array.length)\n        segments = 65535\n      } else {\n        console.error('number of bytes error! ')\n      }\n\n      const decodeMat = new Matrix4()\n\n      const min = new Float32Array(3)\n      const max = new Float32Array(3)\n\n      min[0] = min[1] = min[2] = Number.MAX_VALUE\n      max[0] = max[1] = max[2] = -Number.MAX_VALUE\n\n      for (let i = 0; i < array.length; i += 3) {\n        min[0] = Math.min(min[0], array[i + 0])\n        min[1] = Math.min(min[1], array[i + 1])\n        min[2] = Math.min(min[2], array[i + 2])\n        max[0] = Math.max(max[0], array[i + 0])\n        max[1] = Math.max(max[1], array[i + 1])\n        max[2] = Math.max(max[2], array[i + 2])\n      }\n\n      decodeMat.scale(\n        new Vector3((max[0] - min[0]) / segments, (max[1] - min[1]) / segments, (max[2] - min[2]) / segments),\n      )\n\n      decodeMat.elements[12] = min[0]\n      decodeMat.elements[13] = min[1]\n      decodeMat.elements[14] = min[2]\n\n      decodeMat.transpose()\n\n      const multiplier = new Float32Array([\n        max[0] !== min[0] ? segments / (max[0] - min[0]) : 0,\n        max[1] !== min[1] ? segments / (max[1] - min[1]) : 0,\n        max[2] !== min[2] ? segments / (max[2] - min[2]) : 0,\n      ])\n\n      for (let i = 0; i < array.length; i += 3) {\n        quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0])\n        quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1])\n        quantized[i + 2] = Math.floor((array[i + 2] - min[2]) * multiplier[2])\n      }\n\n      return {\n        quantized: quantized,\n        decodeMat: decodeMat,\n      }\n    },\n\n    quantizedEncodeUV: function (array, bytes) {\n      let quantized, segments\n\n      if (bytes == 1) {\n        quantized = new Uint8Array(array.length)\n        segments = 255\n      } else if (bytes == 2) {\n        quantized = new Uint16Array(array.length)\n        segments = 65535\n      } else {\n        console.error('number of bytes error! ')\n      }\n\n      const decodeMat = new Matrix3()\n\n      const min = new Float32Array(2)\n      const max = new Float32Array(2)\n\n      min[0] = min[1] = Number.MAX_VALUE\n      max[0] = max[1] = -Number.MAX_VALUE\n\n      for (let i = 0; i < array.length; i += 2) {\n        min[0] = Math.min(min[0], array[i + 0])\n        min[1] = Math.min(min[1], array[i + 1])\n        max[0] = Math.max(max[0], array[i + 0])\n        max[1] = Math.max(max[1], array[i + 1])\n      }\n\n      decodeMat.scale((max[0] - min[0]) / segments, (max[1] - min[1]) / segments)\n\n      decodeMat.elements[6] = min[0]\n      decodeMat.elements[7] = min[1]\n\n      decodeMat.transpose()\n\n      const multiplier = new Float32Array([\n        max[0] !== min[0] ? segments / (max[0] - min[0]) : 0,\n        max[1] !== min[1] ? segments / (max[1] - min[1]) : 0,\n      ])\n\n      for (let i = 0; i < array.length; i += 2) {\n        quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0])\n        quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1])\n      }\n\n      return {\n        quantized: quantized,\n        decodeMat: decodeMat,\n      }\n    },\n  },\n}\n\n/**\n * `PackedPhongMaterial` inherited from THREE.MeshPhongMaterial\n *\n * @param {Object} parameters\n */\nclass PackedPhongMaterial extends MeshPhongMaterial {\n  constructor(parameters) {\n    super()\n\n    this.defines = {}\n    this.type = 'PackedPhongMaterial'\n    this.uniforms = UniformsUtils.merge([\n      ShaderLib.phong.uniforms,\n\n      {\n        quantizeMatPos: { value: null },\n        quantizeMatUV: { value: null },\n      },\n    ])\n\n    this.vertexShader = [\n      '#define PHONG',\n\n      'varying vec3 vViewPosition;',\n\n      '#ifndef FLAT_SHADED',\n      'varying vec3 vNormal;',\n      '#endif',\n\n      ShaderChunk.common,\n      ShaderChunk.uv_pars_vertex,\n      ShaderChunk.uv2_pars_vertex,\n      ShaderChunk.displacementmap_pars_vertex,\n      ShaderChunk.envmap_pars_vertex,\n      ShaderChunk.color_pars_vertex,\n      ShaderChunk.fog_pars_vertex,\n      ShaderChunk.morphtarget_pars_vertex,\n      ShaderChunk.skinning_pars_vertex,\n      ShaderChunk.shadowmap_pars_vertex,\n      ShaderChunk.logdepthbuf_pars_vertex,\n      ShaderChunk.clipping_planes_pars_vertex,\n\n      `#ifdef USE_PACKED_NORMAL\n\t\t\t\t\t#if USE_PACKED_NORMAL == 0\n\t\t\t\t\t\tvec3 decodeNormal(vec3 packedNormal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat x = packedNormal.x * 2.0 - 1.0;\n\t\t\t\t\t\t\tfloat y = packedNormal.y * 2.0 - 1.0;\n\t\t\t\t\t\t\tvec2 scth = vec2(sin(x * PI), cos(x * PI));\n\t\t\t\t\t\t\tvec2 scphi = vec2(sqrt(1.0 - y * y), y);\n\t\t\t\t\t\t\treturn normalize( vec3(scth.y * scphi.x, scth.x * scphi.x, scphi.y) );\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#if USE_PACKED_NORMAL == 1\n\t\t\t\t\t\tvec3 decodeNormal(vec3 packedNormal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec3 v = vec3(packedNormal.xy, 1.0 - abs(packedNormal.x) - abs(packedNormal.y));\n\t\t\t\t\t\t\tif (v.z < 0.0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tv.xy = (1.0 - abs(v.yx)) * vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn normalize(v);\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#if USE_PACKED_NORMAL == 2\n\t\t\t\t\t\tvec3 decodeNormal(vec3 packedNormal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec3 v = (packedNormal * 2.0) - 1.0;\n\t\t\t\t\t\t\treturn normalize(v);\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\t\t\t\t#endif`,\n\n      `#ifdef USE_PACKED_POSITION\n\t\t\t\t\t#if USE_PACKED_POSITION == 0\n\t\t\t\t\t\tuniform mat4 quantizeMatPos;\n\t\t\t\t\t#endif\n\t\t\t\t#endif`,\n\n      `#ifdef USE_PACKED_UV\n\t\t\t\t\t#if USE_PACKED_UV == 1\n\t\t\t\t\t\tuniform mat3 quantizeMatUV;\n\t\t\t\t\t#endif\n\t\t\t\t#endif`,\n\n      `#ifdef USE_PACKED_UV\n\t\t\t\t\t#if USE_PACKED_UV == 0\n\t\t\t\t\t\tvec2 decodeUV(vec2 packedUV)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec2 uv = (packedUV * 2.0) - 1.0;\n\t\t\t\t\t\t\treturn uv;\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#if USE_PACKED_UV == 1\n\t\t\t\t\t\tvec2 decodeUV(vec2 packedUV)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec2 uv = ( vec3(packedUV, 1.0) * quantizeMatUV ).xy;\n\t\t\t\t\t\t\treturn uv;\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\t\t\t\t#endif`,\n\n      'void main() {',\n\n      ShaderChunk.uv_vertex,\n\n      `#ifdef USE_UV\n\t\t\t\t\t#ifdef USE_PACKED_UV\n\t\t\t\t\t\tvUv = decodeUV(vUv);\n\t\t\t\t\t#endif\n\t\t\t\t#endif`,\n\n      ShaderChunk.uv2_vertex,\n      ShaderChunk.color_vertex,\n      ShaderChunk.beginnormal_vertex,\n\n      `#ifdef USE_PACKED_NORMAL\n\t\t\t\t\tobjectNormal = decodeNormal(objectNormal);\n\t\t\t\t#endif\n\n\t\t\t\t#ifdef USE_TANGENT\n\t\t\t\t\tvec3 objectTangent = vec3( tangent.xyz );\n\t\t\t\t#endif\n\t\t\t\t`,\n\n      ShaderChunk.morphnormal_vertex,\n      ShaderChunk.skinbase_vertex,\n      ShaderChunk.skinnormal_vertex,\n      ShaderChunk.defaultnormal_vertex,\n\n      '#ifndef FLAT_SHADED',\n      '\tvNormal = normalize( transformedNormal );',\n      '#endif',\n\n      ShaderChunk.begin_vertex,\n\n      `#ifdef USE_PACKED_POSITION\n\t\t\t\t\t#if USE_PACKED_POSITION == 0\n\t\t\t\t\t\ttransformed = ( vec4(transformed, 1.0) * quantizeMatPos ).xyz;\n\t\t\t\t\t#endif\n\t\t\t\t#endif`,\n\n      ShaderChunk.morphtarget_vertex,\n      ShaderChunk.skinning_vertex,\n      ShaderChunk.displacementmap_vertex,\n      ShaderChunk.project_vertex,\n      ShaderChunk.logdepthbuf_vertex,\n      ShaderChunk.clipping_planes_vertex,\n\n      'vViewPosition = - mvPosition.xyz;',\n\n      ShaderChunk.worldpos_vertex,\n      ShaderChunk.envmap_vertex,\n      ShaderChunk.shadowmap_vertex,\n      ShaderChunk.fog_vertex,\n\n      '}',\n    ].join('\\n')\n\n    // Use the original MeshPhongMaterial's fragmentShader.\n    this.fragmentShader = [\n      '#define PHONG',\n\n      'uniform vec3 diffuse;',\n      'uniform vec3 emissive;',\n      'uniform vec3 specular;',\n      'uniform float shininess;',\n      'uniform float opacity;',\n\n      ShaderChunk.common,\n      ShaderChunk.packing,\n      ShaderChunk.dithering_pars_fragment,\n      ShaderChunk.color_pars_fragment,\n      ShaderChunk.uv_pars_fragment,\n      ShaderChunk.uv2_pars_fragment,\n      ShaderChunk.map_pars_fragment,\n      ShaderChunk.alphamap_pars_fragment,\n      ShaderChunk.aomap_pars_fragment,\n      ShaderChunk.lightmap_pars_fragment,\n      ShaderChunk.emissivemap_pars_fragment,\n      ShaderChunk.envmap_common_pars_fragment,\n      ShaderChunk.envmap_pars_fragment,\n      ShaderChunk.cube_uv_reflection_fragment,\n      ShaderChunk.fog_pars_fragment,\n      ShaderChunk.bsdfs,\n      ShaderChunk.lights_pars_begin,\n      ShaderChunk.lights_phong_pars_fragment,\n      ShaderChunk.shadowmap_pars_fragment,\n      ShaderChunk.bumpmap_pars_fragment,\n      ShaderChunk.normalmap_pars_fragment,\n      ShaderChunk.specularmap_pars_fragment,\n      ShaderChunk.logdepthbuf_pars_fragment,\n      ShaderChunk.clipping_planes_pars_fragment,\n\n      'void main() {',\n\n      ShaderChunk.clipping_planes_fragment,\n\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      'ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );',\n      'vec3 totalEmissiveRadiance = emissive;',\n\n      ShaderChunk.logdepthbuf_fragment,\n      ShaderChunk.map_fragment,\n      ShaderChunk.color_fragment,\n      ShaderChunk.alphamap_fragment,\n      ShaderChunk.alphatest_fragment,\n      ShaderChunk.specularmap_fragment,\n      ShaderChunk.normal_fragment_begin,\n      ShaderChunk.normal_fragment_maps,\n      ShaderChunk.emissivemap_fragment,\n\n      // accumulation\n      ShaderChunk.lights_phong_fragment,\n      ShaderChunk.lights_fragment_begin,\n      ShaderChunk.lights_fragment_maps,\n      ShaderChunk.lights_fragment_end,\n\n      // modulation\n      ShaderChunk.aomap_fragment,\n\n      'vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;',\n\n      ShaderChunk.envmap_fragment,\n\n      'gl_FragColor = vec4( outgoingLight, diffuseColor.a );',\n\n      ShaderChunk.tonemapping_fragment,\n      parseInt(REVISION.replace(/\\D+/g, '')) >= 154 ? ShaderChunk.colorspace_fragment : ShaderChunk.encodings_fragment,\n      ShaderChunk.fog_fragment,\n      ShaderChunk.premultiplied_alpha_fragment,\n      ShaderChunk.dithering_fragment,\n      '}',\n    ].join('\\n')\n\n    this.setValues(parameters)\n  }\n}\n\nexport { GeometryCompressionUtils, PackedPhongMaterial }\n"]},"metadata":{},"sourceType":"module"}