{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Object3D, Raycaster, Vector3, Quaternion, Euler, Matrix4, MeshBasicMaterial, DoubleSide, LineBasicMaterial, CylinderGeometry, BoxGeometry, BufferGeometry, Float32BufferAttribute, Mesh, Line, OctahedronGeometry, PlaneGeometry, TorusGeometry, SphereGeometry, Color } from \"three\";\nclass TransformControls extends Object3D {\n  constructor(camera, domElement) {\n    super();\n    __publicField(this, \"isTransformControls\", true);\n    __publicField(this, \"visible\", false);\n    __publicField(this, \"domElement\");\n    __publicField(this, \"raycaster\", new Raycaster());\n    __publicField(this, \"gizmo\");\n    __publicField(this, \"plane\");\n    __publicField(this, \"tempVector\", new Vector3());\n    __publicField(this, \"tempVector2\", new Vector3());\n    __publicField(this, \"tempQuaternion\", new Quaternion());\n    __publicField(this, \"unit\", {\n      X: new Vector3(1, 0, 0),\n      Y: new Vector3(0, 1, 0),\n      Z: new Vector3(0, 0, 1)\n    });\n    __publicField(this, \"pointStart\", new Vector3());\n    __publicField(this, \"pointEnd\", new Vector3());\n    __publicField(this, \"offset\", new Vector3());\n    __publicField(this, \"rotationAxis\", new Vector3());\n    __publicField(this, \"startNorm\", new Vector3());\n    __publicField(this, \"endNorm\", new Vector3());\n    __publicField(this, \"rotationAngle\", 0);\n    __publicField(this, \"cameraPosition\", new Vector3());\n    __publicField(this, \"cameraQuaternion\", new Quaternion());\n    __publicField(this, \"cameraScale\", new Vector3());\n    __publicField(this, \"parentPosition\", new Vector3());\n    __publicField(this, \"parentQuaternion\", new Quaternion());\n    __publicField(this, \"parentQuaternionInv\", new Quaternion());\n    __publicField(this, \"parentScale\", new Vector3());\n    __publicField(this, \"worldPositionStart\", new Vector3());\n    __publicField(this, \"worldQuaternionStart\", new Quaternion());\n    __publicField(this, \"worldScaleStart\", new Vector3());\n    __publicField(this, \"worldPosition\", new Vector3());\n    __publicField(this, \"worldQuaternion\", new Quaternion());\n    __publicField(this, \"worldQuaternionInv\", new Quaternion());\n    __publicField(this, \"worldScale\", new Vector3());\n    __publicField(this, \"eye\", new Vector3());\n    __publicField(this, \"positionStart\", new Vector3());\n    __publicField(this, \"quaternionStart\", new Quaternion());\n    __publicField(this, \"scaleStart\", new Vector3());\n    __publicField(this, \"camera\");\n    __publicField(this, \"object\");\n    __publicField(this, \"enabled\", true);\n    __publicField(this, \"axis\", null);\n    __publicField(this, \"mode\", \"translate\");\n    __publicField(this, \"translationSnap\", null);\n    __publicField(this, \"rotationSnap\", null);\n    __publicField(this, \"scaleSnap\", null);\n    __publicField(this, \"space\", \"world\");\n    __publicField(this, \"size\", 1);\n    __publicField(this, \"dragging\", false);\n    __publicField(this, \"showX\", true);\n    __publicField(this, \"showY\", true);\n    __publicField(this, \"showZ\", true);\n    // events\n    __publicField(this, \"changeEvent\", {\n      type: \"change\"\n    });\n    __publicField(this, \"mouseDownEvent\", {\n      type: \"mouseDown\",\n      mode: this.mode\n    });\n    __publicField(this, \"mouseUpEvent\", {\n      type: \"mouseUp\",\n      mode: this.mode\n    });\n    __publicField(this, \"objectChangeEvent\", {\n      type: \"objectChange\"\n    });\n    __publicField(this, \"intersectObjectWithRay\", (object, raycaster, includeInvisible) => {\n      const allIntersections = raycaster.intersectObject(object, true);\n      for (let i = 0; i < allIntersections.length; i++) {\n        if (allIntersections[i].object.visible || includeInvisible) {\n          return allIntersections[i];\n        }\n      }\n      return false;\n    });\n    // Set current object\n    __publicField(this, \"attach\", object => {\n      this.object = object;\n      this.visible = true;\n      return this;\n    });\n    // Detatch from object\n    __publicField(this, \"detach\", () => {\n      this.object = void 0;\n      this.visible = false;\n      this.axis = null;\n      return this;\n    });\n    // Reset\n    __publicField(this, \"reset\", () => {\n      if (!this.enabled) return this;\n      if (this.dragging) {\n        if (this.object !== void 0) {\n          this.object.position.copy(this.positionStart);\n          this.object.quaternion.copy(this.quaternionStart);\n          this.object.scale.copy(this.scaleStart);\n          this.dispatchEvent(this.changeEvent);\n          this.dispatchEvent(this.objectChangeEvent);\n          this.pointStart.copy(this.pointEnd);\n        }\n      }\n      return this;\n    });\n    __publicField(this, \"updateMatrixWorld\", () => {\n      if (this.object !== void 0) {\n        this.object.updateMatrixWorld();\n        if (this.object.parent === null) {\n          console.error(\"TransformControls: The attached 3D object must be a part of the scene graph.\");\n        } else {\n          this.object.parent.matrixWorld.decompose(this.parentPosition, this.parentQuaternion, this.parentScale);\n        }\n        this.object.matrixWorld.decompose(this.worldPosition, this.worldQuaternion, this.worldScale);\n        this.parentQuaternionInv.copy(this.parentQuaternion).invert();\n        this.worldQuaternionInv.copy(this.worldQuaternion).invert();\n      }\n      this.camera.updateMatrixWorld();\n      this.camera.matrixWorld.decompose(this.cameraPosition, this.cameraQuaternion, this.cameraScale);\n      this.eye.copy(this.cameraPosition).sub(this.worldPosition).normalize();\n      super.updateMatrixWorld();\n    });\n    __publicField(this, \"pointerHover\", pointer => {\n      if (this.object === void 0 || this.dragging === true) return;\n      this.raycaster.setFromCamera(pointer, this.camera);\n      const intersect = this.intersectObjectWithRay(this.gizmo.picker[this.mode], this.raycaster);\n      if (intersect) {\n        this.axis = intersect.object.name;\n      } else {\n        this.axis = null;\n      }\n    });\n    __publicField(this, \"pointerDown\", pointer => {\n      if (this.object === void 0 || this.dragging === true || pointer.button !== 0) return;\n      if (this.axis !== null) {\n        this.raycaster.setFromCamera(pointer, this.camera);\n        const planeIntersect = this.intersectObjectWithRay(this.plane, this.raycaster, true);\n        if (planeIntersect) {\n          let space = this.space;\n          if (this.mode === \"scale\") {\n            space = \"local\";\n          } else if (this.axis === \"E\" || this.axis === \"XYZE\" || this.axis === \"XYZ\") {\n            space = \"world\";\n          }\n          if (space === \"local\" && this.mode === \"rotate\") {\n            const snap = this.rotationSnap;\n            if (this.axis === \"X\" && snap) this.object.rotation.x = Math.round(this.object.rotation.x / snap) * snap;\n            if (this.axis === \"Y\" && snap) this.object.rotation.y = Math.round(this.object.rotation.y / snap) * snap;\n            if (this.axis === \"Z\" && snap) this.object.rotation.z = Math.round(this.object.rotation.z / snap) * snap;\n          }\n          this.object.updateMatrixWorld();\n          if (this.object.parent) {\n            this.object.parent.updateMatrixWorld();\n          }\n          this.positionStart.copy(this.object.position);\n          this.quaternionStart.copy(this.object.quaternion);\n          this.scaleStart.copy(this.object.scale);\n          this.object.matrixWorld.decompose(this.worldPositionStart, this.worldQuaternionStart, this.worldScaleStart);\n          this.pointStart.copy(planeIntersect.point).sub(this.worldPositionStart);\n        }\n        this.dragging = true;\n        this.mouseDownEvent.mode = this.mode;\n        this.dispatchEvent(this.mouseDownEvent);\n      }\n    });\n    __publicField(this, \"pointerMove\", pointer => {\n      const axis = this.axis;\n      const mode = this.mode;\n      const object = this.object;\n      let space = this.space;\n      if (mode === \"scale\") {\n        space = \"local\";\n      } else if (axis === \"E\" || axis === \"XYZE\" || axis === \"XYZ\") {\n        space = \"world\";\n      }\n      if (object === void 0 || axis === null || this.dragging === false || pointer.button !== -1) return;\n      this.raycaster.setFromCamera(pointer, this.camera);\n      const planeIntersect = this.intersectObjectWithRay(this.plane, this.raycaster, true);\n      if (!planeIntersect) return;\n      this.pointEnd.copy(planeIntersect.point).sub(this.worldPositionStart);\n      if (mode === \"translate\") {\n        this.offset.copy(this.pointEnd).sub(this.pointStart);\n        if (space === \"local\" && axis !== \"XYZ\") {\n          this.offset.applyQuaternion(this.worldQuaternionInv);\n        }\n        if (axis.indexOf(\"X\") === -1) this.offset.x = 0;\n        if (axis.indexOf(\"Y\") === -1) this.offset.y = 0;\n        if (axis.indexOf(\"Z\") === -1) this.offset.z = 0;\n        if (space === \"local\" && axis !== \"XYZ\") {\n          this.offset.applyQuaternion(this.quaternionStart).divide(this.parentScale);\n        } else {\n          this.offset.applyQuaternion(this.parentQuaternionInv).divide(this.parentScale);\n        }\n        object.position.copy(this.offset).add(this.positionStart);\n        if (this.translationSnap) {\n          if (space === \"local\") {\n            object.position.applyQuaternion(this.tempQuaternion.copy(this.quaternionStart).invert());\n            if (axis.search(\"X\") !== -1) {\n              object.position.x = Math.round(object.position.x / this.translationSnap) * this.translationSnap;\n            }\n            if (axis.search(\"Y\") !== -1) {\n              object.position.y = Math.round(object.position.y / this.translationSnap) * this.translationSnap;\n            }\n            if (axis.search(\"Z\") !== -1) {\n              object.position.z = Math.round(object.position.z / this.translationSnap) * this.translationSnap;\n            }\n            object.position.applyQuaternion(this.quaternionStart);\n          }\n          if (space === \"world\") {\n            if (object.parent) {\n              object.position.add(this.tempVector.setFromMatrixPosition(object.parent.matrixWorld));\n            }\n            if (axis.search(\"X\") !== -1) {\n              object.position.x = Math.round(object.position.x / this.translationSnap) * this.translationSnap;\n            }\n            if (axis.search(\"Y\") !== -1) {\n              object.position.y = Math.round(object.position.y / this.translationSnap) * this.translationSnap;\n            }\n            if (axis.search(\"Z\") !== -1) {\n              object.position.z = Math.round(object.position.z / this.translationSnap) * this.translationSnap;\n            }\n            if (object.parent) {\n              object.position.sub(this.tempVector.setFromMatrixPosition(object.parent.matrixWorld));\n            }\n          }\n        }\n      } else if (mode === \"scale\") {\n        if (axis.search(\"XYZ\") !== -1) {\n          let d = this.pointEnd.length() / this.pointStart.length();\n          if (this.pointEnd.dot(this.pointStart) < 0) d *= -1;\n          this.tempVector2.set(d, d, d);\n        } else {\n          this.tempVector.copy(this.pointStart);\n          this.tempVector2.copy(this.pointEnd);\n          this.tempVector.applyQuaternion(this.worldQuaternionInv);\n          this.tempVector2.applyQuaternion(this.worldQuaternionInv);\n          this.tempVector2.divide(this.tempVector);\n          if (axis.search(\"X\") === -1) {\n            this.tempVector2.x = 1;\n          }\n          if (axis.search(\"Y\") === -1) {\n            this.tempVector2.y = 1;\n          }\n          if (axis.search(\"Z\") === -1) {\n            this.tempVector2.z = 1;\n          }\n        }\n        object.scale.copy(this.scaleStart).multiply(this.tempVector2);\n        if (this.scaleSnap && this.object) {\n          if (axis.search(\"X\") !== -1) {\n            this.object.scale.x = Math.round(object.scale.x / this.scaleSnap) * this.scaleSnap || this.scaleSnap;\n          }\n          if (axis.search(\"Y\") !== -1) {\n            object.scale.y = Math.round(object.scale.y / this.scaleSnap) * this.scaleSnap || this.scaleSnap;\n          }\n          if (axis.search(\"Z\") !== -1) {\n            object.scale.z = Math.round(object.scale.z / this.scaleSnap) * this.scaleSnap || this.scaleSnap;\n          }\n        }\n      } else if (mode === \"rotate\") {\n        this.offset.copy(this.pointEnd).sub(this.pointStart);\n        const ROTATION_SPEED = 20 / this.worldPosition.distanceTo(this.tempVector.setFromMatrixPosition(this.camera.matrixWorld));\n        if (axis === \"E\") {\n          this.rotationAxis.copy(this.eye);\n          this.rotationAngle = this.pointEnd.angleTo(this.pointStart);\n          this.startNorm.copy(this.pointStart).normalize();\n          this.endNorm.copy(this.pointEnd).normalize();\n          this.rotationAngle *= this.endNorm.cross(this.startNorm).dot(this.eye) < 0 ? 1 : -1;\n        } else if (axis === \"XYZE\") {\n          this.rotationAxis.copy(this.offset).cross(this.eye).normalize();\n          this.rotationAngle = this.offset.dot(this.tempVector.copy(this.rotationAxis).cross(this.eye)) * ROTATION_SPEED;\n        } else if (axis === \"X\" || axis === \"Y\" || axis === \"Z\") {\n          this.rotationAxis.copy(this.unit[axis]);\n          this.tempVector.copy(this.unit[axis]);\n          if (space === \"local\") {\n            this.tempVector.applyQuaternion(this.worldQuaternion);\n          }\n          this.rotationAngle = this.offset.dot(this.tempVector.cross(this.eye).normalize()) * ROTATION_SPEED;\n        }\n        if (this.rotationSnap) {\n          this.rotationAngle = Math.round(this.rotationAngle / this.rotationSnap) * this.rotationSnap;\n        }\n        if (space === \"local\" && axis !== \"E\" && axis !== \"XYZE\") {\n          object.quaternion.copy(this.quaternionStart);\n          object.quaternion.multiply(this.tempQuaternion.setFromAxisAngle(this.rotationAxis, this.rotationAngle)).normalize();\n        } else {\n          this.rotationAxis.applyQuaternion(this.parentQuaternionInv);\n          object.quaternion.copy(this.tempQuaternion.setFromAxisAngle(this.rotationAxis, this.rotationAngle));\n          object.quaternion.multiply(this.quaternionStart).normalize();\n        }\n      }\n      this.dispatchEvent(this.changeEvent);\n      this.dispatchEvent(this.objectChangeEvent);\n    });\n    __publicField(this, \"pointerUp\", pointer => {\n      if (pointer.button !== 0) return;\n      if (this.dragging && this.axis !== null) {\n        this.mouseUpEvent.mode = this.mode;\n        this.dispatchEvent(this.mouseUpEvent);\n      }\n      this.dragging = false;\n      this.axis = null;\n    });\n    __publicField(this, \"getPointer\", event => {\n      var _a;\n      if (this.domElement && ((_a = this.domElement.ownerDocument) == null ? void 0 : _a.pointerLockElement)) {\n        return {\n          x: 0,\n          y: 0,\n          button: event.button\n        };\n      } else {\n        const pointer = event.changedTouches ? event.changedTouches[0] : event;\n        const rect = this.domElement.getBoundingClientRect();\n        return {\n          x: (pointer.clientX - rect.left) / rect.width * 2 - 1,\n          y: -(pointer.clientY - rect.top) / rect.height * 2 + 1,\n          button: event.button\n        };\n      }\n    });\n    __publicField(this, \"onPointerHover\", event => {\n      if (!this.enabled) return;\n      switch (event.pointerType) {\n        case \"mouse\":\n        case \"pen\":\n          this.pointerHover(this.getPointer(event));\n          break;\n      }\n    });\n    __publicField(this, \"onPointerDown\", event => {\n      if (!this.enabled || !this.domElement) return;\n      this.domElement.style.touchAction = \"none\";\n      this.domElement.ownerDocument.addEventListener(\"pointermove\", this.onPointerMove);\n      this.pointerHover(this.getPointer(event));\n      this.pointerDown(this.getPointer(event));\n    });\n    __publicField(this, \"onPointerMove\", event => {\n      if (!this.enabled) return;\n      this.pointerMove(this.getPointer(event));\n    });\n    __publicField(this, \"onPointerUp\", event => {\n      if (!this.enabled || !this.domElement) return;\n      this.domElement.style.touchAction = \"\";\n      this.domElement.ownerDocument.removeEventListener(\"pointermove\", this.onPointerMove);\n      this.pointerUp(this.getPointer(event));\n    });\n    __publicField(this, \"getMode\", () => this.mode);\n    __publicField(this, \"setMode\", mode => {\n      this.mode = mode;\n    });\n    __publicField(this, \"setTranslationSnap\", translationSnap => {\n      this.translationSnap = translationSnap;\n    });\n    __publicField(this, \"setRotationSnap\", rotationSnap => {\n      this.rotationSnap = rotationSnap;\n    });\n    __publicField(this, \"setScaleSnap\", scaleSnap => {\n      this.scaleSnap = scaleSnap;\n    });\n    __publicField(this, \"setSize\", size => {\n      this.size = size;\n    });\n    __publicField(this, \"setSpace\", space => {\n      this.space = space;\n    });\n    __publicField(this, \"update\", () => {\n      console.warn(\"THREE.TransformControls: update function has no more functionality and therefore has been deprecated.\");\n    });\n    __publicField(this, \"connect\", domElement => {\n      if (domElement === document) {\n        console.error('THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n      }\n      this.domElement = domElement;\n      this.domElement.addEventListener(\"pointerdown\", this.onPointerDown);\n      this.domElement.addEventListener(\"pointermove\", this.onPointerHover);\n      this.domElement.ownerDocument.addEventListener(\"pointerup\", this.onPointerUp);\n    });\n    __publicField(this, \"dispose\", () => {\n      var _a, _b, _c, _d, _e, _f;\n      (_a = this.domElement) == null ? void 0 : _a.removeEventListener(\"pointerdown\", this.onPointerDown);\n      (_b = this.domElement) == null ? void 0 : _b.removeEventListener(\"pointermove\", this.onPointerHover);\n      (_d = (_c = this.domElement) == null ? void 0 : _c.ownerDocument) == null ? void 0 : _d.removeEventListener(\"pointermove\", this.onPointerMove);\n      (_f = (_e = this.domElement) == null ? void 0 : _e.ownerDocument) == null ? void 0 : _f.removeEventListener(\"pointerup\", this.onPointerUp);\n      this.traverse(child => {\n        const mesh = child;\n        if (mesh.geometry) {\n          mesh.geometry.dispose();\n        }\n        if (mesh.material) {\n          mesh.material.dispose();\n        }\n      });\n    });\n    this.domElement = domElement;\n    this.camera = camera;\n    this.gizmo = new TransformControlsGizmo();\n    this.add(this.gizmo);\n    this.plane = new TransformControlsPlane();\n    this.add(this.plane);\n    const defineProperty = (propName, defaultValue) => {\n      let propValue = defaultValue;\n      Object.defineProperty(this, propName, {\n        get: function () {\n          return propValue !== void 0 ? propValue : defaultValue;\n        },\n        set: function (value) {\n          if (propValue !== value) {\n            propValue = value;\n            this.plane[propName] = value;\n            this.gizmo[propName] = value;\n            this.dispatchEvent({\n              type: propName + \"-changed\",\n              value\n            });\n            this.dispatchEvent(this.changeEvent);\n          }\n        }\n      });\n      this[propName] = defaultValue;\n      this.plane[propName] = defaultValue;\n      this.gizmo[propName] = defaultValue;\n    };\n    defineProperty(\"camera\", this.camera);\n    defineProperty(\"object\", this.object);\n    defineProperty(\"enabled\", this.enabled);\n    defineProperty(\"axis\", this.axis);\n    defineProperty(\"mode\", this.mode);\n    defineProperty(\"translationSnap\", this.translationSnap);\n    defineProperty(\"rotationSnap\", this.rotationSnap);\n    defineProperty(\"scaleSnap\", this.scaleSnap);\n    defineProperty(\"space\", this.space);\n    defineProperty(\"size\", this.size);\n    defineProperty(\"dragging\", this.dragging);\n    defineProperty(\"showX\", this.showX);\n    defineProperty(\"showY\", this.showY);\n    defineProperty(\"showZ\", this.showZ);\n    defineProperty(\"worldPosition\", this.worldPosition);\n    defineProperty(\"worldPositionStart\", this.worldPositionStart);\n    defineProperty(\"worldQuaternion\", this.worldQuaternion);\n    defineProperty(\"worldQuaternionStart\", this.worldQuaternionStart);\n    defineProperty(\"cameraPosition\", this.cameraPosition);\n    defineProperty(\"cameraQuaternion\", this.cameraQuaternion);\n    defineProperty(\"pointStart\", this.pointStart);\n    defineProperty(\"pointEnd\", this.pointEnd);\n    defineProperty(\"rotationAxis\", this.rotationAxis);\n    defineProperty(\"rotationAngle\", this.rotationAngle);\n    defineProperty(\"eye\", this.eye);\n    if (domElement !== void 0) this.connect(domElement);\n  }\n}\nclass TransformControlsGizmo extends Object3D {\n  constructor() {\n    super();\n    __publicField(this, \"isTransformControlsGizmo\", true);\n    __publicField(this, \"type\", \"TransformControlsGizmo\");\n    __publicField(this, \"tempVector\", new Vector3(0, 0, 0));\n    __publicField(this, \"tempEuler\", new Euler());\n    __publicField(this, \"alignVector\", new Vector3(0, 1, 0));\n    __publicField(this, \"zeroVector\", new Vector3(0, 0, 0));\n    __publicField(this, \"lookAtMatrix\", new Matrix4());\n    __publicField(this, \"tempQuaternion\", new Quaternion());\n    __publicField(this, \"tempQuaternion2\", new Quaternion());\n    __publicField(this, \"identityQuaternion\", new Quaternion());\n    __publicField(this, \"unitX\", new Vector3(1, 0, 0));\n    __publicField(this, \"unitY\", new Vector3(0, 1, 0));\n    __publicField(this, \"unitZ\", new Vector3(0, 0, 1));\n    __publicField(this, \"gizmo\");\n    __publicField(this, \"picker\");\n    __publicField(this, \"helper\");\n    // these are set from parent class TransformControls\n    __publicField(this, \"rotationAxis\", new Vector3());\n    __publicField(this, \"cameraPosition\", new Vector3());\n    __publicField(this, \"worldPositionStart\", new Vector3());\n    __publicField(this, \"worldQuaternionStart\", new Quaternion());\n    __publicField(this, \"worldPosition\", new Vector3());\n    __publicField(this, \"worldQuaternion\", new Quaternion());\n    __publicField(this, \"eye\", new Vector3());\n    __publicField(this, \"camera\", null);\n    __publicField(this, \"enabled\", true);\n    __publicField(this, \"axis\", null);\n    __publicField(this, \"mode\", \"translate\");\n    __publicField(this, \"space\", \"world\");\n    __publicField(this, \"size\", 1);\n    __publicField(this, \"dragging\", false);\n    __publicField(this, \"showX\", true);\n    __publicField(this, \"showY\", true);\n    __publicField(this, \"showZ\", true);\n    // updateMatrixWorld will update transformations and appearance of individual handles\n    __publicField(this, \"updateMatrixWorld\", () => {\n      let space = this.space;\n      if (this.mode === \"scale\") {\n        space = \"local\";\n      }\n      const quaternion = space === \"local\" ? this.worldQuaternion : this.identityQuaternion;\n      this.gizmo[\"translate\"].visible = this.mode === \"translate\";\n      this.gizmo[\"rotate\"].visible = this.mode === \"rotate\";\n      this.gizmo[\"scale\"].visible = this.mode === \"scale\";\n      this.helper[\"translate\"].visible = this.mode === \"translate\";\n      this.helper[\"rotate\"].visible = this.mode === \"rotate\";\n      this.helper[\"scale\"].visible = this.mode === \"scale\";\n      let handles = [];\n      handles = handles.concat(this.picker[this.mode].children);\n      handles = handles.concat(this.gizmo[this.mode].children);\n      handles = handles.concat(this.helper[this.mode].children);\n      for (let i = 0; i < handles.length; i++) {\n        const handle = handles[i];\n        handle.visible = true;\n        handle.rotation.set(0, 0, 0);\n        handle.position.copy(this.worldPosition);\n        let factor;\n        if (this.camera.isOrthographicCamera) {\n          factor = (this.camera.top - this.camera.bottom) / this.camera.zoom;\n        } else {\n          factor = this.worldPosition.distanceTo(this.cameraPosition) * Math.min(1.9 * Math.tan(Math.PI * this.camera.fov / 360) / this.camera.zoom, 7);\n        }\n        handle.scale.set(1, 1, 1).multiplyScalar(factor * this.size / 7);\n        if (handle.tag === \"helper\") {\n          handle.visible = false;\n          if (handle.name === \"AXIS\") {\n            handle.position.copy(this.worldPositionStart);\n            handle.visible = !!this.axis;\n            if (this.axis === \"X\") {\n              this.tempQuaternion.setFromEuler(this.tempEuler.set(0, 0, 0));\n              handle.quaternion.copy(quaternion).multiply(this.tempQuaternion);\n              if (Math.abs(this.alignVector.copy(this.unitX).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n                handle.visible = false;\n              }\n            }\n            if (this.axis === \"Y\") {\n              this.tempQuaternion.setFromEuler(this.tempEuler.set(0, 0, Math.PI / 2));\n              handle.quaternion.copy(quaternion).multiply(this.tempQuaternion);\n              if (Math.abs(this.alignVector.copy(this.unitY).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n                handle.visible = false;\n              }\n            }\n            if (this.axis === \"Z\") {\n              this.tempQuaternion.setFromEuler(this.tempEuler.set(0, Math.PI / 2, 0));\n              handle.quaternion.copy(quaternion).multiply(this.tempQuaternion);\n              if (Math.abs(this.alignVector.copy(this.unitZ).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n                handle.visible = false;\n              }\n            }\n            if (this.axis === \"XYZE\") {\n              this.tempQuaternion.setFromEuler(this.tempEuler.set(0, Math.PI / 2, 0));\n              this.alignVector.copy(this.rotationAxis);\n              handle.quaternion.setFromRotationMatrix(this.lookAtMatrix.lookAt(this.zeroVector, this.alignVector, this.unitY));\n              handle.quaternion.multiply(this.tempQuaternion);\n              handle.visible = this.dragging;\n            }\n            if (this.axis === \"E\") {\n              handle.visible = false;\n            }\n          } else if (handle.name === \"START\") {\n            handle.position.copy(this.worldPositionStart);\n            handle.visible = this.dragging;\n          } else if (handle.name === \"END\") {\n            handle.position.copy(this.worldPosition);\n            handle.visible = this.dragging;\n          } else if (handle.name === \"DELTA\") {\n            handle.position.copy(this.worldPositionStart);\n            handle.quaternion.copy(this.worldQuaternionStart);\n            this.tempVector.set(1e-10, 1e-10, 1e-10).add(this.worldPositionStart).sub(this.worldPosition).multiplyScalar(-1);\n            this.tempVector.applyQuaternion(this.worldQuaternionStart.clone().invert());\n            handle.scale.copy(this.tempVector);\n            handle.visible = this.dragging;\n          } else {\n            handle.quaternion.copy(quaternion);\n            if (this.dragging) {\n              handle.position.copy(this.worldPositionStart);\n            } else {\n              handle.position.copy(this.worldPosition);\n            }\n            if (this.axis) {\n              handle.visible = this.axis.search(handle.name) !== -1;\n            }\n          }\n          continue;\n        }\n        handle.quaternion.copy(quaternion);\n        if (this.mode === \"translate\" || this.mode === \"scale\") {\n          const AXIS_HIDE_TRESHOLD = 0.99;\n          const PLANE_HIDE_TRESHOLD = 0.2;\n          const AXIS_FLIP_TRESHOLD = 0;\n          if (handle.name === \"X\" || handle.name === \"XYZX\") {\n            if (Math.abs(this.alignVector.copy(this.unitX).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_TRESHOLD) {\n              handle.scale.set(1e-10, 1e-10, 1e-10);\n              handle.visible = false;\n            }\n          }\n          if (handle.name === \"Y\" || handle.name === \"XYZY\") {\n            if (Math.abs(this.alignVector.copy(this.unitY).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_TRESHOLD) {\n              handle.scale.set(1e-10, 1e-10, 1e-10);\n              handle.visible = false;\n            }\n          }\n          if (handle.name === \"Z\" || handle.name === \"XYZZ\") {\n            if (Math.abs(this.alignVector.copy(this.unitZ).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_TRESHOLD) {\n              handle.scale.set(1e-10, 1e-10, 1e-10);\n              handle.visible = false;\n            }\n          }\n          if (handle.name === \"XY\") {\n            if (Math.abs(this.alignVector.copy(this.unitZ).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_TRESHOLD) {\n              handle.scale.set(1e-10, 1e-10, 1e-10);\n              handle.visible = false;\n            }\n          }\n          if (handle.name === \"YZ\") {\n            if (Math.abs(this.alignVector.copy(this.unitX).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_TRESHOLD) {\n              handle.scale.set(1e-10, 1e-10, 1e-10);\n              handle.visible = false;\n            }\n          }\n          if (handle.name === \"XZ\") {\n            if (Math.abs(this.alignVector.copy(this.unitY).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_TRESHOLD) {\n              handle.scale.set(1e-10, 1e-10, 1e-10);\n              handle.visible = false;\n            }\n          }\n          if (handle.name.search(\"X\") !== -1) {\n            if (this.alignVector.copy(this.unitX).applyQuaternion(quaternion).dot(this.eye) < AXIS_FLIP_TRESHOLD) {\n              if (handle.tag === \"fwd\") {\n                handle.visible = false;\n              } else {\n                handle.scale.x *= -1;\n              }\n            } else if (handle.tag === \"bwd\") {\n              handle.visible = false;\n            }\n          }\n          if (handle.name.search(\"Y\") !== -1) {\n            if (this.alignVector.copy(this.unitY).applyQuaternion(quaternion).dot(this.eye) < AXIS_FLIP_TRESHOLD) {\n              if (handle.tag === \"fwd\") {\n                handle.visible = false;\n              } else {\n                handle.scale.y *= -1;\n              }\n            } else if (handle.tag === \"bwd\") {\n              handle.visible = false;\n            }\n          }\n          if (handle.name.search(\"Z\") !== -1) {\n            if (this.alignVector.copy(this.unitZ).applyQuaternion(quaternion).dot(this.eye) < AXIS_FLIP_TRESHOLD) {\n              if (handle.tag === \"fwd\") {\n                handle.visible = false;\n              } else {\n                handle.scale.z *= -1;\n              }\n            } else if (handle.tag === \"bwd\") {\n              handle.visible = false;\n            }\n          }\n        } else if (this.mode === \"rotate\") {\n          this.tempQuaternion2.copy(quaternion);\n          this.alignVector.copy(this.eye).applyQuaternion(this.tempQuaternion.copy(quaternion).invert());\n          if (handle.name.search(\"E\") !== -1) {\n            handle.quaternion.setFromRotationMatrix(this.lookAtMatrix.lookAt(this.eye, this.zeroVector, this.unitY));\n          }\n          if (handle.name === \"X\") {\n            this.tempQuaternion.setFromAxisAngle(this.unitX, Math.atan2(-this.alignVector.y, this.alignVector.z));\n            this.tempQuaternion.multiplyQuaternions(this.tempQuaternion2, this.tempQuaternion);\n            handle.quaternion.copy(this.tempQuaternion);\n          }\n          if (handle.name === \"Y\") {\n            this.tempQuaternion.setFromAxisAngle(this.unitY, Math.atan2(this.alignVector.x, this.alignVector.z));\n            this.tempQuaternion.multiplyQuaternions(this.tempQuaternion2, this.tempQuaternion);\n            handle.quaternion.copy(this.tempQuaternion);\n          }\n          if (handle.name === \"Z\") {\n            this.tempQuaternion.setFromAxisAngle(this.unitZ, Math.atan2(this.alignVector.y, this.alignVector.x));\n            this.tempQuaternion.multiplyQuaternions(this.tempQuaternion2, this.tempQuaternion);\n            handle.quaternion.copy(this.tempQuaternion);\n          }\n        }\n        handle.visible = handle.visible && (handle.name.indexOf(\"X\") === -1 || this.showX);\n        handle.visible = handle.visible && (handle.name.indexOf(\"Y\") === -1 || this.showY);\n        handle.visible = handle.visible && (handle.name.indexOf(\"Z\") === -1 || this.showZ);\n        handle.visible = handle.visible && (handle.name.indexOf(\"E\") === -1 || this.showX && this.showY && this.showZ);\n        handle.material.tempOpacity = handle.material.tempOpacity || handle.material.opacity;\n        handle.material.tempColor = handle.material.tempColor || handle.material.color.clone();\n        handle.material.color.copy(handle.material.tempColor);\n        handle.material.opacity = handle.material.tempOpacity;\n        if (!this.enabled) {\n          handle.material.opacity *= 0.5;\n          handle.material.color.lerp(new Color(1, 1, 1), 0.5);\n        } else if (this.axis) {\n          if (handle.name === this.axis) {\n            handle.material.opacity = 1;\n            handle.material.color.lerp(new Color(1, 1, 1), 0.5);\n          } else if (this.axis.split(\"\").some(function (a) {\n            return handle.name === a;\n          })) {\n            handle.material.opacity = 1;\n            handle.material.color.lerp(new Color(1, 1, 1), 0.5);\n          } else {\n            handle.material.opacity *= 0.25;\n            handle.material.color.lerp(new Color(1, 1, 1), 0.5);\n          }\n        }\n      }\n      super.updateMatrixWorld();\n    });\n    const gizmoMaterial = new MeshBasicMaterial({\n      depthTest: false,\n      depthWrite: false,\n      transparent: true,\n      side: DoubleSide,\n      fog: false,\n      toneMapped: false\n    });\n    const gizmoLineMaterial = new LineBasicMaterial({\n      depthTest: false,\n      depthWrite: false,\n      transparent: true,\n      linewidth: 1,\n      fog: false,\n      toneMapped: false\n    });\n    const matInvisible = gizmoMaterial.clone();\n    matInvisible.opacity = 0.15;\n    const matHelper = gizmoMaterial.clone();\n    matHelper.opacity = 0.33;\n    const matRed = gizmoMaterial.clone();\n    matRed.color.set(16711680);\n    const matGreen = gizmoMaterial.clone();\n    matGreen.color.set(65280);\n    const matBlue = gizmoMaterial.clone();\n    matBlue.color.set(255);\n    const matWhiteTransparent = gizmoMaterial.clone();\n    matWhiteTransparent.opacity = 0.25;\n    const matYellowTransparent = matWhiteTransparent.clone();\n    matYellowTransparent.color.set(16776960);\n    const matCyanTransparent = matWhiteTransparent.clone();\n    matCyanTransparent.color.set(65535);\n    const matMagentaTransparent = matWhiteTransparent.clone();\n    matMagentaTransparent.color.set(16711935);\n    const matYellow = gizmoMaterial.clone();\n    matYellow.color.set(16776960);\n    const matLineRed = gizmoLineMaterial.clone();\n    matLineRed.color.set(16711680);\n    const matLineGreen = gizmoLineMaterial.clone();\n    matLineGreen.color.set(65280);\n    const matLineBlue = gizmoLineMaterial.clone();\n    matLineBlue.color.set(255);\n    const matLineCyan = gizmoLineMaterial.clone();\n    matLineCyan.color.set(65535);\n    const matLineMagenta = gizmoLineMaterial.clone();\n    matLineMagenta.color.set(16711935);\n    const matLineYellow = gizmoLineMaterial.clone();\n    matLineYellow.color.set(16776960);\n    const matLineGray = gizmoLineMaterial.clone();\n    matLineGray.color.set(7895160);\n    const matLineYellowTransparent = matLineYellow.clone();\n    matLineYellowTransparent.opacity = 0.25;\n    const arrowGeometry = new CylinderGeometry(0, 0.05, 0.2, 12, 1, false);\n    const scaleHandleGeometry = new BoxGeometry(0.125, 0.125, 0.125);\n    const lineGeometry = new BufferGeometry();\n    lineGeometry.setAttribute(\"position\", new Float32BufferAttribute([0, 0, 0, 1, 0, 0], 3));\n    const CircleGeometry = (radius, arc) => {\n      const geometry = new BufferGeometry();\n      const vertices = [];\n      for (let i = 0; i <= 64 * arc; ++i) {\n        vertices.push(0, Math.cos(i / 32 * Math.PI) * radius, Math.sin(i / 32 * Math.PI) * radius);\n      }\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n      return geometry;\n    };\n    const TranslateHelperGeometry = () => {\n      const geometry = new BufferGeometry();\n      geometry.setAttribute(\"position\", new Float32BufferAttribute([0, 0, 0, 1, 1, 1], 3));\n      return geometry;\n    };\n    const gizmoTranslate = {\n      X: [[new Mesh(arrowGeometry, matRed), [1, 0, 0], [0, 0, -Math.PI / 2], null, \"fwd\"], [new Mesh(arrowGeometry, matRed), [1, 0, 0], [0, 0, Math.PI / 2], null, \"bwd\"], [new Line(lineGeometry, matLineRed)]],\n      Y: [[new Mesh(arrowGeometry, matGreen), [0, 1, 0], null, null, \"fwd\"], [new Mesh(arrowGeometry, matGreen), [0, 1, 0], [Math.PI, 0, 0], null, \"bwd\"], [new Line(lineGeometry, matLineGreen), null, [0, 0, Math.PI / 2]]],\n      Z: [[new Mesh(arrowGeometry, matBlue), [0, 0, 1], [Math.PI / 2, 0, 0], null, \"fwd\"], [new Mesh(arrowGeometry, matBlue), [0, 0, 1], [-Math.PI / 2, 0, 0], null, \"bwd\"], [new Line(lineGeometry, matLineBlue), null, [0, -Math.PI / 2, 0]]],\n      XYZ: [[new Mesh(new OctahedronGeometry(0.1, 0), matWhiteTransparent.clone()), [0, 0, 0], [0, 0, 0]]],\n      XY: [[new Mesh(new PlaneGeometry(0.295, 0.295), matYellowTransparent.clone()), [0.15, 0.15, 0]], [new Line(lineGeometry, matLineYellow), [0.18, 0.3, 0], null, [0.125, 1, 1]], [new Line(lineGeometry, matLineYellow), [0.3, 0.18, 0], [0, 0, Math.PI / 2], [0.125, 1, 1]]],\n      YZ: [[new Mesh(new PlaneGeometry(0.295, 0.295), matCyanTransparent.clone()), [0, 0.15, 0.15], [0, Math.PI / 2, 0]], [new Line(lineGeometry, matLineCyan), [0, 0.18, 0.3], [0, 0, Math.PI / 2], [0.125, 1, 1]], [new Line(lineGeometry, matLineCyan), [0, 0.3, 0.18], [0, -Math.PI / 2, 0], [0.125, 1, 1]]],\n      XZ: [[new Mesh(new PlaneGeometry(0.295, 0.295), matMagentaTransparent.clone()), [0.15, 0, 0.15], [-Math.PI / 2, 0, 0]], [new Line(lineGeometry, matLineMagenta), [0.18, 0, 0.3], null, [0.125, 1, 1]], [new Line(lineGeometry, matLineMagenta), [0.3, 0, 0.18], [0, -Math.PI / 2, 0], [0.125, 1, 1]]]\n    };\n    const pickerTranslate = {\n      X: [[new Mesh(new CylinderGeometry(0.2, 0, 1, 4, 1, false), matInvisible), [0.6, 0, 0], [0, 0, -Math.PI / 2]]],\n      Y: [[new Mesh(new CylinderGeometry(0.2, 0, 1, 4, 1, false), matInvisible), [0, 0.6, 0]]],\n      Z: [[new Mesh(new CylinderGeometry(0.2, 0, 1, 4, 1, false), matInvisible), [0, 0, 0.6], [Math.PI / 2, 0, 0]]],\n      XYZ: [[new Mesh(new OctahedronGeometry(0.2, 0), matInvisible)]],\n      XY: [[new Mesh(new PlaneGeometry(0.4, 0.4), matInvisible), [0.2, 0.2, 0]]],\n      YZ: [[new Mesh(new PlaneGeometry(0.4, 0.4), matInvisible), [0, 0.2, 0.2], [0, Math.PI / 2, 0]]],\n      XZ: [[new Mesh(new PlaneGeometry(0.4, 0.4), matInvisible), [0.2, 0, 0.2], [-Math.PI / 2, 0, 0]]]\n    };\n    const helperTranslate = {\n      START: [[new Mesh(new OctahedronGeometry(0.01, 2), matHelper), null, null, null, \"helper\"]],\n      END: [[new Mesh(new OctahedronGeometry(0.01, 2), matHelper), null, null, null, \"helper\"]],\n      DELTA: [[new Line(TranslateHelperGeometry(), matHelper), null, null, null, \"helper\"]],\n      X: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], \"helper\"]],\n      Y: [[new Line(lineGeometry, matHelper.clone()), [0, -1e3, 0], [0, 0, Math.PI / 2], [1e6, 1, 1], \"helper\"]],\n      Z: [[new Line(lineGeometry, matHelper.clone()), [0, 0, -1e3], [0, -Math.PI / 2, 0], [1e6, 1, 1], \"helper\"]]\n    };\n    const gizmoRotate = {\n      X: [[new Line(CircleGeometry(1, 0.5), matLineRed)], [new Mesh(new OctahedronGeometry(0.04, 0), matRed), [0, 0, 0.99], null, [1, 3, 1]]],\n      Y: [[new Line(CircleGeometry(1, 0.5), matLineGreen), null, [0, 0, -Math.PI / 2]], [new Mesh(new OctahedronGeometry(0.04, 0), matGreen), [0, 0, 0.99], null, [3, 1, 1]]],\n      Z: [[new Line(CircleGeometry(1, 0.5), matLineBlue), null, [0, Math.PI / 2, 0]], [new Mesh(new OctahedronGeometry(0.04, 0), matBlue), [0.99, 0, 0], null, [1, 3, 1]]],\n      E: [[new Line(CircleGeometry(1.25, 1), matLineYellowTransparent), null, [0, Math.PI / 2, 0]], [new Mesh(new CylinderGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent), [1.17, 0, 0], [0, 0, -Math.PI / 2], [1, 1, 1e-3]], [new Mesh(new CylinderGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent), [-1.17, 0, 0], [0, 0, Math.PI / 2], [1, 1, 1e-3]], [new Mesh(new CylinderGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent), [0, -1.17, 0], [Math.PI, 0, 0], [1, 1, 1e-3]], [new Mesh(new CylinderGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent), [0, 1.17, 0], [0, 0, 0], [1, 1, 1e-3]]],\n      XYZE: [[new Line(CircleGeometry(1, 1), matLineGray), null, [0, Math.PI / 2, 0]]]\n    };\n    const helperRotate = {\n      AXIS: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], \"helper\"]]\n    };\n    const pickerRotate = {\n      X: [[new Mesh(new TorusGeometry(1, 0.1, 4, 24), matInvisible), [0, 0, 0], [0, -Math.PI / 2, -Math.PI / 2]]],\n      Y: [[new Mesh(new TorusGeometry(1, 0.1, 4, 24), matInvisible), [0, 0, 0], [Math.PI / 2, 0, 0]]],\n      Z: [[new Mesh(new TorusGeometry(1, 0.1, 4, 24), matInvisible), [0, 0, 0], [0, 0, -Math.PI / 2]]],\n      E: [[new Mesh(new TorusGeometry(1.25, 0.1, 2, 24), matInvisible)]],\n      XYZE: [[new Mesh(new SphereGeometry(0.7, 10, 8), matInvisible)]]\n    };\n    const gizmoScale = {\n      X: [[new Mesh(scaleHandleGeometry, matRed), [0.8, 0, 0], [0, 0, -Math.PI / 2]], [new Line(lineGeometry, matLineRed), null, null, [0.8, 1, 1]]],\n      Y: [[new Mesh(scaleHandleGeometry, matGreen), [0, 0.8, 0]], [new Line(lineGeometry, matLineGreen), null, [0, 0, Math.PI / 2], [0.8, 1, 1]]],\n      Z: [[new Mesh(scaleHandleGeometry, matBlue), [0, 0, 0.8], [Math.PI / 2, 0, 0]], [new Line(lineGeometry, matLineBlue), null, [0, -Math.PI / 2, 0], [0.8, 1, 1]]],\n      XY: [[new Mesh(scaleHandleGeometry, matYellowTransparent), [0.85, 0.85, 0], null, [2, 2, 0.2]], [new Line(lineGeometry, matLineYellow), [0.855, 0.98, 0], null, [0.125, 1, 1]], [new Line(lineGeometry, matLineYellow), [0.98, 0.855, 0], [0, 0, Math.PI / 2], [0.125, 1, 1]]],\n      YZ: [[new Mesh(scaleHandleGeometry, matCyanTransparent), [0, 0.85, 0.85], null, [0.2, 2, 2]], [new Line(lineGeometry, matLineCyan), [0, 0.855, 0.98], [0, 0, Math.PI / 2], [0.125, 1, 1]], [new Line(lineGeometry, matLineCyan), [0, 0.98, 0.855], [0, -Math.PI / 2, 0], [0.125, 1, 1]]],\n      XZ: [[new Mesh(scaleHandleGeometry, matMagentaTransparent), [0.85, 0, 0.85], null, [2, 0.2, 2]], [new Line(lineGeometry, matLineMagenta), [0.855, 0, 0.98], null, [0.125, 1, 1]], [new Line(lineGeometry, matLineMagenta), [0.98, 0, 0.855], [0, -Math.PI / 2, 0], [0.125, 1, 1]]],\n      XYZX: [[new Mesh(new BoxGeometry(0.125, 0.125, 0.125), matWhiteTransparent.clone()), [1.1, 0, 0]]],\n      XYZY: [[new Mesh(new BoxGeometry(0.125, 0.125, 0.125), matWhiteTransparent.clone()), [0, 1.1, 0]]],\n      XYZZ: [[new Mesh(new BoxGeometry(0.125, 0.125, 0.125), matWhiteTransparent.clone()), [0, 0, 1.1]]]\n    };\n    const pickerScale = {\n      X: [[new Mesh(new CylinderGeometry(0.2, 0, 0.8, 4, 1, false), matInvisible), [0.5, 0, 0], [0, 0, -Math.PI / 2]]],\n      Y: [[new Mesh(new CylinderGeometry(0.2, 0, 0.8, 4, 1, false), matInvisible), [0, 0.5, 0]]],\n      Z: [[new Mesh(new CylinderGeometry(0.2, 0, 0.8, 4, 1, false), matInvisible), [0, 0, 0.5], [Math.PI / 2, 0, 0]]],\n      XY: [[new Mesh(scaleHandleGeometry, matInvisible), [0.85, 0.85, 0], null, [3, 3, 0.2]]],\n      YZ: [[new Mesh(scaleHandleGeometry, matInvisible), [0, 0.85, 0.85], null, [0.2, 3, 3]]],\n      XZ: [[new Mesh(scaleHandleGeometry, matInvisible), [0.85, 0, 0.85], null, [3, 0.2, 3]]],\n      XYZX: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.2), matInvisible), [1.1, 0, 0]]],\n      XYZY: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.2), matInvisible), [0, 1.1, 0]]],\n      XYZZ: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.2), matInvisible), [0, 0, 1.1]]]\n    };\n    const helperScale = {\n      X: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], \"helper\"]],\n      Y: [[new Line(lineGeometry, matHelper.clone()), [0, -1e3, 0], [0, 0, Math.PI / 2], [1e6, 1, 1], \"helper\"]],\n      Z: [[new Line(lineGeometry, matHelper.clone()), [0, 0, -1e3], [0, -Math.PI / 2, 0], [1e6, 1, 1], \"helper\"]]\n    };\n    const setupGizmo = gizmoMap => {\n      const gizmo = new Object3D();\n      for (let name in gizmoMap) {\n        for (let i = gizmoMap[name].length; i--;) {\n          const object = gizmoMap[name][i][0].clone();\n          const position = gizmoMap[name][i][1];\n          const rotation = gizmoMap[name][i][2];\n          const scale = gizmoMap[name][i][3];\n          const tag = gizmoMap[name][i][4];\n          object.name = name;\n          object.tag = tag;\n          if (position) {\n            object.position.set(position[0], position[1], position[2]);\n          }\n          if (rotation) {\n            object.rotation.set(rotation[0], rotation[1], rotation[2]);\n          }\n          if (scale) {\n            object.scale.set(scale[0], scale[1], scale[2]);\n          }\n          object.updateMatrix();\n          const tempGeometry = object.geometry.clone();\n          tempGeometry.applyMatrix4(object.matrix);\n          object.geometry = tempGeometry;\n          object.renderOrder = Infinity;\n          object.position.set(0, 0, 0);\n          object.rotation.set(0, 0, 0);\n          object.scale.set(1, 1, 1);\n          gizmo.add(object);\n        }\n      }\n      return gizmo;\n    };\n    this.gizmo = {};\n    this.picker = {};\n    this.helper = {};\n    this.add(this.gizmo[\"translate\"] = setupGizmo(gizmoTranslate));\n    this.add(this.gizmo[\"rotate\"] = setupGizmo(gizmoRotate));\n    this.add(this.gizmo[\"scale\"] = setupGizmo(gizmoScale));\n    this.add(this.picker[\"translate\"] = setupGizmo(pickerTranslate));\n    this.add(this.picker[\"rotate\"] = setupGizmo(pickerRotate));\n    this.add(this.picker[\"scale\"] = setupGizmo(pickerScale));\n    this.add(this.helper[\"translate\"] = setupGizmo(helperTranslate));\n    this.add(this.helper[\"rotate\"] = setupGizmo(helperRotate));\n    this.add(this.helper[\"scale\"] = setupGizmo(helperScale));\n    this.picker[\"translate\"].visible = false;\n    this.picker[\"rotate\"].visible = false;\n    this.picker[\"scale\"].visible = false;\n  }\n}\nclass TransformControlsPlane extends Mesh {\n  constructor() {\n    super(new PlaneGeometry(1e5, 1e5, 2, 2), new MeshBasicMaterial({\n      visible: false,\n      wireframe: true,\n      side: DoubleSide,\n      transparent: true,\n      opacity: 0.1,\n      toneMapped: false\n    }));\n    __publicField(this, \"isTransformControlsPlane\", true);\n    __publicField(this, \"type\", \"TransformControlsPlane\");\n    __publicField(this, \"unitX\", new Vector3(1, 0, 0));\n    __publicField(this, \"unitY\", new Vector3(0, 1, 0));\n    __publicField(this, \"unitZ\", new Vector3(0, 0, 1));\n    __publicField(this, \"tempVector\", new Vector3());\n    __publicField(this, \"dirVector\", new Vector3());\n    __publicField(this, \"alignVector\", new Vector3());\n    __publicField(this, \"tempMatrix\", new Matrix4());\n    __publicField(this, \"identityQuaternion\", new Quaternion());\n    // these are set from parent class TransformControls\n    __publicField(this, \"cameraQuaternion\", new Quaternion());\n    __publicField(this, \"worldPosition\", new Vector3());\n    __publicField(this, \"worldQuaternion\", new Quaternion());\n    __publicField(this, \"eye\", new Vector3());\n    __publicField(this, \"axis\", null);\n    __publicField(this, \"mode\", \"translate\");\n    __publicField(this, \"space\", \"world\");\n    __publicField(this, \"updateMatrixWorld\", () => {\n      let space = this.space;\n      this.position.copy(this.worldPosition);\n      if (this.mode === \"scale\") space = \"local\";\n      this.unitX.set(1, 0, 0).applyQuaternion(space === \"local\" ? this.worldQuaternion : this.identityQuaternion);\n      this.unitY.set(0, 1, 0).applyQuaternion(space === \"local\" ? this.worldQuaternion : this.identityQuaternion);\n      this.unitZ.set(0, 0, 1).applyQuaternion(space === \"local\" ? this.worldQuaternion : this.identityQuaternion);\n      this.alignVector.copy(this.unitY);\n      switch (this.mode) {\n        case \"translate\":\n        case \"scale\":\n          switch (this.axis) {\n            case \"X\":\n              this.alignVector.copy(this.eye).cross(this.unitX);\n              this.dirVector.copy(this.unitX).cross(this.alignVector);\n              break;\n            case \"Y\":\n              this.alignVector.copy(this.eye).cross(this.unitY);\n              this.dirVector.copy(this.unitY).cross(this.alignVector);\n              break;\n            case \"Z\":\n              this.alignVector.copy(this.eye).cross(this.unitZ);\n              this.dirVector.copy(this.unitZ).cross(this.alignVector);\n              break;\n            case \"XY\":\n              this.dirVector.copy(this.unitZ);\n              break;\n            case \"YZ\":\n              this.dirVector.copy(this.unitX);\n              break;\n            case \"XZ\":\n              this.alignVector.copy(this.unitZ);\n              this.dirVector.copy(this.unitY);\n              break;\n            case \"XYZ\":\n            case \"E\":\n              this.dirVector.set(0, 0, 0);\n              break;\n          }\n          break;\n        case \"rotate\":\n        default:\n          this.dirVector.set(0, 0, 0);\n      }\n      if (this.dirVector.length() === 0) {\n        this.quaternion.copy(this.cameraQuaternion);\n      } else {\n        this.tempMatrix.lookAt(this.tempVector.set(0, 0, 0), this.dirVector, this.alignVector);\n        this.quaternion.setFromRotationMatrix(this.tempMatrix);\n      }\n      super.updateMatrixWorld();\n    });\n  }\n}\nexport { TransformControls, TransformControlsGizmo, TransformControlsPlane };","map":{"version":3,"sources":["../../src/controls/TransformControls.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BoxGeometry,\n  BufferGeometry,\n  Color,\n  CylinderGeometry,\n  DoubleSide,\n  Euler,\n  Float32BufferAttribute,\n  Line,\n  LineBasicMaterial,\n  Material,\n  Matrix4,\n  Mesh,\n  MeshBasicMaterial,\n  Object3D,\n  OctahedronGeometry,\n  OrthographicCamera,\n  PerspectiveCamera,\n  PlaneGeometry,\n  Quaternion,\n  Raycaster,\n  SphereGeometry,\n  Intersection,\n  TorusGeometry,\n  Vector3,\n  Camera,\n  Vector2,\n} from 'three'\n\nexport interface TransformControlsPointerObject {\n  x: number\n  y: number\n  button: number\n}\n\nclass TransformControls<TCamera extends Camera = Camera> extends Object3D {\n  public readonly isTransformControls = true\n\n  public visible = false\n\n  private domElement: HTMLElement | undefined\n\n  private raycaster = new Raycaster()\n\n  private gizmo: TransformControlsGizmo\n  private plane: TransformControlsPlane\n\n  private tempVector = new Vector3()\n  private tempVector2 = new Vector3()\n  private tempQuaternion = new Quaternion()\n  private unit = {\n    X: new Vector3(1, 0, 0),\n    Y: new Vector3(0, 1, 0),\n    Z: new Vector3(0, 0, 1),\n  }\n\n  private pointStart = new Vector3()\n  private pointEnd = new Vector3()\n  private offset = new Vector3()\n  private rotationAxis = new Vector3()\n  private startNorm = new Vector3()\n  private endNorm = new Vector3()\n  private rotationAngle = 0\n\n  private cameraPosition = new Vector3()\n  private cameraQuaternion = new Quaternion()\n  private cameraScale = new Vector3()\n\n  private parentPosition = new Vector3()\n  private parentQuaternion = new Quaternion()\n  private parentQuaternionInv = new Quaternion()\n  private parentScale = new Vector3()\n\n  private worldPositionStart = new Vector3()\n  private worldQuaternionStart = new Quaternion()\n  private worldScaleStart = new Vector3()\n\n  private worldPosition = new Vector3()\n  private worldQuaternion = new Quaternion()\n  private worldQuaternionInv = new Quaternion()\n  private worldScale = new Vector3()\n\n  private eye = new Vector3()\n\n  private positionStart = new Vector3()\n  private quaternionStart = new Quaternion()\n  private scaleStart = new Vector3()\n\n  private camera: TCamera\n  private object: Object3D | undefined\n  private enabled = true\n  private axis: string | null = null\n  private mode: 'translate' | 'rotate' | 'scale' = 'translate'\n  private translationSnap: number | null = null\n  private rotationSnap: number | null = null\n  private scaleSnap: number | null = null\n  private space = 'world'\n  private size = 1\n  private dragging = false\n  private showX = true\n  private showY = true\n  private showZ = true\n\n  // events\n  private changeEvent = { type: 'change' }\n  private mouseDownEvent = { type: 'mouseDown', mode: this.mode }\n  private mouseUpEvent = { type: 'mouseUp', mode: this.mode }\n  private objectChangeEvent = { type: 'objectChange' }\n\n  constructor(camera: TCamera, domElement: HTMLElement | undefined) {\n    super()\n\n    this.domElement = domElement\n    this.camera = camera\n\n    this.gizmo = new TransformControlsGizmo()\n    this.add(this.gizmo)\n\n    this.plane = new TransformControlsPlane()\n    this.add(this.plane)\n\n    // Defined getter, setter and store for a property\n    const defineProperty = <TValue>(propName: string, defaultValue: TValue): void => {\n      let propValue = defaultValue\n\n      Object.defineProperty(this, propName, {\n        get: function () {\n          return propValue !== undefined ? propValue : defaultValue\n        },\n\n        set: function (value) {\n          if (propValue !== value) {\n            propValue = value\n            this.plane[propName] = value\n            this.gizmo[propName] = value\n\n            this.dispatchEvent({ type: propName + '-changed', value: value })\n            this.dispatchEvent(this.changeEvent)\n          }\n        },\n      })\n\n      //@ts-ignore\n      this[propName] = defaultValue\n      // @ts-ignore\n      this.plane[propName] = defaultValue\n      // @ts-ignore\n      this.gizmo[propName] = defaultValue\n    }\n\n    defineProperty('camera', this.camera)\n    defineProperty('object', this.object)\n    defineProperty('enabled', this.enabled)\n    defineProperty('axis', this.axis)\n    defineProperty('mode', this.mode)\n    defineProperty('translationSnap', this.translationSnap)\n    defineProperty('rotationSnap', this.rotationSnap)\n    defineProperty('scaleSnap', this.scaleSnap)\n    defineProperty('space', this.space)\n    defineProperty('size', this.size)\n    defineProperty('dragging', this.dragging)\n    defineProperty('showX', this.showX)\n    defineProperty('showY', this.showY)\n    defineProperty('showZ', this.showZ)\n    defineProperty('worldPosition', this.worldPosition)\n    defineProperty('worldPositionStart', this.worldPositionStart)\n    defineProperty('worldQuaternion', this.worldQuaternion)\n    defineProperty('worldQuaternionStart', this.worldQuaternionStart)\n    defineProperty('cameraPosition', this.cameraPosition)\n    defineProperty('cameraQuaternion', this.cameraQuaternion)\n    defineProperty('pointStart', this.pointStart)\n    defineProperty('pointEnd', this.pointEnd)\n    defineProperty('rotationAxis', this.rotationAxis)\n    defineProperty('rotationAngle', this.rotationAngle)\n    defineProperty('eye', this.eye)\n\n    // connect events\n    if (domElement !== undefined) this.connect(domElement)\n  }\n\n  private intersectObjectWithRay = (\n    object: Object3D,\n    raycaster: Raycaster,\n    includeInvisible?: boolean,\n  ): false | Intersection => {\n    const allIntersections = raycaster.intersectObject(object, true)\n\n    for (let i = 0; i < allIntersections.length; i++) {\n      if (allIntersections[i].object.visible || includeInvisible) {\n        return allIntersections[i]\n      }\n    }\n\n    return false\n  }\n\n  // Set current object\n  public attach = (object: Object3D): this => {\n    this.object = object\n    this.visible = true\n\n    return this\n  }\n\n  // Detatch from object\n  public detach = (): this => {\n    this.object = undefined\n    this.visible = false\n    this.axis = null\n\n    return this\n  }\n\n  // Reset\n  public reset = (): this => {\n    if (!this.enabled) return this\n\n    if (this.dragging) {\n      if (this.object !== undefined) {\n        this.object.position.copy(this.positionStart)\n        this.object.quaternion.copy(this.quaternionStart)\n        this.object.scale.copy(this.scaleStart)\n        // @ts-ignore\n        this.dispatchEvent(this.changeEvent)\n        // @ts-ignore\n        this.dispatchEvent(this.objectChangeEvent)\n        this.pointStart.copy(this.pointEnd)\n      }\n    }\n\n    return this\n  }\n\n  public updateMatrixWorld = (): void => {\n    if (this.object !== undefined) {\n      this.object.updateMatrixWorld()\n\n      if (this.object.parent === null) {\n        console.error('TransformControls: The attached 3D object must be a part of the scene graph.')\n      } else {\n        this.object.parent.matrixWorld.decompose(this.parentPosition, this.parentQuaternion, this.parentScale)\n      }\n\n      this.object.matrixWorld.decompose(this.worldPosition, this.worldQuaternion, this.worldScale)\n\n      this.parentQuaternionInv.copy(this.parentQuaternion).invert()\n      this.worldQuaternionInv.copy(this.worldQuaternion).invert()\n    }\n\n    this.camera.updateMatrixWorld()\n    this.camera.matrixWorld.decompose(this.cameraPosition, this.cameraQuaternion, this.cameraScale)\n\n    this.eye.copy(this.cameraPosition).sub(this.worldPosition).normalize()\n\n    super.updateMatrixWorld()\n  }\n\n  private pointerHover = (pointer: TransformControlsPointerObject): void => {\n    if (this.object === undefined || this.dragging === true) return\n\n    this.raycaster.setFromCamera((pointer as unknown) as Vector2, this.camera)\n\n    const intersect = this.intersectObjectWithRay(this.gizmo.picker[this.mode], this.raycaster)\n\n    if (intersect) {\n      this.axis = intersect.object.name\n    } else {\n      this.axis = null\n    }\n  }\n\n  private pointerDown = (pointer: TransformControlsPointerObject): void => {\n    if (this.object === undefined || this.dragging === true || pointer.button !== 0) return\n\n    if (this.axis !== null) {\n      this.raycaster.setFromCamera((pointer as unknown) as Vector2, this.camera)\n\n      const planeIntersect = this.intersectObjectWithRay(this.plane, this.raycaster, true)\n\n      if (planeIntersect) {\n        let space = this.space\n\n        if (this.mode === 'scale') {\n          space = 'local'\n        } else if (this.axis === 'E' || this.axis === 'XYZE' || this.axis === 'XYZ') {\n          space = 'world'\n        }\n\n        if (space === 'local' && this.mode === 'rotate') {\n          const snap = this.rotationSnap\n\n          if (this.axis === 'X' && snap) this.object.rotation.x = Math.round(this.object.rotation.x / snap) * snap\n          if (this.axis === 'Y' && snap) this.object.rotation.y = Math.round(this.object.rotation.y / snap) * snap\n          if (this.axis === 'Z' && snap) this.object.rotation.z = Math.round(this.object.rotation.z / snap) * snap\n        }\n\n        this.object.updateMatrixWorld()\n\n        if (this.object.parent) {\n          this.object.parent.updateMatrixWorld()\n        }\n\n        this.positionStart.copy(this.object.position)\n        this.quaternionStart.copy(this.object.quaternion)\n        this.scaleStart.copy(this.object.scale)\n\n        this.object.matrixWorld.decompose(this.worldPositionStart, this.worldQuaternionStart, this.worldScaleStart)\n\n        this.pointStart.copy(planeIntersect.point).sub(this.worldPositionStart)\n      }\n\n      this.dragging = true\n      this.mouseDownEvent.mode = this.mode\n      // @ts-ignore\n      this.dispatchEvent(this.mouseDownEvent)\n    }\n  }\n\n  private pointerMove = (pointer: TransformControlsPointerObject): void => {\n    const axis = this.axis\n    const mode = this.mode\n    const object = this.object\n    let space = this.space\n\n    if (mode === 'scale') {\n      space = 'local'\n    } else if (axis === 'E' || axis === 'XYZE' || axis === 'XYZ') {\n      space = 'world'\n    }\n\n    if (object === undefined || axis === null || this.dragging === false || pointer.button !== -1) return\n\n    this.raycaster.setFromCamera((pointer as unknown) as Vector2, this.camera)\n\n    const planeIntersect = this.intersectObjectWithRay(this.plane, this.raycaster, true)\n\n    if (!planeIntersect) return\n\n    this.pointEnd.copy(planeIntersect.point).sub(this.worldPositionStart)\n\n    if (mode === 'translate') {\n      // Apply translate\n\n      this.offset.copy(this.pointEnd).sub(this.pointStart)\n\n      if (space === 'local' && axis !== 'XYZ') {\n        this.offset.applyQuaternion(this.worldQuaternionInv)\n      }\n\n      if (axis.indexOf('X') === -1) this.offset.x = 0\n      if (axis.indexOf('Y') === -1) this.offset.y = 0\n      if (axis.indexOf('Z') === -1) this.offset.z = 0\n\n      if (space === 'local' && axis !== 'XYZ') {\n        this.offset.applyQuaternion(this.quaternionStart).divide(this.parentScale)\n      } else {\n        this.offset.applyQuaternion(this.parentQuaternionInv).divide(this.parentScale)\n      }\n\n      object.position.copy(this.offset).add(this.positionStart)\n\n      // Apply translation snap\n\n      if (this.translationSnap) {\n        if (space === 'local') {\n          object.position.applyQuaternion(this.tempQuaternion.copy(this.quaternionStart).invert())\n\n          if (axis.search('X') !== -1) {\n            object.position.x = Math.round(object.position.x / this.translationSnap) * this.translationSnap\n          }\n\n          if (axis.search('Y') !== -1) {\n            object.position.y = Math.round(object.position.y / this.translationSnap) * this.translationSnap\n          }\n\n          if (axis.search('Z') !== -1) {\n            object.position.z = Math.round(object.position.z / this.translationSnap) * this.translationSnap\n          }\n\n          object.position.applyQuaternion(this.quaternionStart)\n        }\n\n        if (space === 'world') {\n          if (object.parent) {\n            object.position.add(this.tempVector.setFromMatrixPosition(object.parent.matrixWorld))\n          }\n\n          if (axis.search('X') !== -1) {\n            object.position.x = Math.round(object.position.x / this.translationSnap) * this.translationSnap\n          }\n\n          if (axis.search('Y') !== -1) {\n            object.position.y = Math.round(object.position.y / this.translationSnap) * this.translationSnap\n          }\n\n          if (axis.search('Z') !== -1) {\n            object.position.z = Math.round(object.position.z / this.translationSnap) * this.translationSnap\n          }\n\n          if (object.parent) {\n            object.position.sub(this.tempVector.setFromMatrixPosition(object.parent.matrixWorld))\n          }\n        }\n      }\n    } else if (mode === 'scale') {\n      if (axis.search('XYZ') !== -1) {\n        let d = this.pointEnd.length() / this.pointStart.length()\n\n        if (this.pointEnd.dot(this.pointStart) < 0) d *= -1\n\n        this.tempVector2.set(d, d, d)\n      } else {\n        this.tempVector.copy(this.pointStart)\n        this.tempVector2.copy(this.pointEnd)\n\n        this.tempVector.applyQuaternion(this.worldQuaternionInv)\n        this.tempVector2.applyQuaternion(this.worldQuaternionInv)\n\n        this.tempVector2.divide(this.tempVector)\n\n        if (axis.search('X') === -1) {\n          this.tempVector2.x = 1\n        }\n\n        if (axis.search('Y') === -1) {\n          this.tempVector2.y = 1\n        }\n\n        if (axis.search('Z') === -1) {\n          this.tempVector2.z = 1\n        }\n      }\n\n      // Apply scale\n\n      object.scale.copy(this.scaleStart).multiply(this.tempVector2)\n\n      if (this.scaleSnap && this.object) {\n        if (axis.search('X') !== -1) {\n          this.object.scale.x = Math.round(object.scale.x / this.scaleSnap) * this.scaleSnap || this.scaleSnap\n        }\n\n        if (axis.search('Y') !== -1) {\n          object.scale.y = Math.round(object.scale.y / this.scaleSnap) * this.scaleSnap || this.scaleSnap\n        }\n\n        if (axis.search('Z') !== -1) {\n          object.scale.z = Math.round(object.scale.z / this.scaleSnap) * this.scaleSnap || this.scaleSnap\n        }\n      }\n    } else if (mode === 'rotate') {\n      this.offset.copy(this.pointEnd).sub(this.pointStart)\n\n      const ROTATION_SPEED =\n        20 / this.worldPosition.distanceTo(this.tempVector.setFromMatrixPosition(this.camera.matrixWorld))\n\n      if (axis === 'E') {\n        this.rotationAxis.copy(this.eye)\n        this.rotationAngle = this.pointEnd.angleTo(this.pointStart)\n\n        this.startNorm.copy(this.pointStart).normalize()\n        this.endNorm.copy(this.pointEnd).normalize()\n\n        this.rotationAngle *= this.endNorm.cross(this.startNorm).dot(this.eye) < 0 ? 1 : -1\n      } else if (axis === 'XYZE') {\n        this.rotationAxis.copy(this.offset).cross(this.eye).normalize()\n        this.rotationAngle = this.offset.dot(this.tempVector.copy(this.rotationAxis).cross(this.eye)) * ROTATION_SPEED\n      } else if (axis === 'X' || axis === 'Y' || axis === 'Z') {\n        this.rotationAxis.copy(this.unit[axis])\n\n        this.tempVector.copy(this.unit[axis])\n\n        if (space === 'local') {\n          this.tempVector.applyQuaternion(this.worldQuaternion)\n        }\n\n        this.rotationAngle = this.offset.dot(this.tempVector.cross(this.eye).normalize()) * ROTATION_SPEED\n      }\n\n      // Apply rotation snap\n\n      if (this.rotationSnap) {\n        this.rotationAngle = Math.round(this.rotationAngle / this.rotationSnap) * this.rotationSnap\n      }\n\n      // Apply rotate\n      if (space === 'local' && axis !== 'E' && axis !== 'XYZE') {\n        object.quaternion.copy(this.quaternionStart)\n        object.quaternion\n          .multiply(this.tempQuaternion.setFromAxisAngle(this.rotationAxis, this.rotationAngle))\n          .normalize()\n      } else {\n        this.rotationAxis.applyQuaternion(this.parentQuaternionInv)\n        object.quaternion.copy(this.tempQuaternion.setFromAxisAngle(this.rotationAxis, this.rotationAngle))\n        object.quaternion.multiply(this.quaternionStart).normalize()\n      }\n    }\n\n    // @ts-ignore\n    this.dispatchEvent(this.changeEvent)\n    // @ts-ignore\n    this.dispatchEvent(this.objectChangeEvent)\n  }\n\n  private pointerUp = (pointer: TransformControlsPointerObject): void => {\n    if (pointer.button !== 0) return\n\n    if (this.dragging && this.axis !== null) {\n      this.mouseUpEvent.mode = this.mode\n      // @ts-ignore\n      this.dispatchEvent(this.mouseUpEvent)\n    }\n\n    this.dragging = false\n    this.axis = null\n  }\n\n  private getPointer = (event: Event): TransformControlsPointerObject => {\n    if (this.domElement && this.domElement.ownerDocument?.pointerLockElement) {\n      return {\n        x: 0,\n        y: 0,\n        button: (event as MouseEvent).button,\n      }\n    } else {\n      const pointer = (event as TouchEvent).changedTouches\n        ? (event as TouchEvent).changedTouches[0]\n        : (event as MouseEvent)\n\n      const rect = this.domElement!.getBoundingClientRect()\n\n      return {\n        x: ((pointer.clientX - rect.left) / rect.width) * 2 - 1,\n        y: (-(pointer.clientY - rect.top) / rect.height) * 2 + 1,\n        button: (event as MouseEvent).button,\n      }\n    }\n  }\n\n  private onPointerHover = (event: Event): void => {\n    if (!this.enabled) return\n\n    switch ((event as PointerEvent).pointerType) {\n      case 'mouse':\n      case 'pen':\n        this.pointerHover(this.getPointer(event))\n        break\n    }\n  }\n\n  private onPointerDown = (event: Event): void => {\n    if (!this.enabled || !this.domElement) return\n\n    this.domElement.style.touchAction = 'none' // disable touch scroll\n    this.domElement.ownerDocument.addEventListener('pointermove', this.onPointerMove)\n    this.pointerHover(this.getPointer(event))\n    this.pointerDown(this.getPointer(event))\n  }\n\n  private onPointerMove = (event: Event): void => {\n    if (!this.enabled) return\n\n    this.pointerMove(this.getPointer(event))\n  }\n\n  private onPointerUp = (event: Event): void => {\n    if (!this.enabled || !this.domElement) return\n\n    this.domElement.style.touchAction! = ''\n    this.domElement.ownerDocument.removeEventListener('pointermove', this.onPointerMove)\n\n    this.pointerUp(this.getPointer(event))\n  }\n\n  public getMode = (): TransformControls['mode'] => this.mode\n\n  public setMode = (mode: TransformControls['mode']): void => {\n    this.mode = mode\n  }\n\n  public setTranslationSnap = (translationSnap: number): void => {\n    this.translationSnap = translationSnap\n  }\n\n  public setRotationSnap = (rotationSnap: number): void => {\n    this.rotationSnap = rotationSnap\n  }\n\n  public setScaleSnap = (scaleSnap: number): void => {\n    this.scaleSnap = scaleSnap\n  }\n\n  public setSize = (size: number): void => {\n    this.size = size\n  }\n\n  public setSpace = (space: string): void => {\n    this.space = space\n  }\n\n  public update = (): void => {\n    console.warn(\n      'THREE.TransformControls: update function has no more functionality and therefore has been deprecated.',\n    )\n  }\n\n  public connect = (domElement: HTMLElement): void => {\n    if ((domElement as any) === document) {\n      console.error(\n        'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.',\n      )\n    }\n    this.domElement = domElement\n\n    this.domElement.addEventListener('pointerdown', this.onPointerDown)\n    this.domElement.addEventListener('pointermove', this.onPointerHover)\n    this.domElement.ownerDocument.addEventListener('pointerup', this.onPointerUp)\n  }\n\n  public dispose = (): void => {\n    this.domElement?.removeEventListener('pointerdown', this.onPointerDown)\n    this.domElement?.removeEventListener('pointermove', this.onPointerHover)\n    this.domElement?.ownerDocument?.removeEventListener('pointermove', this.onPointerMove)\n    this.domElement?.ownerDocument?.removeEventListener('pointerup', this.onPointerUp)\n\n    this.traverse((child) => {\n      const mesh = child as Mesh<BufferGeometry, Material>\n      if (mesh.geometry) {\n        mesh.geometry.dispose()\n      }\n      if (mesh.material) {\n        mesh.material.dispose()\n      }\n    })\n  }\n}\n\ntype TransformControlsGizmoPrivateGizmos = {\n  ['translate']: Object3D\n  ['scale']: Object3D\n  ['rotate']: Object3D\n  ['visible']: boolean\n}\n\nclass TransformControlsGizmo extends Object3D {\n  private isTransformControlsGizmo = true\n  public type = 'TransformControlsGizmo'\n\n  private tempVector = new Vector3(0, 0, 0)\n  private tempEuler = new Euler()\n  private alignVector = new Vector3(0, 1, 0)\n  private zeroVector = new Vector3(0, 0, 0)\n  private lookAtMatrix = new Matrix4()\n  private tempQuaternion = new Quaternion()\n  private tempQuaternion2 = new Quaternion()\n  private identityQuaternion = new Quaternion()\n\n  private unitX = new Vector3(1, 0, 0)\n  private unitY = new Vector3(0, 1, 0)\n  private unitZ = new Vector3(0, 0, 1)\n\n  private gizmo: TransformControlsGizmoPrivateGizmos\n  public picker: TransformControlsGizmoPrivateGizmos\n  private helper: TransformControlsGizmoPrivateGizmos\n\n  // these are set from parent class TransformControls\n  private rotationAxis = new Vector3()\n\n  private cameraPosition = new Vector3()\n\n  private worldPositionStart = new Vector3()\n  private worldQuaternionStart = new Quaternion()\n\n  private worldPosition = new Vector3()\n  private worldQuaternion = new Quaternion()\n\n  private eye = new Vector3()\n\n  private camera: PerspectiveCamera | OrthographicCamera = null!\n  private enabled = true\n  private axis: string | null = null\n  private mode: 'translate' | 'rotate' | 'scale' = 'translate'\n  private space = 'world'\n  private size = 1\n  private dragging = false\n  private showX = true\n  private showY = true\n  private showZ = true\n\n  constructor() {\n    super()\n\n    const gizmoMaterial = new MeshBasicMaterial({\n      depthTest: false,\n      depthWrite: false,\n      transparent: true,\n      side: DoubleSide,\n      fog: false,\n      toneMapped: false,\n    })\n\n    const gizmoLineMaterial = new LineBasicMaterial({\n      depthTest: false,\n      depthWrite: false,\n      transparent: true,\n      linewidth: 1,\n      fog: false,\n      toneMapped: false,\n    })\n\n    // Make unique material for each axis/color\n\n    const matInvisible = gizmoMaterial.clone()\n    matInvisible.opacity = 0.15\n\n    const matHelper = gizmoMaterial.clone()\n    matHelper.opacity = 0.33\n\n    const matRed = gizmoMaterial.clone() as MeshBasicMaterial\n    matRed.color.set(0xff0000)\n\n    const matGreen = gizmoMaterial.clone() as MeshBasicMaterial\n    matGreen.color.set(0x00ff00)\n\n    const matBlue = gizmoMaterial.clone() as MeshBasicMaterial\n    matBlue.color.set(0x0000ff)\n\n    const matWhiteTransparent = gizmoMaterial.clone() as MeshBasicMaterial\n    matWhiteTransparent.opacity = 0.25\n\n    const matYellowTransparent = matWhiteTransparent.clone() as MeshBasicMaterial\n    matYellowTransparent.color.set(0xffff00)\n\n    const matCyanTransparent = matWhiteTransparent.clone() as MeshBasicMaterial\n    matCyanTransparent.color.set(0x00ffff)\n\n    const matMagentaTransparent = matWhiteTransparent.clone() as MeshBasicMaterial\n    matMagentaTransparent.color.set(0xff00ff)\n\n    const matYellow = gizmoMaterial.clone() as MeshBasicMaterial\n    matYellow.color.set(0xffff00)\n\n    const matLineRed = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineRed.color.set(0xff0000)\n\n    const matLineGreen = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineGreen.color.set(0x00ff00)\n\n    const matLineBlue = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineBlue.color.set(0x0000ff)\n\n    const matLineCyan = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineCyan.color.set(0x00ffff)\n\n    const matLineMagenta = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineMagenta.color.set(0xff00ff)\n\n    const matLineYellow = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineYellow.color.set(0xffff00)\n\n    const matLineGray = gizmoLineMaterial.clone() as LineBasicMaterial\n    matLineGray.color.set(0x787878)\n\n    const matLineYellowTransparent = matLineYellow.clone() as LineBasicMaterial\n    matLineYellowTransparent.opacity = 0.25\n\n    // reusable geometry\n\n    const arrowGeometry = new CylinderGeometry(0, 0.05, 0.2, 12, 1, false)\n\n    const scaleHandleGeometry = new BoxGeometry(0.125, 0.125, 0.125)\n\n    const lineGeometry = new BufferGeometry()\n    lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 1, 0, 0], 3))\n\n    const CircleGeometry = (radius: number, arc: number): BufferGeometry => {\n      const geometry = new BufferGeometry()\n      const vertices = []\n\n      for (let i = 0; i <= 64 * arc; ++i) {\n        vertices.push(0, Math.cos((i / 32) * Math.PI) * radius, Math.sin((i / 32) * Math.PI) * radius)\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3))\n\n      return geometry\n    }\n\n    // Special geometry for transform helper. If scaled with position vector it spans from [0,0,0] to position\n\n    const TranslateHelperGeometry = (): BufferGeometry => {\n      const geometry = new BufferGeometry()\n\n      geometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 1, 1, 1], 3))\n\n      return geometry\n    }\n\n    // Gizmo definitions - custom hierarchy definitions for setupGizmo() function\n\n    const gizmoTranslate = {\n      X: [\n        [new Mesh(arrowGeometry, matRed), [1, 0, 0], [0, 0, -Math.PI / 2], null, 'fwd'],\n        [new Mesh(arrowGeometry, matRed), [1, 0, 0], [0, 0, Math.PI / 2], null, 'bwd'],\n        [new Line(lineGeometry, matLineRed)],\n      ],\n      Y: [\n        [new Mesh(arrowGeometry, matGreen), [0, 1, 0], null, null, 'fwd'],\n        [new Mesh(arrowGeometry, matGreen), [0, 1, 0], [Math.PI, 0, 0], null, 'bwd'],\n        [new Line(lineGeometry, matLineGreen), null, [0, 0, Math.PI / 2]],\n      ],\n      Z: [\n        [new Mesh(arrowGeometry, matBlue), [0, 0, 1], [Math.PI / 2, 0, 0], null, 'fwd'],\n        [new Mesh(arrowGeometry, matBlue), [0, 0, 1], [-Math.PI / 2, 0, 0], null, 'bwd'],\n        [new Line(lineGeometry, matLineBlue), null, [0, -Math.PI / 2, 0]],\n      ],\n      XYZ: [[new Mesh(new OctahedronGeometry(0.1, 0), matWhiteTransparent.clone()), [0, 0, 0], [0, 0, 0]]],\n      XY: [\n        [new Mesh(new PlaneGeometry(0.295, 0.295), matYellowTransparent.clone()), [0.15, 0.15, 0]],\n        [new Line(lineGeometry, matLineYellow), [0.18, 0.3, 0], null, [0.125, 1, 1]],\n        [new Line(lineGeometry, matLineYellow), [0.3, 0.18, 0], [0, 0, Math.PI / 2], [0.125, 1, 1]],\n      ],\n      YZ: [\n        [new Mesh(new PlaneGeometry(0.295, 0.295), matCyanTransparent.clone()), [0, 0.15, 0.15], [0, Math.PI / 2, 0]],\n        [new Line(lineGeometry, matLineCyan), [0, 0.18, 0.3], [0, 0, Math.PI / 2], [0.125, 1, 1]],\n        [new Line(lineGeometry, matLineCyan), [0, 0.3, 0.18], [0, -Math.PI / 2, 0], [0.125, 1, 1]],\n      ],\n      XZ: [\n        [\n          new Mesh(new PlaneGeometry(0.295, 0.295), matMagentaTransparent.clone()),\n          [0.15, 0, 0.15],\n          [-Math.PI / 2, 0, 0],\n        ],\n        [new Line(lineGeometry, matLineMagenta), [0.18, 0, 0.3], null, [0.125, 1, 1]],\n        [new Line(lineGeometry, matLineMagenta), [0.3, 0, 0.18], [0, -Math.PI / 2, 0], [0.125, 1, 1]],\n      ],\n    }\n\n    const pickerTranslate = {\n      X: [[new Mesh(new CylinderGeometry(0.2, 0, 1, 4, 1, false), matInvisible), [0.6, 0, 0], [0, 0, -Math.PI / 2]]],\n      Y: [[new Mesh(new CylinderGeometry(0.2, 0, 1, 4, 1, false), matInvisible), [0, 0.6, 0]]],\n      Z: [[new Mesh(new CylinderGeometry(0.2, 0, 1, 4, 1, false), matInvisible), [0, 0, 0.6], [Math.PI / 2, 0, 0]]],\n      XYZ: [[new Mesh(new OctahedronGeometry(0.2, 0), matInvisible)]],\n      XY: [[new Mesh(new PlaneGeometry(0.4, 0.4), matInvisible), [0.2, 0.2, 0]]],\n      YZ: [[new Mesh(new PlaneGeometry(0.4, 0.4), matInvisible), [0, 0.2, 0.2], [0, Math.PI / 2, 0]]],\n      XZ: [[new Mesh(new PlaneGeometry(0.4, 0.4), matInvisible), [0.2, 0, 0.2], [-Math.PI / 2, 0, 0]]],\n    }\n\n    const helperTranslate = {\n      START: [[new Mesh(new OctahedronGeometry(0.01, 2), matHelper), null, null, null, 'helper']],\n      END: [[new Mesh(new OctahedronGeometry(0.01, 2), matHelper), null, null, null, 'helper']],\n      DELTA: [[new Line(TranslateHelperGeometry(), matHelper), null, null, null, 'helper']],\n      X: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], 'helper']],\n      Y: [[new Line(lineGeometry, matHelper.clone()), [0, -1e3, 0], [0, 0, Math.PI / 2], [1e6, 1, 1], 'helper']],\n      Z: [[new Line(lineGeometry, matHelper.clone()), [0, 0, -1e3], [0, -Math.PI / 2, 0], [1e6, 1, 1], 'helper']],\n    }\n\n    const gizmoRotate = {\n      X: [\n        [new Line(CircleGeometry(1, 0.5), matLineRed)],\n        [new Mesh(new OctahedronGeometry(0.04, 0), matRed), [0, 0, 0.99], null, [1, 3, 1]],\n      ],\n      Y: [\n        [new Line(CircleGeometry(1, 0.5), matLineGreen), null, [0, 0, -Math.PI / 2]],\n        [new Mesh(new OctahedronGeometry(0.04, 0), matGreen), [0, 0, 0.99], null, [3, 1, 1]],\n      ],\n      Z: [\n        [new Line(CircleGeometry(1, 0.5), matLineBlue), null, [0, Math.PI / 2, 0]],\n        [new Mesh(new OctahedronGeometry(0.04, 0), matBlue), [0.99, 0, 0], null, [1, 3, 1]],\n      ],\n      E: [\n        [new Line(CircleGeometry(1.25, 1), matLineYellowTransparent), null, [0, Math.PI / 2, 0]],\n        [\n          new Mesh(new CylinderGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent),\n          [1.17, 0, 0],\n          [0, 0, -Math.PI / 2],\n          [1, 1, 0.001],\n        ],\n        [\n          new Mesh(new CylinderGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent),\n          [-1.17, 0, 0],\n          [0, 0, Math.PI / 2],\n          [1, 1, 0.001],\n        ],\n        [\n          new Mesh(new CylinderGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent),\n          [0, -1.17, 0],\n          [Math.PI, 0, 0],\n          [1, 1, 0.001],\n        ],\n        [\n          new Mesh(new CylinderGeometry(0.03, 0, 0.15, 4, 1, false), matLineYellowTransparent),\n          [0, 1.17, 0],\n          [0, 0, 0],\n          [1, 1, 0.001],\n        ],\n      ],\n      XYZE: [[new Line(CircleGeometry(1, 1), matLineGray), null, [0, Math.PI / 2, 0]]],\n    }\n\n    const helperRotate = {\n      AXIS: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], 'helper']],\n    }\n\n    const pickerRotate = {\n      X: [[new Mesh(new TorusGeometry(1, 0.1, 4, 24), matInvisible), [0, 0, 0], [0, -Math.PI / 2, -Math.PI / 2]]],\n      Y: [[new Mesh(new TorusGeometry(1, 0.1, 4, 24), matInvisible), [0, 0, 0], [Math.PI / 2, 0, 0]]],\n      Z: [[new Mesh(new TorusGeometry(1, 0.1, 4, 24), matInvisible), [0, 0, 0], [0, 0, -Math.PI / 2]]],\n      E: [[new Mesh(new TorusGeometry(1.25, 0.1, 2, 24), matInvisible)]],\n      XYZE: [[new Mesh(new SphereGeometry(0.7, 10, 8), matInvisible)]],\n    }\n\n    const gizmoScale = {\n      X: [\n        [new Mesh(scaleHandleGeometry, matRed), [0.8, 0, 0], [0, 0, -Math.PI / 2]],\n        [new Line(lineGeometry, matLineRed), null, null, [0.8, 1, 1]],\n      ],\n      Y: [\n        [new Mesh(scaleHandleGeometry, matGreen), [0, 0.8, 0]],\n        [new Line(lineGeometry, matLineGreen), null, [0, 0, Math.PI / 2], [0.8, 1, 1]],\n      ],\n      Z: [\n        [new Mesh(scaleHandleGeometry, matBlue), [0, 0, 0.8], [Math.PI / 2, 0, 0]],\n        [new Line(lineGeometry, matLineBlue), null, [0, -Math.PI / 2, 0], [0.8, 1, 1]],\n      ],\n      XY: [\n        [new Mesh(scaleHandleGeometry, matYellowTransparent), [0.85, 0.85, 0], null, [2, 2, 0.2]],\n        [new Line(lineGeometry, matLineYellow), [0.855, 0.98, 0], null, [0.125, 1, 1]],\n        [new Line(lineGeometry, matLineYellow), [0.98, 0.855, 0], [0, 0, Math.PI / 2], [0.125, 1, 1]],\n      ],\n      YZ: [\n        [new Mesh(scaleHandleGeometry, matCyanTransparent), [0, 0.85, 0.85], null, [0.2, 2, 2]],\n        [new Line(lineGeometry, matLineCyan), [0, 0.855, 0.98], [0, 0, Math.PI / 2], [0.125, 1, 1]],\n        [new Line(lineGeometry, matLineCyan), [0, 0.98, 0.855], [0, -Math.PI / 2, 0], [0.125, 1, 1]],\n      ],\n      XZ: [\n        [new Mesh(scaleHandleGeometry, matMagentaTransparent), [0.85, 0, 0.85], null, [2, 0.2, 2]],\n        [new Line(lineGeometry, matLineMagenta), [0.855, 0, 0.98], null, [0.125, 1, 1]],\n        [new Line(lineGeometry, matLineMagenta), [0.98, 0, 0.855], [0, -Math.PI / 2, 0], [0.125, 1, 1]],\n      ],\n      XYZX: [[new Mesh(new BoxGeometry(0.125, 0.125, 0.125), matWhiteTransparent.clone()), [1.1, 0, 0]]],\n      XYZY: [[new Mesh(new BoxGeometry(0.125, 0.125, 0.125), matWhiteTransparent.clone()), [0, 1.1, 0]]],\n      XYZZ: [[new Mesh(new BoxGeometry(0.125, 0.125, 0.125), matWhiteTransparent.clone()), [0, 0, 1.1]]],\n    }\n\n    const pickerScale = {\n      X: [[new Mesh(new CylinderGeometry(0.2, 0, 0.8, 4, 1, false), matInvisible), [0.5, 0, 0], [0, 0, -Math.PI / 2]]],\n      Y: [[new Mesh(new CylinderGeometry(0.2, 0, 0.8, 4, 1, false), matInvisible), [0, 0.5, 0]]],\n      Z: [[new Mesh(new CylinderGeometry(0.2, 0, 0.8, 4, 1, false), matInvisible), [0, 0, 0.5], [Math.PI / 2, 0, 0]]],\n      XY: [[new Mesh(scaleHandleGeometry, matInvisible), [0.85, 0.85, 0], null, [3, 3, 0.2]]],\n      YZ: [[new Mesh(scaleHandleGeometry, matInvisible), [0, 0.85, 0.85], null, [0.2, 3, 3]]],\n      XZ: [[new Mesh(scaleHandleGeometry, matInvisible), [0.85, 0, 0.85], null, [3, 0.2, 3]]],\n      XYZX: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.2), matInvisible), [1.1, 0, 0]]],\n      XYZY: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.2), matInvisible), [0, 1.1, 0]]],\n      XYZZ: [[new Mesh(new BoxGeometry(0.2, 0.2, 0.2), matInvisible), [0, 0, 1.1]]],\n    }\n\n    const helperScale = {\n      X: [[new Line(lineGeometry, matHelper.clone()), [-1e3, 0, 0], null, [1e6, 1, 1], 'helper']],\n      Y: [[new Line(lineGeometry, matHelper.clone()), [0, -1e3, 0], [0, 0, Math.PI / 2], [1e6, 1, 1], 'helper']],\n      Z: [[new Line(lineGeometry, matHelper.clone()), [0, 0, -1e3], [0, -Math.PI / 2, 0], [1e6, 1, 1], 'helper']],\n    }\n\n    // Creates an Object3D with gizmos described in custom hierarchy definition.\n    // this is nearly impossible to Type so i'm leaving it\n    const setupGizmo = (gizmoMap: any): Object3D => {\n      const gizmo = new Object3D()\n\n      for (let name in gizmoMap) {\n        for (let i = gizmoMap[name].length; i--; ) {\n          const object = gizmoMap[name][i][0].clone() as Mesh\n          const position = gizmoMap[name][i][1]\n          const rotation = gizmoMap[name][i][2]\n          const scale = gizmoMap[name][i][3]\n          const tag = gizmoMap[name][i][4]\n\n          // name and tag properties are essential for picking and updating logic.\n          object.name = name\n          // @ts-ignore\n          object.tag = tag\n\n          if (position) {\n            object.position.set(position[0], position[1], position[2])\n          }\n\n          if (rotation) {\n            object.rotation.set(rotation[0], rotation[1], rotation[2])\n          }\n\n          if (scale) {\n            object.scale.set(scale[0], scale[1], scale[2])\n          }\n\n          object.updateMatrix()\n\n          const tempGeometry = object.geometry.clone()\n          tempGeometry.applyMatrix4(object.matrix)\n          object.geometry = tempGeometry\n          object.renderOrder = Infinity\n\n          object.position.set(0, 0, 0)\n          object.rotation.set(0, 0, 0)\n          object.scale.set(1, 1, 1)\n\n          gizmo.add(object)\n        }\n      }\n\n      return gizmo\n    }\n\n    this.gizmo = {} as TransformControlsGizmoPrivateGizmos\n    this.picker = {} as TransformControlsGizmoPrivateGizmos\n    this.helper = {} as TransformControlsGizmoPrivateGizmos\n\n    this.add((this.gizmo['translate'] = setupGizmo(gizmoTranslate)))\n    this.add((this.gizmo['rotate'] = setupGizmo(gizmoRotate)))\n    this.add((this.gizmo['scale'] = setupGizmo(gizmoScale)))\n    this.add((this.picker['translate'] = setupGizmo(pickerTranslate)))\n    this.add((this.picker['rotate'] = setupGizmo(pickerRotate)))\n    this.add((this.picker['scale'] = setupGizmo(pickerScale)))\n    this.add((this.helper['translate'] = setupGizmo(helperTranslate)))\n    this.add((this.helper['rotate'] = setupGizmo(helperRotate)))\n    this.add((this.helper['scale'] = setupGizmo(helperScale)))\n\n    // Pickers should be hidden always\n\n    this.picker['translate'].visible = false\n    this.picker['rotate'].visible = false\n    this.picker['scale'].visible = false\n  }\n\n  // updateMatrixWorld will update transformations and appearance of individual handles\n  public updateMatrixWorld = (): void => {\n    let space = this.space\n\n    if (this.mode === 'scale') {\n      space = 'local' // scale always oriented to local rotation\n    }\n\n    const quaternion = space === 'local' ? this.worldQuaternion : this.identityQuaternion\n\n    // Show only gizmos for current transform mode\n\n    this.gizmo['translate'].visible = this.mode === 'translate'\n    this.gizmo['rotate'].visible = this.mode === 'rotate'\n    this.gizmo['scale'].visible = this.mode === 'scale'\n\n    this.helper['translate'].visible = this.mode === 'translate'\n    this.helper['rotate'].visible = this.mode === 'rotate'\n    this.helper['scale'].visible = this.mode === 'scale'\n\n    let handles: Array<Object3D & { tag?: string }> = []\n    handles = handles.concat(this.picker[this.mode].children)\n    handles = handles.concat(this.gizmo[this.mode].children)\n    handles = handles.concat(this.helper[this.mode].children)\n\n    for (let i = 0; i < handles.length; i++) {\n      const handle = handles[i]\n\n      // hide aligned to camera\n\n      handle.visible = true\n      handle.rotation.set(0, 0, 0)\n      handle.position.copy(this.worldPosition)\n\n      let factor\n\n      if ((this.camera as OrthographicCamera).isOrthographicCamera) {\n        factor =\n          ((this.camera as OrthographicCamera).top - (this.camera as OrthographicCamera).bottom) /\n          (this.camera as OrthographicCamera).zoom\n      } else {\n        factor =\n          this.worldPosition.distanceTo(this.cameraPosition) *\n          Math.min((1.9 * Math.tan((Math.PI * (this.camera as PerspectiveCamera).fov) / 360)) / this.camera.zoom, 7)\n      }\n\n      handle.scale.set(1, 1, 1).multiplyScalar((factor * this.size) / 7)\n\n      // TODO: simplify helpers and consider decoupling from gizmo\n\n      if (handle.tag === 'helper') {\n        handle.visible = false\n\n        if (handle.name === 'AXIS') {\n          handle.position.copy(this.worldPositionStart)\n          handle.visible = !!this.axis\n\n          if (this.axis === 'X') {\n            this.tempQuaternion.setFromEuler(this.tempEuler.set(0, 0, 0))\n            handle.quaternion.copy(quaternion).multiply(this.tempQuaternion)\n\n            if (Math.abs(this.alignVector.copy(this.unitX).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n              handle.visible = false\n            }\n          }\n\n          if (this.axis === 'Y') {\n            this.tempQuaternion.setFromEuler(this.tempEuler.set(0, 0, Math.PI / 2))\n            handle.quaternion.copy(quaternion).multiply(this.tempQuaternion)\n\n            if (Math.abs(this.alignVector.copy(this.unitY).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n              handle.visible = false\n            }\n          }\n\n          if (this.axis === 'Z') {\n            this.tempQuaternion.setFromEuler(this.tempEuler.set(0, Math.PI / 2, 0))\n            handle.quaternion.copy(quaternion).multiply(this.tempQuaternion)\n\n            if (Math.abs(this.alignVector.copy(this.unitZ).applyQuaternion(quaternion).dot(this.eye)) > 0.9) {\n              handle.visible = false\n            }\n          }\n\n          if (this.axis === 'XYZE') {\n            this.tempQuaternion.setFromEuler(this.tempEuler.set(0, Math.PI / 2, 0))\n            this.alignVector.copy(this.rotationAxis)\n            handle.quaternion.setFromRotationMatrix(\n              this.lookAtMatrix.lookAt(this.zeroVector, this.alignVector, this.unitY),\n            )\n            handle.quaternion.multiply(this.tempQuaternion)\n            handle.visible = this.dragging\n          }\n\n          if (this.axis === 'E') {\n            handle.visible = false\n          }\n        } else if (handle.name === 'START') {\n          handle.position.copy(this.worldPositionStart)\n          handle.visible = this.dragging\n        } else if (handle.name === 'END') {\n          handle.position.copy(this.worldPosition)\n          handle.visible = this.dragging\n        } else if (handle.name === 'DELTA') {\n          handle.position.copy(this.worldPositionStart)\n          handle.quaternion.copy(this.worldQuaternionStart)\n          this.tempVector\n            .set(1e-10, 1e-10, 1e-10)\n            .add(this.worldPositionStart)\n            .sub(this.worldPosition)\n            .multiplyScalar(-1)\n          this.tempVector.applyQuaternion(this.worldQuaternionStart.clone().invert())\n          handle.scale.copy(this.tempVector)\n          handle.visible = this.dragging\n        } else {\n          handle.quaternion.copy(quaternion)\n\n          if (this.dragging) {\n            handle.position.copy(this.worldPositionStart)\n          } else {\n            handle.position.copy(this.worldPosition)\n          }\n\n          if (this.axis) {\n            handle.visible = this.axis.search(handle.name) !== -1\n          }\n        }\n\n        // If updating helper, skip rest of the loop\n        continue\n      }\n\n      // Align handles to current local or world rotation\n\n      handle.quaternion.copy(quaternion)\n\n      if (this.mode === 'translate' || this.mode === 'scale') {\n        // Hide translate and scale axis facing the camera\n\n        const AXIS_HIDE_TRESHOLD = 0.99\n        const PLANE_HIDE_TRESHOLD = 0.2\n        const AXIS_FLIP_TRESHOLD = 0.0\n\n        if (handle.name === 'X' || handle.name === 'XYZX') {\n          if (\n            Math.abs(this.alignVector.copy(this.unitX).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_TRESHOLD\n          ) {\n            handle.scale.set(1e-10, 1e-10, 1e-10)\n            handle.visible = false\n          }\n        }\n\n        if (handle.name === 'Y' || handle.name === 'XYZY') {\n          if (\n            Math.abs(this.alignVector.copy(this.unitY).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_TRESHOLD\n          ) {\n            handle.scale.set(1e-10, 1e-10, 1e-10)\n            handle.visible = false\n          }\n        }\n\n        if (handle.name === 'Z' || handle.name === 'XYZZ') {\n          if (\n            Math.abs(this.alignVector.copy(this.unitZ).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_TRESHOLD\n          ) {\n            handle.scale.set(1e-10, 1e-10, 1e-10)\n            handle.visible = false\n          }\n        }\n\n        if (handle.name === 'XY') {\n          if (\n            Math.abs(this.alignVector.copy(this.unitZ).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_TRESHOLD\n          ) {\n            handle.scale.set(1e-10, 1e-10, 1e-10)\n            handle.visible = false\n          }\n        }\n\n        if (handle.name === 'YZ') {\n          if (\n            Math.abs(this.alignVector.copy(this.unitX).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_TRESHOLD\n          ) {\n            handle.scale.set(1e-10, 1e-10, 1e-10)\n            handle.visible = false\n          }\n        }\n\n        if (handle.name === 'XZ') {\n          if (\n            Math.abs(this.alignVector.copy(this.unitY).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_TRESHOLD\n          ) {\n            handle.scale.set(1e-10, 1e-10, 1e-10)\n            handle.visible = false\n          }\n        }\n\n        // Flip translate and scale axis ocluded behind another axis\n\n        if (handle.name.search('X') !== -1) {\n          if (this.alignVector.copy(this.unitX).applyQuaternion(quaternion).dot(this.eye) < AXIS_FLIP_TRESHOLD) {\n            if (handle.tag === 'fwd') {\n              handle.visible = false\n            } else {\n              handle.scale.x *= -1\n            }\n          } else if (handle.tag === 'bwd') {\n            handle.visible = false\n          }\n        }\n\n        if (handle.name.search('Y') !== -1) {\n          if (this.alignVector.copy(this.unitY).applyQuaternion(quaternion).dot(this.eye) < AXIS_FLIP_TRESHOLD) {\n            if (handle.tag === 'fwd') {\n              handle.visible = false\n            } else {\n              handle.scale.y *= -1\n            }\n          } else if (handle.tag === 'bwd') {\n            handle.visible = false\n          }\n        }\n\n        if (handle.name.search('Z') !== -1) {\n          if (this.alignVector.copy(this.unitZ).applyQuaternion(quaternion).dot(this.eye) < AXIS_FLIP_TRESHOLD) {\n            if (handle.tag === 'fwd') {\n              handle.visible = false\n            } else {\n              handle.scale.z *= -1\n            }\n          } else if (handle.tag === 'bwd') {\n            handle.visible = false\n          }\n        }\n      } else if (this.mode === 'rotate') {\n        // Align handles to current local or world rotation\n\n        this.tempQuaternion2.copy(quaternion)\n        this.alignVector.copy(this.eye).applyQuaternion(this.tempQuaternion.copy(quaternion).invert())\n\n        if (handle.name.search('E') !== -1) {\n          handle.quaternion.setFromRotationMatrix(this.lookAtMatrix.lookAt(this.eye, this.zeroVector, this.unitY))\n        }\n\n        if (handle.name === 'X') {\n          this.tempQuaternion.setFromAxisAngle(this.unitX, Math.atan2(-this.alignVector.y, this.alignVector.z))\n          this.tempQuaternion.multiplyQuaternions(this.tempQuaternion2, this.tempQuaternion)\n          handle.quaternion.copy(this.tempQuaternion)\n        }\n\n        if (handle.name === 'Y') {\n          this.tempQuaternion.setFromAxisAngle(this.unitY, Math.atan2(this.alignVector.x, this.alignVector.z))\n          this.tempQuaternion.multiplyQuaternions(this.tempQuaternion2, this.tempQuaternion)\n          handle.quaternion.copy(this.tempQuaternion)\n        }\n\n        if (handle.name === 'Z') {\n          this.tempQuaternion.setFromAxisAngle(this.unitZ, Math.atan2(this.alignVector.y, this.alignVector.x))\n          this.tempQuaternion.multiplyQuaternions(this.tempQuaternion2, this.tempQuaternion)\n          handle.quaternion.copy(this.tempQuaternion)\n        }\n      }\n\n      // Hide disabled axes\n      handle.visible = handle.visible && (handle.name.indexOf('X') === -1 || this.showX)\n      handle.visible = handle.visible && (handle.name.indexOf('Y') === -1 || this.showY)\n      handle.visible = handle.visible && (handle.name.indexOf('Z') === -1 || this.showZ)\n      handle.visible = handle.visible && (handle.name.indexOf('E') === -1 || (this.showX && this.showY && this.showZ))\n\n      // highlight selected axis\n\n      //@ts-ignore\n      handle.material.tempOpacity = handle.material.tempOpacity || handle.material.opacity\n      //@ts-ignore\n      handle.material.tempColor = handle.material.tempColor || handle.material.color.clone()\n      //@ts-ignore\n      handle.material.color.copy(handle.material.tempColor)\n      //@ts-ignore\n      handle.material.opacity = handle.material.tempOpacity\n\n      if (!this.enabled) {\n        //@ts-ignore\n        handle.material.opacity *= 0.5\n        //@ts-ignore\n        handle.material.color.lerp(new Color(1, 1, 1), 0.5)\n      } else if (this.axis) {\n        if (handle.name === this.axis) {\n          //@ts-ignore\n          handle.material.opacity = 1.0\n          //@ts-ignore\n          handle.material.color.lerp(new Color(1, 1, 1), 0.5)\n        } else if (\n          this.axis.split('').some(function (a) {\n            return handle.name === a\n          })\n        ) {\n          //@ts-ignore\n          handle.material.opacity = 1.0\n          //@ts-ignore\n          handle.material.color.lerp(new Color(1, 1, 1), 0.5)\n        } else {\n          //@ts-ignore\n          handle.material.opacity *= 0.25\n          //@ts-ignore\n          handle.material.color.lerp(new Color(1, 1, 1), 0.5)\n        }\n      }\n    }\n\n    super.updateMatrixWorld()\n  }\n}\n\nclass TransformControlsPlane extends Mesh<PlaneGeometry, MeshBasicMaterial> {\n  private isTransformControlsPlane = true\n  public type = 'TransformControlsPlane'\n\n  constructor() {\n    super(\n      new PlaneGeometry(100000, 100000, 2, 2),\n      new MeshBasicMaterial({\n        visible: false,\n        wireframe: true,\n        side: DoubleSide,\n        transparent: true,\n        opacity: 0.1,\n        toneMapped: false,\n      }),\n    )\n  }\n\n  private unitX = new Vector3(1, 0, 0)\n  private unitY = new Vector3(0, 1, 0)\n  private unitZ = new Vector3(0, 0, 1)\n\n  private tempVector = new Vector3()\n  private dirVector = new Vector3()\n  private alignVector = new Vector3()\n  private tempMatrix = new Matrix4()\n  private identityQuaternion = new Quaternion()\n\n  // these are set from parent class TransformControls\n  private cameraQuaternion = new Quaternion()\n\n  private worldPosition = new Vector3()\n  private worldQuaternion = new Quaternion()\n\n  private eye = new Vector3()\n\n  private axis: string | null = null\n  private mode: 'translate' | 'rotate' | 'scale' = 'translate'\n  private space = 'world'\n\n  public updateMatrixWorld = (): void => {\n    let space = this.space\n\n    this.position.copy(this.worldPosition)\n\n    if (this.mode === 'scale') space = 'local' // scale always oriented to local rotation\n\n    this.unitX.set(1, 0, 0).applyQuaternion(space === 'local' ? this.worldQuaternion : this.identityQuaternion)\n    this.unitY.set(0, 1, 0).applyQuaternion(space === 'local' ? this.worldQuaternion : this.identityQuaternion)\n    this.unitZ.set(0, 0, 1).applyQuaternion(space === 'local' ? this.worldQuaternion : this.identityQuaternion)\n\n    // Align the plane for current transform mode, axis and space.\n\n    this.alignVector.copy(this.unitY)\n\n    switch (this.mode) {\n      case 'translate':\n      case 'scale':\n        switch (this.axis) {\n          case 'X':\n            this.alignVector.copy(this.eye).cross(this.unitX)\n            this.dirVector.copy(this.unitX).cross(this.alignVector)\n            break\n          case 'Y':\n            this.alignVector.copy(this.eye).cross(this.unitY)\n            this.dirVector.copy(this.unitY).cross(this.alignVector)\n            break\n          case 'Z':\n            this.alignVector.copy(this.eye).cross(this.unitZ)\n            this.dirVector.copy(this.unitZ).cross(this.alignVector)\n            break\n          case 'XY':\n            this.dirVector.copy(this.unitZ)\n            break\n          case 'YZ':\n            this.dirVector.copy(this.unitX)\n            break\n          case 'XZ':\n            this.alignVector.copy(this.unitZ)\n            this.dirVector.copy(this.unitY)\n            break\n          case 'XYZ':\n          case 'E':\n            this.dirVector.set(0, 0, 0)\n            break\n        }\n\n        break\n      case 'rotate':\n      default:\n        // special case for rotate\n        this.dirVector.set(0, 0, 0)\n    }\n\n    if (this.dirVector.length() === 0) {\n      // If in rotate mode, make the plane parallel to camera\n      this.quaternion.copy(this.cameraQuaternion)\n    } else {\n      this.tempMatrix.lookAt(this.tempVector.set(0, 0, 0), this.dirVector, this.alignVector)\n\n      this.quaternion.setFromRotationMatrix(this.tempMatrix)\n    }\n\n    super.updateMatrixWorld()\n  }\n}\n\nexport { TransformControls, TransformControlsGizmo, TransformControlsPlane }\n"]},"metadata":{},"sourceType":"module"}