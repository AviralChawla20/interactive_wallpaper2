{"ast":null,"code":"import { Vector2 } from \"three\";\nconst NormalMapShader = {\n  uniforms: {\n    heightMap: {\n      value: null\n    },\n    resolution: {\n      value: new Vector2(512, 512)\n    },\n    scale: {\n      value: new Vector2(1, 1)\n    },\n    height: {\n      value: 0.05\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform float height;\", \"uniform vec2 resolution;\", \"uniform sampler2D heightMap;\", \"varying vec2 vUv;\", \"void main() {\", \"\tfloat val = texture2D( heightMap, vUv ).x;\", \"\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\", \"\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\", \"\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\", \"}\"].join(\"\\n\")\n};\nexport { NormalMapShader };","map":{"version":3,"sources":["../../src/shaders/NormalMapShader.ts"],"names":[],"mappings":";AAOO,MAAM,eAAA,GAAkB;EAC7B,QAAA,EAAU;IACR,SAAA,EAAW;MAAE,KAAA,EAAO;IAAK,CAAA;IACzB,UAAA,EAAY;MAAE,KAAA,EAAO,IAAI,OAAA,CAAQ,GAAA,EAAK,GAAG;IAAE,CAAA;IAC3C,KAAA,EAAO;MAAE,KAAA,EAAO,IAAI,OAAA,CAAQ,CAAA,EAAG,CAAC;IAAE,CAAA;IAClC,MAAA,EAAQ;MAAE,KAAA,EAAO;IAAK;EACxB,CAAA;EAEA,YAAA,EAAc,CACZ,mBAAA,EAEA,eAAA,EAEA,YAAA,EACA,4EAAA,EAEA,GAAA,CAAA,CACA,IAAA,CAAK,IAAI,CAAA;EAEX,cAAA,EAAgB,CACd,uBAAA,EACA,0BAAA,EACA,8BAAA,EAEA,mBAAA,EAEA,eAAA,EAEA,6CAAA,EAEA,gFAAA,EACA,gFAAA,EAEA,oGAAA,EAEA,GAAA,CAAA,CACA,IAAA,CAAK,IAAI;AACb,CAAA","sourcesContent":["import { Vector2 } from 'three'\n\n/**\n * Normal map shader\n * - compute normals from heightmap\n */\n\nexport const NormalMapShader = {\n  uniforms: {\n    heightMap: { value: null },\n    resolution: { value: new Vector2(512, 512) },\n    scale: { value: new Vector2(1, 1) },\n    height: { value: 0.05 },\n  },\n\n  vertexShader: [\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tvUv = uv;',\n    '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n    '}',\n  ].join('\\n'),\n\n  fragmentShader: [\n    'uniform float height;',\n    'uniform vec2 resolution;',\n    'uniform sampler2D heightMap;',\n\n    'varying vec2 vUv;',\n\n    'void main() {',\n\n    '\tfloat val = texture2D( heightMap, vUv ).x;',\n\n    '\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;',\n    '\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;',\n\n    '\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );',\n\n    '}',\n  ].join('\\n'),\n}\n"]},"metadata":{},"sourceType":"module"}