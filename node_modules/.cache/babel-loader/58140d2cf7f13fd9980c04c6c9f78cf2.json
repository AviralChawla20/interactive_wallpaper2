{"ast":null,"code":"import { CompressedTextureLoader, RGBA_PVRTC_4BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_PVRTC_2BPPV1_Format } from \"three\";\nclass PVRLoader extends CompressedTextureLoader {\n  constructor(manager) {\n    super(manager);\n  }\n  parse(buffer, loadMipmaps) {\n    const headerLengthInt = 13;\n    const header = new Uint32Array(buffer, 0, headerLengthInt);\n    const pvrDatas = {\n      buffer,\n      header,\n      loadMipmaps\n    };\n    if (header[0] === 55727696) {\n      return _parseV3(pvrDatas);\n    } else if (header[11] === 559044176) {\n      return _parseV2(pvrDatas);\n    } else {\n      console.error(\"THREE.PVRLoader: Unknown PVR format.\");\n    }\n  }\n}\nfunction _parseV3(pvrDatas) {\n  const header = pvrDatas.header;\n  let bpp, format;\n  const metaLen = header[12],\n    pixelFormat = header[2],\n    height = header[6],\n    width = header[7],\n    numFaces = header[10],\n    numMipmaps = header[11];\n  switch (pixelFormat) {\n    case 0:\n      bpp = 2;\n      format = RGB_PVRTC_2BPPV1_Format;\n      break;\n    case 1:\n      bpp = 2;\n      format = RGBA_PVRTC_2BPPV1_Format;\n      break;\n    case 2:\n      bpp = 4;\n      format = RGB_PVRTC_4BPPV1_Format;\n      break;\n    case 3:\n      bpp = 4;\n      format = RGBA_PVRTC_4BPPV1_Format;\n      break;\n    default:\n      console.error(\"THREE.PVRLoader: Unsupported PVR format:\", pixelFormat);\n  }\n  pvrDatas.dataPtr = 52 + metaLen;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numFaces;\n  pvrDatas.numMipmaps = numMipmaps;\n  pvrDatas.isCubemap = numFaces === 6;\n  return _extract(pvrDatas);\n}\nfunction _parseV2(pvrDatas) {\n  const header = pvrDatas.header;\n  const headerLength = header[0],\n    height = header[1],\n    width = header[2],\n    numMipmaps = header[3],\n    flags = header[4],\n    bitmaskAlpha = header[10],\n    numSurfs = header[12];\n  const TYPE_MASK = 255;\n  const PVRTC_2 = 24,\n    PVRTC_4 = 25;\n  const formatFlags = flags & TYPE_MASK;\n  let bpp, format;\n  const _hasAlpha = bitmaskAlpha > 0;\n  if (formatFlags === PVRTC_4) {\n    format = _hasAlpha ? RGBA_PVRTC_4BPPV1_Format : RGB_PVRTC_4BPPV1_Format;\n    bpp = 4;\n  } else if (formatFlags === PVRTC_2) {\n    format = _hasAlpha ? RGBA_PVRTC_2BPPV1_Format : RGB_PVRTC_2BPPV1_Format;\n    bpp = 2;\n  } else {\n    console.error(\"THREE.PVRLoader: Unknown PVR format:\", formatFlags);\n  }\n  pvrDatas.dataPtr = headerLength;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numSurfs;\n  pvrDatas.numMipmaps = numMipmaps + 1;\n  pvrDatas.isCubemap = numSurfs === 6;\n  return _extract(pvrDatas);\n}\nfunction _extract(pvrDatas) {\n  const pvr = {\n    mipmaps: [],\n    width: pvrDatas.width,\n    height: pvrDatas.height,\n    format: pvrDatas.format,\n    mipmapCount: pvrDatas.numMipmaps,\n    isCubemap: pvrDatas.isCubemap\n  };\n  const buffer = pvrDatas.buffer;\n  let dataOffset = pvrDatas.dataPtr,\n    dataSize = 0,\n    blockSize = 0,\n    blockWidth = 0,\n    blockHeight = 0,\n    widthBlocks = 0,\n    heightBlocks = 0;\n  const bpp = pvrDatas.bpp,\n    numSurfs = pvrDatas.numSurfaces;\n  if (bpp === 2) {\n    blockWidth = 8;\n    blockHeight = 4;\n  } else {\n    blockWidth = 4;\n    blockHeight = 4;\n  }\n  blockSize = blockWidth * blockHeight * bpp / 8;\n  pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;\n  let mipLevel = 0;\n  while (mipLevel < pvrDatas.numMipmaps) {\n    const sWidth = pvrDatas.width >> mipLevel,\n      sHeight = pvrDatas.height >> mipLevel;\n    widthBlocks = sWidth / blockWidth;\n    heightBlocks = sHeight / blockHeight;\n    if (widthBlocks < 2) widthBlocks = 2;\n    if (heightBlocks < 2) heightBlocks = 2;\n    dataSize = widthBlocks * heightBlocks * blockSize;\n    for (let surfIndex = 0; surfIndex < numSurfs; surfIndex++) {\n      const byteArray = new Uint8Array(buffer, dataOffset, dataSize);\n      const mipmap = {\n        data: byteArray,\n        width: sWidth,\n        height: sHeight\n      };\n      pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap;\n      dataOffset += dataSize;\n    }\n    mipLevel++;\n  }\n  return pvr;\n}\nexport { PVRLoader };","map":{"version":3,"sources":["../../src/loaders/PVRLoader.js"],"names":[],"mappings":"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","sourcesContent":["import {\n  CompressedTextureLoader,\n  RGBA_PVRTC_2BPPV1_Format,\n  RGBA_PVRTC_4BPPV1_Format,\n  RGB_PVRTC_2BPPV1_Format,\n  RGB_PVRTC_4BPPV1_Format,\n} from 'three'\n\n/*\n *\t PVR v2 (legacy) parser\n *   TODO : Add Support for PVR v3 format\n *   TODO : implement loadMipmaps option\n */\n\nclass PVRLoader extends CompressedTextureLoader {\n  constructor(manager) {\n    super(manager)\n  }\n\n  parse(buffer, loadMipmaps) {\n    const headerLengthInt = 13\n    const header = new Uint32Array(buffer, 0, headerLengthInt)\n\n    const pvrDatas = {\n      buffer: buffer,\n      header: header,\n      loadMipmaps: loadMipmaps,\n    }\n\n    if (header[0] === 0x03525650) {\n      // PVR v3\n\n      return _parseV3(pvrDatas)\n    } else if (header[11] === 0x21525650) {\n      // PVR v2\n\n      return _parseV2(pvrDatas)\n    } else {\n      console.error('THREE.PVRLoader: Unknown PVR format.')\n    }\n  }\n}\n\nfunction _parseV3(pvrDatas) {\n  const header = pvrDatas.header\n  let bpp, format\n\n  const metaLen = header[12],\n    pixelFormat = header[2],\n    height = header[6],\n    width = header[7],\n    // numSurfs = header[ 9 ],\n    numFaces = header[10],\n    numMipmaps = header[11]\n\n  switch (pixelFormat) {\n    case 0: // PVRTC 2bpp RGB\n      bpp = 2\n      format = RGB_PVRTC_2BPPV1_Format\n      break\n\n    case 1: // PVRTC 2bpp RGBA\n      bpp = 2\n      format = RGBA_PVRTC_2BPPV1_Format\n      break\n\n    case 2: // PVRTC 4bpp RGB\n      bpp = 4\n      format = RGB_PVRTC_4BPPV1_Format\n      break\n\n    case 3: // PVRTC 4bpp RGBA\n      bpp = 4\n      format = RGBA_PVRTC_4BPPV1_Format\n      break\n\n    default:\n      console.error('THREE.PVRLoader: Unsupported PVR format:', pixelFormat)\n  }\n\n  pvrDatas.dataPtr = 52 + metaLen\n  pvrDatas.bpp = bpp\n  pvrDatas.format = format\n  pvrDatas.width = width\n  pvrDatas.height = height\n  pvrDatas.numSurfaces = numFaces\n  pvrDatas.numMipmaps = numMipmaps\n  pvrDatas.isCubemap = numFaces === 6\n\n  return _extract(pvrDatas)\n}\n\nfunction _parseV2(pvrDatas) {\n  const header = pvrDatas.header\n\n  const headerLength = header[0],\n    height = header[1],\n    width = header[2],\n    numMipmaps = header[3],\n    flags = header[4],\n    // dataLength = header[ 5 ],\n    // bpp =  header[ 6 ],\n    // bitmaskRed = header[ 7 ],\n    // bitmaskGreen = header[ 8 ],\n    // bitmaskBlue = header[ 9 ],\n    bitmaskAlpha = header[10],\n    // pvrTag = header[ 11 ],\n    numSurfs = header[12]\n\n  const TYPE_MASK = 0xff\n  const PVRTC_2 = 24,\n    PVRTC_4 = 25\n\n  const formatFlags = flags & TYPE_MASK\n\n  let bpp, format\n  const _hasAlpha = bitmaskAlpha > 0\n\n  if (formatFlags === PVRTC_4) {\n    format = _hasAlpha ? RGBA_PVRTC_4BPPV1_Format : RGB_PVRTC_4BPPV1_Format\n    bpp = 4\n  } else if (formatFlags === PVRTC_2) {\n    format = _hasAlpha ? RGBA_PVRTC_2BPPV1_Format : RGB_PVRTC_2BPPV1_Format\n    bpp = 2\n  } else {\n    console.error('THREE.PVRLoader: Unknown PVR format:', formatFlags)\n  }\n\n  pvrDatas.dataPtr = headerLength\n  pvrDatas.bpp = bpp\n  pvrDatas.format = format\n  pvrDatas.width = width\n  pvrDatas.height = height\n  pvrDatas.numSurfaces = numSurfs\n  pvrDatas.numMipmaps = numMipmaps + 1\n\n  // guess cubemap type seems tricky in v2\n  // it juste a pvr containing 6 surface (no explicit cubemap type)\n  pvrDatas.isCubemap = numSurfs === 6\n\n  return _extract(pvrDatas)\n}\n\nfunction _extract(pvrDatas) {\n  const pvr = {\n    mipmaps: [],\n    width: pvrDatas.width,\n    height: pvrDatas.height,\n    format: pvrDatas.format,\n    mipmapCount: pvrDatas.numMipmaps,\n    isCubemap: pvrDatas.isCubemap,\n  }\n\n  const buffer = pvrDatas.buffer\n\n  let dataOffset = pvrDatas.dataPtr,\n    dataSize = 0,\n    blockSize = 0,\n    blockWidth = 0,\n    blockHeight = 0,\n    widthBlocks = 0,\n    heightBlocks = 0\n\n  const bpp = pvrDatas.bpp,\n    numSurfs = pvrDatas.numSurfaces\n\n  if (bpp === 2) {\n    blockWidth = 8\n    blockHeight = 4\n  } else {\n    blockWidth = 4\n    blockHeight = 4\n  }\n\n  blockSize = (blockWidth * blockHeight * bpp) / 8\n\n  pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs\n\n  let mipLevel = 0\n\n  while (mipLevel < pvrDatas.numMipmaps) {\n    const sWidth = pvrDatas.width >> mipLevel,\n      sHeight = pvrDatas.height >> mipLevel\n\n    widthBlocks = sWidth / blockWidth\n    heightBlocks = sHeight / blockHeight\n\n    // Clamp to minimum number of blocks\n    if (widthBlocks < 2) widthBlocks = 2\n    if (heightBlocks < 2) heightBlocks = 2\n\n    dataSize = widthBlocks * heightBlocks * blockSize\n\n    for (let surfIndex = 0; surfIndex < numSurfs; surfIndex++) {\n      const byteArray = new Uint8Array(buffer, dataOffset, dataSize)\n\n      const mipmap = {\n        data: byteArray,\n        width: sWidth,\n        height: sHeight,\n      }\n\n      pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap\n\n      dataOffset += dataSize\n    }\n\n    mipLevel++\n  }\n\n  return pvr\n}\n\nexport { PVRLoader }\n"]},"metadata":{},"sourceType":"module"}